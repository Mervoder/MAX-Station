
max-station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6a4  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800a868  0800a868  0000b868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8c8  0800a8c8  0000c120  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8c8  0800a8c8  0000b8c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8d0  0800a8d0  0000c120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8d0  0800a8d0  0000b8d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8d4  0800a8d4  0000b8d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  20000000  0800a8d8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017fc  20000120  0800a9f8  0000c120  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000191c  0800a9f8  0000c91c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c120  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001afd6  00000000  00000000  0000c150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004213  00000000  00000000  00027126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001598  00000000  00000000  0002b340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010a5  00000000  00000000  0002c8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027784  00000000  00000000  0002d97d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fc1b  00000000  00000000  00055101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df3d8  00000000  00000000  00074d1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001540f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a14  00000000  00000000  00154138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00159b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000120 	.word	0x20000120
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800a850 	.word	0x0800a850

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000124 	.word	0x20000124
 8000200:	0800a850 	.word	0x0800a850

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 80004fc:	22b0      	movs	r2, #176	@ 0xb0
 80004fe:	2100      	movs	r1, #0
 8000500:	6878      	ldr	r0, [r7, #4]
 8000502:	f00a f979 	bl	800a7f8 <memset>
    return 1;
 8000506:	2301      	movs	r3, #1
}
 8000508:	4618      	mov	r0, r3
 800050a:	3708      	adds	r7, #8
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}

08000510 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	if(huart == &huart3){
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	4a13      	ldr	r2, [pc, #76]	@ (8000568 <HAL_UART_RxCpltCallback+0x58>)
 800051c:	4293      	cmp	r3, r2
 800051e:	d11e      	bne.n	800055e <HAL_UART_RxCpltCallback+0x4e>
	if(rx_data_lora != '\n'&& rx_index_lora < LORA_RX_BUFFER_SIZE){
 8000520:	4b12      	ldr	r3, [pc, #72]	@ (800056c <HAL_UART_RxCpltCallback+0x5c>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	2b0a      	cmp	r3, #10
 8000526:	d00f      	beq.n	8000548 <HAL_UART_RxCpltCallback+0x38>
 8000528:	4b11      	ldr	r3, [pc, #68]	@ (8000570 <HAL_UART_RxCpltCallback+0x60>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b45      	cmp	r3, #69	@ 0x45
 800052e:	d80b      	bhi.n	8000548 <HAL_UART_RxCpltCallback+0x38>
	lora_rx_buffer[rx_index_lora++]=rx_data_lora;
 8000530:	4b0f      	ldr	r3, [pc, #60]	@ (8000570 <HAL_UART_RxCpltCallback+0x60>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	1c5a      	adds	r2, r3, #1
 8000536:	b2d1      	uxtb	r1, r2
 8000538:	4a0d      	ldr	r2, [pc, #52]	@ (8000570 <HAL_UART_RxCpltCallback+0x60>)
 800053a:	7011      	strb	r1, [r2, #0]
 800053c:	461a      	mov	r2, r3
 800053e:	4b0b      	ldr	r3, [pc, #44]	@ (800056c <HAL_UART_RxCpltCallback+0x5c>)
 8000540:	7819      	ldrb	r1, [r3, #0]
 8000542:	4b0c      	ldr	r3, [pc, #48]	@ (8000574 <HAL_UART_RxCpltCallback+0x64>)
 8000544:	5499      	strb	r1, [r3, r2]
 8000546:	e005      	b.n	8000554 <HAL_UART_RxCpltCallback+0x44>

	}
	else{
		rx_data_lora=0;
 8000548:	4b08      	ldr	r3, [pc, #32]	@ (800056c <HAL_UART_RxCpltCallback+0x5c>)
 800054a:	2200      	movs	r2, #0
 800054c:	701a      	strb	r2, [r3, #0]
		rx_index_lora=0;
 800054e:	4b08      	ldr	r3, [pc, #32]	@ (8000570 <HAL_UART_RxCpltCallback+0x60>)
 8000550:	2200      	movs	r2, #0
 8000552:	701a      	strb	r2, [r3, #0]

		}
HAL_UART_Receive_IT(&huart3, &rx_data_lora, 1);
 8000554:	2201      	movs	r2, #1
 8000556:	4905      	ldr	r1, [pc, #20]	@ (800056c <HAL_UART_RxCpltCallback+0x5c>)
 8000558:	4803      	ldr	r0, [pc, #12]	@ (8000568 <HAL_UART_RxCpltCallback+0x58>)
 800055a:	f004 ff93 	bl	8005484 <HAL_UART_Receive_IT>
//				rx_index = 0;
//				rx_data = 0;
//			}
//			HAL_UART_Receive_IT(&huart2, &rx_data, 1);
//		}
}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	200002b8 	.word	0x200002b8
 800056c:	20000343 	.word	0x20000343
 8000570:	20000342 	.word	0x20000342
 8000574:	200002fc 	.word	0x200002fc

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b0a0      	sub	sp, #128	@ 0x80
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f001 fa9f 	bl	8001ac0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 fc3b 	bl	8000dfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 fdd9 	bl	800113c <MX_GPIO_Init>
  MX_ADC1_Init();
 800058a:	f000 fca3 	bl	8000ed4 <MX_ADC1_Init>
  MX_I2C1_Init();
 800058e:	f000 fcf3 	bl	8000f78 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000592:	f000 fd1f 	bl	8000fd4 <MX_SPI1_Init>
  MX_UART4_Init();
 8000596:	f000 fd53 	bl	8001040 <MX_UART4_Init>
  MX_USART2_UART_Init();
 800059a:	f000 fd7b 	bl	8001094 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800059e:	f000 fda3 	bl	80010e8 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 80005a2:	f009 fbbf 	bl	8009d24 <MX_USB_DEVICE_Init>
  MX_FATFS_Init();
 80005a6:	f007 fb4d 	bl	8007c44 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &rx_data_lora, 1);
 80005aa:	2201      	movs	r2, #1
 80005ac:	49ba      	ldr	r1, [pc, #744]	@ (8000898 <main+0x320>)
 80005ae:	48bb      	ldr	r0, [pc, #748]	@ (800089c <main+0x324>)
 80005b0:	f004 ff68 	bl	8005484 <HAL_UART_Receive_IT>
//  HAL_UART_Receive_IT(&huart2,&rx_data, 1);
  E220_CONFIG(0x8,0x2A,0x10,1);
 80005b4:	2301      	movs	r3, #1
 80005b6:	2210      	movs	r2, #16
 80005b8:	212a      	movs	r1, #42	@ 0x2a
 80005ba:	2008      	movs	r0, #8
 80005bc:	f000 fe6a 	bl	8001294 <E220_CONFIG>
  lwgps_init(&gps);
 80005c0:	48b7      	ldr	r0, [pc, #732]	@ (80008a0 <main+0x328>)
 80005c2:	f7ff ff97 	bl	80004f4 <lwgps_init>


  tim1=HAL_GetTick();
 80005c6:	f001 fae1 	bl	8001b8c <HAL_GetTick>
 80005ca:	4603      	mov	r3, r0
 80005cc:	4ab5      	ldr	r2, [pc, #724]	@ (80008a4 <main+0x32c>)
 80005ce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if(HAL_GetTick()-tim1>10)
 80005d0:	f001 fadc 	bl	8001b8c <HAL_GetTick>
 80005d4:	4602      	mov	r2, r0
 80005d6:	4bb3      	ldr	r3, [pc, #716]	@ (80008a4 <main+0x32c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	1ad3      	subs	r3, r2, r3
 80005dc:	2b0a      	cmp	r3, #10
 80005de:	d9f7      	bls.n	80005d0 <main+0x58>
{
		  HYI_BUFFER_Fill();
 80005e0:	f000 feb6 	bl	8001350 <HYI_BUFFER_Fill>

	  if(lora_rx_buffer[3]==2 && lora_rx_buffer[50] == 0x31){
 80005e4:	4bb0      	ldr	r3, [pc, #704]	@ (80008a8 <main+0x330>)
 80005e6:	78db      	ldrb	r3, [r3, #3]
 80005e8:	2b02      	cmp	r3, #2
 80005ea:	f040 822a 	bne.w	8000a42 <main+0x4ca>
 80005ee:	4bae      	ldr	r3, [pc, #696]	@ (80008a8 <main+0x330>)
 80005f0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80005f4:	2b31      	cmp	r3, #49	@ 0x31
 80005f6:	f040 8224 	bne.w	8000a42 <main+0x4ca>

		  sustgpssatsinview=lora_rx_buffer[4];
 80005fa:	4bab      	ldr	r3, [pc, #684]	@ (80008a8 <main+0x330>)
 80005fc:	791a      	ldrb	r2, [r3, #4]
 80005fe:	4bab      	ldr	r3, [pc, #684]	@ (80008ac <main+0x334>)
 8000600:	701a      	strb	r2, [r3, #0]

			 float2unit8 f2u8_gpsalt;
				 for(uint8_t i=0;i<4;i++)
 8000602:	2300      	movs	r3, #0
 8000604:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8000608:	e019      	b.n	800063e <main+0xc6>
				 {
					 f2u8_gpsalt.array[i]=lora_rx_buffer[i+5];
 800060a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800060e:	1d5a      	adds	r2, r3, #5
 8000610:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000614:	49a4      	ldr	r1, [pc, #656]	@ (80008a8 <main+0x330>)
 8000616:	5c8a      	ldrb	r2, [r1, r2]
 8000618:	3380      	adds	r3, #128	@ 0x80
 800061a:	443b      	add	r3, r7
 800061c:	f803 2c20 	strb.w	r2, [r3, #-32]
					 HYI_BUFFER[10+i] =lora_rx_buffer[i+5]; // 10 11 12 13
 8000620:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000624:	1d5a      	adds	r2, r3, #5
 8000626:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800062a:	330a      	adds	r3, #10
 800062c:	499e      	ldr	r1, [pc, #632]	@ (80008a8 <main+0x330>)
 800062e:	5c89      	ldrb	r1, [r1, r2]
 8000630:	4a9f      	ldr	r2, [pc, #636]	@ (80008b0 <main+0x338>)
 8000632:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 8000634:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000638:	3301      	adds	r3, #1
 800063a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800063e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000642:	2b03      	cmp	r3, #3
 8000644:	d9e1      	bls.n	800060a <main+0x92>
				 }
				 sustgpsaltitude=f2u8_gpsalt.fVal;
 8000646:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000648:	4a9a      	ldr	r2, [pc, #616]	@ (80008b4 <main+0x33c>)
 800064a:	6013      	str	r3, [r2, #0]
			 float2unit8 f2u8_latitude;

				 for(uint8_t i=0;i<4;i++)
 800064c:	2300      	movs	r3, #0
 800064e:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8000652:	e01b      	b.n	800068c <main+0x114>
				 {
					f2u8_latitude.array[i]=lora_rx_buffer[i+9];
 8000654:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000658:	f103 0209 	add.w	r2, r3, #9
 800065c:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000660:	4991      	ldr	r1, [pc, #580]	@ (80008a8 <main+0x330>)
 8000662:	5c8a      	ldrb	r2, [r1, r2]
 8000664:	3380      	adds	r3, #128	@ 0x80
 8000666:	443b      	add	r3, r7
 8000668:	f803 2c24 	strb.w	r2, [r3, #-36]
					HYI_BUFFER[14+i] =lora_rx_buffer[i+9]; // 14 15 16 17
 800066c:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000670:	f103 0209 	add.w	r2, r3, #9
 8000674:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000678:	330e      	adds	r3, #14
 800067a:	498b      	ldr	r1, [pc, #556]	@ (80008a8 <main+0x330>)
 800067c:	5c89      	ldrb	r1, [r1, r2]
 800067e:	4a8c      	ldr	r2, [pc, #560]	@ (80008b0 <main+0x338>)
 8000680:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 8000682:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000686:	3301      	adds	r3, #1
 8000688:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 800068c:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000690:	2b03      	cmp	r3, #3
 8000692:	d9df      	bls.n	8000654 <main+0xdc>
				 }
				 sustgpslatitude=f2u8_latitude.fVal;
 8000694:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000696:	4a88      	ldr	r2, [pc, #544]	@ (80008b8 <main+0x340>)
 8000698:	6013      	str	r3, [r2, #0]

			 float2unit8 f2u8_longitude;
				 for(uint8_t i=0;i<4;i++)
 800069a:	2300      	movs	r3, #0
 800069c:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 80006a0:	e01b      	b.n	80006da <main+0x162>
				 {
					f2u8_longitude.array[i]=lora_rx_buffer[i+13];
 80006a2:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 80006a6:	f103 020d 	add.w	r2, r3, #13
 80006aa:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 80006ae:	497e      	ldr	r1, [pc, #504]	@ (80008a8 <main+0x330>)
 80006b0:	5c8a      	ldrb	r2, [r1, r2]
 80006b2:	3380      	adds	r3, #128	@ 0x80
 80006b4:	443b      	add	r3, r7
 80006b6:	f803 2c28 	strb.w	r2, [r3, #-40]
					HYI_BUFFER[18+i] =lora_rx_buffer[i+13]; // 18 19 20 21
 80006ba:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 80006be:	f103 020d 	add.w	r2, r3, #13
 80006c2:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 80006c6:	3312      	adds	r3, #18
 80006c8:	4977      	ldr	r1, [pc, #476]	@ (80008a8 <main+0x330>)
 80006ca:	5c89      	ldrb	r1, [r1, r2]
 80006cc:	4a78      	ldr	r2, [pc, #480]	@ (80008b0 <main+0x338>)
 80006ce:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 80006d0:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 80006d4:	3301      	adds	r3, #1
 80006d6:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 80006da:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 80006de:	2b03      	cmp	r3, #3
 80006e0:	d9df      	bls.n	80006a2 <main+0x12a>
				 }
				 sustgpslongitude=f2u8_longitude.fVal;
 80006e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80006e4:	4a75      	ldr	r2, [pc, #468]	@ (80008bc <main+0x344>)
 80006e6:	6013      	str	r3, [r2, #0]

			 float2unit8 f2u8_altitude;
				 for(uint8_t i=0;i<4;i++)
 80006e8:	2300      	movs	r3, #0
 80006ea:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
 80006ee:	e01b      	b.n	8000728 <main+0x1b0>
				 {
					f2u8_altitude.array[i]=lora_rx_buffer[i+17];
 80006f0:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 80006f4:	f103 0211 	add.w	r2, r3, #17
 80006f8:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 80006fc:	496a      	ldr	r1, [pc, #424]	@ (80008a8 <main+0x330>)
 80006fe:	5c8a      	ldrb	r2, [r1, r2]
 8000700:	3380      	adds	r3, #128	@ 0x80
 8000702:	443b      	add	r3, r7
 8000704:	f803 2c2c 	strb.w	r2, [r3, #-44]
					HYI_BUFFER[6+i] =lora_rx_buffer[i+17]; // 6 7 8 9
 8000708:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800070c:	f103 0211 	add.w	r2, r3, #17
 8000710:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8000714:	3306      	adds	r3, #6
 8000716:	4964      	ldr	r1, [pc, #400]	@ (80008a8 <main+0x330>)
 8000718:	5c89      	ldrb	r1, [r1, r2]
 800071a:	4a65      	ldr	r2, [pc, #404]	@ (80008b0 <main+0x338>)
 800071c:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 800071e:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8000722:	3301      	adds	r3, #1
 8000724:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
 8000728:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800072c:	2b03      	cmp	r3, #3
 800072e:	d9df      	bls.n	80006f0 <main+0x178>
				 }
				 sustaltitude=f2u8_altitude.fVal;
 8000730:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000732:	4a63      	ldr	r2, [pc, #396]	@ (80008c0 <main+0x348>)
 8000734:	6013      	str	r3, [r2, #0]

			 float2unit8 f2u8_speed;

				 for(uint8_t i=0;i<4;i++)
 8000736:	2300      	movs	r3, #0
 8000738:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800073c:	e010      	b.n	8000760 <main+0x1e8>
				 {
					 f2u8_speed.array[i]=lora_rx_buffer[i+21];
 800073e:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8000742:	f103 0215 	add.w	r2, r3, #21
 8000746:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800074a:	4957      	ldr	r1, [pc, #348]	@ (80008a8 <main+0x330>)
 800074c:	5c8a      	ldrb	r2, [r1, r2]
 800074e:	3380      	adds	r3, #128	@ 0x80
 8000750:	443b      	add	r3, r7
 8000752:	f803 2c30 	strb.w	r2, [r3, #-48]
				 for(uint8_t i=0;i<4;i++)
 8000756:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800075a:	3301      	adds	r3, #1
 800075c:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8000760:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8000764:	2b03      	cmp	r3, #3
 8000766:	d9ea      	bls.n	800073e <main+0x1c6>
				 }
				 sustspeed=f2u8_speed.fVal;
 8000768:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800076a:	4a56      	ldr	r2, [pc, #344]	@ (80008c4 <main+0x34c>)
 800076c:	6013      	str	r3, [r2, #0]

			 float2unit8 f2u8_temp;
				 for(uint8_t i=0;i<4;i++)
 800076e:	2300      	movs	r3, #0
 8000770:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
 8000774:	e010      	b.n	8000798 <main+0x220>
				 {
					 f2u8_temp.array[i]=lora_rx_buffer[i+25];
 8000776:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 800077a:	f103 0219 	add.w	r2, r3, #25
 800077e:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 8000782:	4949      	ldr	r1, [pc, #292]	@ (80008a8 <main+0x330>)
 8000784:	5c8a      	ldrb	r2, [r1, r2]
 8000786:	3380      	adds	r3, #128	@ 0x80
 8000788:	443b      	add	r3, r7
 800078a:	f803 2c34 	strb.w	r2, [r3, #-52]
				 for(uint8_t i=0;i<4;i++)
 800078e:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 8000792:	3301      	adds	r3, #1
 8000794:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
 8000798:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 800079c:	2b03      	cmp	r3, #3
 800079e:	d9ea      	bls.n	8000776 <main+0x1fe>
				 }
				 susttemperature=f2u8_temp.fVal;
 80007a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80007a2:	4a49      	ldr	r2, [pc, #292]	@ (80008c8 <main+0x350>)
 80007a4:	6013      	str	r3, [r2, #0]

			 float2unit8 f2u8_accx;
				 for(uint8_t i=0;i<4;i++)
 80007a6:	2300      	movs	r3, #0
 80007a8:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
 80007ac:	e01b      	b.n	80007e6 <main+0x26e>
				 {
					 f2u8_accx.array[i]=lora_rx_buffer[i+29];
 80007ae:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 80007b2:	f103 021d 	add.w	r2, r3, #29
 80007b6:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 80007ba:	493b      	ldr	r1, [pc, #236]	@ (80008a8 <main+0x330>)
 80007bc:	5c8a      	ldrb	r2, [r1, r2]
 80007be:	3380      	adds	r3, #128	@ 0x80
 80007c0:	443b      	add	r3, r7
 80007c2:	f803 2c38 	strb.w	r2, [r3, #-56]
					 HYI_BUFFER[58+i]=lora_rx_buffer[i+29]; //
 80007c6:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 80007ca:	f103 021d 	add.w	r2, r3, #29
 80007ce:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 80007d2:	333a      	adds	r3, #58	@ 0x3a
 80007d4:	4934      	ldr	r1, [pc, #208]	@ (80008a8 <main+0x330>)
 80007d6:	5c89      	ldrb	r1, [r1, r2]
 80007d8:	4a35      	ldr	r2, [pc, #212]	@ (80008b0 <main+0x338>)
 80007da:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 80007dc:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 80007e0:	3301      	adds	r3, #1
 80007e2:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
 80007e6:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 80007ea:	2b03      	cmp	r3, #3
 80007ec:	d9df      	bls.n	80007ae <main+0x236>
				 }
				 sustaccx=f2u8_accx.fVal;
 80007ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80007f0:	4a36      	ldr	r2, [pc, #216]	@ (80008cc <main+0x354>)
 80007f2:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_accy;
				 for(uint8_t i=0;i<4;i++)
 80007f4:	2300      	movs	r3, #0
 80007f6:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
 80007fa:	e01b      	b.n	8000834 <main+0x2bc>
				 {
					 f2u8_accy.array[i]=lora_rx_buffer[i+33];
 80007fc:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8000800:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 8000804:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8000808:	4927      	ldr	r1, [pc, #156]	@ (80008a8 <main+0x330>)
 800080a:	5c8a      	ldrb	r2, [r1, r2]
 800080c:	3380      	adds	r3, #128	@ 0x80
 800080e:	443b      	add	r3, r7
 8000810:	f803 2c3c 	strb.w	r2, [r3, #-60]
					 HYI_BUFFER[62+i]=lora_rx_buffer[i+33];
 8000814:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8000818:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 800081c:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8000820:	333e      	adds	r3, #62	@ 0x3e
 8000822:	4921      	ldr	r1, [pc, #132]	@ (80008a8 <main+0x330>)
 8000824:	5c89      	ldrb	r1, [r1, r2]
 8000826:	4a22      	ldr	r2, [pc, #136]	@ (80008b0 <main+0x338>)
 8000828:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 800082a:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 800082e:	3301      	adds	r3, #1
 8000830:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
 8000834:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8000838:	2b03      	cmp	r3, #3
 800083a:	d9df      	bls.n	80007fc <main+0x284>
				 }
					 sustaccy=f2u8_accy.fVal;
 800083c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800083e:	4a24      	ldr	r2, [pc, #144]	@ (80008d0 <main+0x358>)
 8000840:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_accz;
			      for(uint8_t i=0;i<4;i++)
 8000842:	2300      	movs	r3, #0
 8000844:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8000848:	e01b      	b.n	8000882 <main+0x30a>
				 {
			    	  f2u8_accz.array[i]=lora_rx_buffer[i+37];
 800084a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800084e:	f103 0225 	add.w	r2, r3, #37	@ 0x25
 8000852:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000856:	4914      	ldr	r1, [pc, #80]	@ (80008a8 <main+0x330>)
 8000858:	5c8a      	ldrb	r2, [r1, r2]
 800085a:	3380      	adds	r3, #128	@ 0x80
 800085c:	443b      	add	r3, r7
 800085e:	f803 2c40 	strb.w	r2, [r3, #-64]
			    	  HYI_BUFFER[66+i]=lora_rx_buffer[i+37];
 8000862:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000866:	f103 0225 	add.w	r2, r3, #37	@ 0x25
 800086a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800086e:	3342      	adds	r3, #66	@ 0x42
 8000870:	490d      	ldr	r1, [pc, #52]	@ (80008a8 <main+0x330>)
 8000872:	5c89      	ldrb	r1, [r1, r2]
 8000874:	4a0e      	ldr	r2, [pc, #56]	@ (80008b0 <main+0x338>)
 8000876:	54d1      	strb	r1, [r2, r3]
			      for(uint8_t i=0;i<4;i++)
 8000878:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800087c:	3301      	adds	r3, #1
 800087e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8000882:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000886:	2b03      	cmp	r3, #3
 8000888:	d9df      	bls.n	800084a <main+0x2d2>
				 }
					 sustaccz=f2u8_accz.fVal;
 800088a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800088c:	4a11      	ldr	r2, [pc, #68]	@ (80008d4 <main+0x35c>)
 800088e:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_roll;
				  for(uint8_t i=0;i<4;i++)
 8000890:	2300      	movs	r3, #0
 8000892:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8000896:	e030      	b.n	80008fa <main+0x382>
 8000898:	20000343 	.word	0x20000343
 800089c:	200002b8 	.word	0x200002b8
 80008a0:	20000448 	.word	0x20000448
 80008a4:	2000043c 	.word	0x2000043c
 80008a8:	200002fc 	.word	0x200002fc
 80008ac:	20000391 	.word	0x20000391
 80008b0:	20000344 	.word	0x20000344
 80008b4:	20000394 	.word	0x20000394
 80008b8:	20000398 	.word	0x20000398
 80008bc:	2000039c 	.word	0x2000039c
 80008c0:	200003a4 	.word	0x200003a4
 80008c4:	200003a0 	.word	0x200003a0
 80008c8:	200003a8 	.word	0x200003a8
 80008cc:	200003ac 	.word	0x200003ac
 80008d0:	200003b0 	.word	0x200003b0
 80008d4:	200003b4 	.word	0x200003b4
				 {
					  f2u8_roll.array[i]=lora_rx_buffer[i+41];
 80008d8:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80008dc:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 80008e0:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80008e4:	49b6      	ldr	r1, [pc, #728]	@ (8000bc0 <main+0x648>)
 80008e6:	5c8a      	ldrb	r2, [r1, r2]
 80008e8:	3380      	adds	r3, #128	@ 0x80
 80008ea:	443b      	add	r3, r7
 80008ec:	f803 2c44 	strb.w	r2, [r3, #-68]
				  for(uint8_t i=0;i<4;i++)
 80008f0:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80008f4:	3301      	adds	r3, #1
 80008f6:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 80008fa:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80008fe:	2b03      	cmp	r3, #3
 8000900:	d9ea      	bls.n	80008d8 <main+0x360>
				 }
					 sustroll=f2u8_roll.fVal;
 8000902:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000904:	4aaf      	ldr	r2, [pc, #700]	@ (8000bc4 <main+0x64c>)
 8000906:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_pitch;
				  for(uint8_t i=0;i<4;i++)
 8000908:	2300      	movs	r3, #0
 800090a:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 800090e:	e010      	b.n	8000932 <main+0x3ba>
				 {
					  f2u8_pitch.array[i]=lora_rx_buffer[i+45];
 8000910:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8000914:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
 8000918:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 800091c:	49a8      	ldr	r1, [pc, #672]	@ (8000bc0 <main+0x648>)
 800091e:	5c8a      	ldrb	r2, [r1, r2]
 8000920:	3380      	adds	r3, #128	@ 0x80
 8000922:	443b      	add	r3, r7
 8000924:	f803 2c48 	strb.w	r2, [r3, #-72]
				  for(uint8_t i=0;i<4;i++)
 8000928:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 800092c:	3301      	adds	r3, #1
 800092e:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 8000932:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8000936:	2b03      	cmp	r3, #3
 8000938:	d9ea      	bls.n	8000910 <main+0x398>
				 }
					 sustpitch=f2u8_pitch.fVal;
 800093a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800093c:	4aa2      	ldr	r2, [pc, #648]	@ (8000bc8 <main+0x650>)
 800093e:	6013      	str	r3, [r2, #0]

					 sustv4_battery=lora_rx_buffer[49];
 8000940:	4b9f      	ldr	r3, [pc, #636]	@ (8000bc0 <main+0x648>)
 8000942:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 8000946:	4ba1      	ldr	r3, [pc, #644]	@ (8000bcc <main+0x654>)
 8000948:	701a      	strb	r2, [r3, #0]
					 sustv4_mod=lora_rx_buffer[50];
 800094a:	4b9d      	ldr	r3, [pc, #628]	@ (8000bc0 <main+0x648>)
 800094c:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8000950:	4b9f      	ldr	r3, [pc, #636]	@ (8000bd0 <main+0x658>)
 8000952:	701a      	strb	r2, [r3, #0]
					 suststage_communication=lora_rx_buffer[51];
 8000954:	4b9a      	ldr	r3, [pc, #616]	@ (8000bc0 <main+0x648>)
 8000956:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 800095a:	4b9e      	ldr	r3, [pc, #632]	@ (8000bd4 <main+0x65c>)
 800095c:	701a      	strb	r2, [r3, #0]

					 //EGU PART
					 EGU_ARIZA=lora_rx_buffer[52];
 800095e:	4b98      	ldr	r3, [pc, #608]	@ (8000bc0 <main+0x648>)
 8000960:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8000964:	4b9c      	ldr	r3, [pc, #624]	@ (8000bd8 <main+0x660>)
 8000966:	701a      	strb	r2, [r3, #0]
					 EGU_AYRILMA_TESPIT=lora_rx_buffer[53];
 8000968:	4b95      	ldr	r3, [pc, #596]	@ (8000bc0 <main+0x648>)
 800096a:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 800096e:	4b9b      	ldr	r3, [pc, #620]	@ (8000bdc <main+0x664>)
 8000970:	701a      	strb	r2, [r3, #0]

			float2unit8 f2u8_EGU_BATTERY;
					for(uint8_t i=0;i<4;i++)
 8000972:	2300      	movs	r3, #0
 8000974:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
 8000978:	e010      	b.n	800099c <main+0x424>
				 {
						f2u8_EGU_BATTERY.array[i]=lora_rx_buffer[i+54];
 800097a:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800097e:	f103 0236 	add.w	r2, r3, #54	@ 0x36
 8000982:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8000986:	498e      	ldr	r1, [pc, #568]	@ (8000bc0 <main+0x648>)
 8000988:	5c8a      	ldrb	r2, [r1, r2]
 800098a:	3380      	adds	r3, #128	@ 0x80
 800098c:	443b      	add	r3, r7
 800098e:	f803 2c4c 	strb.w	r2, [r3, #-76]
					for(uint8_t i=0;i<4;i++)
 8000992:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8000996:	3301      	adds	r3, #1
 8000998:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
 800099c:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80009a0:	2b03      	cmp	r3, #3
 80009a2:	d9ea      	bls.n	800097a <main+0x402>
				 }
					 EGU_BATTERY=f2u8_EGU_BATTERY.fVal;
 80009a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009a6:	4a8e      	ldr	r2, [pc, #568]	@ (8000be0 <main+0x668>)
 80009a8:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_EGU_ANGLE;
					for(uint8_t i=0;i<4;i++)
 80009aa:	2300      	movs	r3, #0
 80009ac:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 80009b0:	e010      	b.n	80009d4 <main+0x45c>
				{
						f2u8_EGU_ANGLE.array[i]=lora_rx_buffer[i+58];
 80009b2:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80009b6:	f103 023a 	add.w	r2, r3, #58	@ 0x3a
 80009ba:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80009be:	4980      	ldr	r1, [pc, #512]	@ (8000bc0 <main+0x648>)
 80009c0:	5c8a      	ldrb	r2, [r1, r2]
 80009c2:	3380      	adds	r3, #128	@ 0x80
 80009c4:	443b      	add	r3, r7
 80009c6:	f803 2c50 	strb.w	r2, [r3, #-80]
					for(uint8_t i=0;i<4;i++)
 80009ca:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80009ce:	3301      	adds	r3, #1
 80009d0:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 80009d4:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80009d8:	2b03      	cmp	r3, #3
 80009da:	d9ea      	bls.n	80009b2 <main+0x43a>
				 }
					  EGU_ANGLE=f2u8_EGU_ANGLE.fVal;
 80009dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009de:	4a81      	ldr	r2, [pc, #516]	@ (8000be4 <main+0x66c>)
 80009e0:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_EGU_IRTIFA;
					for(uint8_t i=0;i<4;i++)
 80009e2:	2300      	movs	r3, #0
 80009e4:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
 80009e8:	e010      	b.n	8000a0c <main+0x494>
				{
						f2u8_EGU_IRTIFA.array[i]=lora_rx_buffer[i+62];
 80009ea:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80009ee:	f103 023e 	add.w	r2, r3, #62	@ 0x3e
 80009f2:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80009f6:	4972      	ldr	r1, [pc, #456]	@ (8000bc0 <main+0x648>)
 80009f8:	5c8a      	ldrb	r2, [r1, r2]
 80009fa:	3380      	adds	r3, #128	@ 0x80
 80009fc:	443b      	add	r3, r7
 80009fe:	f803 2c54 	strb.w	r2, [r3, #-84]
					for(uint8_t i=0;i<4;i++)
 8000a02:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8000a06:	3301      	adds	r3, #1
 8000a08:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
 8000a0c:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8000a10:	2b03      	cmp	r3, #3
 8000a12:	d9ea      	bls.n	80009ea <main+0x472>
				}
					  EGU_IRTIFA=f2u8_EGU_IRTIFA.fVal;
 8000a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a16:	4a74      	ldr	r2, [pc, #464]	@ (8000be8 <main+0x670>)
 8000a18:	6013      	str	r3, [r2, #0]

					  EGU_FITIL=lora_rx_buffer[53];
 8000a1a:	4b69      	ldr	r3, [pc, #420]	@ (8000bc0 <main+0x648>)
 8000a1c:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 8000a20:	4b72      	ldr	r3, [pc, #456]	@ (8000bec <main+0x674>)
 8000a22:	701a      	strb	r2, [r3, #0]

					  EGU_UCUS_BASLADIMI=lora_rx_buffer[66];
 8000a24:	4b66      	ldr	r3, [pc, #408]	@ (8000bc0 <main+0x648>)
 8000a26:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 8000a2a:	4b71      	ldr	r3, [pc, #452]	@ (8000bf0 <main+0x678>)
 8000a2c:	701a      	strb	r2, [r3, #0]
					  EGU_STAGE_DURUM=lora_rx_buffer[67];
 8000a2e:	4b64      	ldr	r3, [pc, #400]	@ (8000bc0 <main+0x648>)
 8000a30:	f893 2043 	ldrb.w	r2, [r3, #67]	@ 0x43
 8000a34:	4b6f      	ldr	r3, [pc, #444]	@ (8000bf4 <main+0x67c>)
 8000a36:	701a      	strb	r2, [r3, #0]
					  EGU_MOTOR_ATESLEME_TALEP_IN=lora_rx_buffer[68];
 8000a38:	4b61      	ldr	r3, [pc, #388]	@ (8000bc0 <main+0x648>)
 8000a3a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8000a3e:	4b6e      	ldr	r3, [pc, #440]	@ (8000bf8 <main+0x680>)
 8000a40:	701a      	strb	r2, [r3, #0]
}

	  if(lora_rx_buffer[3]==1 && lora_rx_buffer[50]==0x32){
 8000a42:	4b5f      	ldr	r3, [pc, #380]	@ (8000bc0 <main+0x648>)
 8000a44:	78db      	ldrb	r3, [r3, #3]
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	f040 8199 	bne.w	8000d7e <main+0x806>
 8000a4c:	4b5c      	ldr	r3, [pc, #368]	@ (8000bc0 <main+0x648>)
 8000a4e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8000a52:	2b32      	cmp	r3, #50	@ 0x32
 8000a54:	f040 8193 	bne.w	8000d7e <main+0x806>

		  boostgpssatsinview=lora_rx_buffer[4];
 8000a58:	4b59      	ldr	r3, [pc, #356]	@ (8000bc0 <main+0x648>)
 8000a5a:	791a      	ldrb	r2, [r3, #4]
 8000a5c:	4b67      	ldr	r3, [pc, #412]	@ (8000bfc <main+0x684>)
 8000a5e:	701a      	strb	r2, [r3, #0]

			 float2unit8 f2u8_bgpsalt;
				 for(uint8_t i=0;i<4;i++)
 8000a60:	2300      	movs	r3, #0
 8000a62:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
 8000a66:	e019      	b.n	8000a9c <main+0x524>
				 {
					 f2u8_bgpsalt.array[i]=lora_rx_buffer[i+5];
 8000a68:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8000a6c:	1d5a      	adds	r2, r3, #5
 8000a6e:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8000a72:	4953      	ldr	r1, [pc, #332]	@ (8000bc0 <main+0x648>)
 8000a74:	5c8a      	ldrb	r2, [r1, r2]
 8000a76:	3380      	adds	r3, #128	@ 0x80
 8000a78:	443b      	add	r3, r7
 8000a7a:	f803 2c58 	strb.w	r2, [r3, #-88]
					 HYI_BUFFER[34+i]=lora_rx_buffer[i+5]; // 34 35 36 37
 8000a7e:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8000a82:	1d5a      	adds	r2, r3, #5
 8000a84:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8000a88:	3322      	adds	r3, #34	@ 0x22
 8000a8a:	494d      	ldr	r1, [pc, #308]	@ (8000bc0 <main+0x648>)
 8000a8c:	5c89      	ldrb	r1, [r1, r2]
 8000a8e:	4a5c      	ldr	r2, [pc, #368]	@ (8000c00 <main+0x688>)
 8000a90:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 8000a92:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8000a96:	3301      	adds	r3, #1
 8000a98:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
 8000a9c:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8000aa0:	2b03      	cmp	r3, #3
 8000aa2:	d9e1      	bls.n	8000a68 <main+0x4f0>
				 }
				 sustgpsaltitude=f2u8_bgpsalt.fVal;
 8000aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000aa6:	4a57      	ldr	r2, [pc, #348]	@ (8000c04 <main+0x68c>)
 8000aa8:	6013      	str	r3, [r2, #0]
			 float2unit8 f2u8_blatitude;

				 for(uint8_t i=0;i<4;i++)
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
 8000ab0:	e01b      	b.n	8000aea <main+0x572>
				 {
					 f2u8_blatitude.array[i]=lora_rx_buffer[i+9];
 8000ab2:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8000ab6:	f103 0209 	add.w	r2, r3, #9
 8000aba:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8000abe:	4940      	ldr	r1, [pc, #256]	@ (8000bc0 <main+0x648>)
 8000ac0:	5c8a      	ldrb	r2, [r1, r2]
 8000ac2:	3380      	adds	r3, #128	@ 0x80
 8000ac4:	443b      	add	r3, r7
 8000ac6:	f803 2c5c 	strb.w	r2, [r3, #-92]
					 HYI_BUFFER[38+i]=lora_rx_buffer[i+9]; // 38 39 40 41
 8000aca:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8000ace:	f103 0209 	add.w	r2, r3, #9
 8000ad2:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8000ad6:	3326      	adds	r3, #38	@ 0x26
 8000ad8:	4939      	ldr	r1, [pc, #228]	@ (8000bc0 <main+0x648>)
 8000ada:	5c89      	ldrb	r1, [r1, r2]
 8000adc:	4a48      	ldr	r2, [pc, #288]	@ (8000c00 <main+0x688>)
 8000ade:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 8000ae0:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
 8000aea:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8000aee:	2b03      	cmp	r3, #3
 8000af0:	d9df      	bls.n	8000ab2 <main+0x53a>
				 }
				 boostgpslatitude=f2u8_blatitude.fVal;
 8000af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000af4:	4a44      	ldr	r2, [pc, #272]	@ (8000c08 <main+0x690>)
 8000af6:	6013      	str	r3, [r2, #0]

			 float2unit8 f2u8_blongitude;
				 for(uint8_t i=0;i<4;i++)
 8000af8:	2300      	movs	r3, #0
 8000afa:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8000afe:	e01b      	b.n	8000b38 <main+0x5c0>
				 {
					 f2u8_blongitude.array[i]=lora_rx_buffer[i+13];
 8000b00:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000b04:	f103 020d 	add.w	r2, r3, #13
 8000b08:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000b0c:	492c      	ldr	r1, [pc, #176]	@ (8000bc0 <main+0x648>)
 8000b0e:	5c8a      	ldrb	r2, [r1, r2]
 8000b10:	3380      	adds	r3, #128	@ 0x80
 8000b12:	443b      	add	r3, r7
 8000b14:	f803 2c60 	strb.w	r2, [r3, #-96]
					 HYI_BUFFER[42+i]=lora_rx_buffer[i+13]; // 42 43 44 45
 8000b18:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000b1c:	f103 020d 	add.w	r2, r3, #13
 8000b20:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000b24:	332a      	adds	r3, #42	@ 0x2a
 8000b26:	4926      	ldr	r1, [pc, #152]	@ (8000bc0 <main+0x648>)
 8000b28:	5c89      	ldrb	r1, [r1, r2]
 8000b2a:	4a35      	ldr	r2, [pc, #212]	@ (8000c00 <main+0x688>)
 8000b2c:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 8000b2e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000b32:	3301      	adds	r3, #1
 8000b34:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8000b38:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000b3c:	2b03      	cmp	r3, #3
 8000b3e:	d9df      	bls.n	8000b00 <main+0x588>
				 }
				 boostgpslongitude=f2u8_blongitude.fVal;
 8000b40:	6a3b      	ldr	r3, [r7, #32]
 8000b42:	4a32      	ldr	r2, [pc, #200]	@ (8000c0c <main+0x694>)
 8000b44:	6013      	str	r3, [r2, #0]

			 float2unit8 f2u8_baltitude;
				 for(uint8_t i=0;i<4;i++)
 8000b46:	2300      	movs	r3, #0
 8000b48:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8000b4c:	e010      	b.n	8000b70 <main+0x5f8>
				 {
					f2u8_baltitude.array[i]=lora_rx_buffer[i+17];
 8000b4e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8000b52:	f103 0211 	add.w	r2, r3, #17
 8000b56:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8000b5a:	4919      	ldr	r1, [pc, #100]	@ (8000bc0 <main+0x648>)
 8000b5c:	5c8a      	ldrb	r2, [r1, r2]
 8000b5e:	3380      	adds	r3, #128	@ 0x80
 8000b60:	443b      	add	r3, r7
 8000b62:	f803 2c64 	strb.w	r2, [r3, #-100]
				 for(uint8_t i=0;i<4;i++)
 8000b66:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8000b70:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8000b74:	2b03      	cmp	r3, #3
 8000b76:	d9ea      	bls.n	8000b4e <main+0x5d6>
				 }
				 boostaltitude=f2u8_baltitude.fVal;
 8000b78:	69fb      	ldr	r3, [r7, #28]
 8000b7a:	4a25      	ldr	r2, [pc, #148]	@ (8000c10 <main+0x698>)
 8000b7c:	6013      	str	r3, [r2, #0]

			 float2unit8 f2u8_bspeed;

				 for(uint8_t i=0;i<4;i++)
 8000b7e:	2300      	movs	r3, #0
 8000b80:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
 8000b84:	e010      	b.n	8000ba8 <main+0x630>
				 {
					 f2u8_bspeed.array[i]=lora_rx_buffer[i+21];
 8000b86:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8000b8a:	f103 0215 	add.w	r2, r3, #21
 8000b8e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8000b92:	490b      	ldr	r1, [pc, #44]	@ (8000bc0 <main+0x648>)
 8000b94:	5c8a      	ldrb	r2, [r1, r2]
 8000b96:	3380      	adds	r3, #128	@ 0x80
 8000b98:	443b      	add	r3, r7
 8000b9a:	f803 2c68 	strb.w	r2, [r3, #-104]
				 for(uint8_t i=0;i<4;i++)
 8000b9e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
 8000ba8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8000bac:	2b03      	cmp	r3, #3
 8000bae:	d9ea      	bls.n	8000b86 <main+0x60e>
				 }
				 boostspeed=f2u8_bspeed.fVal;
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	4a18      	ldr	r2, [pc, #96]	@ (8000c14 <main+0x69c>)
 8000bb4:	6013      	str	r3, [r2, #0]

			 float2unit8 f2u8_btemp;
				 for(uint8_t i=0;i<4;i++)
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 8000bbc:	e03d      	b.n	8000c3a <main+0x6c2>
 8000bbe:	bf00      	nop
 8000bc0:	200002fc 	.word	0x200002fc
 8000bc4:	200003b8 	.word	0x200003b8
 8000bc8:	200003bc 	.word	0x200003bc
 8000bcc:	200003c0 	.word	0x200003c0
 8000bd0:	200003c1 	.word	0x200003c1
 8000bd4:	200003c2 	.word	0x200003c2
 8000bd8:	200003c3 	.word	0x200003c3
 8000bdc:	200003c4 	.word	0x200003c4
 8000be0:	200003cc 	.word	0x200003cc
 8000be4:	200003d4 	.word	0x200003d4
 8000be8:	200003d0 	.word	0x200003d0
 8000bec:	200003c8 	.word	0x200003c8
 8000bf0:	200003c7 	.word	0x200003c7
 8000bf4:	200003c6 	.word	0x200003c6
 8000bf8:	200003c5 	.word	0x200003c5
 8000bfc:	200003d8 	.word	0x200003d8
 8000c00:	20000344 	.word	0x20000344
 8000c04:	20000394 	.word	0x20000394
 8000c08:	200003dc 	.word	0x200003dc
 8000c0c:	200003e0 	.word	0x200003e0
 8000c10:	200003e8 	.word	0x200003e8
 8000c14:	200003e4 	.word	0x200003e4
				 {
					 f2u8_btemp.array[i]=lora_rx_buffer[i+25];
 8000c18:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8000c1c:	f103 0219 	add.w	r2, r3, #25
 8000c20:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8000c24:	4969      	ldr	r1, [pc, #420]	@ (8000dcc <main+0x854>)
 8000c26:	5c8a      	ldrb	r2, [r1, r2]
 8000c28:	3380      	adds	r3, #128	@ 0x80
 8000c2a:	443b      	add	r3, r7
 8000c2c:	f803 2c6c 	strb.w	r2, [r3, #-108]
				 for(uint8_t i=0;i<4;i++)
 8000c30:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8000c34:	3301      	adds	r3, #1
 8000c36:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 8000c3a:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8000c3e:	2b03      	cmp	r3, #3
 8000c40:	d9ea      	bls.n	8000c18 <main+0x6a0>
				 }
				 boosttemperature=f2u8_btemp.fVal;
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	4a62      	ldr	r2, [pc, #392]	@ (8000dd0 <main+0x858>)
 8000c46:	6013      	str	r3, [r2, #0]

			 float2unit8 f2u8_baccx;
				 for(uint8_t i=0;i<4;i++)
 8000c48:	2300      	movs	r3, #0
 8000c4a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 8000c4e:	e010      	b.n	8000c72 <main+0x6fa>
				 {
					 f2u8_baccx.array[i]=lora_rx_buffer[i+29];
 8000c50:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000c54:	f103 021d 	add.w	r2, r3, #29
 8000c58:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000c5c:	495b      	ldr	r1, [pc, #364]	@ (8000dcc <main+0x854>)
 8000c5e:	5c8a      	ldrb	r2, [r1, r2]
 8000c60:	3380      	adds	r3, #128	@ 0x80
 8000c62:	443b      	add	r3, r7
 8000c64:	f803 2c70 	strb.w	r2, [r3, #-112]
				 for(uint8_t i=0;i<4;i++)
 8000c68:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 8000c72:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000c76:	2b03      	cmp	r3, #3
 8000c78:	d9ea      	bls.n	8000c50 <main+0x6d8>
				 }
				 boostaccx=f2u8_baccx.fVal;
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	4a55      	ldr	r2, [pc, #340]	@ (8000dd4 <main+0x85c>)
 8000c7e:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_baccy;
				 for(uint8_t i=0;i<4;i++)
 8000c80:	2300      	movs	r3, #0
 8000c82:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
 8000c86:	e010      	b.n	8000caa <main+0x732>
				 {
					 f2u8_baccy.array[i]=lora_rx_buffer[i+33];
 8000c88:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8000c8c:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 8000c90:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8000c94:	494d      	ldr	r1, [pc, #308]	@ (8000dcc <main+0x854>)
 8000c96:	5c8a      	ldrb	r2, [r1, r2]
 8000c98:	3380      	adds	r3, #128	@ 0x80
 8000c9a:	443b      	add	r3, r7
 8000c9c:	f803 2c74 	strb.w	r2, [r3, #-116]
				 for(uint8_t i=0;i<4;i++)
 8000ca0:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
 8000caa:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8000cae:	2b03      	cmp	r3, #3
 8000cb0:	d9ea      	bls.n	8000c88 <main+0x710>
				 }
					 boostaccy=f2u8_baccy.fVal;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	4a48      	ldr	r2, [pc, #288]	@ (8000dd8 <main+0x860>)
 8000cb6:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_baccz;
			      for(uint8_t i=0;i<4;i++)
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
 8000cbe:	e010      	b.n	8000ce2 <main+0x76a>
				 {
			    	  f2u8_baccz.array[i]=lora_rx_buffer[i+37];
 8000cc0:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8000cc4:	f103 0225 	add.w	r2, r3, #37	@ 0x25
 8000cc8:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8000ccc:	493f      	ldr	r1, [pc, #252]	@ (8000dcc <main+0x854>)
 8000cce:	5c8a      	ldrb	r2, [r1, r2]
 8000cd0:	3380      	adds	r3, #128	@ 0x80
 8000cd2:	443b      	add	r3, r7
 8000cd4:	f803 2c78 	strb.w	r2, [r3, #-120]
			      for(uint8_t i=0;i<4;i++)
 8000cd8:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8000cdc:	3301      	adds	r3, #1
 8000cde:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
 8000ce2:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8000ce6:	2b03      	cmp	r3, #3
 8000ce8:	d9ea      	bls.n	8000cc0 <main+0x748>
				 }
					 boostaccz=f2u8_baccz.fVal;
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	4a3b      	ldr	r2, [pc, #236]	@ (8000ddc <main+0x864>)
 8000cee:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_broll;
				  for(uint8_t i=0;i<4;i++)
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 8000cf6:	e010      	b.n	8000d1a <main+0x7a2>
				 {
					  f2u8_broll.array[i]=lora_rx_buffer[i+41];
 8000cf8:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8000cfc:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 8000d00:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8000d04:	4931      	ldr	r1, [pc, #196]	@ (8000dcc <main+0x854>)
 8000d06:	5c8a      	ldrb	r2, [r1, r2]
 8000d08:	3380      	adds	r3, #128	@ 0x80
 8000d0a:	443b      	add	r3, r7
 8000d0c:	f803 2c7c 	strb.w	r2, [r3, #-124]
				  for(uint8_t i=0;i<4;i++)
 8000d10:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8000d14:	3301      	adds	r3, #1
 8000d16:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 8000d1a:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8000d1e:	2b03      	cmp	r3, #3
 8000d20:	d9ea      	bls.n	8000cf8 <main+0x780>
				 }
					 boostroll=f2u8_broll.fVal;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a2e      	ldr	r2, [pc, #184]	@ (8000de0 <main+0x868>)
 8000d26:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_bpitch;
				  for(uint8_t i=0;i<4;i++)
 8000d28:	2300      	movs	r3, #0
 8000d2a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8000d2e:	e010      	b.n	8000d52 <main+0x7da>
				 {
					  f2u8_bpitch.array[i]=lora_rx_buffer[i+45];
 8000d30:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000d34:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
 8000d38:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000d3c:	4923      	ldr	r1, [pc, #140]	@ (8000dcc <main+0x854>)
 8000d3e:	5c8a      	ldrb	r2, [r1, r2]
 8000d40:	3380      	adds	r3, #128	@ 0x80
 8000d42:	443b      	add	r3, r7
 8000d44:	f803 2c80 	strb.w	r2, [r3, #-128]
				  for(uint8_t i=0;i<4;i++)
 8000d48:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8000d52:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000d56:	2b03      	cmp	r3, #3
 8000d58:	d9ea      	bls.n	8000d30 <main+0x7b8>
				 }
					 boostpitch=f2u8_bpitch.fVal;
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	4a21      	ldr	r2, [pc, #132]	@ (8000de4 <main+0x86c>)
 8000d5e:	6013      	str	r3, [r2, #0]

					 boostv4_battery=lora_rx_buffer[49];
 8000d60:	4b1a      	ldr	r3, [pc, #104]	@ (8000dcc <main+0x854>)
 8000d62:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 8000d66:	4b20      	ldr	r3, [pc, #128]	@ (8000de8 <main+0x870>)
 8000d68:	701a      	strb	r2, [r3, #0]
					 boostv4_mod=lora_rx_buffer[50];
 8000d6a:	4b18      	ldr	r3, [pc, #96]	@ (8000dcc <main+0x854>)
 8000d6c:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8000d70:	4b1e      	ldr	r3, [pc, #120]	@ (8000dec <main+0x874>)
 8000d72:	701a      	strb	r2, [r3, #0]
					 booststage_communication=lora_rx_buffer[51];
 8000d74:	4b15      	ldr	r3, [pc, #84]	@ (8000dcc <main+0x854>)
 8000d76:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 8000d7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000df0 <main+0x878>)
 8000d7c:	701a      	strb	r2, [r3, #0]


	  	  }

		  if(lora_rx_buffer[3]==3 && lora_rx_buffer[50]==0x33)
 8000d7e:	4b13      	ldr	r3, [pc, #76]	@ (8000dcc <main+0x854>)
 8000d80:	78db      	ldrb	r3, [r3, #3]
 8000d82:	2b03      	cmp	r3, #3
 8000d84:	d11c      	bne.n	8000dc0 <main+0x848>
 8000d86:	4b11      	ldr	r3, [pc, #68]	@ (8000dcc <main+0x854>)
 8000d88:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8000d8c:	2b33      	cmp	r3, #51	@ 0x33
 8000d8e:	d117      	bne.n	8000dc0 <main+0x848>
		  {

		  Payload.satsinview=lora_rx_buffer[4];
 8000d90:	4b0e      	ldr	r3, [pc, #56]	@ (8000dcc <main+0x854>)
 8000d92:	791a      	ldrb	r2, [r3, #4]
 8000d94:	4b17      	ldr	r3, [pc, #92]	@ (8000df4 <main+0x87c>)
 8000d96:	701a      	strb	r2, [r3, #0]

		  Payload_union_converter();
 8000d98:	f000 fb0a 	bl	80013b0 <Payload_union_converter>

		  Payload.battery=lora_rx_buffer[49];
 8000d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000dcc <main+0x854>)
 8000d9e:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 8000da2:	4b14      	ldr	r3, [pc, #80]	@ (8000df4 <main+0x87c>)
 8000da4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		  Payload.mod=lora_rx_buffer[50];
 8000da8:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <main+0x854>)
 8000daa:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8000dae:	4b11      	ldr	r3, [pc, #68]	@ (8000df4 <main+0x87c>)
 8000db0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		  Payload.communication=lora_rx_buffer[51];
 8000db4:	4b05      	ldr	r3, [pc, #20]	@ (8000dcc <main+0x854>)
 8000db6:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 8000dba:	4b0e      	ldr	r3, [pc, #56]	@ (8000df4 <main+0x87c>)
 8000dbc:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

		  }


	  tim1=HAL_GetTick();
 8000dc0:	f000 fee4 	bl	8001b8c <HAL_GetTick>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	4a0c      	ldr	r2, [pc, #48]	@ (8000df8 <main+0x880>)
 8000dc8:	6013      	str	r3, [r2, #0]
	  if(HAL_GetTick()-tim1>10)
 8000dca:	e401      	b.n	80005d0 <main+0x58>
 8000dcc:	200002fc 	.word	0x200002fc
 8000dd0:	200003ec 	.word	0x200003ec
 8000dd4:	200003f0 	.word	0x200003f0
 8000dd8:	200003f4 	.word	0x200003f4
 8000ddc:	200003f8 	.word	0x200003f8
 8000de0:	200003fc 	.word	0x200003fc
 8000de4:	20000400 	.word	0x20000400
 8000de8:	20000404 	.word	0x20000404
 8000dec:	20000405 	.word	0x20000405
 8000df0:	20000406 	.word	0x20000406
 8000df4:	20000408 	.word	0x20000408
 8000df8:	2000043c 	.word	0x2000043c

08000dfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b094      	sub	sp, #80	@ 0x50
 8000e00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e02:	f107 031c 	add.w	r3, r7, #28
 8000e06:	2234      	movs	r2, #52	@ 0x34
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f009 fcf4 	bl	800a7f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e10:	f107 0308 	add.w	r3, r7, #8
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e20:	2300      	movs	r3, #0
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	4b29      	ldr	r3, [pc, #164]	@ (8000ecc <SystemClock_Config+0xd0>)
 8000e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e28:	4a28      	ldr	r2, [pc, #160]	@ (8000ecc <SystemClock_Config+0xd0>)
 8000e2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e30:	4b26      	ldr	r3, [pc, #152]	@ (8000ecc <SystemClock_Config+0xd0>)
 8000e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	603b      	str	r3, [r7, #0]
 8000e40:	4b23      	ldr	r3, [pc, #140]	@ (8000ed0 <SystemClock_Config+0xd4>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a22      	ldr	r2, [pc, #136]	@ (8000ed0 <SystemClock_Config+0xd4>)
 8000e46:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e4a:	6013      	str	r3, [r2, #0]
 8000e4c:	4b20      	ldr	r3, [pc, #128]	@ (8000ed0 <SystemClock_Config+0xd4>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e54:	603b      	str	r3, [r7, #0]
 8000e56:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e5c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e60:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e62:	2302      	movs	r3, #2
 8000e64:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e66:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e6c:	2304      	movs	r3, #4
 8000e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e70:	23a8      	movs	r3, #168	@ 0xa8
 8000e72:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e74:	2302      	movs	r3, #2
 8000e76:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e78:	2307      	movs	r3, #7
 8000e7a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e80:	f107 031c 	add.w	r3, r7, #28
 8000e84:	4618      	mov	r0, r3
 8000e86:	f003 fef7 	bl	8004c78 <HAL_RCC_OscConfig>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e90:	f000 fba8 	bl	80015e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e94:	230f      	movs	r3, #15
 8000e96:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ea0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ea4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ea6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eaa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000eac:	f107 0308 	add.w	r3, r7, #8
 8000eb0:	2105      	movs	r1, #5
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f003 f86c 	bl	8003f90 <HAL_RCC_ClockConfig>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000ebe:	f000 fb91 	bl	80015e4 <Error_Handler>
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	3750      	adds	r7, #80	@ 0x50
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40007000 	.word	0x40007000

08000ed4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eda:	463b      	mov	r3, r7
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ee6:	4b21      	ldr	r3, [pc, #132]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000ee8:	4a21      	ldr	r2, [pc, #132]	@ (8000f70 <MX_ADC1_Init+0x9c>)
 8000eea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000eec:	4b1f      	ldr	r3, [pc, #124]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000eee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000ef2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ef4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000efa:	4b1c      	ldr	r3, [pc, #112]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f00:	4b1a      	ldr	r3, [pc, #104]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f06:	4b19      	ldr	r3, [pc, #100]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f0e:	4b17      	ldr	r3, [pc, #92]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f14:	4b15      	ldr	r3, [pc, #84]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f16:	4a17      	ldr	r2, [pc, #92]	@ (8000f74 <MX_ADC1_Init+0xa0>)
 8000f18:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f1a:	4b14      	ldr	r3, [pc, #80]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f20:	4b12      	ldr	r3, [pc, #72]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f26:	4b11      	ldr	r3, [pc, #68]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f34:	480d      	ldr	r0, [pc, #52]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f36:	f000 fe59 	bl	8001bec <HAL_ADC_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f40:	f000 fb50 	bl	80015e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000f44:	230c      	movs	r3, #12
 8000f46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f50:	463b      	mov	r3, r7
 8000f52:	4619      	mov	r1, r3
 8000f54:	4805      	ldr	r0, [pc, #20]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f56:	f000 fe8d 	bl	8001c74 <HAL_ADC_ConfigChannel>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f60:	f000 fb40 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f64:	bf00      	nop
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	2000013c 	.word	0x2000013c
 8000f70:	40012000 	.word	0x40012000
 8000f74:	0f000001 	.word	0x0f000001

08000f78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f7c:	4b12      	ldr	r3, [pc, #72]	@ (8000fc8 <MX_I2C1_Init+0x50>)
 8000f7e:	4a13      	ldr	r2, [pc, #76]	@ (8000fcc <MX_I2C1_Init+0x54>)
 8000f80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f82:	4b11      	ldr	r3, [pc, #68]	@ (8000fc8 <MX_I2C1_Init+0x50>)
 8000f84:	4a12      	ldr	r2, [pc, #72]	@ (8000fd0 <MX_I2C1_Init+0x58>)
 8000f86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f88:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc8 <MX_I2C1_Init+0x50>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc8 <MX_I2C1_Init+0x50>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f94:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc8 <MX_I2C1_Init+0x50>)
 8000f96:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc8 <MX_I2C1_Init+0x50>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fa2:	4b09      	ldr	r3, [pc, #36]	@ (8000fc8 <MX_I2C1_Init+0x50>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fa8:	4b07      	ldr	r3, [pc, #28]	@ (8000fc8 <MX_I2C1_Init+0x50>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fae:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <MX_I2C1_Init+0x50>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fb4:	4804      	ldr	r0, [pc, #16]	@ (8000fc8 <MX_I2C1_Init+0x50>)
 8000fb6:	f001 fbdd 	bl	8002774 <HAL_I2C_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fc0:	f000 fb10 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000184 	.word	0x20000184
 8000fcc:	40005400 	.word	0x40005400
 8000fd0:	000186a0 	.word	0x000186a0

08000fd4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fd8:	4b17      	ldr	r3, [pc, #92]	@ (8001038 <MX_SPI1_Init+0x64>)
 8000fda:	4a18      	ldr	r2, [pc, #96]	@ (800103c <MX_SPI1_Init+0x68>)
 8000fdc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fde:	4b16      	ldr	r3, [pc, #88]	@ (8001038 <MX_SPI1_Init+0x64>)
 8000fe0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000fe4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fe6:	4b14      	ldr	r3, [pc, #80]	@ (8001038 <MX_SPI1_Init+0x64>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fec:	4b12      	ldr	r3, [pc, #72]	@ (8001038 <MX_SPI1_Init+0x64>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ff2:	4b11      	ldr	r3, [pc, #68]	@ (8001038 <MX_SPI1_Init+0x64>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8001038 <MX_SPI1_Init+0x64>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8001038 <MX_SPI1_Init+0x64>)
 8001000:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001004:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001006:	4b0c      	ldr	r3, [pc, #48]	@ (8001038 <MX_SPI1_Init+0x64>)
 8001008:	2220      	movs	r2, #32
 800100a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800100c:	4b0a      	ldr	r3, [pc, #40]	@ (8001038 <MX_SPI1_Init+0x64>)
 800100e:	2200      	movs	r2, #0
 8001010:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001012:	4b09      	ldr	r3, [pc, #36]	@ (8001038 <MX_SPI1_Init+0x64>)
 8001014:	2200      	movs	r2, #0
 8001016:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001018:	4b07      	ldr	r3, [pc, #28]	@ (8001038 <MX_SPI1_Init+0x64>)
 800101a:	2200      	movs	r2, #0
 800101c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800101e:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <MX_SPI1_Init+0x64>)
 8001020:	220a      	movs	r2, #10
 8001022:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001024:	4804      	ldr	r0, [pc, #16]	@ (8001038 <MX_SPI1_Init+0x64>)
 8001026:	f004 f8c5 	bl	80051b4 <HAL_SPI_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001030:	f000 fad8 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	200001d8 	.word	0x200001d8
 800103c:	40013000 	.word	0x40013000

08001040 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001044:	4b11      	ldr	r3, [pc, #68]	@ (800108c <MX_UART4_Init+0x4c>)
 8001046:	4a12      	ldr	r2, [pc, #72]	@ (8001090 <MX_UART4_Init+0x50>)
 8001048:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800104a:	4b10      	ldr	r3, [pc, #64]	@ (800108c <MX_UART4_Init+0x4c>)
 800104c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001050:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001052:	4b0e      	ldr	r3, [pc, #56]	@ (800108c <MX_UART4_Init+0x4c>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001058:	4b0c      	ldr	r3, [pc, #48]	@ (800108c <MX_UART4_Init+0x4c>)
 800105a:	2200      	movs	r2, #0
 800105c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800105e:	4b0b      	ldr	r3, [pc, #44]	@ (800108c <MX_UART4_Init+0x4c>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001064:	4b09      	ldr	r3, [pc, #36]	@ (800108c <MX_UART4_Init+0x4c>)
 8001066:	220c      	movs	r2, #12
 8001068:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106a:	4b08      	ldr	r3, [pc, #32]	@ (800108c <MX_UART4_Init+0x4c>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001070:	4b06      	ldr	r3, [pc, #24]	@ (800108c <MX_UART4_Init+0x4c>)
 8001072:	2200      	movs	r2, #0
 8001074:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001076:	4805      	ldr	r0, [pc, #20]	@ (800108c <MX_UART4_Init+0x4c>)
 8001078:	f004 f925 	bl	80052c6 <HAL_UART_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001082:	f000 faaf 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000230 	.word	0x20000230
 8001090:	40004c00 	.word	0x40004c00

08001094 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001098:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <MX_USART2_UART_Init+0x4c>)
 800109a:	4a12      	ldr	r2, [pc, #72]	@ (80010e4 <MX_USART2_UART_Init+0x50>)
 800109c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800109e:	4b10      	ldr	r3, [pc, #64]	@ (80010e0 <MX_USART2_UART_Init+0x4c>)
 80010a0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80010a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010a6:	4b0e      	ldr	r3, [pc, #56]	@ (80010e0 <MX_USART2_UART_Init+0x4c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010ac:	4b0c      	ldr	r3, [pc, #48]	@ (80010e0 <MX_USART2_UART_Init+0x4c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010b2:	4b0b      	ldr	r3, [pc, #44]	@ (80010e0 <MX_USART2_UART_Init+0x4c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010b8:	4b09      	ldr	r3, [pc, #36]	@ (80010e0 <MX_USART2_UART_Init+0x4c>)
 80010ba:	220c      	movs	r2, #12
 80010bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010be:	4b08      	ldr	r3, [pc, #32]	@ (80010e0 <MX_USART2_UART_Init+0x4c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c4:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <MX_USART2_UART_Init+0x4c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010ca:	4805      	ldr	r0, [pc, #20]	@ (80010e0 <MX_USART2_UART_Init+0x4c>)
 80010cc:	f004 f8fb 	bl	80052c6 <HAL_UART_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010d6:	f000 fa85 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000274 	.word	0x20000274
 80010e4:	40004400 	.word	0x40004400

080010e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010ec:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <MX_USART3_UART_Init+0x4c>)
 80010ee:	4a12      	ldr	r2, [pc, #72]	@ (8001138 <MX_USART3_UART_Init+0x50>)
 80010f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80010f2:	4b10      	ldr	r3, [pc, #64]	@ (8001134 <MX_USART3_UART_Init+0x4c>)
 80010f4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80010f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001134 <MX_USART3_UART_Init+0x4c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001100:	4b0c      	ldr	r3, [pc, #48]	@ (8001134 <MX_USART3_UART_Init+0x4c>)
 8001102:	2200      	movs	r2, #0
 8001104:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001106:	4b0b      	ldr	r3, [pc, #44]	@ (8001134 <MX_USART3_UART_Init+0x4c>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800110c:	4b09      	ldr	r3, [pc, #36]	@ (8001134 <MX_USART3_UART_Init+0x4c>)
 800110e:	220c      	movs	r2, #12
 8001110:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001112:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <MX_USART3_UART_Init+0x4c>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001118:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <MX_USART3_UART_Init+0x4c>)
 800111a:	2200      	movs	r2, #0
 800111c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800111e:	4805      	ldr	r0, [pc, #20]	@ (8001134 <MX_USART3_UART_Init+0x4c>)
 8001120:	f004 f8d1 	bl	80052c6 <HAL_UART_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800112a:	f000 fa5b 	bl	80015e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	200002b8 	.word	0x200002b8
 8001138:	40004800 	.word	0x40004800

0800113c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	@ 0x28
 8001140:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
 8001150:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
 8001156:	4b4c      	ldr	r3, [pc, #304]	@ (8001288 <MX_GPIO_Init+0x14c>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	4a4b      	ldr	r2, [pc, #300]	@ (8001288 <MX_GPIO_Init+0x14c>)
 800115c:	f043 0304 	orr.w	r3, r3, #4
 8001160:	6313      	str	r3, [r2, #48]	@ 0x30
 8001162:	4b49      	ldr	r3, [pc, #292]	@ (8001288 <MX_GPIO_Init+0x14c>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	4b45      	ldr	r3, [pc, #276]	@ (8001288 <MX_GPIO_Init+0x14c>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	4a44      	ldr	r2, [pc, #272]	@ (8001288 <MX_GPIO_Init+0x14c>)
 8001178:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800117c:	6313      	str	r3, [r2, #48]	@ 0x30
 800117e:	4b42      	ldr	r3, [pc, #264]	@ (8001288 <MX_GPIO_Init+0x14c>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	4b3e      	ldr	r3, [pc, #248]	@ (8001288 <MX_GPIO_Init+0x14c>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001192:	4a3d      	ldr	r2, [pc, #244]	@ (8001288 <MX_GPIO_Init+0x14c>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6313      	str	r3, [r2, #48]	@ 0x30
 800119a:	4b3b      	ldr	r3, [pc, #236]	@ (8001288 <MX_GPIO_Init+0x14c>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	4b37      	ldr	r3, [pc, #220]	@ (8001288 <MX_GPIO_Init+0x14c>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ae:	4a36      	ldr	r2, [pc, #216]	@ (8001288 <MX_GPIO_Init+0x14c>)
 80011b0:	f043 0302 	orr.w	r3, r3, #2
 80011b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b6:	4b34      	ldr	r3, [pc, #208]	@ (8001288 <MX_GPIO_Init+0x14c>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|BUZZER_Pin|GATE_D_Pin|GATE_C_Pin, GPIO_PIN_RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	f640 4112 	movw	r1, #3090	@ 0xc12
 80011c8:	4830      	ldr	r0, [pc, #192]	@ (800128c <MX_GPIO_Init+0x150>)
 80011ca:	f001 fab9 	bl	8002740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M0_Pin|M1_Pin|FN_Pin|LED2_Pin
 80011ce:	2200      	movs	r2, #0
 80011d0:	f246 011f 	movw	r1, #24607	@ 0x601f
 80011d4:	482e      	ldr	r0, [pc, #184]	@ (8001290 <MX_GPIO_Init+0x154>)
 80011d6:	f001 fab3 	bl	8002740 <HAL_GPIO_WritePin>
                          |LED1_Pin|GATE_B_Pin|GATE_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80011da:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80011de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	4619      	mov	r1, r3
 80011ee:	4827      	ldr	r0, [pc, #156]	@ (800128c <MX_GPIO_Init+0x150>)
 80011f0:	f001 f912 	bl	8002418 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin BUZZER_Pin GATE_D_Pin GATE_C_Pin */
  GPIO_InitStruct.Pin = CS_Pin|BUZZER_Pin|GATE_D_Pin|GATE_C_Pin;
 80011f4:	f640 4312 	movw	r3, #3090	@ 0xc12
 80011f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fa:	2301      	movs	r3, #1
 80011fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	4619      	mov	r1, r3
 800120c:	481f      	ldr	r0, [pc, #124]	@ (800128c <MX_GPIO_Init+0x150>)
 800120e:	f001 f903 	bl	8002418 <HAL_GPIO_Init>

  /*Configure GPIO pins : M0_Pin M1_Pin FN_Pin LED2_Pin
                           LED1_Pin GATE_B_Pin GATE_A_Pin */
  GPIO_InitStruct.Pin = M0_Pin|M1_Pin|FN_Pin|LED2_Pin
 8001212:	f246 031f 	movw	r3, #24607	@ 0x601f
 8001216:	617b      	str	r3, [r7, #20]
                          |LED1_Pin|GATE_B_Pin|GATE_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001218:	2301      	movs	r3, #1
 800121a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	2300      	movs	r3, #0
 8001222:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4619      	mov	r1, r3
 800122a:	4819      	ldr	r0, [pc, #100]	@ (8001290 <MX_GPIO_Init+0x154>)
 800122c:	f001 f8f4 	bl	8002418 <HAL_GPIO_Init>

  /*Configure GPIO pin : SECINP_Pin */
  GPIO_InitStruct.Pin = SECINP_Pin;
 8001230:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001234:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001236:	2300      	movs	r3, #0
 8001238:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800123a:	2301      	movs	r3, #1
 800123c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SECINP_GPIO_Port, &GPIO_InitStruct);
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	4619      	mov	r1, r3
 8001244:	4812      	ldr	r0, [pc, #72]	@ (8001290 <MX_GPIO_Init+0x154>)
 8001246:	f001 f8e7 	bl	8002418 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800124a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800124e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001250:	2300      	movs	r3, #0
 8001252:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001254:	2301      	movs	r3, #1
 8001256:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	4619      	mov	r1, r3
 800125e:	480b      	ldr	r0, [pc, #44]	@ (800128c <MX_GPIO_Init+0x150>)
 8001260:	f001 f8da 	bl	8002418 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|INT2_Pin;
 8001264:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001268:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800126a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800126e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	4619      	mov	r1, r3
 800127a:	4805      	ldr	r0, [pc, #20]	@ (8001290 <MX_GPIO_Init+0x154>)
 800127c:	f001 f8cc 	bl	8002418 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001280:	bf00      	nop
 8001282:	3728      	adds	r7, #40	@ 0x28
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40023800 	.word	0x40023800
 800128c:	40020800 	.word	0x40020800
 8001290:	40020400 	.word	0x40020400

08001294 <E220_CONFIG>:

/* USER CODE BEGIN 4 */
void E220_CONFIG(uint8_t ADDH, uint8_t ADDL, uint8_t CHN, uint8_t MODE)
{
 8001294:	b590      	push	{r4, r7, lr}
 8001296:	b087      	sub	sp, #28
 8001298:	af00      	add	r7, sp, #0
 800129a:	4604      	mov	r4, r0
 800129c:	4608      	mov	r0, r1
 800129e:	4611      	mov	r1, r2
 80012a0:	461a      	mov	r2, r3
 80012a2:	4623      	mov	r3, r4
 80012a4:	71fb      	strb	r3, [r7, #7]
 80012a6:	4603      	mov	r3, r0
 80012a8:	71bb      	strb	r3, [r7, #6]
 80012aa:	460b      	mov	r3, r1
 80012ac:	717b      	strb	r3, [r7, #5]
 80012ae:	4613      	mov	r3, r2
 80012b0:	713b      	strb	r3, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, SET);
 80012b2:	2201      	movs	r2, #1
 80012b4:	2104      	movs	r1, #4
 80012b6:	4824      	ldr	r0, [pc, #144]	@ (8001348 <E220_CONFIG+0xb4>)
 80012b8:	f001 fa42 	bl	8002740 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 80012bc:	2201      	movs	r2, #1
 80012be:	2102      	movs	r1, #2
 80012c0:	4821      	ldr	r0, [pc, #132]	@ (8001348 <E220_CONFIG+0xb4>)
 80012c2:	f001 fa3d 	bl	8002740 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 80012c6:	2032      	movs	r0, #50	@ 0x32
 80012c8:	f000 fc6c 	bl	8001ba4 <HAL_Delay>

    char cfg_buff[8] = {0}; // E220 için 8 elemanlı bir dizi kullanıyoruz
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	2300      	movs	r3, #0
 80012d2:	613b      	str	r3, [r7, #16]
    enum {Transparent, Fixed} mode;
    mode = MODE;
 80012d4:	793b      	ldrb	r3, [r7, #4]
 80012d6:	75fb      	strb	r3, [r7, #23]

    cfg_buff[0] = ADDH;
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	733b      	strb	r3, [r7, #12]
    cfg_buff[1] = ADDL;
 80012dc:	79bb      	ldrb	r3, [r7, #6]
 80012de:	737b      	strb	r3, [r7, #13]
    cfg_buff[2] = 0x62;
 80012e0:	2362      	movs	r3, #98	@ 0x62
 80012e2:	73bb      	strb	r3, [r7, #14]
    cfg_buff[3] = 0x00;
 80012e4:	2300      	movs	r3, #0
 80012e6:	73fb      	strb	r3, [r7, #15]
    cfg_buff[4] = CHN;
 80012e8:	797b      	ldrb	r3, [r7, #5]
 80012ea:	743b      	strb	r3, [r7, #16]

    switch(mode){
 80012ec:	7dfb      	ldrb	r3, [r7, #23]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d002      	beq.n	80012f8 <E220_CONFIG+0x64>
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d003      	beq.n	80012fe <E220_CONFIG+0x6a>
 80012f6:	e005      	b.n	8001304 <E220_CONFIG+0x70>
        case Transparent:
            cfg_buff[5] = 0x00;  // opsiyon
 80012f8:	2300      	movs	r3, #0
 80012fa:	747b      	strb	r3, [r7, #17]
            break;
 80012fc:	e004      	b.n	8001308 <E220_CONFIG+0x74>
        case Fixed:
            cfg_buff[5] = 0x11;
 80012fe:	2311      	movs	r3, #17
 8001300:	747b      	strb	r3, [r7, #17]
            break;
 8001302:	e001      	b.n	8001308 <E220_CONFIG+0x74>
        default:
            cfg_buff[5] = 0x11;
 8001304:	2311      	movs	r3, #17
 8001306:	747b      	strb	r3, [r7, #17]
     }

     cfg_buff[6] = 0x00;
 8001308:	2300      	movs	r3, #0
 800130a:	74bb      	strb	r3, [r7, #18]
     cfg_buff[7] = 0x00;
 800130c:	2300      	movs	r3, #0
 800130e:	74fb      	strb	r3, [r7, #19]


    HAL_UART_Transmit(&huart3, (uint8_t*) cfg_buff, 8, 1000);
 8001310:	f107 010c 	add.w	r1, r7, #12
 8001314:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001318:	2208      	movs	r2, #8
 800131a:	480c      	ldr	r0, [pc, #48]	@ (800134c <E220_CONFIG+0xb8>)
 800131c:	f004 f820 	bl	8005360 <HAL_UART_Transmit>

    HAL_Delay(25);
 8001320:	2019      	movs	r0, #25
 8001322:	f000 fc3f 	bl	8001ba4 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	2104      	movs	r1, #4
 800132a:	4807      	ldr	r0, [pc, #28]	@ (8001348 <E220_CONFIG+0xb4>)
 800132c:	f001 fa08 	bl	8002740 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 8001330:	2200      	movs	r2, #0
 8001332:	2102      	movs	r1, #2
 8001334:	4804      	ldr	r0, [pc, #16]	@ (8001348 <E220_CONFIG+0xb4>)
 8001336:	f001 fa03 	bl	8002740 <HAL_GPIO_WritePin>
    HAL_Delay(25);
 800133a:	2019      	movs	r0, #25
 800133c:	f000 fc32 	bl	8001ba4 <HAL_Delay>
}
 8001340:	bf00      	nop
 8001342:	371c      	adds	r7, #28
 8001344:	46bd      	mov	sp, r7
 8001346:	bd90      	pop	{r4, r7, pc}
 8001348:	40020400 	.word	0x40020400
 800134c:	200002b8 	.word	0x200002b8

08001350 <HYI_BUFFER_Fill>:
	HAL_UART_Transmit(&huart4, Cmd_End, 3, 100);
	free(buffer);
}

void HYI_BUFFER_Fill()
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
	HYI_BUFFER[0] =0xFF;
 8001354:	4b13      	ldr	r3, [pc, #76]	@ (80013a4 <HYI_BUFFER_Fill+0x54>)
 8001356:	22ff      	movs	r2, #255	@ 0xff
 8001358:	701a      	strb	r2, [r3, #0]
	HYI_BUFFER[1] =0xFF;
 800135a:	4b12      	ldr	r3, [pc, #72]	@ (80013a4 <HYI_BUFFER_Fill+0x54>)
 800135c:	22ff      	movs	r2, #255	@ 0xff
 800135e:	705a      	strb	r2, [r3, #1]
	HYI_BUFFER[3] =0x54;
 8001360:	4b10      	ldr	r3, [pc, #64]	@ (80013a4 <HYI_BUFFER_Fill+0x54>)
 8001362:	2254      	movs	r2, #84	@ 0x54
 8001364:	70da      	strb	r2, [r3, #3]
	HYI_BUFFER[4] =TAKIM_ID;
 8001366:	4b0f      	ldr	r3, [pc, #60]	@ (80013a4 <HYI_BUFFER_Fill+0x54>)
 8001368:	2200      	movs	r2, #0
 800136a:	711a      	strb	r2, [r3, #4]
	HYI_BUFFER[5] =takim_sayac;
 800136c:	4b0e      	ldr	r3, [pc, #56]	@ (80013a8 <HYI_BUFFER_Fill+0x58>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4b0c      	ldr	r3, [pc, #48]	@ (80013a4 <HYI_BUFFER_Fill+0x54>)
 8001374:	715a      	strb	r2, [r3, #5]
	HYI_BUFFER[74]= EGU_AYRILMA_TESPIT;
 8001376:	4b0d      	ldr	r3, [pc, #52]	@ (80013ac <HYI_BUFFER_Fill+0x5c>)
 8001378:	781a      	ldrb	r2, [r3, #0]
 800137a:	4b0a      	ldr	r3, [pc, #40]	@ (80013a4 <HYI_BUFFER_Fill+0x54>)
 800137c:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
	HYI_BUFFER[75]= 0; // CRC
 8001380:	4b08      	ldr	r3, [pc, #32]	@ (80013a4 <HYI_BUFFER_Fill+0x54>)
 8001382:	2200      	movs	r2, #0
 8001384:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
	HYI_BUFFER[76]= 0x0D;
 8001388:	4b06      	ldr	r3, [pc, #24]	@ (80013a4 <HYI_BUFFER_Fill+0x54>)
 800138a:	220d      	movs	r2, #13
 800138c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
	HYI_BUFFER[77]= 0x0A;
 8001390:	4b04      	ldr	r3, [pc, #16]	@ (80013a4 <HYI_BUFFER_Fill+0x54>)
 8001392:	220a      	movs	r2, #10
 8001394:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d



}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	20000344 	.word	0x20000344
 80013a8:	20000440 	.word	0x20000440
 80013ac:	200003c4 	.word	0x200003c4

080013b0 <Payload_union_converter>:
void Payload_union_converter(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
	 float2unit8 f2u8;
			 for(uint8_t i=0;i<4;i++)
 80013b6:	2300      	movs	r3, #0
 80013b8:	73fb      	strb	r3, [r7, #15]
 80013ba:	e013      	b.n	80013e4 <Payload_union_converter+0x34>
			 {
				 f2u8.array[i]=lora_rx_buffer[i+5];
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	1d5a      	adds	r2, r3, #5
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	4985      	ldr	r1, [pc, #532]	@ (80015d8 <Payload_union_converter+0x228>)
 80013c4:	5c8a      	ldrb	r2, [r1, r2]
 80013c6:	3310      	adds	r3, #16
 80013c8:	443b      	add	r3, r7
 80013ca:	f803 2c10 	strb.w	r2, [r3, #-16]
				 HYI_BUFFER[34+i]=lora_rx_buffer[i+5]; // 34 35 36 37
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
 80013d0:	1d5a      	adds	r2, r3, #5
 80013d2:	7bfb      	ldrb	r3, [r7, #15]
 80013d4:	3322      	adds	r3, #34	@ 0x22
 80013d6:	4980      	ldr	r1, [pc, #512]	@ (80015d8 <Payload_union_converter+0x228>)
 80013d8:	5c89      	ldrb	r1, [r1, r2]
 80013da:	4a80      	ldr	r2, [pc, #512]	@ (80015dc <Payload_union_converter+0x22c>)
 80013dc:	54d1      	strb	r1, [r2, r3]
			 for(uint8_t i=0;i<4;i++)
 80013de:	7bfb      	ldrb	r3, [r7, #15]
 80013e0:	3301      	adds	r3, #1
 80013e2:	73fb      	strb	r3, [r7, #15]
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
 80013e6:	2b03      	cmp	r3, #3
 80013e8:	d9e8      	bls.n	80013bc <Payload_union_converter+0xc>
			 }
			 Payload.gpsaltitude=f2u8.fVal;
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	4a7c      	ldr	r2, [pc, #496]	@ (80015e0 <Payload_union_converter+0x230>)
 80013ee:	6053      	str	r3, [r2, #4]


			 for(uint8_t i=0;i<4;i++)
 80013f0:	2300      	movs	r3, #0
 80013f2:	73bb      	strb	r3, [r7, #14]
 80013f4:	e015      	b.n	8001422 <Payload_union_converter+0x72>
			 {
				 f2u8.array[i]=lora_rx_buffer[i+9];
 80013f6:	7bbb      	ldrb	r3, [r7, #14]
 80013f8:	f103 0209 	add.w	r2, r3, #9
 80013fc:	7bbb      	ldrb	r3, [r7, #14]
 80013fe:	4976      	ldr	r1, [pc, #472]	@ (80015d8 <Payload_union_converter+0x228>)
 8001400:	5c8a      	ldrb	r2, [r1, r2]
 8001402:	3310      	adds	r3, #16
 8001404:	443b      	add	r3, r7
 8001406:	f803 2c10 	strb.w	r2, [r3, #-16]
				 HYI_BUFFER[38+i]=lora_rx_buffer[i+9]; // 38 39 40 41
 800140a:	7bbb      	ldrb	r3, [r7, #14]
 800140c:	f103 0209 	add.w	r2, r3, #9
 8001410:	7bbb      	ldrb	r3, [r7, #14]
 8001412:	3326      	adds	r3, #38	@ 0x26
 8001414:	4970      	ldr	r1, [pc, #448]	@ (80015d8 <Payload_union_converter+0x228>)
 8001416:	5c89      	ldrb	r1, [r1, r2]
 8001418:	4a70      	ldr	r2, [pc, #448]	@ (80015dc <Payload_union_converter+0x22c>)
 800141a:	54d1      	strb	r1, [r2, r3]
			 for(uint8_t i=0;i<4;i++)
 800141c:	7bbb      	ldrb	r3, [r7, #14]
 800141e:	3301      	adds	r3, #1
 8001420:	73bb      	strb	r3, [r7, #14]
 8001422:	7bbb      	ldrb	r3, [r7, #14]
 8001424:	2b03      	cmp	r3, #3
 8001426:	d9e6      	bls.n	80013f6 <Payload_union_converter+0x46>
			 }
			 Payload.gpslatitude=f2u8.fVal;
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	4a6d      	ldr	r2, [pc, #436]	@ (80015e0 <Payload_union_converter+0x230>)
 800142c:	6093      	str	r3, [r2, #8]

			 for(uint8_t i=0;i<4;i++)
 800142e:	2300      	movs	r3, #0
 8001430:	737b      	strb	r3, [r7, #13]
 8001432:	e015      	b.n	8001460 <Payload_union_converter+0xb0>
			 {
				 f2u8.array[i]=lora_rx_buffer[i+13];
 8001434:	7b7b      	ldrb	r3, [r7, #13]
 8001436:	f103 020d 	add.w	r2, r3, #13
 800143a:	7b7b      	ldrb	r3, [r7, #13]
 800143c:	4966      	ldr	r1, [pc, #408]	@ (80015d8 <Payload_union_converter+0x228>)
 800143e:	5c8a      	ldrb	r2, [r1, r2]
 8001440:	3310      	adds	r3, #16
 8001442:	443b      	add	r3, r7
 8001444:	f803 2c10 	strb.w	r2, [r3, #-16]
				 HYI_BUFFER[42+i]=lora_rx_buffer[i+13]; // 42 43 44 45
 8001448:	7b7b      	ldrb	r3, [r7, #13]
 800144a:	f103 020d 	add.w	r2, r3, #13
 800144e:	7b7b      	ldrb	r3, [r7, #13]
 8001450:	332a      	adds	r3, #42	@ 0x2a
 8001452:	4961      	ldr	r1, [pc, #388]	@ (80015d8 <Payload_union_converter+0x228>)
 8001454:	5c89      	ldrb	r1, [r1, r2]
 8001456:	4a61      	ldr	r2, [pc, #388]	@ (80015dc <Payload_union_converter+0x22c>)
 8001458:	54d1      	strb	r1, [r2, r3]
			 for(uint8_t i=0;i<4;i++)
 800145a:	7b7b      	ldrb	r3, [r7, #13]
 800145c:	3301      	adds	r3, #1
 800145e:	737b      	strb	r3, [r7, #13]
 8001460:	7b7b      	ldrb	r3, [r7, #13]
 8001462:	2b03      	cmp	r3, #3
 8001464:	d9e6      	bls.n	8001434 <Payload_union_converter+0x84>
			 }
			 Payload.gpslongitude=f2u8.fVal;
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	4a5d      	ldr	r2, [pc, #372]	@ (80015e0 <Payload_union_converter+0x230>)
 800146a:	60d3      	str	r3, [r2, #12]

			 for(uint8_t i=0;i<4;i++)
 800146c:	2300      	movs	r3, #0
 800146e:	733b      	strb	r3, [r7, #12]
 8001470:	e00c      	b.n	800148c <Payload_union_converter+0xdc>
			 {
				 f2u8.array[i]=lora_rx_buffer[i+17];
 8001472:	7b3b      	ldrb	r3, [r7, #12]
 8001474:	f103 0211 	add.w	r2, r3, #17
 8001478:	7b3b      	ldrb	r3, [r7, #12]
 800147a:	4957      	ldr	r1, [pc, #348]	@ (80015d8 <Payload_union_converter+0x228>)
 800147c:	5c8a      	ldrb	r2, [r1, r2]
 800147e:	3310      	adds	r3, #16
 8001480:	443b      	add	r3, r7
 8001482:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 8001486:	7b3b      	ldrb	r3, [r7, #12]
 8001488:	3301      	adds	r3, #1
 800148a:	733b      	strb	r3, [r7, #12]
 800148c:	7b3b      	ldrb	r3, [r7, #12]
 800148e:	2b03      	cmp	r3, #3
 8001490:	d9ef      	bls.n	8001472 <Payload_union_converter+0xc2>
			 }
			 Payload.altitude=f2u8.fVal;
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	4a52      	ldr	r2, [pc, #328]	@ (80015e0 <Payload_union_converter+0x230>)
 8001496:	6153      	str	r3, [r2, #20]


			 for(uint8_t i=0;i<4;i++)
 8001498:	2300      	movs	r3, #0
 800149a:	72fb      	strb	r3, [r7, #11]
 800149c:	e00c      	b.n	80014b8 <Payload_union_converter+0x108>
			 {
				 f2u8.array[i]=lora_rx_buffer[i+21];
 800149e:	7afb      	ldrb	r3, [r7, #11]
 80014a0:	f103 0215 	add.w	r2, r3, #21
 80014a4:	7afb      	ldrb	r3, [r7, #11]
 80014a6:	494c      	ldr	r1, [pc, #304]	@ (80015d8 <Payload_union_converter+0x228>)
 80014a8:	5c8a      	ldrb	r2, [r1, r2]
 80014aa:	3310      	adds	r3, #16
 80014ac:	443b      	add	r3, r7
 80014ae:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 80014b2:	7afb      	ldrb	r3, [r7, #11]
 80014b4:	3301      	adds	r3, #1
 80014b6:	72fb      	strb	r3, [r7, #11]
 80014b8:	7afb      	ldrb	r3, [r7, #11]
 80014ba:	2b03      	cmp	r3, #3
 80014bc:	d9ef      	bls.n	800149e <Payload_union_converter+0xee>
			 }
			 Payload.speed=f2u8.fVal;
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	4a47      	ldr	r2, [pc, #284]	@ (80015e0 <Payload_union_converter+0x230>)
 80014c2:	6113      	str	r3, [r2, #16]


			 for(uint8_t i=0;i<4;i++)
 80014c4:	2300      	movs	r3, #0
 80014c6:	72bb      	strb	r3, [r7, #10]
 80014c8:	e00c      	b.n	80014e4 <Payload_union_converter+0x134>
			 {
				 f2u8.array[i]=lora_rx_buffer[i+25];
 80014ca:	7abb      	ldrb	r3, [r7, #10]
 80014cc:	f103 0219 	add.w	r2, r3, #25
 80014d0:	7abb      	ldrb	r3, [r7, #10]
 80014d2:	4941      	ldr	r1, [pc, #260]	@ (80015d8 <Payload_union_converter+0x228>)
 80014d4:	5c8a      	ldrb	r2, [r1, r2]
 80014d6:	3310      	adds	r3, #16
 80014d8:	443b      	add	r3, r7
 80014da:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 80014de:	7abb      	ldrb	r3, [r7, #10]
 80014e0:	3301      	adds	r3, #1
 80014e2:	72bb      	strb	r3, [r7, #10]
 80014e4:	7abb      	ldrb	r3, [r7, #10]
 80014e6:	2b03      	cmp	r3, #3
 80014e8:	d9ef      	bls.n	80014ca <Payload_union_converter+0x11a>
			 }
			 Payload.temperature=f2u8.fVal;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	4a3c      	ldr	r2, [pc, #240]	@ (80015e0 <Payload_union_converter+0x230>)
 80014ee:	6193      	str	r3, [r2, #24]


			 for(uint8_t i=0;i<4;i++)
 80014f0:	2300      	movs	r3, #0
 80014f2:	727b      	strb	r3, [r7, #9]
 80014f4:	e00c      	b.n	8001510 <Payload_union_converter+0x160>
			 {
				 f2u8.array[i]=lora_rx_buffer[i+29];
 80014f6:	7a7b      	ldrb	r3, [r7, #9]
 80014f8:	f103 021d 	add.w	r2, r3, #29
 80014fc:	7a7b      	ldrb	r3, [r7, #9]
 80014fe:	4936      	ldr	r1, [pc, #216]	@ (80015d8 <Payload_union_converter+0x228>)
 8001500:	5c8a      	ldrb	r2, [r1, r2]
 8001502:	3310      	adds	r3, #16
 8001504:	443b      	add	r3, r7
 8001506:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 800150a:	7a7b      	ldrb	r3, [r7, #9]
 800150c:	3301      	adds	r3, #1
 800150e:	727b      	strb	r3, [r7, #9]
 8001510:	7a7b      	ldrb	r3, [r7, #9]
 8001512:	2b03      	cmp	r3, #3
 8001514:	d9ef      	bls.n	80014f6 <Payload_union_converter+0x146>
			 }
			 Payload.accx=f2u8.fVal;
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	4a31      	ldr	r2, [pc, #196]	@ (80015e0 <Payload_union_converter+0x230>)
 800151a:	61d3      	str	r3, [r2, #28]


			 for(uint8_t i=0;i<4;i++)
 800151c:	2300      	movs	r3, #0
 800151e:	723b      	strb	r3, [r7, #8]
 8001520:	e00c      	b.n	800153c <Payload_union_converter+0x18c>
			 {
				 f2u8.array[i]=lora_rx_buffer[i+33];
 8001522:	7a3b      	ldrb	r3, [r7, #8]
 8001524:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 8001528:	7a3b      	ldrb	r3, [r7, #8]
 800152a:	492b      	ldr	r1, [pc, #172]	@ (80015d8 <Payload_union_converter+0x228>)
 800152c:	5c8a      	ldrb	r2, [r1, r2]
 800152e:	3310      	adds	r3, #16
 8001530:	443b      	add	r3, r7
 8001532:	f803 2c10 	strb.w	r2, [r3, #-16]
			 for(uint8_t i=0;i<4;i++)
 8001536:	7a3b      	ldrb	r3, [r7, #8]
 8001538:	3301      	adds	r3, #1
 800153a:	723b      	strb	r3, [r7, #8]
 800153c:	7a3b      	ldrb	r3, [r7, #8]
 800153e:	2b03      	cmp	r3, #3
 8001540:	d9ef      	bls.n	8001522 <Payload_union_converter+0x172>
			 }
			 Payload.accy=f2u8.fVal;
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	4a26      	ldr	r2, [pc, #152]	@ (80015e0 <Payload_union_converter+0x230>)
 8001546:	6213      	str	r3, [r2, #32]


		      for(uint8_t i=0;i<4;i++)
 8001548:	2300      	movs	r3, #0
 800154a:	71fb      	strb	r3, [r7, #7]
 800154c:	e00c      	b.n	8001568 <Payload_union_converter+0x1b8>
			 {
		    	  f2u8.array[i]=lora_rx_buffer[i+37];
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	f103 0225 	add.w	r2, r3, #37	@ 0x25
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	4920      	ldr	r1, [pc, #128]	@ (80015d8 <Payload_union_converter+0x228>)
 8001558:	5c8a      	ldrb	r2, [r1, r2]
 800155a:	3310      	adds	r3, #16
 800155c:	443b      	add	r3, r7
 800155e:	f803 2c10 	strb.w	r2, [r3, #-16]
		      for(uint8_t i=0;i<4;i++)
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	3301      	adds	r3, #1
 8001566:	71fb      	strb	r3, [r7, #7]
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	2b03      	cmp	r3, #3
 800156c:	d9ef      	bls.n	800154e <Payload_union_converter+0x19e>
			 }
		      Payload.accz=f2u8.fVal;
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	4a1b      	ldr	r2, [pc, #108]	@ (80015e0 <Payload_union_converter+0x230>)
 8001572:	6253      	str	r3, [r2, #36]	@ 0x24


			  for(uint8_t i=0;i<4;i++)
 8001574:	2300      	movs	r3, #0
 8001576:	71bb      	strb	r3, [r7, #6]
 8001578:	e00c      	b.n	8001594 <Payload_union_converter+0x1e4>
			 {
				  f2u8.array[i]=lora_rx_buffer[i+41];
 800157a:	79bb      	ldrb	r3, [r7, #6]
 800157c:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 8001580:	79bb      	ldrb	r3, [r7, #6]
 8001582:	4915      	ldr	r1, [pc, #84]	@ (80015d8 <Payload_union_converter+0x228>)
 8001584:	5c8a      	ldrb	r2, [r1, r2]
 8001586:	3310      	adds	r3, #16
 8001588:	443b      	add	r3, r7
 800158a:	f803 2c10 	strb.w	r2, [r3, #-16]
			  for(uint8_t i=0;i<4;i++)
 800158e:	79bb      	ldrb	r3, [r7, #6]
 8001590:	3301      	adds	r3, #1
 8001592:	71bb      	strb	r3, [r7, #6]
 8001594:	79bb      	ldrb	r3, [r7, #6]
 8001596:	2b03      	cmp	r3, #3
 8001598:	d9ef      	bls.n	800157a <Payload_union_converter+0x1ca>
			 }
			  Payload.roll=f2u8.fVal;
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	4a10      	ldr	r2, [pc, #64]	@ (80015e0 <Payload_union_converter+0x230>)
 800159e:	6293      	str	r3, [r2, #40]	@ 0x28


			  for(uint8_t i=0;i<4;i++)
 80015a0:	2300      	movs	r3, #0
 80015a2:	717b      	strb	r3, [r7, #5]
 80015a4:	e00c      	b.n	80015c0 <Payload_union_converter+0x210>
			 {
				  f2u8.array[i]=lora_rx_buffer[i+45];
 80015a6:	797b      	ldrb	r3, [r7, #5]
 80015a8:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
 80015ac:	797b      	ldrb	r3, [r7, #5]
 80015ae:	490a      	ldr	r1, [pc, #40]	@ (80015d8 <Payload_union_converter+0x228>)
 80015b0:	5c8a      	ldrb	r2, [r1, r2]
 80015b2:	3310      	adds	r3, #16
 80015b4:	443b      	add	r3, r7
 80015b6:	f803 2c10 	strb.w	r2, [r3, #-16]
			  for(uint8_t i=0;i<4;i++)
 80015ba:	797b      	ldrb	r3, [r7, #5]
 80015bc:	3301      	adds	r3, #1
 80015be:	717b      	strb	r3, [r7, #5]
 80015c0:	797b      	ldrb	r3, [r7, #5]
 80015c2:	2b03      	cmp	r3, #3
 80015c4:	d9ef      	bls.n	80015a6 <Payload_union_converter+0x1f6>
			 }
			  Payload.pitch=f2u8.fVal;
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	4a05      	ldr	r2, [pc, #20]	@ (80015e0 <Payload_union_converter+0x230>)
 80015ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 80015cc:	bf00      	nop
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	200002fc 	.word	0x200002fc
 80015dc:	20000344 	.word	0x20000344
 80015e0:	20000408 	.word	0x20000408

080015e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e8:	b672      	cpsid	i
}
 80015ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015ec:	bf00      	nop
 80015ee:	e7fd      	b.n	80015ec <Error_Handler+0x8>

080015f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	607b      	str	r3, [r7, #4]
 80015fa:	4b10      	ldr	r3, [pc, #64]	@ (800163c <HAL_MspInit+0x4c>)
 80015fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fe:	4a0f      	ldr	r2, [pc, #60]	@ (800163c <HAL_MspInit+0x4c>)
 8001600:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001604:	6453      	str	r3, [r2, #68]	@ 0x44
 8001606:	4b0d      	ldr	r3, [pc, #52]	@ (800163c <HAL_MspInit+0x4c>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800160e:	607b      	str	r3, [r7, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	603b      	str	r3, [r7, #0]
 8001616:	4b09      	ldr	r3, [pc, #36]	@ (800163c <HAL_MspInit+0x4c>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161a:	4a08      	ldr	r2, [pc, #32]	@ (800163c <HAL_MspInit+0x4c>)
 800161c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001620:	6413      	str	r3, [r2, #64]	@ 0x40
 8001622:	4b06      	ldr	r3, [pc, #24]	@ (800163c <HAL_MspInit+0x4c>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800162a:	603b      	str	r3, [r7, #0]
 800162c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	40023800 	.word	0x40023800

08001640 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	@ 0x28
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a17      	ldr	r2, [pc, #92]	@ (80016bc <HAL_ADC_MspInit+0x7c>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d127      	bne.n	80016b2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	4b16      	ldr	r3, [pc, #88]	@ (80016c0 <HAL_ADC_MspInit+0x80>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166a:	4a15      	ldr	r2, [pc, #84]	@ (80016c0 <HAL_ADC_MspInit+0x80>)
 800166c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001670:	6453      	str	r3, [r2, #68]	@ 0x44
 8001672:	4b13      	ldr	r3, [pc, #76]	@ (80016c0 <HAL_ADC_MspInit+0x80>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	4b0f      	ldr	r3, [pc, #60]	@ (80016c0 <HAL_ADC_MspInit+0x80>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	4a0e      	ldr	r2, [pc, #56]	@ (80016c0 <HAL_ADC_MspInit+0x80>)
 8001688:	f043 0304 	orr.w	r3, r3, #4
 800168c:	6313      	str	r3, [r2, #48]	@ 0x30
 800168e:	4b0c      	ldr	r3, [pc, #48]	@ (80016c0 <HAL_ADC_MspInit+0x80>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	f003 0304 	and.w	r3, r3, #4
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC_VCC_Pin;
 800169a:	2304      	movs	r3, #4
 800169c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800169e:	2303      	movs	r3, #3
 80016a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_VCC_GPIO_Port, &GPIO_InitStruct);
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	4619      	mov	r1, r3
 80016ac:	4805      	ldr	r0, [pc, #20]	@ (80016c4 <HAL_ADC_MspInit+0x84>)
 80016ae:	f000 feb3 	bl	8002418 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016b2:	bf00      	nop
 80016b4:	3728      	adds	r7, #40	@ 0x28
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40012000 	.word	0x40012000
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40020800 	.word	0x40020800

080016c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08a      	sub	sp, #40	@ 0x28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a19      	ldr	r2, [pc, #100]	@ (800174c <HAL_I2C_MspInit+0x84>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d12b      	bne.n	8001742 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	4b18      	ldr	r3, [pc, #96]	@ (8001750 <HAL_I2C_MspInit+0x88>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f2:	4a17      	ldr	r2, [pc, #92]	@ (8001750 <HAL_I2C_MspInit+0x88>)
 80016f4:	f043 0302 	orr.w	r3, r3, #2
 80016f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016fa:	4b15      	ldr	r3, [pc, #84]	@ (8001750 <HAL_I2C_MspInit+0x88>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001706:	23c0      	movs	r3, #192	@ 0xc0
 8001708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800170a:	2312      	movs	r3, #18
 800170c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001712:	2303      	movs	r3, #3
 8001714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001716:	2304      	movs	r3, #4
 8001718:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	4619      	mov	r1, r3
 8001720:	480c      	ldr	r0, [pc, #48]	@ (8001754 <HAL_I2C_MspInit+0x8c>)
 8001722:	f000 fe79 	bl	8002418 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	4b09      	ldr	r3, [pc, #36]	@ (8001750 <HAL_I2C_MspInit+0x88>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172e:	4a08      	ldr	r2, [pc, #32]	@ (8001750 <HAL_I2C_MspInit+0x88>)
 8001730:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001734:	6413      	str	r3, [r2, #64]	@ 0x40
 8001736:	4b06      	ldr	r3, [pc, #24]	@ (8001750 <HAL_I2C_MspInit+0x88>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001742:	bf00      	nop
 8001744:	3728      	adds	r7, #40	@ 0x28
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40005400 	.word	0x40005400
 8001750:	40023800 	.word	0x40023800
 8001754:	40020400 	.word	0x40020400

08001758 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08a      	sub	sp, #40	@ 0x28
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a19      	ldr	r2, [pc, #100]	@ (80017dc <HAL_SPI_MspInit+0x84>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d12b      	bne.n	80017d2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	4b18      	ldr	r3, [pc, #96]	@ (80017e0 <HAL_SPI_MspInit+0x88>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001782:	4a17      	ldr	r2, [pc, #92]	@ (80017e0 <HAL_SPI_MspInit+0x88>)
 8001784:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001788:	6453      	str	r3, [r2, #68]	@ 0x44
 800178a:	4b15      	ldr	r3, [pc, #84]	@ (80017e0 <HAL_SPI_MspInit+0x88>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	4b11      	ldr	r3, [pc, #68]	@ (80017e0 <HAL_SPI_MspInit+0x88>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	4a10      	ldr	r2, [pc, #64]	@ (80017e0 <HAL_SPI_MspInit+0x88>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a6:	4b0e      	ldr	r3, [pc, #56]	@ (80017e0 <HAL_SPI_MspInit+0x88>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80017b2:	23e0      	movs	r3, #224	@ 0xe0
 80017b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b6:	2302      	movs	r3, #2
 80017b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017be:	2303      	movs	r3, #3
 80017c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017c2:	2305      	movs	r3, #5
 80017c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c6:	f107 0314 	add.w	r3, r7, #20
 80017ca:	4619      	mov	r1, r3
 80017cc:	4805      	ldr	r0, [pc, #20]	@ (80017e4 <HAL_SPI_MspInit+0x8c>)
 80017ce:	f000 fe23 	bl	8002418 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017d2:	bf00      	nop
 80017d4:	3728      	adds	r7, #40	@ 0x28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40013000 	.word	0x40013000
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40020000 	.word	0x40020000

080017e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08e      	sub	sp, #56	@ 0x38
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a62      	ldr	r2, [pc, #392]	@ (8001990 <HAL_UART_MspInit+0x1a8>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d12c      	bne.n	8001864 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	623b      	str	r3, [r7, #32]
 800180e:	4b61      	ldr	r3, [pc, #388]	@ (8001994 <HAL_UART_MspInit+0x1ac>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001812:	4a60      	ldr	r2, [pc, #384]	@ (8001994 <HAL_UART_MspInit+0x1ac>)
 8001814:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001818:	6413      	str	r3, [r2, #64]	@ 0x40
 800181a:	4b5e      	ldr	r3, [pc, #376]	@ (8001994 <HAL_UART_MspInit+0x1ac>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001822:	623b      	str	r3, [r7, #32]
 8001824:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	61fb      	str	r3, [r7, #28]
 800182a:	4b5a      	ldr	r3, [pc, #360]	@ (8001994 <HAL_UART_MspInit+0x1ac>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	4a59      	ldr	r2, [pc, #356]	@ (8001994 <HAL_UART_MspInit+0x1ac>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	6313      	str	r3, [r2, #48]	@ 0x30
 8001836:	4b57      	ldr	r3, [pc, #348]	@ (8001994 <HAL_UART_MspInit+0x1ac>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	61fb      	str	r3, [r7, #28]
 8001840:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001842:	2303      	movs	r3, #3
 8001844:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001846:	2302      	movs	r3, #2
 8001848:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184e:	2303      	movs	r3, #3
 8001850:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001852:	2308      	movs	r3, #8
 8001854:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001856:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800185a:	4619      	mov	r1, r3
 800185c:	484e      	ldr	r0, [pc, #312]	@ (8001998 <HAL_UART_MspInit+0x1b0>)
 800185e:	f000 fddb 	bl	8002418 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001862:	e091      	b.n	8001988 <HAL_UART_MspInit+0x1a0>
  else if(huart->Instance==USART2)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a4c      	ldr	r2, [pc, #304]	@ (800199c <HAL_UART_MspInit+0x1b4>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d134      	bne.n	80018d8 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	61bb      	str	r3, [r7, #24]
 8001872:	4b48      	ldr	r3, [pc, #288]	@ (8001994 <HAL_UART_MspInit+0x1ac>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001876:	4a47      	ldr	r2, [pc, #284]	@ (8001994 <HAL_UART_MspInit+0x1ac>)
 8001878:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800187c:	6413      	str	r3, [r2, #64]	@ 0x40
 800187e:	4b45      	ldr	r3, [pc, #276]	@ (8001994 <HAL_UART_MspInit+0x1ac>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001886:	61bb      	str	r3, [r7, #24]
 8001888:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
 800188e:	4b41      	ldr	r3, [pc, #260]	@ (8001994 <HAL_UART_MspInit+0x1ac>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	4a40      	ldr	r2, [pc, #256]	@ (8001994 <HAL_UART_MspInit+0x1ac>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	6313      	str	r3, [r2, #48]	@ 0x30
 800189a:	4b3e      	ldr	r3, [pc, #248]	@ (8001994 <HAL_UART_MspInit+0x1ac>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	617b      	str	r3, [r7, #20]
 80018a4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TX2_GPS_Pin|RX2_GPS_Pin;
 80018a6:	230c      	movs	r3, #12
 80018a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018aa:	2302      	movs	r3, #2
 80018ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b2:	2303      	movs	r3, #3
 80018b4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018b6:	2307      	movs	r3, #7
 80018b8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018be:	4619      	mov	r1, r3
 80018c0:	4835      	ldr	r0, [pc, #212]	@ (8001998 <HAL_UART_MspInit+0x1b0>)
 80018c2:	f000 fda9 	bl	8002418 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2100      	movs	r1, #0
 80018ca:	2026      	movs	r0, #38	@ 0x26
 80018cc:	f000 fcdb 	bl	8002286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018d0:	2026      	movs	r0, #38	@ 0x26
 80018d2:	f000 fcf4 	bl	80022be <HAL_NVIC_EnableIRQ>
}
 80018d6:	e057      	b.n	8001988 <HAL_UART_MspInit+0x1a0>
  else if(huart->Instance==USART3)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a30      	ldr	r2, [pc, #192]	@ (80019a0 <HAL_UART_MspInit+0x1b8>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d152      	bne.n	8001988 <HAL_UART_MspInit+0x1a0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001994 <HAL_UART_MspInit+0x1ac>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ea:	4a2a      	ldr	r2, [pc, #168]	@ (8001994 <HAL_UART_MspInit+0x1ac>)
 80018ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018f2:	4b28      	ldr	r3, [pc, #160]	@ (8001994 <HAL_UART_MspInit+0x1ac>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018fa:	613b      	str	r3, [r7, #16]
 80018fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	4b24      	ldr	r3, [pc, #144]	@ (8001994 <HAL_UART_MspInit+0x1ac>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001906:	4a23      	ldr	r2, [pc, #140]	@ (8001994 <HAL_UART_MspInit+0x1ac>)
 8001908:	f043 0304 	orr.w	r3, r3, #4
 800190c:	6313      	str	r3, [r2, #48]	@ 0x30
 800190e:	4b21      	ldr	r3, [pc, #132]	@ (8001994 <HAL_UART_MspInit+0x1ac>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001912:	f003 0304 	and.w	r3, r3, #4
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	4b1d      	ldr	r3, [pc, #116]	@ (8001994 <HAL_UART_MspInit+0x1ac>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001922:	4a1c      	ldr	r2, [pc, #112]	@ (8001994 <HAL_UART_MspInit+0x1ac>)
 8001924:	f043 0302 	orr.w	r3, r3, #2
 8001928:	6313      	str	r3, [r2, #48]	@ 0x30
 800192a:	4b1a      	ldr	r3, [pc, #104]	@ (8001994 <HAL_UART_MspInit+0x1ac>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	60bb      	str	r3, [r7, #8]
 8001934:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RX3_LORA_Pin;
 8001936:	2320      	movs	r3, #32
 8001938:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193a:	2302      	movs	r3, #2
 800193c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001942:	2303      	movs	r3, #3
 8001944:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001946:	2307      	movs	r3, #7
 8001948:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RX3_LORA_GPIO_Port, &GPIO_InitStruct);
 800194a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800194e:	4619      	mov	r1, r3
 8001950:	4814      	ldr	r0, [pc, #80]	@ (80019a4 <HAL_UART_MspInit+0x1bc>)
 8001952:	f000 fd61 	bl	8002418 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TX3_LORA_Pin;
 8001956:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800195a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195c:	2302      	movs	r3, #2
 800195e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001964:	2303      	movs	r3, #3
 8001966:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001968:	2307      	movs	r3, #7
 800196a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(TX3_LORA_GPIO_Port, &GPIO_InitStruct);
 800196c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001970:	4619      	mov	r1, r3
 8001972:	480d      	ldr	r0, [pc, #52]	@ (80019a8 <HAL_UART_MspInit+0x1c0>)
 8001974:	f000 fd50 	bl	8002418 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001978:	2200      	movs	r2, #0
 800197a:	2100      	movs	r1, #0
 800197c:	2027      	movs	r0, #39	@ 0x27
 800197e:	f000 fc82 	bl	8002286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001982:	2027      	movs	r0, #39	@ 0x27
 8001984:	f000 fc9b 	bl	80022be <HAL_NVIC_EnableIRQ>
}
 8001988:	bf00      	nop
 800198a:	3738      	adds	r7, #56	@ 0x38
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40004c00 	.word	0x40004c00
 8001994:	40023800 	.word	0x40023800
 8001998:	40020000 	.word	0x40020000
 800199c:	40004400 	.word	0x40004400
 80019a0:	40004800 	.word	0x40004800
 80019a4:	40020800 	.word	0x40020800
 80019a8:	40020400 	.word	0x40020400

080019ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019b0:	bf00      	nop
 80019b2:	e7fd      	b.n	80019b0 <NMI_Handler+0x4>

080019b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019b8:	bf00      	nop
 80019ba:	e7fd      	b.n	80019b8 <HardFault_Handler+0x4>

080019bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c0:	bf00      	nop
 80019c2:	e7fd      	b.n	80019c0 <MemManage_Handler+0x4>

080019c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019c8:	bf00      	nop
 80019ca:	e7fd      	b.n	80019c8 <BusFault_Handler+0x4>

080019cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019d0:	bf00      	nop
 80019d2:	e7fd      	b.n	80019d0 <UsageFault_Handler+0x4>

080019d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a02:	f000 f8af 	bl	8001b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a10:	4802      	ldr	r0, [pc, #8]	@ (8001a1c <USART2_IRQHandler+0x10>)
 8001a12:	f003 fd67 	bl	80054e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000274 	.word	0x20000274

08001a20 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a24:	4802      	ldr	r0, [pc, #8]	@ (8001a30 <USART3_IRQHandler+0x10>)
 8001a26:	f003 fd5d 	bl	80054e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	200002b8 	.word	0x200002b8

08001a34 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a38:	4802      	ldr	r0, [pc, #8]	@ (8001a44 <OTG_FS_IRQHandler+0x10>)
 8001a3a:	f001 f936 	bl	8002caa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	200011f0 	.word	0x200011f0

08001a48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a4c:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <SystemInit+0x20>)
 8001a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a52:	4a05      	ldr	r2, [pc, #20]	@ (8001a68 <SystemInit+0x20>)
 8001a54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001aa4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a70:	480d      	ldr	r0, [pc, #52]	@ (8001aa8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a72:	490e      	ldr	r1, [pc, #56]	@ (8001aac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a74:	4a0e      	ldr	r2, [pc, #56]	@ (8001ab0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a78:	e002      	b.n	8001a80 <LoopCopyDataInit>

08001a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a7e:	3304      	adds	r3, #4

08001a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a84:	d3f9      	bcc.n	8001a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a86:	4a0b      	ldr	r2, [pc, #44]	@ (8001ab4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a88:	4c0b      	ldr	r4, [pc, #44]	@ (8001ab8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a8c:	e001      	b.n	8001a92 <LoopFillZerobss>

08001a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a90:	3204      	adds	r2, #4

08001a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a94:	d3fb      	bcc.n	8001a8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a96:	f7ff ffd7 	bl	8001a48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a9a:	f008 feb5 	bl	800a808 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a9e:	f7fe fd6b 	bl	8000578 <main>
  bx  lr    
 8001aa2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001aa4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aac:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 8001ab0:	0800a8d8 	.word	0x0800a8d8
  ldr r2, =_sbss
 8001ab4:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 8001ab8:	2000191c 	.word	0x2000191c

08001abc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001abc:	e7fe      	b.n	8001abc <ADC_IRQHandler>
	...

08001ac0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ac4:	4b0e      	ldr	r3, [pc, #56]	@ (8001b00 <HAL_Init+0x40>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a0d      	ldr	r2, [pc, #52]	@ (8001b00 <HAL_Init+0x40>)
 8001aca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ace:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8001b00 <HAL_Init+0x40>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a0a      	ldr	r2, [pc, #40]	@ (8001b00 <HAL_Init+0x40>)
 8001ad6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ada:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001adc:	4b08      	ldr	r3, [pc, #32]	@ (8001b00 <HAL_Init+0x40>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a07      	ldr	r2, [pc, #28]	@ (8001b00 <HAL_Init+0x40>)
 8001ae2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ae6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae8:	2003      	movs	r0, #3
 8001aea:	f000 fbc1 	bl	8002270 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001aee:	200f      	movs	r0, #15
 8001af0:	f000 f808 	bl	8001b04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001af4:	f7ff fd7c 	bl	80015f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40023c00 	.word	0x40023c00

08001b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b0c:	4b12      	ldr	r3, [pc, #72]	@ (8001b58 <HAL_InitTick+0x54>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	4b12      	ldr	r3, [pc, #72]	@ (8001b5c <HAL_InitTick+0x58>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	4619      	mov	r1, r3
 8001b16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b22:	4618      	mov	r0, r3
 8001b24:	f000 fbd9 	bl	80022da <HAL_SYSTICK_Config>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e00e      	b.n	8001b50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b0f      	cmp	r3, #15
 8001b36:	d80a      	bhi.n	8001b4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	6879      	ldr	r1, [r7, #4]
 8001b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b40:	f000 fba1 	bl	8002286 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b44:	4a06      	ldr	r2, [pc, #24]	@ (8001b60 <HAL_InitTick+0x5c>)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	e000      	b.n	8001b50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20000000 	.word	0x20000000
 8001b5c:	20000008 	.word	0x20000008
 8001b60:	20000004 	.word	0x20000004

08001b64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b68:	4b06      	ldr	r3, [pc, #24]	@ (8001b84 <HAL_IncTick+0x20>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4b06      	ldr	r3, [pc, #24]	@ (8001b88 <HAL_IncTick+0x24>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4413      	add	r3, r2
 8001b74:	4a04      	ldr	r2, [pc, #16]	@ (8001b88 <HAL_IncTick+0x24>)
 8001b76:	6013      	str	r3, [r2, #0]
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	20000008 	.word	0x20000008
 8001b88:	200004f8 	.word	0x200004f8

08001b8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b90:	4b03      	ldr	r3, [pc, #12]	@ (8001ba0 <HAL_GetTick+0x14>)
 8001b92:	681b      	ldr	r3, [r3, #0]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	200004f8 	.word	0x200004f8

08001ba4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bac:	f7ff ffee 	bl	8001b8c <HAL_GetTick>
 8001bb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bbc:	d005      	beq.n	8001bca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001be8 <HAL_Delay+0x44>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bca:	bf00      	nop
 8001bcc:	f7ff ffde 	bl	8001b8c <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d8f7      	bhi.n	8001bcc <HAL_Delay+0x28>
  {
  }
}
 8001bdc:	bf00      	nop
 8001bde:	bf00      	nop
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000008 	.word	0x20000008

08001bec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e033      	b.n	8001c6a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d109      	bne.n	8001c1e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f7ff fd18 	bl	8001640 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c22:	f003 0310 	and.w	r3, r3, #16
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d118      	bne.n	8001c5c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c32:	f023 0302 	bic.w	r3, r3, #2
 8001c36:	f043 0202 	orr.w	r2, r3, #2
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f94a 	bl	8001ed8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4e:	f023 0303 	bic.w	r3, r3, #3
 8001c52:	f043 0201 	orr.w	r2, r3, #1
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c5a:	e001      	b.n	8001c60 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
	...

08001c74 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d101      	bne.n	8001c90 <HAL_ADC_ConfigChannel+0x1c>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	e113      	b.n	8001eb8 <HAL_ADC_ConfigChannel+0x244>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b09      	cmp	r3, #9
 8001c9e:	d925      	bls.n	8001cec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68d9      	ldr	r1, [r3, #12]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	461a      	mov	r2, r3
 8001cae:	4613      	mov	r3, r2
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	4413      	add	r3, r2
 8001cb4:	3b1e      	subs	r3, #30
 8001cb6:	2207      	movs	r2, #7
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43da      	mvns	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	400a      	ands	r2, r1
 8001cc4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68d9      	ldr	r1, [r3, #12]
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	4603      	mov	r3, r0
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	4403      	add	r3, r0
 8001cde:	3b1e      	subs	r3, #30
 8001ce0:	409a      	lsls	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	e022      	b.n	8001d32 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6919      	ldr	r1, [r3, #16]
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	4413      	add	r3, r2
 8001d00:	2207      	movs	r2, #7
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43da      	mvns	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	400a      	ands	r2, r1
 8001d0e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6919      	ldr	r1, [r3, #16]
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	689a      	ldr	r2, [r3, #8]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	4618      	mov	r0, r3
 8001d22:	4603      	mov	r3, r0
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	4403      	add	r3, r0
 8001d28:	409a      	lsls	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b06      	cmp	r3, #6
 8001d38:	d824      	bhi.n	8001d84 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	4613      	mov	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	3b05      	subs	r3, #5
 8001d4c:	221f      	movs	r2, #31
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43da      	mvns	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	400a      	ands	r2, r1
 8001d5a:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	4618      	mov	r0, r3
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	3b05      	subs	r3, #5
 8001d76:	fa00 f203 	lsl.w	r2, r0, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d82:	e04c      	b.n	8001e1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b0c      	cmp	r3, #12
 8001d8a:	d824      	bhi.n	8001dd6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	4613      	mov	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	4413      	add	r3, r2
 8001d9c:	3b23      	subs	r3, #35	@ 0x23
 8001d9e:	221f      	movs	r2, #31
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43da      	mvns	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	400a      	ands	r2, r1
 8001dac:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	4618      	mov	r0, r3
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	3b23      	subs	r3, #35	@ 0x23
 8001dc8:	fa00 f203 	lsl.w	r2, r0, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001dd4:	e023      	b.n	8001e1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	4613      	mov	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	3b41      	subs	r3, #65	@ 0x41
 8001de8:	221f      	movs	r2, #31
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43da      	mvns	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	400a      	ands	r2, r1
 8001df6:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	4618      	mov	r0, r3
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	3b41      	subs	r3, #65	@ 0x41
 8001e12:	fa00 f203 	lsl.w	r2, r0, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e1e:	4b29      	ldr	r3, [pc, #164]	@ (8001ec4 <HAL_ADC_ConfigChannel+0x250>)
 8001e20:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a28      	ldr	r2, [pc, #160]	@ (8001ec8 <HAL_ADC_ConfigChannel+0x254>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d10f      	bne.n	8001e4c <HAL_ADC_ConfigChannel+0x1d8>
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b12      	cmp	r3, #18
 8001e32:	d10b      	bne.n	8001e4c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a1d      	ldr	r2, [pc, #116]	@ (8001ec8 <HAL_ADC_ConfigChannel+0x254>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d12b      	bne.n	8001eae <HAL_ADC_ConfigChannel+0x23a>
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a1c      	ldr	r2, [pc, #112]	@ (8001ecc <HAL_ADC_ConfigChannel+0x258>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d003      	beq.n	8001e68 <HAL_ADC_ConfigChannel+0x1f4>
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2b11      	cmp	r3, #17
 8001e66:	d122      	bne.n	8001eae <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a11      	ldr	r2, [pc, #68]	@ (8001ecc <HAL_ADC_ConfigChannel+0x258>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d111      	bne.n	8001eae <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e8a:	4b11      	ldr	r3, [pc, #68]	@ (8001ed0 <HAL_ADC_ConfigChannel+0x25c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a11      	ldr	r2, [pc, #68]	@ (8001ed4 <HAL_ADC_ConfigChannel+0x260>)
 8001e90:	fba2 2303 	umull	r2, r3, r2, r3
 8001e94:	0c9a      	lsrs	r2, r3, #18
 8001e96:	4613      	mov	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4413      	add	r3, r2
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ea0:	e002      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1f9      	bne.n	8001ea2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	40012300 	.word	0x40012300
 8001ec8:	40012000 	.word	0x40012000
 8001ecc:	10000012 	.word	0x10000012
 8001ed0:	20000000 	.word	0x20000000
 8001ed4:	431bde83 	.word	0x431bde83

08001ed8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ee0:	4b79      	ldr	r3, [pc, #484]	@ (80020c8 <ADC_Init+0x1f0>)
 8001ee2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	431a      	orrs	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	6859      	ldr	r1, [r3, #4]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	021a      	lsls	r2, r3, #8
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001f30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6859      	ldr	r1, [r3, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689a      	ldr	r2, [r3, #8]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6899      	ldr	r1, [r3, #8]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68da      	ldr	r2, [r3, #12]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	430a      	orrs	r2, r1
 8001f64:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f6a:	4a58      	ldr	r2, [pc, #352]	@ (80020cc <ADC_Init+0x1f4>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d022      	beq.n	8001fb6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f7e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6899      	ldr	r1, [r3, #8]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001fa0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6899      	ldr	r1, [r3, #8]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	609a      	str	r2, [r3, #8]
 8001fb4:	e00f      	b.n	8001fd6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001fc4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001fd4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 0202 	bic.w	r2, r2, #2
 8001fe4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6899      	ldr	r1, [r3, #8]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	7e1b      	ldrb	r3, [r3, #24]
 8001ff0:	005a      	lsls	r2, r3, #1
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d01b      	beq.n	800203c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002012:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	685a      	ldr	r2, [r3, #4]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002022:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6859      	ldr	r1, [r3, #4]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800202e:	3b01      	subs	r3, #1
 8002030:	035a      	lsls	r2, r3, #13
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	430a      	orrs	r2, r1
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	e007      	b.n	800204c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800204a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800205a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	3b01      	subs	r3, #1
 8002068:	051a      	lsls	r2, r3, #20
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002080:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6899      	ldr	r1, [r3, #8]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800208e:	025a      	lsls	r2, r3, #9
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	430a      	orrs	r2, r1
 8002096:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6899      	ldr	r1, [r3, #8]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	029a      	lsls	r2, r3, #10
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	609a      	str	r2, [r3, #8]
}
 80020bc:	bf00      	nop
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	40012300 	.word	0x40012300
 80020cc:	0f000001 	.word	0x0f000001

080020d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002114 <__NVIC_SetPriorityGrouping+0x44>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020ec:	4013      	ands	r3, r2
 80020ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002102:	4a04      	ldr	r2, [pc, #16]	@ (8002114 <__NVIC_SetPriorityGrouping+0x44>)
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	60d3      	str	r3, [r2, #12]
}
 8002108:	bf00      	nop
 800210a:	3714      	adds	r7, #20
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800211c:	4b04      	ldr	r3, [pc, #16]	@ (8002130 <__NVIC_GetPriorityGrouping+0x18>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	0a1b      	lsrs	r3, r3, #8
 8002122:	f003 0307 	and.w	r3, r3, #7
}
 8002126:	4618      	mov	r0, r3
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	e000ed00 	.word	0xe000ed00

08002134 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800213e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002142:	2b00      	cmp	r3, #0
 8002144:	db0b      	blt.n	800215e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	f003 021f 	and.w	r2, r3, #31
 800214c:	4907      	ldr	r1, [pc, #28]	@ (800216c <__NVIC_EnableIRQ+0x38>)
 800214e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002152:	095b      	lsrs	r3, r3, #5
 8002154:	2001      	movs	r0, #1
 8002156:	fa00 f202 	lsl.w	r2, r0, r2
 800215a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	e000e100 	.word	0xe000e100

08002170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	6039      	str	r1, [r7, #0]
 800217a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800217c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002180:	2b00      	cmp	r3, #0
 8002182:	db0a      	blt.n	800219a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	b2da      	uxtb	r2, r3
 8002188:	490c      	ldr	r1, [pc, #48]	@ (80021bc <__NVIC_SetPriority+0x4c>)
 800218a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218e:	0112      	lsls	r2, r2, #4
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	440b      	add	r3, r1
 8002194:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002198:	e00a      	b.n	80021b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	b2da      	uxtb	r2, r3
 800219e:	4908      	ldr	r1, [pc, #32]	@ (80021c0 <__NVIC_SetPriority+0x50>)
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	3b04      	subs	r3, #4
 80021a8:	0112      	lsls	r2, r2, #4
 80021aa:	b2d2      	uxtb	r2, r2
 80021ac:	440b      	add	r3, r1
 80021ae:	761a      	strb	r2, [r3, #24]
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	e000e100 	.word	0xe000e100
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b089      	sub	sp, #36	@ 0x24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	f1c3 0307 	rsb	r3, r3, #7
 80021de:	2b04      	cmp	r3, #4
 80021e0:	bf28      	it	cs
 80021e2:	2304      	movcs	r3, #4
 80021e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	3304      	adds	r3, #4
 80021ea:	2b06      	cmp	r3, #6
 80021ec:	d902      	bls.n	80021f4 <NVIC_EncodePriority+0x30>
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	3b03      	subs	r3, #3
 80021f2:	e000      	b.n	80021f6 <NVIC_EncodePriority+0x32>
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f8:	f04f 32ff 	mov.w	r2, #4294967295
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43da      	mvns	r2, r3
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	401a      	ands	r2, r3
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800220c:	f04f 31ff 	mov.w	r1, #4294967295
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	fa01 f303 	lsl.w	r3, r1, r3
 8002216:	43d9      	mvns	r1, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800221c:	4313      	orrs	r3, r2
         );
}
 800221e:	4618      	mov	r0, r3
 8002220:	3724      	adds	r7, #36	@ 0x24
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
	...

0800222c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3b01      	subs	r3, #1
 8002238:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800223c:	d301      	bcc.n	8002242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800223e:	2301      	movs	r3, #1
 8002240:	e00f      	b.n	8002262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002242:	4a0a      	ldr	r2, [pc, #40]	@ (800226c <SysTick_Config+0x40>)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3b01      	subs	r3, #1
 8002248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800224a:	210f      	movs	r1, #15
 800224c:	f04f 30ff 	mov.w	r0, #4294967295
 8002250:	f7ff ff8e 	bl	8002170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002254:	4b05      	ldr	r3, [pc, #20]	@ (800226c <SysTick_Config+0x40>)
 8002256:	2200      	movs	r2, #0
 8002258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800225a:	4b04      	ldr	r3, [pc, #16]	@ (800226c <SysTick_Config+0x40>)
 800225c:	2207      	movs	r2, #7
 800225e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	e000e010 	.word	0xe000e010

08002270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f7ff ff29 	bl	80020d0 <__NVIC_SetPriorityGrouping>
}
 800227e:	bf00      	nop
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002286:	b580      	push	{r7, lr}
 8002288:	b086      	sub	sp, #24
 800228a:	af00      	add	r7, sp, #0
 800228c:	4603      	mov	r3, r0
 800228e:	60b9      	str	r1, [r7, #8]
 8002290:	607a      	str	r2, [r7, #4]
 8002292:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002298:	f7ff ff3e 	bl	8002118 <__NVIC_GetPriorityGrouping>
 800229c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	68b9      	ldr	r1, [r7, #8]
 80022a2:	6978      	ldr	r0, [r7, #20]
 80022a4:	f7ff ff8e 	bl	80021c4 <NVIC_EncodePriority>
 80022a8:	4602      	mov	r2, r0
 80022aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ae:	4611      	mov	r1, r2
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff ff5d 	bl	8002170 <__NVIC_SetPriority>
}
 80022b6:	bf00      	nop
 80022b8:	3718      	adds	r7, #24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b082      	sub	sp, #8
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	4603      	mov	r3, r0
 80022c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff ff31 	bl	8002134 <__NVIC_EnableIRQ>
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7ff ffa2 	bl	800222c <SysTick_Config>
 80022e8:	4603      	mov	r3, r0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b084      	sub	sp, #16
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022fe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002300:	f7ff fc44 	bl	8001b8c <HAL_GetTick>
 8002304:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d008      	beq.n	8002324 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2280      	movs	r2, #128	@ 0x80
 8002316:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e052      	b.n	80023ca <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0216 	bic.w	r2, r2, #22
 8002332:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	695a      	ldr	r2, [r3, #20]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002342:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002348:	2b00      	cmp	r3, #0
 800234a:	d103      	bne.n	8002354 <HAL_DMA_Abort+0x62>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002350:	2b00      	cmp	r3, #0
 8002352:	d007      	beq.n	8002364 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 0208 	bic.w	r2, r2, #8
 8002362:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 0201 	bic.w	r2, r2, #1
 8002372:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002374:	e013      	b.n	800239e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002376:	f7ff fc09 	bl	8001b8c <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b05      	cmp	r3, #5
 8002382:	d90c      	bls.n	800239e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2220      	movs	r2, #32
 8002388:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2203      	movs	r2, #3
 800238e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e015      	b.n	80023ca <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1e4      	bne.n	8002376 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023b0:	223f      	movs	r2, #63	@ 0x3f
 80023b2:	409a      	lsls	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b083      	sub	sp, #12
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d004      	beq.n	80023f0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2280      	movs	r2, #128	@ 0x80
 80023ea:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e00c      	b.n	800240a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2205      	movs	r2, #5
 80023f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0201 	bic.w	r2, r2, #1
 8002406:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
	...

08002418 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002418:	b480      	push	{r7}
 800241a:	b089      	sub	sp, #36	@ 0x24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002422:	2300      	movs	r3, #0
 8002424:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002426:	2300      	movs	r3, #0
 8002428:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800242a:	2300      	movs	r3, #0
 800242c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800242e:	2300      	movs	r3, #0
 8002430:	61fb      	str	r3, [r7, #28]
 8002432:	e165      	b.n	8002700 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002434:	2201      	movs	r2, #1
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	4013      	ands	r3, r2
 8002446:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	429a      	cmp	r2, r3
 800244e:	f040 8154 	bne.w	80026fa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f003 0303 	and.w	r3, r3, #3
 800245a:	2b01      	cmp	r3, #1
 800245c:	d005      	beq.n	800246a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002466:	2b02      	cmp	r3, #2
 8002468:	d130      	bne.n	80024cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	2203      	movs	r2, #3
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43db      	mvns	r3, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4013      	ands	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	68da      	ldr	r2, [r3, #12]
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4313      	orrs	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024a0:	2201      	movs	r2, #1
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	43db      	mvns	r3, r3
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4013      	ands	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	091b      	lsrs	r3, r3, #4
 80024b6:	f003 0201 	and.w	r2, r3, #1
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f003 0303 	and.w	r3, r3, #3
 80024d4:	2b03      	cmp	r3, #3
 80024d6:	d017      	beq.n	8002508 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	2203      	movs	r2, #3
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43db      	mvns	r3, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4013      	ands	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4313      	orrs	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 0303 	and.w	r3, r3, #3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d123      	bne.n	800255c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	08da      	lsrs	r2, r3, #3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3208      	adds	r2, #8
 800251c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002520:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	220f      	movs	r2, #15
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	43db      	mvns	r3, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4013      	ands	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	691a      	ldr	r2, [r3, #16]
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4313      	orrs	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	08da      	lsrs	r2, r3, #3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	3208      	adds	r2, #8
 8002556:	69b9      	ldr	r1, [r7, #24]
 8002558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	2203      	movs	r2, #3
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4013      	ands	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 0203 	and.w	r2, r3, #3
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4313      	orrs	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 80ae 	beq.w	80026fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	4b5d      	ldr	r3, [pc, #372]	@ (8002718 <HAL_GPIO_Init+0x300>)
 80025a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a6:	4a5c      	ldr	r2, [pc, #368]	@ (8002718 <HAL_GPIO_Init+0x300>)
 80025a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80025ae:	4b5a      	ldr	r3, [pc, #360]	@ (8002718 <HAL_GPIO_Init+0x300>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025ba:	4a58      	ldr	r2, [pc, #352]	@ (800271c <HAL_GPIO_Init+0x304>)
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	089b      	lsrs	r3, r3, #2
 80025c0:	3302      	adds	r3, #2
 80025c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	220f      	movs	r2, #15
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43db      	mvns	r3, r3
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	4013      	ands	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a4f      	ldr	r2, [pc, #316]	@ (8002720 <HAL_GPIO_Init+0x308>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d025      	beq.n	8002632 <HAL_GPIO_Init+0x21a>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a4e      	ldr	r2, [pc, #312]	@ (8002724 <HAL_GPIO_Init+0x30c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d01f      	beq.n	800262e <HAL_GPIO_Init+0x216>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a4d      	ldr	r2, [pc, #308]	@ (8002728 <HAL_GPIO_Init+0x310>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d019      	beq.n	800262a <HAL_GPIO_Init+0x212>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a4c      	ldr	r2, [pc, #304]	@ (800272c <HAL_GPIO_Init+0x314>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d013      	beq.n	8002626 <HAL_GPIO_Init+0x20e>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a4b      	ldr	r2, [pc, #300]	@ (8002730 <HAL_GPIO_Init+0x318>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d00d      	beq.n	8002622 <HAL_GPIO_Init+0x20a>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a4a      	ldr	r2, [pc, #296]	@ (8002734 <HAL_GPIO_Init+0x31c>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d007      	beq.n	800261e <HAL_GPIO_Init+0x206>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a49      	ldr	r2, [pc, #292]	@ (8002738 <HAL_GPIO_Init+0x320>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d101      	bne.n	800261a <HAL_GPIO_Init+0x202>
 8002616:	2306      	movs	r3, #6
 8002618:	e00c      	b.n	8002634 <HAL_GPIO_Init+0x21c>
 800261a:	2307      	movs	r3, #7
 800261c:	e00a      	b.n	8002634 <HAL_GPIO_Init+0x21c>
 800261e:	2305      	movs	r3, #5
 8002620:	e008      	b.n	8002634 <HAL_GPIO_Init+0x21c>
 8002622:	2304      	movs	r3, #4
 8002624:	e006      	b.n	8002634 <HAL_GPIO_Init+0x21c>
 8002626:	2303      	movs	r3, #3
 8002628:	e004      	b.n	8002634 <HAL_GPIO_Init+0x21c>
 800262a:	2302      	movs	r3, #2
 800262c:	e002      	b.n	8002634 <HAL_GPIO_Init+0x21c>
 800262e:	2301      	movs	r3, #1
 8002630:	e000      	b.n	8002634 <HAL_GPIO_Init+0x21c>
 8002632:	2300      	movs	r3, #0
 8002634:	69fa      	ldr	r2, [r7, #28]
 8002636:	f002 0203 	and.w	r2, r2, #3
 800263a:	0092      	lsls	r2, r2, #2
 800263c:	4093      	lsls	r3, r2
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4313      	orrs	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002644:	4935      	ldr	r1, [pc, #212]	@ (800271c <HAL_GPIO_Init+0x304>)
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	089b      	lsrs	r3, r3, #2
 800264a:	3302      	adds	r3, #2
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002652:	4b3a      	ldr	r3, [pc, #232]	@ (800273c <HAL_GPIO_Init+0x324>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	43db      	mvns	r3, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4013      	ands	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	4313      	orrs	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002676:	4a31      	ldr	r2, [pc, #196]	@ (800273c <HAL_GPIO_Init+0x324>)
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800267c:	4b2f      	ldr	r3, [pc, #188]	@ (800273c <HAL_GPIO_Init+0x324>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	43db      	mvns	r3, r3
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4013      	ands	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	4313      	orrs	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026a0:	4a26      	ldr	r2, [pc, #152]	@ (800273c <HAL_GPIO_Init+0x324>)
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026a6:	4b25      	ldr	r3, [pc, #148]	@ (800273c <HAL_GPIO_Init+0x324>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	43db      	mvns	r3, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4013      	ands	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026ca:	4a1c      	ldr	r2, [pc, #112]	@ (800273c <HAL_GPIO_Init+0x324>)
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026d0:	4b1a      	ldr	r3, [pc, #104]	@ (800273c <HAL_GPIO_Init+0x324>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	43db      	mvns	r3, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4013      	ands	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026f4:	4a11      	ldr	r2, [pc, #68]	@ (800273c <HAL_GPIO_Init+0x324>)
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	3301      	adds	r3, #1
 80026fe:	61fb      	str	r3, [r7, #28]
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	2b0f      	cmp	r3, #15
 8002704:	f67f ae96 	bls.w	8002434 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002708:	bf00      	nop
 800270a:	bf00      	nop
 800270c:	3724      	adds	r7, #36	@ 0x24
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	40023800 	.word	0x40023800
 800271c:	40013800 	.word	0x40013800
 8002720:	40020000 	.word	0x40020000
 8002724:	40020400 	.word	0x40020400
 8002728:	40020800 	.word	0x40020800
 800272c:	40020c00 	.word	0x40020c00
 8002730:	40021000 	.word	0x40021000
 8002734:	40021400 	.word	0x40021400
 8002738:	40021800 	.word	0x40021800
 800273c:	40013c00 	.word	0x40013c00

08002740 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	460b      	mov	r3, r1
 800274a:	807b      	strh	r3, [r7, #2]
 800274c:	4613      	mov	r3, r2
 800274e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002750:	787b      	ldrb	r3, [r7, #1]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002756:	887a      	ldrh	r2, [r7, #2]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800275c:	e003      	b.n	8002766 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800275e:	887b      	ldrh	r3, [r7, #2]
 8002760:	041a      	lsls	r2, r3, #16
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	619a      	str	r2, [r3, #24]
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
	...

08002774 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e12b      	b.n	80029de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d106      	bne.n	80027a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7fe ff94 	bl	80016c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2224      	movs	r2, #36	@ 0x24
 80027a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 0201 	bic.w	r2, r2, #1
 80027b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027d8:	f001 fccc 	bl	8004174 <HAL_RCC_GetPCLK1Freq>
 80027dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	4a81      	ldr	r2, [pc, #516]	@ (80029e8 <HAL_I2C_Init+0x274>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d807      	bhi.n	80027f8 <HAL_I2C_Init+0x84>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	4a80      	ldr	r2, [pc, #512]	@ (80029ec <HAL_I2C_Init+0x278>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	bf94      	ite	ls
 80027f0:	2301      	movls	r3, #1
 80027f2:	2300      	movhi	r3, #0
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	e006      	b.n	8002806 <HAL_I2C_Init+0x92>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4a7d      	ldr	r2, [pc, #500]	@ (80029f0 <HAL_I2C_Init+0x27c>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	bf94      	ite	ls
 8002800:	2301      	movls	r3, #1
 8002802:	2300      	movhi	r3, #0
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e0e7      	b.n	80029de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	4a78      	ldr	r2, [pc, #480]	@ (80029f4 <HAL_I2C_Init+0x280>)
 8002812:	fba2 2303 	umull	r2, r3, r2, r3
 8002816:	0c9b      	lsrs	r3, r3, #18
 8002818:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68ba      	ldr	r2, [r7, #8]
 800282a:	430a      	orrs	r2, r1
 800282c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	4a6a      	ldr	r2, [pc, #424]	@ (80029e8 <HAL_I2C_Init+0x274>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d802      	bhi.n	8002848 <HAL_I2C_Init+0xd4>
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	3301      	adds	r3, #1
 8002846:	e009      	b.n	800285c <HAL_I2C_Init+0xe8>
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800284e:	fb02 f303 	mul.w	r3, r2, r3
 8002852:	4a69      	ldr	r2, [pc, #420]	@ (80029f8 <HAL_I2C_Init+0x284>)
 8002854:	fba2 2303 	umull	r2, r3, r2, r3
 8002858:	099b      	lsrs	r3, r3, #6
 800285a:	3301      	adds	r3, #1
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	6812      	ldr	r2, [r2, #0]
 8002860:	430b      	orrs	r3, r1
 8002862:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800286e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	495c      	ldr	r1, [pc, #368]	@ (80029e8 <HAL_I2C_Init+0x274>)
 8002878:	428b      	cmp	r3, r1
 800287a:	d819      	bhi.n	80028b0 <HAL_I2C_Init+0x13c>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	1e59      	subs	r1, r3, #1
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	fbb1 f3f3 	udiv	r3, r1, r3
 800288a:	1c59      	adds	r1, r3, #1
 800288c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002890:	400b      	ands	r3, r1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00a      	beq.n	80028ac <HAL_I2C_Init+0x138>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	1e59      	subs	r1, r3, #1
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80028a4:	3301      	adds	r3, #1
 80028a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028aa:	e051      	b.n	8002950 <HAL_I2C_Init+0x1dc>
 80028ac:	2304      	movs	r3, #4
 80028ae:	e04f      	b.n	8002950 <HAL_I2C_Init+0x1dc>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d111      	bne.n	80028dc <HAL_I2C_Init+0x168>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	1e58      	subs	r0, r3, #1
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6859      	ldr	r1, [r3, #4]
 80028c0:	460b      	mov	r3, r1
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	440b      	add	r3, r1
 80028c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ca:	3301      	adds	r3, #1
 80028cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	bf0c      	ite	eq
 80028d4:	2301      	moveq	r3, #1
 80028d6:	2300      	movne	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	e012      	b.n	8002902 <HAL_I2C_Init+0x18e>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	1e58      	subs	r0, r3, #1
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6859      	ldr	r1, [r3, #4]
 80028e4:	460b      	mov	r3, r1
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	0099      	lsls	r1, r3, #2
 80028ec:	440b      	add	r3, r1
 80028ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80028f2:	3301      	adds	r3, #1
 80028f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	bf0c      	ite	eq
 80028fc:	2301      	moveq	r3, #1
 80028fe:	2300      	movne	r3, #0
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_I2C_Init+0x196>
 8002906:	2301      	movs	r3, #1
 8002908:	e022      	b.n	8002950 <HAL_I2C_Init+0x1dc>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10e      	bne.n	8002930 <HAL_I2C_Init+0x1bc>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	1e58      	subs	r0, r3, #1
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6859      	ldr	r1, [r3, #4]
 800291a:	460b      	mov	r3, r1
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	440b      	add	r3, r1
 8002920:	fbb0 f3f3 	udiv	r3, r0, r3
 8002924:	3301      	adds	r3, #1
 8002926:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800292a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800292e:	e00f      	b.n	8002950 <HAL_I2C_Init+0x1dc>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	1e58      	subs	r0, r3, #1
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6859      	ldr	r1, [r3, #4]
 8002938:	460b      	mov	r3, r1
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	0099      	lsls	r1, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	fbb0 f3f3 	udiv	r3, r0, r3
 8002946:	3301      	adds	r3, #1
 8002948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800294c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	6809      	ldr	r1, [r1, #0]
 8002954:	4313      	orrs	r3, r2
 8002956:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69da      	ldr	r2, [r3, #28]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	431a      	orrs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800297e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6911      	ldr	r1, [r2, #16]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	68d2      	ldr	r2, [r2, #12]
 800298a:	4311      	orrs	r1, r2
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6812      	ldr	r2, [r2, #0]
 8002990:	430b      	orrs	r3, r1
 8002992:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	695a      	ldr	r2, [r3, #20]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0201 	orr.w	r2, r2, #1
 80029be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2220      	movs	r2, #32
 80029ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	000186a0 	.word	0x000186a0
 80029ec:	001e847f 	.word	0x001e847f
 80029f0:	003d08ff 	.word	0x003d08ff
 80029f4:	431bde83 	.word	0x431bde83
 80029f8:	10624dd3 	.word	0x10624dd3

080029fc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80029fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029fe:	b08f      	sub	sp, #60	@ 0x3c
 8002a00:	af0a      	add	r7, sp, #40	@ 0x28
 8002a02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e116      	b.n	8002c3c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d106      	bne.n	8002a2e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f007 fb6d 	bl	800a108 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2203      	movs	r2, #3
 8002a32:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d102      	bne.n	8002a48 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f003 fdc6 	bl	80065de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	603b      	str	r3, [r7, #0]
 8002a58:	687e      	ldr	r6, [r7, #4]
 8002a5a:	466d      	mov	r5, sp
 8002a5c:	f106 0410 	add.w	r4, r6, #16
 8002a60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a68:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a6c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a70:	1d33      	adds	r3, r6, #4
 8002a72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a74:	6838      	ldr	r0, [r7, #0]
 8002a76:	f003 fc9d 	bl	80063b4 <USB_CoreInit>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d005      	beq.n	8002a8c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2202      	movs	r2, #2
 8002a84:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e0d7      	b.n	8002c3c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2100      	movs	r1, #0
 8002a92:	4618      	mov	r0, r3
 8002a94:	f003 fdb4 	bl	8006600 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a98:	2300      	movs	r3, #0
 8002a9a:	73fb      	strb	r3, [r7, #15]
 8002a9c:	e04a      	b.n	8002b34 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a9e:	7bfa      	ldrb	r2, [r7, #15]
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	4413      	add	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	440b      	add	r3, r1
 8002aac:	333d      	adds	r3, #61	@ 0x3d
 8002aae:	2201      	movs	r2, #1
 8002ab0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ab2:	7bfa      	ldrb	r2, [r7, #15]
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	4413      	add	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	440b      	add	r3, r1
 8002ac0:	333c      	adds	r3, #60	@ 0x3c
 8002ac2:	7bfa      	ldrb	r2, [r7, #15]
 8002ac4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ac6:	7bfa      	ldrb	r2, [r7, #15]
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
 8002aca:	b298      	uxth	r0, r3
 8002acc:	6879      	ldr	r1, [r7, #4]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	00db      	lsls	r3, r3, #3
 8002ad2:	4413      	add	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	440b      	add	r3, r1
 8002ad8:	3344      	adds	r3, #68	@ 0x44
 8002ada:	4602      	mov	r2, r0
 8002adc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ade:	7bfa      	ldrb	r2, [r7, #15]
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	440b      	add	r3, r1
 8002aec:	3340      	adds	r3, #64	@ 0x40
 8002aee:	2200      	movs	r2, #0
 8002af0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002af2:	7bfa      	ldrb	r2, [r7, #15]
 8002af4:	6879      	ldr	r1, [r7, #4]
 8002af6:	4613      	mov	r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	4413      	add	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	440b      	add	r3, r1
 8002b00:	3348      	adds	r3, #72	@ 0x48
 8002b02:	2200      	movs	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b06:	7bfa      	ldrb	r2, [r7, #15]
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	4413      	add	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	440b      	add	r3, r1
 8002b14:	334c      	adds	r3, #76	@ 0x4c
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b1a:	7bfa      	ldrb	r2, [r7, #15]
 8002b1c:	6879      	ldr	r1, [r7, #4]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	4413      	add	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	440b      	add	r3, r1
 8002b28:	3354      	adds	r3, #84	@ 0x54
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b2e:	7bfb      	ldrb	r3, [r7, #15]
 8002b30:	3301      	adds	r3, #1
 8002b32:	73fb      	strb	r3, [r7, #15]
 8002b34:	7bfa      	ldrb	r2, [r7, #15]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d3af      	bcc.n	8002a9e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b3e:	2300      	movs	r3, #0
 8002b40:	73fb      	strb	r3, [r7, #15]
 8002b42:	e044      	b.n	8002bce <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b44:	7bfa      	ldrb	r2, [r7, #15]
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8002b56:	2200      	movs	r2, #0
 8002b58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b5a:	7bfa      	ldrb	r2, [r7, #15]
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	4413      	add	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	440b      	add	r3, r1
 8002b68:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8002b6c:	7bfa      	ldrb	r2, [r7, #15]
 8002b6e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b70:	7bfa      	ldrb	r2, [r7, #15]
 8002b72:	6879      	ldr	r1, [r7, #4]
 8002b74:	4613      	mov	r3, r2
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	4413      	add	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8002b82:	2200      	movs	r2, #0
 8002b84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b86:	7bfa      	ldrb	r2, [r7, #15]
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	4413      	add	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	440b      	add	r3, r1
 8002b94:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b9c:	7bfa      	ldrb	r2, [r7, #15]
 8002b9e:	6879      	ldr	r1, [r7, #4]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	4413      	add	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	440b      	add	r3, r1
 8002baa:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002bb2:	7bfa      	ldrb	r2, [r7, #15]
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	4413      	add	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bc8:	7bfb      	ldrb	r3, [r7, #15]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	73fb      	strb	r3, [r7, #15]
 8002bce:	7bfa      	ldrb	r2, [r7, #15]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d3b5      	bcc.n	8002b44 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	603b      	str	r3, [r7, #0]
 8002bde:	687e      	ldr	r6, [r7, #4]
 8002be0:	466d      	mov	r5, sp
 8002be2:	f106 0410 	add.w	r4, r6, #16
 8002be6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002be8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bee:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bf2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bf6:	1d33      	adds	r3, r6, #4
 8002bf8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bfa:	6838      	ldr	r0, [r7, #0]
 8002bfc:	f003 fd4c 	bl	8006698 <USB_DevInit>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d005      	beq.n	8002c12 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2202      	movs	r2, #2
 8002c0a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e014      	b.n	8002c3c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d102      	bne.n	8002c30 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f001 f98c 	bl	8003f48 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f004 fe8e 	bl	8007956 <USB_DevDisconnect>

  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c44 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d101      	bne.n	8002c60 <HAL_PCD_Start+0x1c>
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	e020      	b.n	8002ca2 <HAL_PCD_Start+0x5e>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d109      	bne.n	8002c84 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d005      	beq.n	8002c84 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c7c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f003 fc97 	bl	80065bc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f004 fe3e 	bl	8007914 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002caa:	b590      	push	{r4, r7, lr}
 8002cac:	b08d      	sub	sp, #52	@ 0x34
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cb8:	6a3b      	ldr	r3, [r7, #32]
 8002cba:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f004 fefc 	bl	8007abe <USB_GetMode>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f040 84b7 	bne.w	800363c <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f004 fe60 	bl	8007998 <USB_ReadInterrupts>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 84ad 	beq.w	800363a <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	0a1b      	lsrs	r3, r3, #8
 8002cea:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f004 fe4d 	bl	8007998 <USB_ReadInterrupts>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d107      	bne.n	8002d18 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	695a      	ldr	r2, [r3, #20]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f002 0202 	and.w	r2, r2, #2
 8002d16:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f004 fe3b 	bl	8007998 <USB_ReadInterrupts>
 8002d22:	4603      	mov	r3, r0
 8002d24:	f003 0310 	and.w	r3, r3, #16
 8002d28:	2b10      	cmp	r3, #16
 8002d2a:	d161      	bne.n	8002df0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	699a      	ldr	r2, [r3, #24]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f022 0210 	bic.w	r2, r2, #16
 8002d3a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	f003 020f 	and.w	r2, r3, #15
 8002d48:	4613      	mov	r3, r2
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	4413      	add	r3, r2
 8002d58:	3304      	adds	r3, #4
 8002d5a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	0c5b      	lsrs	r3, r3, #17
 8002d60:	f003 030f 	and.w	r3, r3, #15
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d124      	bne.n	8002db2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002d6e:	4013      	ands	r3, r2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d035      	beq.n	8002de0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	091b      	lsrs	r3, r3, #4
 8002d7c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	461a      	mov	r2, r3
 8002d86:	6a38      	ldr	r0, [r7, #32]
 8002d88:	f004 fc72 	bl	8007670 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	691a      	ldr	r2, [r3, #16]
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	091b      	lsrs	r3, r3, #4
 8002d94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d98:	441a      	add	r2, r3
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	6a1a      	ldr	r2, [r3, #32]
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	091b      	lsrs	r3, r3, #4
 8002da6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002daa:	441a      	add	r2, r3
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	621a      	str	r2, [r3, #32]
 8002db0:	e016      	b.n	8002de0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	0c5b      	lsrs	r3, r3, #17
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	2b06      	cmp	r3, #6
 8002dbc:	d110      	bne.n	8002de0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8002dc4:	2208      	movs	r2, #8
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	6a38      	ldr	r0, [r7, #32]
 8002dca:	f004 fc51 	bl	8007670 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	6a1a      	ldr	r2, [r3, #32]
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	091b      	lsrs	r3, r3, #4
 8002dd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dda:	441a      	add	r2, r3
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	699a      	ldr	r2, [r3, #24]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f042 0210 	orr.w	r2, r2, #16
 8002dee:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f004 fdcf 	bl	8007998 <USB_ReadInterrupts>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e00:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002e04:	f040 80a7 	bne.w	8002f56 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f004 fdd4 	bl	80079be <USB_ReadDevAllOutEpInterrupt>
 8002e16:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002e18:	e099      	b.n	8002f4e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 808e 	beq.w	8002f42 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e2c:	b2d2      	uxtb	r2, r2
 8002e2e:	4611      	mov	r1, r2
 8002e30:	4618      	mov	r0, r3
 8002e32:	f004 fdf8 	bl	8007a26 <USB_ReadDevOutEPInterrupt>
 8002e36:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00c      	beq.n	8002e5c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e44:	015a      	lsls	r2, r3, #5
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	4413      	add	r3, r2
 8002e4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e4e:	461a      	mov	r2, r3
 8002e50:	2301      	movs	r3, #1
 8002e52:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002e54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 fef0 	bl	8003c3c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	f003 0308 	and.w	r3, r3, #8
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00c      	beq.n	8002e80 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e68:	015a      	lsls	r2, r3, #5
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e72:	461a      	mov	r2, r3
 8002e74:	2308      	movs	r3, #8
 8002e76:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002e78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 ffc6 	bl	8003e0c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	f003 0310 	and.w	r3, r3, #16
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d008      	beq.n	8002e9c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8c:	015a      	lsls	r2, r3, #5
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	4413      	add	r3, r2
 8002e92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e96:	461a      	mov	r2, r3
 8002e98:	2310      	movs	r3, #16
 8002e9a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d030      	beq.n	8002f08 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002ea6:	6a3b      	ldr	r3, [r7, #32]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eae:	2b80      	cmp	r3, #128	@ 0x80
 8002eb0:	d109      	bne.n	8002ec6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	69fa      	ldr	r2, [r7, #28]
 8002ebc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ec0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ec4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002ec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ec8:	4613      	mov	r3, r2
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	4413      	add	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	3304      	adds	r3, #4
 8002eda:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	78db      	ldrb	r3, [r3, #3]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d108      	bne.n	8002ef6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	4619      	mov	r1, r3
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f007 fa25 	bl	800a340 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef8:	015a      	lsls	r2, r3, #5
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	4413      	add	r3, r2
 8002efe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f02:	461a      	mov	r2, r3
 8002f04:	2302      	movs	r3, #2
 8002f06:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	f003 0320 	and.w	r3, r3, #32
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d008      	beq.n	8002f24 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f14:	015a      	lsls	r2, r3, #5
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	4413      	add	r3, r2
 8002f1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f1e:	461a      	mov	r2, r3
 8002f20:	2320      	movs	r3, #32
 8002f22:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d009      	beq.n	8002f42 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f30:	015a      	lsls	r2, r3, #5
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	4413      	add	r3, r2
 8002f36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f40:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f44:	3301      	adds	r3, #1
 8002f46:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f4a:	085b      	lsrs	r3, r3, #1
 8002f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f47f af62 	bne.w	8002e1a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f004 fd1c 	bl	8007998 <USB_ReadInterrupts>
 8002f60:	4603      	mov	r3, r0
 8002f62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f66:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002f6a:	f040 80db 	bne.w	8003124 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f004 fd3d 	bl	80079f2 <USB_ReadDevAllInEpInterrupt>
 8002f78:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002f7e:	e0cd      	b.n	800311c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f000 80c2 	beq.w	8003110 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f92:	b2d2      	uxtb	r2, r2
 8002f94:	4611      	mov	r1, r2
 8002f96:	4618      	mov	r0, r3
 8002f98:	f004 fd63 	bl	8007a62 <USB_ReadDevInEPInterrupt>
 8002f9c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d057      	beq.n	8003058 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	2201      	movs	r2, #1
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	69f9      	ldr	r1, [r7, #28]
 8002fc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002fc8:	4013      	ands	r3, r2
 8002fca:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fce:	015a      	lsls	r2, r3, #5
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fd8:	461a      	mov	r2, r3
 8002fda:	2301      	movs	r3, #1
 8002fdc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d132      	bne.n	800304c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fea:	4613      	mov	r3, r2
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	4413      	add	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	334c      	adds	r3, #76	@ 0x4c
 8002ff6:	6819      	ldr	r1, [r3, #0]
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	4413      	add	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4403      	add	r3, r0
 8003006:	3348      	adds	r3, #72	@ 0x48
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4419      	add	r1, r3
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003010:	4613      	mov	r3, r2
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	4413      	add	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4403      	add	r3, r0
 800301a:	334c      	adds	r3, #76	@ 0x4c
 800301c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800301e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003020:	2b00      	cmp	r3, #0
 8003022:	d113      	bne.n	800304c <HAL_PCD_IRQHandler+0x3a2>
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003028:	4613      	mov	r3, r2
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	4413      	add	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	3354      	adds	r3, #84	@ 0x54
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d108      	bne.n	800304c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6818      	ldr	r0, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003044:	461a      	mov	r2, r3
 8003046:	2101      	movs	r1, #1
 8003048:	f004 fd6a 	bl	8007b20 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800304c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304e:	b2db      	uxtb	r3, r3
 8003050:	4619      	mov	r1, r3
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f007 f8ef 	bl	800a236 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	f003 0308 	and.w	r3, r3, #8
 800305e:	2b00      	cmp	r3, #0
 8003060:	d008      	beq.n	8003074 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003064:	015a      	lsls	r2, r3, #5
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	4413      	add	r3, r2
 800306a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800306e:	461a      	mov	r2, r3
 8003070:	2308      	movs	r3, #8
 8003072:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	f003 0310 	and.w	r3, r3, #16
 800307a:	2b00      	cmp	r3, #0
 800307c:	d008      	beq.n	8003090 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800307e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003080:	015a      	lsls	r2, r3, #5
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	4413      	add	r3, r2
 8003086:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800308a:	461a      	mov	r2, r3
 800308c:	2310      	movs	r3, #16
 800308e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003096:	2b00      	cmp	r3, #0
 8003098:	d008      	beq.n	80030ac <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800309a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309c:	015a      	lsls	r2, r3, #5
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	4413      	add	r3, r2
 80030a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030a6:	461a      	mov	r2, r3
 80030a8:	2340      	movs	r3, #64	@ 0x40
 80030aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d023      	beq.n	80030fe <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80030b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80030b8:	6a38      	ldr	r0, [r7, #32]
 80030ba:	f003 fc4b 	bl	8006954 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80030be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030c0:	4613      	mov	r3, r2
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	4413      	add	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	3338      	adds	r3, #56	@ 0x38
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	4413      	add	r3, r2
 80030ce:	3304      	adds	r3, #4
 80030d0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	78db      	ldrb	r3, [r3, #3]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d108      	bne.n	80030ec <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2200      	movs	r2, #0
 80030de:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80030e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	4619      	mov	r1, r3
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f007 f93c 	bl	800a364 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80030ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ee:	015a      	lsls	r2, r3, #5
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	4413      	add	r3, r2
 80030f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030f8:	461a      	mov	r2, r3
 80030fa:	2302      	movs	r3, #2
 80030fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003108:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 fd08 	bl	8003b20 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003112:	3301      	adds	r3, #1
 8003114:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003118:	085b      	lsrs	r3, r3, #1
 800311a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800311c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800311e:	2b00      	cmp	r3, #0
 8003120:	f47f af2e 	bne.w	8002f80 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f004 fc35 	bl	8007998 <USB_ReadInterrupts>
 800312e:	4603      	mov	r3, r0
 8003130:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003134:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003138:	d122      	bne.n	8003180 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	69fa      	ldr	r2, [r7, #28]
 8003144:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003148:	f023 0301 	bic.w	r3, r3, #1
 800314c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8003154:	2b01      	cmp	r3, #1
 8003156:	d108      	bne.n	800316a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003160:	2100      	movs	r1, #0
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f007 fab6 	bl	800a6d4 <HAL_PCDEx_LPM_Callback>
 8003168:	e002      	b.n	8003170 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f007 f8da 	bl	800a324 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	695a      	ldr	r2, [r3, #20]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800317e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4618      	mov	r0, r3
 8003186:	f004 fc07 	bl	8007998 <USB_ReadInterrupts>
 800318a:	4603      	mov	r3, r0
 800318c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003190:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003194:	d112      	bne.n	80031bc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d102      	bne.n	80031ac <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f007 f896 	bl	800a2d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	695a      	ldr	r2, [r3, #20]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80031ba:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f004 fbe9 	bl	8007998 <USB_ReadInterrupts>
 80031c6:	4603      	mov	r3, r0
 80031c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80031cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031d0:	d121      	bne.n	8003216 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695a      	ldr	r2, [r3, #20]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80031e0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d111      	bne.n	8003210 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031fa:	089b      	lsrs	r3, r3, #2
 80031fc:	f003 020f 	and.w	r2, r3, #15
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003206:	2101      	movs	r1, #1
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f007 fa63 	bl	800a6d4 <HAL_PCDEx_LPM_Callback>
 800320e:	e002      	b.n	8003216 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f007 f861 	bl	800a2d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4618      	mov	r0, r3
 800321c:	f004 fbbc 	bl	8007998 <USB_ReadInterrupts>
 8003220:	4603      	mov	r3, r0
 8003222:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003226:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800322a:	f040 80b7 	bne.w	800339c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	69fa      	ldr	r2, [r7, #28]
 8003238:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800323c:	f023 0301 	bic.w	r3, r3, #1
 8003240:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2110      	movs	r1, #16
 8003248:	4618      	mov	r0, r3
 800324a:	f003 fb83 	bl	8006954 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800324e:	2300      	movs	r3, #0
 8003250:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003252:	e046      	b.n	80032e2 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003256:	015a      	lsls	r2, r3, #5
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	4413      	add	r3, r2
 800325c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003260:	461a      	mov	r2, r3
 8003262:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003266:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800326a:	015a      	lsls	r2, r3, #5
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	4413      	add	r3, r2
 8003270:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003278:	0151      	lsls	r1, r2, #5
 800327a:	69fa      	ldr	r2, [r7, #28]
 800327c:	440a      	add	r2, r1
 800327e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003282:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003286:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800328a:	015a      	lsls	r2, r3, #5
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	4413      	add	r3, r2
 8003290:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003294:	461a      	mov	r2, r3
 8003296:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800329a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800329c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800329e:	015a      	lsls	r2, r3, #5
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	4413      	add	r3, r2
 80032a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032ac:	0151      	lsls	r1, r2, #5
 80032ae:	69fa      	ldr	r2, [r7, #28]
 80032b0:	440a      	add	r2, r1
 80032b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80032b6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80032ba:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80032bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032be:	015a      	lsls	r2, r3, #5
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	4413      	add	r3, r2
 80032c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032cc:	0151      	lsls	r1, r2, #5
 80032ce:	69fa      	ldr	r2, [r7, #28]
 80032d0:	440a      	add	r2, r1
 80032d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80032d6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80032da:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032de:	3301      	adds	r3, #1
 80032e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d3b3      	bcc.n	8003254 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	69fa      	ldr	r2, [r7, #28]
 80032f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80032fa:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80032fe:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003304:	2b00      	cmp	r3, #0
 8003306:	d016      	beq.n	8003336 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800330e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003312:	69fa      	ldr	r2, [r7, #28]
 8003314:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003318:	f043 030b 	orr.w	r3, r3, #11
 800331c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003328:	69fa      	ldr	r2, [r7, #28]
 800332a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800332e:	f043 030b 	orr.w	r3, r3, #11
 8003332:	6453      	str	r3, [r2, #68]	@ 0x44
 8003334:	e015      	b.n	8003362 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	69fa      	ldr	r2, [r7, #28]
 8003340:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003344:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003348:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800334c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	69fa      	ldr	r2, [r7, #28]
 8003358:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800335c:	f043 030b 	orr.w	r3, r3, #11
 8003360:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	69fa      	ldr	r2, [r7, #28]
 800336c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003370:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003374:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6818      	ldr	r0, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003386:	461a      	mov	r2, r3
 8003388:	f004 fbca 	bl	8007b20 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	695a      	ldr	r2, [r3, #20]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800339a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f004 faf9 	bl	8007998 <USB_ReadInterrupts>
 80033a6:	4603      	mov	r3, r0
 80033a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033b0:	d124      	bne.n	80033fc <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f004 fb8f 	bl	8007ada <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f003 fb44 	bl	8006a4e <USB_GetDevSpeed>
 80033c6:	4603      	mov	r3, r0
 80033c8:	461a      	mov	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681c      	ldr	r4, [r3, #0]
 80033d2:	f000 fec3 	bl	800415c <HAL_RCC_GetHCLKFreq>
 80033d6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	461a      	mov	r2, r3
 80033e0:	4620      	mov	r0, r4
 80033e2:	f003 f849 	bl	8006478 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f006 ff4d 	bl	800a286 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695a      	ldr	r2, [r3, #20]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80033fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4618      	mov	r0, r3
 8003402:	f004 fac9 	bl	8007998 <USB_ReadInterrupts>
 8003406:	4603      	mov	r3, r0
 8003408:	f003 0308 	and.w	r3, r3, #8
 800340c:	2b08      	cmp	r3, #8
 800340e:	d10a      	bne.n	8003426 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f006 ff2a 	bl	800a26a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	695a      	ldr	r2, [r3, #20]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f002 0208 	and.w	r2, r2, #8
 8003424:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	f004 fab4 	bl	8007998 <USB_ReadInterrupts>
 8003430:	4603      	mov	r3, r0
 8003432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003436:	2b80      	cmp	r3, #128	@ 0x80
 8003438:	d122      	bne.n	8003480 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800343a:	6a3b      	ldr	r3, [r7, #32]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003442:	6a3b      	ldr	r3, [r7, #32]
 8003444:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003446:	2301      	movs	r3, #1
 8003448:	627b      	str	r3, [r7, #36]	@ 0x24
 800344a:	e014      	b.n	8003476 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003450:	4613      	mov	r3, r2
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	4413      	add	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d105      	bne.n	8003470 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003466:	b2db      	uxtb	r3, r3
 8003468:	4619      	mov	r1, r3
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 fb27 	bl	8003abe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003472:	3301      	adds	r3, #1
 8003474:	627b      	str	r3, [r7, #36]	@ 0x24
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800347c:	429a      	cmp	r2, r3
 800347e:	d3e5      	bcc.n	800344c <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4618      	mov	r0, r3
 8003486:	f004 fa87 	bl	8007998 <USB_ReadInterrupts>
 800348a:	4603      	mov	r3, r0
 800348c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003490:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003494:	d13b      	bne.n	800350e <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003496:	2301      	movs	r3, #1
 8003498:	627b      	str	r3, [r7, #36]	@ 0x24
 800349a:	e02b      	b.n	80034f4 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800349c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349e:	015a      	lsls	r2, r3, #5
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	4413      	add	r3, r2
 80034a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034b0:	4613      	mov	r3, r2
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	4413      	add	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	440b      	add	r3, r1
 80034ba:	3340      	adds	r3, #64	@ 0x40
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d115      	bne.n	80034ee <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80034c2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	da12      	bge.n	80034ee <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034cc:	4613      	mov	r3, r2
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	4413      	add	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	333f      	adds	r3, #63	@ 0x3f
 80034d8:	2201      	movs	r2, #1
 80034da:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80034dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	4619      	mov	r1, r3
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 fae8 	bl	8003abe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f0:	3301      	adds	r3, #1
 80034f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d3ce      	bcc.n	800349c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	695a      	ldr	r2, [r3, #20]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800350c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f004 fa40 	bl	8007998 <USB_ReadInterrupts>
 8003518:	4603      	mov	r3, r0
 800351a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800351e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003522:	d155      	bne.n	80035d0 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003524:	2301      	movs	r3, #1
 8003526:	627b      	str	r3, [r7, #36]	@ 0x24
 8003528:	e045      	b.n	80035b6 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800352a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352c:	015a      	lsls	r2, r3, #5
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	4413      	add	r3, r2
 8003532:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800353e:	4613      	mov	r3, r2
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	4413      	add	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	440b      	add	r3, r1
 8003548:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d12e      	bne.n	80035b0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003552:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003554:	2b00      	cmp	r3, #0
 8003556:	da2b      	bge.n	80035b0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8003564:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003568:	429a      	cmp	r2, r3
 800356a:	d121      	bne.n	80035b0 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003570:	4613      	mov	r3, r2
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	4413      	add	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	440b      	add	r3, r1
 800357a:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 800357e:	2201      	movs	r2, #1
 8003580:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800358a:	6a3b      	ldr	r3, [r7, #32]
 800358c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10a      	bne.n	80035b0 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	69fa      	ldr	r2, [r7, #28]
 80035a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80035a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035ac:	6053      	str	r3, [r2, #4]
            break;
 80035ae:	e007      	b.n	80035c0 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b2:	3301      	adds	r3, #1
 80035b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035bc:	429a      	cmp	r2, r3
 80035be:	d3b4      	bcc.n	800352a <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	695a      	ldr	r2, [r3, #20]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80035ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f004 f9df 	bl	8007998 <USB_ReadInterrupts>
 80035da:	4603      	mov	r3, r0
 80035dc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80035e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035e4:	d10a      	bne.n	80035fc <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f006 fece 	bl	800a388 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	695a      	ldr	r2, [r3, #20]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80035fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4618      	mov	r0, r3
 8003602:	f004 f9c9 	bl	8007998 <USB_ReadInterrupts>
 8003606:	4603      	mov	r3, r0
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b04      	cmp	r3, #4
 800360e:	d115      	bne.n	800363c <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	f003 0304 	and.w	r3, r3, #4
 800361e:	2b00      	cmp	r3, #0
 8003620:	d002      	beq.n	8003628 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f006 febe 	bl	800a3a4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6859      	ldr	r1, [r3, #4]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	430a      	orrs	r2, r1
 8003636:	605a      	str	r2, [r3, #4]
 8003638:	e000      	b.n	800363c <HAL_PCD_IRQHandler+0x992>
      return;
 800363a:	bf00      	nop
    }
  }
}
 800363c:	3734      	adds	r7, #52	@ 0x34
 800363e:	46bd      	mov	sp, r7
 8003640:	bd90      	pop	{r4, r7, pc}

08003642 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b082      	sub	sp, #8
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
 800364a:	460b      	mov	r3, r1
 800364c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003654:	2b01      	cmp	r3, #1
 8003656:	d101      	bne.n	800365c <HAL_PCD_SetAddress+0x1a>
 8003658:	2302      	movs	r3, #2
 800365a:	e013      	b.n	8003684 <HAL_PCD_SetAddress+0x42>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	78fa      	ldrb	r2, [r7, #3]
 8003668:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	78fa      	ldrb	r2, [r7, #3]
 8003672:	4611      	mov	r1, r2
 8003674:	4618      	mov	r0, r3
 8003676:	f004 f927 	bl	80078c8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	4608      	mov	r0, r1
 8003696:	4611      	mov	r1, r2
 8003698:	461a      	mov	r2, r3
 800369a:	4603      	mov	r3, r0
 800369c:	70fb      	strb	r3, [r7, #3]
 800369e:	460b      	mov	r3, r1
 80036a0:	803b      	strh	r3, [r7, #0]
 80036a2:	4613      	mov	r3, r2
 80036a4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80036a6:	2300      	movs	r3, #0
 80036a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	da0f      	bge.n	80036d2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036b2:	78fb      	ldrb	r3, [r7, #3]
 80036b4:	f003 020f 	and.w	r2, r3, #15
 80036b8:	4613      	mov	r3, r2
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	4413      	add	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	3338      	adds	r3, #56	@ 0x38
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	4413      	add	r3, r2
 80036c6:	3304      	adds	r3, #4
 80036c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2201      	movs	r2, #1
 80036ce:	705a      	strb	r2, [r3, #1]
 80036d0:	e00f      	b.n	80036f2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036d2:	78fb      	ldrb	r3, [r7, #3]
 80036d4:	f003 020f 	and.w	r2, r3, #15
 80036d8:	4613      	mov	r3, r2
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	4413      	add	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	4413      	add	r3, r2
 80036e8:	3304      	adds	r3, #4
 80036ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80036f2:	78fb      	ldrb	r3, [r7, #3]
 80036f4:	f003 030f 	and.w	r3, r3, #15
 80036f8:	b2da      	uxtb	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80036fe:	883a      	ldrh	r2, [r7, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	78ba      	ldrb	r2, [r7, #2]
 8003708:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	785b      	ldrb	r3, [r3, #1]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d004      	beq.n	800371c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	461a      	mov	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800371c:	78bb      	ldrb	r3, [r7, #2]
 800371e:	2b02      	cmp	r3, #2
 8003720:	d102      	bne.n	8003728 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800372e:	2b01      	cmp	r3, #1
 8003730:	d101      	bne.n	8003736 <HAL_PCD_EP_Open+0xaa>
 8003732:	2302      	movs	r3, #2
 8003734:	e00e      	b.n	8003754 <HAL_PCD_EP_Open+0xc8>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68f9      	ldr	r1, [r7, #12]
 8003744:	4618      	mov	r0, r3
 8003746:	f003 f9a7 	bl	8006a98 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8003752:	7afb      	ldrb	r3, [r7, #11]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	460b      	mov	r3, r1
 8003766:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003768:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800376c:	2b00      	cmp	r3, #0
 800376e:	da0f      	bge.n	8003790 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003770:	78fb      	ldrb	r3, [r7, #3]
 8003772:	f003 020f 	and.w	r2, r3, #15
 8003776:	4613      	mov	r3, r2
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	4413      	add	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	3338      	adds	r3, #56	@ 0x38
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	4413      	add	r3, r2
 8003784:	3304      	adds	r3, #4
 8003786:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2201      	movs	r2, #1
 800378c:	705a      	strb	r2, [r3, #1]
 800378e:	e00f      	b.n	80037b0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003790:	78fb      	ldrb	r3, [r7, #3]
 8003792:	f003 020f 	and.w	r2, r3, #15
 8003796:	4613      	mov	r3, r2
 8003798:	00db      	lsls	r3, r3, #3
 800379a:	4413      	add	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	4413      	add	r3, r2
 80037a6:	3304      	adds	r3, #4
 80037a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80037b0:	78fb      	ldrb	r3, [r7, #3]
 80037b2:	f003 030f 	and.w	r3, r3, #15
 80037b6:	b2da      	uxtb	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d101      	bne.n	80037ca <HAL_PCD_EP_Close+0x6e>
 80037c6:	2302      	movs	r3, #2
 80037c8:	e00e      	b.n	80037e8 <HAL_PCD_EP_Close+0x8c>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68f9      	ldr	r1, [r7, #12]
 80037d8:	4618      	mov	r0, r3
 80037da:	f003 f9e5 	bl	8006ba8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	607a      	str	r2, [r7, #4]
 80037fa:	603b      	str	r3, [r7, #0]
 80037fc:	460b      	mov	r3, r1
 80037fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003800:	7afb      	ldrb	r3, [r7, #11]
 8003802:	f003 020f 	and.w	r2, r3, #15
 8003806:	4613      	mov	r3, r2
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	4413      	add	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	4413      	add	r3, r2
 8003816:	3304      	adds	r3, #4
 8003818:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	2200      	movs	r2, #0
 800382a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	2200      	movs	r2, #0
 8003830:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003832:	7afb      	ldrb	r3, [r7, #11]
 8003834:	f003 030f 	and.w	r3, r3, #15
 8003838:	b2da      	uxtb	r2, r3
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d102      	bne.n	800384c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800384c:	7afb      	ldrb	r3, [r7, #11]
 800384e:	f003 030f 	and.w	r3, r3, #15
 8003852:	2b00      	cmp	r3, #0
 8003854:	d109      	bne.n	800386a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6818      	ldr	r0, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	b2db      	uxtb	r3, r3
 8003860:	461a      	mov	r2, r3
 8003862:	6979      	ldr	r1, [r7, #20]
 8003864:	f003 fcc4 	bl	80071f0 <USB_EP0StartXfer>
 8003868:	e008      	b.n	800387c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6818      	ldr	r0, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	b2db      	uxtb	r3, r3
 8003874:	461a      	mov	r2, r3
 8003876:	6979      	ldr	r1, [r7, #20]
 8003878:	f003 fa72 	bl	8006d60 <USB_EPStartXfer>
  }

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3718      	adds	r7, #24
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003886:	b480      	push	{r7}
 8003888:	b083      	sub	sp, #12
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
 800388e:	460b      	mov	r3, r1
 8003890:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003892:	78fb      	ldrb	r3, [r7, #3]
 8003894:	f003 020f 	and.w	r2, r3, #15
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	4613      	mov	r3, r2
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	4413      	add	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 80038a8:	681b      	ldr	r3, [r3, #0]
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b086      	sub	sp, #24
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	60f8      	str	r0, [r7, #12]
 80038be:	607a      	str	r2, [r7, #4]
 80038c0:	603b      	str	r3, [r7, #0]
 80038c2:	460b      	mov	r3, r1
 80038c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038c6:	7afb      	ldrb	r3, [r7, #11]
 80038c8:	f003 020f 	and.w	r2, r3, #15
 80038cc:	4613      	mov	r3, r2
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	4413      	add	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	3338      	adds	r3, #56	@ 0x38
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	4413      	add	r3, r2
 80038da:	3304      	adds	r3, #4
 80038dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2200      	movs	r2, #0
 80038ee:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	2201      	movs	r2, #1
 80038f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038f6:	7afb      	ldrb	r3, [r7, #11]
 80038f8:	f003 030f 	and.w	r3, r3, #15
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d102      	bne.n	8003910 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003910:	7afb      	ldrb	r3, [r7, #11]
 8003912:	f003 030f 	and.w	r3, r3, #15
 8003916:	2b00      	cmp	r3, #0
 8003918:	d109      	bne.n	800392e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6818      	ldr	r0, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	b2db      	uxtb	r3, r3
 8003924:	461a      	mov	r2, r3
 8003926:	6979      	ldr	r1, [r7, #20]
 8003928:	f003 fc62 	bl	80071f0 <USB_EP0StartXfer>
 800392c:	e008      	b.n	8003940 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6818      	ldr	r0, [r3, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	b2db      	uxtb	r3, r3
 8003938:	461a      	mov	r2, r3
 800393a:	6979      	ldr	r1, [r7, #20]
 800393c:	f003 fa10 	bl	8006d60 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b084      	sub	sp, #16
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
 8003952:	460b      	mov	r3, r1
 8003954:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003956:	78fb      	ldrb	r3, [r7, #3]
 8003958:	f003 020f 	and.w	r2, r3, #15
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	429a      	cmp	r2, r3
 8003962:	d901      	bls.n	8003968 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e050      	b.n	8003a0a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003968:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800396c:	2b00      	cmp	r3, #0
 800396e:	da0f      	bge.n	8003990 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003970:	78fb      	ldrb	r3, [r7, #3]
 8003972:	f003 020f 	and.w	r2, r3, #15
 8003976:	4613      	mov	r3, r2
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	4413      	add	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	3338      	adds	r3, #56	@ 0x38
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	4413      	add	r3, r2
 8003984:	3304      	adds	r3, #4
 8003986:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2201      	movs	r2, #1
 800398c:	705a      	strb	r2, [r3, #1]
 800398e:	e00d      	b.n	80039ac <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003990:	78fa      	ldrb	r2, [r7, #3]
 8003992:	4613      	mov	r3, r2
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	4413      	add	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	4413      	add	r3, r2
 80039a2:	3304      	adds	r3, #4
 80039a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2201      	movs	r2, #1
 80039b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039b2:	78fb      	ldrb	r3, [r7, #3]
 80039b4:	f003 030f 	and.w	r3, r3, #15
 80039b8:	b2da      	uxtb	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d101      	bne.n	80039cc <HAL_PCD_EP_SetStall+0x82>
 80039c8:	2302      	movs	r3, #2
 80039ca:	e01e      	b.n	8003a0a <HAL_PCD_EP_SetStall+0xc0>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68f9      	ldr	r1, [r7, #12]
 80039da:	4618      	mov	r0, r3
 80039dc:	f003 fea0 	bl	8007720 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039e0:	78fb      	ldrb	r3, [r7, #3]
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10a      	bne.n	8003a00 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6818      	ldr	r0, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	b2d9      	uxtb	r1, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80039fa:	461a      	mov	r2, r3
 80039fc:	f004 f890 	bl	8007b20 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b084      	sub	sp, #16
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a1e:	78fb      	ldrb	r3, [r7, #3]
 8003a20:	f003 020f 	and.w	r2, r3, #15
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d901      	bls.n	8003a30 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e042      	b.n	8003ab6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	da0f      	bge.n	8003a58 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a38:	78fb      	ldrb	r3, [r7, #3]
 8003a3a:	f003 020f 	and.w	r2, r3, #15
 8003a3e:	4613      	mov	r3, r2
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	4413      	add	r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	3338      	adds	r3, #56	@ 0x38
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	3304      	adds	r3, #4
 8003a4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2201      	movs	r2, #1
 8003a54:	705a      	strb	r2, [r3, #1]
 8003a56:	e00f      	b.n	8003a78 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a58:	78fb      	ldrb	r3, [r7, #3]
 8003a5a:	f003 020f 	and.w	r2, r3, #15
 8003a5e:	4613      	mov	r3, r2
 8003a60:	00db      	lsls	r3, r3, #3
 8003a62:	4413      	add	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	3304      	adds	r3, #4
 8003a70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a7e:	78fb      	ldrb	r3, [r7, #3]
 8003a80:	f003 030f 	and.w	r3, r3, #15
 8003a84:	b2da      	uxtb	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d101      	bne.n	8003a98 <HAL_PCD_EP_ClrStall+0x86>
 8003a94:	2302      	movs	r3, #2
 8003a96:	e00e      	b.n	8003ab6 <HAL_PCD_EP_ClrStall+0xa4>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68f9      	ldr	r1, [r7, #12]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f003 fea8 	bl	80077fc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b084      	sub	sp, #16
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003aca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	da0c      	bge.n	8003aec <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ad2:	78fb      	ldrb	r3, [r7, #3]
 8003ad4:	f003 020f 	and.w	r2, r3, #15
 8003ad8:	4613      	mov	r3, r2
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	4413      	add	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	3338      	adds	r3, #56	@ 0x38
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	3304      	adds	r3, #4
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	e00c      	b.n	8003b06 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003aec:	78fb      	ldrb	r3, [r7, #3]
 8003aee:	f003 020f 	and.w	r2, r3, #15
 8003af2:	4613      	mov	r3, r2
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	4413      	add	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	4413      	add	r3, r2
 8003b02:	3304      	adds	r3, #4
 8003b04:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68f9      	ldr	r1, [r7, #12]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f003 fcc7 	bl	80074a0 <USB_EPStopXfer>
 8003b12:	4603      	mov	r3, r0
 8003b14:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003b16:	7afb      	ldrb	r3, [r7, #11]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b08a      	sub	sp, #40	@ 0x28
 8003b24:	af02      	add	r7, sp, #8
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	4613      	mov	r3, r2
 8003b38:	00db      	lsls	r3, r3, #3
 8003b3a:	4413      	add	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	3338      	adds	r3, #56	@ 0x38
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	4413      	add	r3, r2
 8003b44:	3304      	adds	r3, #4
 8003b46:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6a1a      	ldr	r2, [r3, #32]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d901      	bls.n	8003b58 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e06c      	b.n	8003c32 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	699a      	ldr	r2, [r3, #24]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	69fa      	ldr	r2, [r7, #28]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d902      	bls.n	8003b74 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	3303      	adds	r3, #3
 8003b78:	089b      	lsrs	r3, r3, #2
 8003b7a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b7c:	e02b      	b.n	8003bd6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	699a      	ldr	r2, [r3, #24]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	69fa      	ldr	r2, [r7, #28]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d902      	bls.n	8003b9a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	3303      	adds	r3, #3
 8003b9e:	089b      	lsrs	r3, r3, #2
 8003ba0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6919      	ldr	r1, [r3, #16]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	b2da      	uxtb	r2, r3
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	6978      	ldr	r0, [r7, #20]
 8003bba:	f003 fd1b 	bl	80075f4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	691a      	ldr	r2, [r3, #16]
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	441a      	add	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6a1a      	ldr	r2, [r3, #32]
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	441a      	add	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	015a      	lsls	r2, r3, #5
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	4413      	add	r3, r2
 8003bde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003be6:	69ba      	ldr	r2, [r7, #24]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d809      	bhi.n	8003c00 <PCD_WriteEmptyTxFifo+0xe0>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6a1a      	ldr	r2, [r3, #32]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d203      	bcs.n	8003c00 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d1be      	bne.n	8003b7e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	699a      	ldr	r2, [r3, #24]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d811      	bhi.n	8003c30 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	f003 030f 	and.w	r3, r3, #15
 8003c12:	2201      	movs	r2, #1
 8003c14:	fa02 f303 	lsl.w	r3, r2, r3
 8003c18:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	43db      	mvns	r3, r3
 8003c26:	6939      	ldr	r1, [r7, #16]
 8003c28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3720      	adds	r7, #32
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
	...

08003c3c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b088      	sub	sp, #32
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	333c      	adds	r3, #60	@ 0x3c
 8003c54:	3304      	adds	r3, #4
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	015a      	lsls	r2, r3, #5
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	4413      	add	r3, r2
 8003c62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d17b      	bne.n	8003d6a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	f003 0308 	and.w	r3, r3, #8
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d015      	beq.n	8003ca8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	4a61      	ldr	r2, [pc, #388]	@ (8003e04 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	f240 80b9 	bls.w	8003df8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 80b3 	beq.w	8003df8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	015a      	lsls	r2, r3, #5
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	4413      	add	r3, r2
 8003c9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ca4:	6093      	str	r3, [r2, #8]
 8003ca6:	e0a7      	b.n	8003df8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	f003 0320 	and.w	r3, r3, #32
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d009      	beq.n	8003cc6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	015a      	lsls	r2, r3, #5
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	2320      	movs	r3, #32
 8003cc2:	6093      	str	r3, [r2, #8]
 8003cc4:	e098      	b.n	8003df8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f040 8093 	bne.w	8003df8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	4a4b      	ldr	r2, [pc, #300]	@ (8003e04 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d90f      	bls.n	8003cfa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00a      	beq.n	8003cfa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	015a      	lsls	r2, r3, #5
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	4413      	add	r3, r2
 8003cec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cf6:	6093      	str	r3, [r2, #8]
 8003cf8:	e07e      	b.n	8003df8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	00db      	lsls	r3, r3, #3
 8003d00:	4413      	add	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	3304      	adds	r3, #4
 8003d0e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	69da      	ldr	r2, [r3, #28]
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	0159      	lsls	r1, r3, #5
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	440b      	add	r3, r1
 8003d1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d26:	1ad2      	subs	r2, r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d114      	bne.n	8003d5c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d109      	bne.n	8003d4e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6818      	ldr	r0, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003d44:	461a      	mov	r2, r3
 8003d46:	2101      	movs	r1, #1
 8003d48:	f003 feea 	bl	8007b20 <USB_EP0_OutStart>
 8003d4c:	e006      	b.n	8003d5c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	691a      	ldr	r2, [r3, #16]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	441a      	add	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	4619      	mov	r1, r3
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f006 fa4c 	bl	800a200 <HAL_PCD_DataOutStageCallback>
 8003d68:	e046      	b.n	8003df8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	4a26      	ldr	r2, [pc, #152]	@ (8003e08 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d124      	bne.n	8003dbc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00a      	beq.n	8003d92 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	015a      	lsls	r2, r3, #5
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	4413      	add	r3, r2
 8003d84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d88:	461a      	mov	r2, r3
 8003d8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d8e:	6093      	str	r3, [r2, #8]
 8003d90:	e032      	b.n	8003df8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	f003 0320 	and.w	r3, r3, #32
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d008      	beq.n	8003dae <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	015a      	lsls	r2, r3, #5
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	4413      	add	r3, r2
 8003da4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003da8:	461a      	mov	r2, r3
 8003daa:	2320      	movs	r3, #32
 8003dac:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	4619      	mov	r1, r3
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f006 fa23 	bl	800a200 <HAL_PCD_DataOutStageCallback>
 8003dba:	e01d      	b.n	8003df8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d114      	bne.n	8003dec <PCD_EP_OutXfrComplete_int+0x1b0>
 8003dc2:	6879      	ldr	r1, [r7, #4]
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	00db      	lsls	r3, r3, #3
 8003dca:	4413      	add	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	440b      	add	r3, r1
 8003dd0:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d108      	bne.n	8003dec <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6818      	ldr	r0, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003de4:	461a      	mov	r2, r3
 8003de6:	2100      	movs	r1, #0
 8003de8:	f003 fe9a 	bl	8007b20 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	4619      	mov	r1, r3
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f006 fa04 	bl	800a200 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3720      	adds	r7, #32
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	4f54300a 	.word	0x4f54300a
 8003e08:	4f54310a 	.word	0x4f54310a

08003e0c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	333c      	adds	r3, #60	@ 0x3c
 8003e24:	3304      	adds	r3, #4
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	015a      	lsls	r2, r3, #5
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	4413      	add	r3, r2
 8003e32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	4a15      	ldr	r2, [pc, #84]	@ (8003e94 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d90e      	bls.n	8003e60 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d009      	beq.n	8003e60 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	015a      	lsls	r2, r3, #5
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	4413      	add	r3, r2
 8003e54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e58:	461a      	mov	r2, r3
 8003e5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e5e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f006 f9bb 	bl	800a1dc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	4a0a      	ldr	r2, [pc, #40]	@ (8003e94 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d90c      	bls.n	8003e88 <PCD_EP_OutSetupPacket_int+0x7c>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d108      	bne.n	8003e88 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6818      	ldr	r0, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003e80:	461a      	mov	r2, r3
 8003e82:	2101      	movs	r1, #1
 8003e84:	f003 fe4c 	bl	8007b20 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	4f54300a 	.word	0x4f54300a

08003e98 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	70fb      	strb	r3, [r7, #3]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eae:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003eb0:	78fb      	ldrb	r3, [r7, #3]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d107      	bne.n	8003ec6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003eb6:	883b      	ldrh	r3, [r7, #0]
 8003eb8:	0419      	lsls	r1, r3, #16
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ec4:	e028      	b.n	8003f18 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ecc:	0c1b      	lsrs	r3, r3, #16
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	73fb      	strb	r3, [r7, #15]
 8003ed8:	e00d      	b.n	8003ef6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	7bfb      	ldrb	r3, [r7, #15]
 8003ee0:	3340      	adds	r3, #64	@ 0x40
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4413      	add	r3, r2
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	0c1b      	lsrs	r3, r3, #16
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	4413      	add	r3, r2
 8003eee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ef0:	7bfb      	ldrb	r3, [r7, #15]
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	73fb      	strb	r3, [r7, #15]
 8003ef6:	7bfa      	ldrb	r2, [r7, #15]
 8003ef8:	78fb      	ldrb	r3, [r7, #3]
 8003efa:	3b01      	subs	r3, #1
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d3ec      	bcc.n	8003eda <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003f00:	883b      	ldrh	r3, [r7, #0]
 8003f02:	0418      	lsls	r0, r3, #16
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6819      	ldr	r1, [r3, #0]
 8003f08:	78fb      	ldrb	r3, [r7, #3]
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	4302      	orrs	r2, r0
 8003f10:	3340      	adds	r3, #64	@ 0x40
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	440b      	add	r3, r1
 8003f16:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3714      	adds	r7, #20
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003f26:	b480      	push	{r7}
 8003f28:	b083      	sub	sp, #12
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
 8003f2e:	460b      	mov	r3, r1
 8003f30:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	887a      	ldrh	r2, [r7, #2]
 8003f38:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f7a:	f043 0303 	orr.w	r3, r3, #3
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3714      	adds	r7, #20
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e0cc      	b.n	800413e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fa4:	4b68      	ldr	r3, [pc, #416]	@ (8004148 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 030f 	and.w	r3, r3, #15
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d90c      	bls.n	8003fcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fb2:	4b65      	ldr	r3, [pc, #404]	@ (8004148 <HAL_RCC_ClockConfig+0x1b8>)
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	b2d2      	uxtb	r2, r2
 8003fb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fba:	4b63      	ldr	r3, [pc, #396]	@ (8004148 <HAL_RCC_ClockConfig+0x1b8>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 030f 	and.w	r3, r3, #15
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d001      	beq.n	8003fcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e0b8      	b.n	800413e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d020      	beq.n	800401a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0304 	and.w	r3, r3, #4
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d005      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fe4:	4b59      	ldr	r3, [pc, #356]	@ (800414c <HAL_RCC_ClockConfig+0x1bc>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	4a58      	ldr	r2, [pc, #352]	@ (800414c <HAL_RCC_ClockConfig+0x1bc>)
 8003fea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003fee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0308 	and.w	r3, r3, #8
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d005      	beq.n	8004008 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ffc:	4b53      	ldr	r3, [pc, #332]	@ (800414c <HAL_RCC_ClockConfig+0x1bc>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	4a52      	ldr	r2, [pc, #328]	@ (800414c <HAL_RCC_ClockConfig+0x1bc>)
 8004002:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004006:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004008:	4b50      	ldr	r3, [pc, #320]	@ (800414c <HAL_RCC_ClockConfig+0x1bc>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	494d      	ldr	r1, [pc, #308]	@ (800414c <HAL_RCC_ClockConfig+0x1bc>)
 8004016:	4313      	orrs	r3, r2
 8004018:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d044      	beq.n	80040b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d107      	bne.n	800403e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800402e:	4b47      	ldr	r3, [pc, #284]	@ (800414c <HAL_RCC_ClockConfig+0x1bc>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d119      	bne.n	800406e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e07f      	b.n	800413e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2b02      	cmp	r3, #2
 8004044:	d003      	beq.n	800404e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800404a:	2b03      	cmp	r3, #3
 800404c:	d107      	bne.n	800405e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800404e:	4b3f      	ldr	r3, [pc, #252]	@ (800414c <HAL_RCC_ClockConfig+0x1bc>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d109      	bne.n	800406e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e06f      	b.n	800413e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800405e:	4b3b      	ldr	r3, [pc, #236]	@ (800414c <HAL_RCC_ClockConfig+0x1bc>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e067      	b.n	800413e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800406e:	4b37      	ldr	r3, [pc, #220]	@ (800414c <HAL_RCC_ClockConfig+0x1bc>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f023 0203 	bic.w	r2, r3, #3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	4934      	ldr	r1, [pc, #208]	@ (800414c <HAL_RCC_ClockConfig+0x1bc>)
 800407c:	4313      	orrs	r3, r2
 800407e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004080:	f7fd fd84 	bl	8001b8c <HAL_GetTick>
 8004084:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004086:	e00a      	b.n	800409e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004088:	f7fd fd80 	bl	8001b8c <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004096:	4293      	cmp	r3, r2
 8004098:	d901      	bls.n	800409e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e04f      	b.n	800413e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800409e:	4b2b      	ldr	r3, [pc, #172]	@ (800414c <HAL_RCC_ClockConfig+0x1bc>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f003 020c 	and.w	r2, r3, #12
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d1eb      	bne.n	8004088 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040b0:	4b25      	ldr	r3, [pc, #148]	@ (8004148 <HAL_RCC_ClockConfig+0x1b8>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 030f 	and.w	r3, r3, #15
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d20c      	bcs.n	80040d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040be:	4b22      	ldr	r3, [pc, #136]	@ (8004148 <HAL_RCC_ClockConfig+0x1b8>)
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	b2d2      	uxtb	r2, r2
 80040c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040c6:	4b20      	ldr	r3, [pc, #128]	@ (8004148 <HAL_RCC_ClockConfig+0x1b8>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 030f 	and.w	r3, r3, #15
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d001      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e032      	b.n	800413e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d008      	beq.n	80040f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040e4:	4b19      	ldr	r3, [pc, #100]	@ (800414c <HAL_RCC_ClockConfig+0x1bc>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	4916      	ldr	r1, [pc, #88]	@ (800414c <HAL_RCC_ClockConfig+0x1bc>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0308 	and.w	r3, r3, #8
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d009      	beq.n	8004116 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004102:	4b12      	ldr	r3, [pc, #72]	@ (800414c <HAL_RCC_ClockConfig+0x1bc>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	490e      	ldr	r1, [pc, #56]	@ (800414c <HAL_RCC_ClockConfig+0x1bc>)
 8004112:	4313      	orrs	r3, r2
 8004114:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004116:	f000 fb7f 	bl	8004818 <HAL_RCC_GetSysClockFreq>
 800411a:	4602      	mov	r2, r0
 800411c:	4b0b      	ldr	r3, [pc, #44]	@ (800414c <HAL_RCC_ClockConfig+0x1bc>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	091b      	lsrs	r3, r3, #4
 8004122:	f003 030f 	and.w	r3, r3, #15
 8004126:	490a      	ldr	r1, [pc, #40]	@ (8004150 <HAL_RCC_ClockConfig+0x1c0>)
 8004128:	5ccb      	ldrb	r3, [r1, r3]
 800412a:	fa22 f303 	lsr.w	r3, r2, r3
 800412e:	4a09      	ldr	r2, [pc, #36]	@ (8004154 <HAL_RCC_ClockConfig+0x1c4>)
 8004130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004132:	4b09      	ldr	r3, [pc, #36]	@ (8004158 <HAL_RCC_ClockConfig+0x1c8>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4618      	mov	r0, r3
 8004138:	f7fd fce4 	bl	8001b04 <HAL_InitTick>

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	40023c00 	.word	0x40023c00
 800414c:	40023800 	.word	0x40023800
 8004150:	0800a8b0 	.word	0x0800a8b0
 8004154:	20000000 	.word	0x20000000
 8004158:	20000004 	.word	0x20000004

0800415c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800415c:	b480      	push	{r7}
 800415e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004160:	4b03      	ldr	r3, [pc, #12]	@ (8004170 <HAL_RCC_GetHCLKFreq+0x14>)
 8004162:	681b      	ldr	r3, [r3, #0]
}
 8004164:	4618      	mov	r0, r3
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	20000000 	.word	0x20000000

08004174 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004178:	f7ff fff0 	bl	800415c <HAL_RCC_GetHCLKFreq>
 800417c:	4602      	mov	r2, r0
 800417e:	4b05      	ldr	r3, [pc, #20]	@ (8004194 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	0a9b      	lsrs	r3, r3, #10
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	4903      	ldr	r1, [pc, #12]	@ (8004198 <HAL_RCC_GetPCLK1Freq+0x24>)
 800418a:	5ccb      	ldrb	r3, [r1, r3]
 800418c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004190:	4618      	mov	r0, r3
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40023800 	.word	0x40023800
 8004198:	0800a8c0 	.word	0x0800a8c0

0800419c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80041a0:	f7ff ffdc 	bl	800415c <HAL_RCC_GetHCLKFreq>
 80041a4:	4602      	mov	r2, r0
 80041a6:	4b05      	ldr	r3, [pc, #20]	@ (80041bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	0b5b      	lsrs	r3, r3, #13
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	4903      	ldr	r1, [pc, #12]	@ (80041c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041b2:	5ccb      	ldrb	r3, [r1, r3]
 80041b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	40023800 	.word	0x40023800
 80041c0:	0800a8c0 	.word	0x0800a8c0

080041c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b08c      	sub	sp, #48	@ 0x30
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041cc:	2300      	movs	r3, #0
 80041ce:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 80041d0:	2300      	movs	r3, #0
 80041d2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80041d4:	2300      	movs	r3, #0
 80041d6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80041d8:	2300      	movs	r3, #0
 80041da:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80041dc:	2300      	movs	r3, #0
 80041de:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80041e0:	2300      	movs	r3, #0
 80041e2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80041e4:	2300      	movs	r3, #0
 80041e6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80041e8:	2300      	movs	r3, #0
 80041ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 80041ec:	2300      	movs	r3, #0
 80041ee:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d010      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80041fc:	4b6f      	ldr	r3, [pc, #444]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80041fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004202:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800420a:	496c      	ldr	r1, [pc, #432]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800420c:	4313      	orrs	r3, r2
 800420e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800421a:	2301      	movs	r3, #1
 800421c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d010      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800422a:	4b64      	ldr	r3, [pc, #400]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800422c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004230:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004238:	4960      	ldr	r1, [pc, #384]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800423a:	4313      	orrs	r3, r2
 800423c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004244:	2b00      	cmp	r3, #0
 8004246:	d101      	bne.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004248:	2301      	movs	r3, #1
 800424a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	2b00      	cmp	r3, #0
 8004256:	d017      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004258:	4b58      	ldr	r3, [pc, #352]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800425a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800425e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004266:	4955      	ldr	r1, [pc, #340]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004268:	4313      	orrs	r3, r2
 800426a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004272:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004276:	d101      	bne.n	800427c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004278:	2301      	movs	r3, #1
 800427a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004280:	2b00      	cmp	r3, #0
 8004282:	d101      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8004284:	2301      	movs	r3, #1
 8004286:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0308 	and.w	r3, r3, #8
 8004290:	2b00      	cmp	r3, #0
 8004292:	d017      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004294:	4b49      	ldr	r3, [pc, #292]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004296:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800429a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042a2:	4946      	ldr	r1, [pc, #280]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042b2:	d101      	bne.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80042b4:	2301      	movs	r3, #1
 80042b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d101      	bne.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80042c0:	2301      	movs	r3, #1
 80042c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0320 	and.w	r3, r3, #32
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 808a 	beq.w	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80042d2:	2300      	movs	r3, #0
 80042d4:	60bb      	str	r3, [r7, #8]
 80042d6:	4b39      	ldr	r3, [pc, #228]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042da:	4a38      	ldr	r2, [pc, #224]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80042e2:	4b36      	ldr	r3, [pc, #216]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80042e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042ea:	60bb      	str	r3, [r7, #8]
 80042ec:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80042ee:	4b34      	ldr	r3, [pc, #208]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a33      	ldr	r2, [pc, #204]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80042f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042f8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80042fa:	f7fd fc47 	bl	8001b8c <HAL_GetTick>
 80042fe:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004300:	e008      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004302:	f7fd fc43 	bl	8001b8c <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	2b02      	cmp	r3, #2
 800430e:	d901      	bls.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e278      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004314:	4b2a      	ldr	r3, [pc, #168]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800431c:	2b00      	cmp	r3, #0
 800431e:	d0f0      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004320:	4b26      	ldr	r3, [pc, #152]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004324:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004328:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800432a:	6a3b      	ldr	r3, [r7, #32]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d02f      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004334:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004338:	6a3a      	ldr	r2, [r7, #32]
 800433a:	429a      	cmp	r2, r3
 800433c:	d028      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800433e:	4b1f      	ldr	r3, [pc, #124]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004342:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004346:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004348:	4b1e      	ldr	r3, [pc, #120]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800434a:	2201      	movs	r2, #1
 800434c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800434e:	4b1d      	ldr	r3, [pc, #116]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004350:	2200      	movs	r2, #0
 8004352:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004354:	4a19      	ldr	r2, [pc, #100]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004356:	6a3b      	ldr	r3, [r7, #32]
 8004358:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800435a:	4b18      	ldr	r3, [pc, #96]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800435c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b01      	cmp	r3, #1
 8004364:	d114      	bne.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004366:	f7fd fc11 	bl	8001b8c <HAL_GetTick>
 800436a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800436c:	e00a      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800436e:	f7fd fc0d 	bl	8001b8c <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	f241 3288 	movw	r2, #5000	@ 0x1388
 800437c:	4293      	cmp	r3, r2
 800437e:	d901      	bls.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e240      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004384:	4b0d      	ldr	r3, [pc, #52]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d0ee      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004394:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004398:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800439c:	d114      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800439e:	4b07      	ldr	r3, [pc, #28]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043aa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80043ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043b2:	4902      	ldr	r1, [pc, #8]	@ (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	608b      	str	r3, [r1, #8]
 80043b8:	e00c      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80043ba:	bf00      	nop
 80043bc:	40023800 	.word	0x40023800
 80043c0:	40007000 	.word	0x40007000
 80043c4:	42470e40 	.word	0x42470e40
 80043c8:	4b4a      	ldr	r3, [pc, #296]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	4a49      	ldr	r2, [pc, #292]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80043ce:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80043d2:	6093      	str	r3, [r2, #8]
 80043d4:	4b47      	ldr	r3, [pc, #284]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80043d6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043e0:	4944      	ldr	r1, [pc, #272]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0310 	and.w	r3, r3, #16
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d004      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80043f8:	4b3f      	ldr	r3, [pc, #252]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80043fa:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00a      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004408:	4b3a      	ldr	r3, [pc, #232]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800440a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800440e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004416:	4937      	ldr	r1, [pc, #220]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004418:	4313      	orrs	r3, r2
 800441a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00a      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800442a:	4b32      	ldr	r3, [pc, #200]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800442c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004430:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004438:	492e      	ldr	r1, [pc, #184]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800443a:	4313      	orrs	r3, r2
 800443c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004448:	2b00      	cmp	r3, #0
 800444a:	d011      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800444c:	4b29      	ldr	r3, [pc, #164]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800444e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004452:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800445a:	4926      	ldr	r1, [pc, #152]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800445c:	4313      	orrs	r3, r2
 800445e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004466:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800446a:	d101      	bne.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800446c:	2301      	movs	r3, #1
 800446e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00a      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800447c:	4b1d      	ldr	r3, [pc, #116]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800447e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004482:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800448a:	491a      	ldr	r1, [pc, #104]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800448c:	4313      	orrs	r3, r2
 800448e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800449a:	2b00      	cmp	r3, #0
 800449c:	d011      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800449e:	4b15      	ldr	r3, [pc, #84]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80044a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044a4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044ac:	4911      	ldr	r1, [pc, #68]	@ (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044bc:	d101      	bne.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80044be:	2301      	movs	r3, #1
 80044c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80044c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d005      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044d0:	f040 80ff 	bne.w	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80044d4:	4b09      	ldr	r3, [pc, #36]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044da:	f7fd fb57 	bl	8001b8c <HAL_GetTick>
 80044de:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044e0:	e00e      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80044e2:	f7fd fb53 	bl	8001b8c <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d907      	bls.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e188      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80044f4:	40023800 	.word	0x40023800
 80044f8:	424711e0 	.word	0x424711e0
 80044fc:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004500:	4b7e      	ldr	r3, [pc, #504]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1ea      	bne.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0301 	and.w	r3, r3, #1
 8004514:	2b00      	cmp	r3, #0
 8004516:	d003      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800451c:	2b00      	cmp	r3, #0
 800451e:	d009      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004528:	2b00      	cmp	r3, #0
 800452a:	d028      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004530:	2b00      	cmp	r3, #0
 8004532:	d124      	bne.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004534:	4b71      	ldr	r3, [pc, #452]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004536:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800453a:	0c1b      	lsrs	r3, r3, #16
 800453c:	f003 0303 	and.w	r3, r3, #3
 8004540:	3301      	adds	r3, #1
 8004542:	005b      	lsls	r3, r3, #1
 8004544:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004546:	4b6d      	ldr	r3, [pc, #436]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004548:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800454c:	0e1b      	lsrs	r3, r3, #24
 800454e:	f003 030f 	and.w	r3, r3, #15
 8004552:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	019b      	lsls	r3, r3, #6
 800455e:	431a      	orrs	r2, r3
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	085b      	lsrs	r3, r3, #1
 8004564:	3b01      	subs	r3, #1
 8004566:	041b      	lsls	r3, r3, #16
 8004568:	431a      	orrs	r2, r3
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	061b      	lsls	r3, r3, #24
 800456e:	431a      	orrs	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	695b      	ldr	r3, [r3, #20]
 8004574:	071b      	lsls	r3, r3, #28
 8004576:	4961      	ldr	r1, [pc, #388]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004578:	4313      	orrs	r3, r2
 800457a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0304 	and.w	r3, r3, #4
 8004586:	2b00      	cmp	r3, #0
 8004588:	d004      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800458e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004592:	d00a      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800459c:	2b00      	cmp	r3, #0
 800459e:	d035      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045a8:	d130      	bne.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80045aa:	4b54      	ldr	r3, [pc, #336]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80045ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045b0:	0c1b      	lsrs	r3, r3, #16
 80045b2:	f003 0303 	and.w	r3, r3, #3
 80045b6:	3301      	adds	r3, #1
 80045b8:	005b      	lsls	r3, r3, #1
 80045ba:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80045bc:	4b4f      	ldr	r3, [pc, #316]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80045be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045c2:	0f1b      	lsrs	r3, r3, #28
 80045c4:	f003 0307 	and.w	r3, r3, #7
 80045c8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	019b      	lsls	r3, r3, #6
 80045d4:	431a      	orrs	r2, r3
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	085b      	lsrs	r3, r3, #1
 80045da:	3b01      	subs	r3, #1
 80045dc:	041b      	lsls	r3, r3, #16
 80045de:	431a      	orrs	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	061b      	lsls	r3, r3, #24
 80045e6:	431a      	orrs	r2, r3
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	071b      	lsls	r3, r3, #28
 80045ec:	4943      	ldr	r1, [pc, #268]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80045f4:	4b41      	ldr	r3, [pc, #260]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80045f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045fa:	f023 021f 	bic.w	r2, r3, #31
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004602:	3b01      	subs	r3, #1
 8004604:	493d      	ldr	r1, [pc, #244]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004606:	4313      	orrs	r3, r2
 8004608:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004614:	2b00      	cmp	r3, #0
 8004616:	d029      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800461c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004620:	d124      	bne.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004622:	4b36      	ldr	r3, [pc, #216]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004624:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004628:	0c1b      	lsrs	r3, r3, #16
 800462a:	f003 0303 	and.w	r3, r3, #3
 800462e:	3301      	adds	r3, #1
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004634:	4b31      	ldr	r3, [pc, #196]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004636:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800463a:	0f1b      	lsrs	r3, r3, #28
 800463c:	f003 0307 	and.w	r3, r3, #7
 8004640:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685a      	ldr	r2, [r3, #4]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	019b      	lsls	r3, r3, #6
 800464c:	431a      	orrs	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	085b      	lsrs	r3, r3, #1
 8004654:	3b01      	subs	r3, #1
 8004656:	041b      	lsls	r3, r3, #16
 8004658:	431a      	orrs	r2, r3
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	061b      	lsls	r3, r3, #24
 800465e:	431a      	orrs	r2, r3
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	071b      	lsls	r3, r3, #28
 8004664:	4925      	ldr	r1, [pc, #148]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004666:	4313      	orrs	r3, r2
 8004668:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004674:	2b00      	cmp	r3, #0
 8004676:	d016      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	019b      	lsls	r3, r3, #6
 8004682:	431a      	orrs	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	085b      	lsrs	r3, r3, #1
 800468a:	3b01      	subs	r3, #1
 800468c:	041b      	lsls	r3, r3, #16
 800468e:	431a      	orrs	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	061b      	lsls	r3, r3, #24
 8004696:	431a      	orrs	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	071b      	lsls	r3, r3, #28
 800469e:	4917      	ldr	r1, [pc, #92]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80046a6:	4b16      	ldr	r3, [pc, #88]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80046a8:	2201      	movs	r2, #1
 80046aa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046ac:	f7fd fa6e 	bl	8001b8c <HAL_GetTick>
 80046b0:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046b2:	e008      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80046b4:	f7fd fa6a 	bl	8001b8c <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e09f      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046c6:	4b0d      	ldr	r3, [pc, #52]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d0f0      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80046d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	f040 8095 	bne.w	8004804 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80046da:	4b0a      	ldr	r3, [pc, #40]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80046dc:	2200      	movs	r2, #0
 80046de:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046e0:	f7fd fa54 	bl	8001b8c <HAL_GetTick>
 80046e4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80046e6:	e00f      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80046e8:	f7fd fa50 	bl	8001b8c <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d908      	bls.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e085      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80046fa:	bf00      	nop
 80046fc:	40023800 	.word	0x40023800
 8004700:	42470068 	.word	0x42470068
 8004704:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004708:	4b41      	ldr	r3, [pc, #260]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004710:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004714:	d0e8      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0304 	and.w	r3, r3, #4
 800471e:	2b00      	cmp	r3, #0
 8004720:	d003      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004726:	2b00      	cmp	r3, #0
 8004728:	d009      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004732:	2b00      	cmp	r3, #0
 8004734:	d02b      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800473a:	2b00      	cmp	r3, #0
 800473c:	d127      	bne.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800473e:	4b34      	ldr	r3, [pc, #208]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004740:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004744:	0c1b      	lsrs	r3, r3, #16
 8004746:	f003 0303 	and.w	r3, r3, #3
 800474a:	3301      	adds	r3, #1
 800474c:	005b      	lsls	r3, r3, #1
 800474e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	699a      	ldr	r2, [r3, #24]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	69db      	ldr	r3, [r3, #28]
 8004758:	019b      	lsls	r3, r3, #6
 800475a:	431a      	orrs	r2, r3
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	085b      	lsrs	r3, r3, #1
 8004760:	3b01      	subs	r3, #1
 8004762:	041b      	lsls	r3, r3, #16
 8004764:	431a      	orrs	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476a:	061b      	lsls	r3, r3, #24
 800476c:	4928      	ldr	r1, [pc, #160]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800476e:	4313      	orrs	r3, r2
 8004770:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004774:	4b26      	ldr	r3, [pc, #152]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004776:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800477a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004782:	3b01      	subs	r3, #1
 8004784:	021b      	lsls	r3, r3, #8
 8004786:	4922      	ldr	r1, [pc, #136]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004788:	4313      	orrs	r3, r2
 800478a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004796:	2b00      	cmp	r3, #0
 8004798:	d01d      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800479e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047a2:	d118      	bne.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80047a4:	4b1a      	ldr	r3, [pc, #104]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80047a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047aa:	0e1b      	lsrs	r3, r3, #24
 80047ac:	f003 030f 	and.w	r3, r3, #15
 80047b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	699a      	ldr	r2, [r3, #24]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	019b      	lsls	r3, r3, #6
 80047bc:	431a      	orrs	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	085b      	lsrs	r3, r3, #1
 80047c4:	3b01      	subs	r3, #1
 80047c6:	041b      	lsls	r3, r3, #16
 80047c8:	431a      	orrs	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	061b      	lsls	r3, r3, #24
 80047ce:	4910      	ldr	r1, [pc, #64]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80047d6:	4b0f      	ldr	r3, [pc, #60]	@ (8004814 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80047d8:	2201      	movs	r2, #1
 80047da:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80047dc:	f7fd f9d6 	bl	8001b8c <HAL_GetTick>
 80047e0:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80047e2:	e008      	b.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80047e4:	f7fd f9d2 	bl	8001b8c <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d901      	bls.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e007      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80047f6:	4b06      	ldr	r3, [pc, #24]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004802:	d1ef      	bne.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3730      	adds	r7, #48	@ 0x30
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	40023800 	.word	0x40023800
 8004814:	42470070 	.word	0x42470070

08004818 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800481c:	b0ae      	sub	sp, #184	@ 0xb8
 800481e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004820:	2300      	movs	r3, #0
 8004822:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004826:	2300      	movs	r3, #0
 8004828:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800482c:	2300      	movs	r3, #0
 800482e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004832:	2300      	movs	r3, #0
 8004834:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004838:	2300      	movs	r3, #0
 800483a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800483e:	4bcb      	ldr	r3, [pc, #812]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x354>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f003 030c 	and.w	r3, r3, #12
 8004846:	2b0c      	cmp	r3, #12
 8004848:	f200 8206 	bhi.w	8004c58 <HAL_RCC_GetSysClockFreq+0x440>
 800484c:	a201      	add	r2, pc, #4	@ (adr r2, 8004854 <HAL_RCC_GetSysClockFreq+0x3c>)
 800484e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004852:	bf00      	nop
 8004854:	08004889 	.word	0x08004889
 8004858:	08004c59 	.word	0x08004c59
 800485c:	08004c59 	.word	0x08004c59
 8004860:	08004c59 	.word	0x08004c59
 8004864:	08004891 	.word	0x08004891
 8004868:	08004c59 	.word	0x08004c59
 800486c:	08004c59 	.word	0x08004c59
 8004870:	08004c59 	.word	0x08004c59
 8004874:	08004899 	.word	0x08004899
 8004878:	08004c59 	.word	0x08004c59
 800487c:	08004c59 	.word	0x08004c59
 8004880:	08004c59 	.word	0x08004c59
 8004884:	08004a89 	.word	0x08004a89
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004888:	4bb9      	ldr	r3, [pc, #740]	@ (8004b70 <HAL_RCC_GetSysClockFreq+0x358>)
 800488a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800488e:	e1e7      	b.n	8004c60 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004890:	4bb8      	ldr	r3, [pc, #736]	@ (8004b74 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004892:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004896:	e1e3      	b.n	8004c60 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004898:	4bb4      	ldr	r3, [pc, #720]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x354>)
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048a4:	4bb1      	ldr	r3, [pc, #708]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x354>)
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d071      	beq.n	8004994 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048b0:	4bae      	ldr	r3, [pc, #696]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x354>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	099b      	lsrs	r3, r3, #6
 80048b6:	2200      	movs	r2, #0
 80048b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80048bc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80048c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80048c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80048cc:	2300      	movs	r3, #0
 80048ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80048d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80048d6:	4622      	mov	r2, r4
 80048d8:	462b      	mov	r3, r5
 80048da:	f04f 0000 	mov.w	r0, #0
 80048de:	f04f 0100 	mov.w	r1, #0
 80048e2:	0159      	lsls	r1, r3, #5
 80048e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048e8:	0150      	lsls	r0, r2, #5
 80048ea:	4602      	mov	r2, r0
 80048ec:	460b      	mov	r3, r1
 80048ee:	4621      	mov	r1, r4
 80048f0:	1a51      	subs	r1, r2, r1
 80048f2:	6439      	str	r1, [r7, #64]	@ 0x40
 80048f4:	4629      	mov	r1, r5
 80048f6:	eb63 0301 	sbc.w	r3, r3, r1
 80048fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80048fc:	f04f 0200 	mov.w	r2, #0
 8004900:	f04f 0300 	mov.w	r3, #0
 8004904:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004908:	4649      	mov	r1, r9
 800490a:	018b      	lsls	r3, r1, #6
 800490c:	4641      	mov	r1, r8
 800490e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004912:	4641      	mov	r1, r8
 8004914:	018a      	lsls	r2, r1, #6
 8004916:	4641      	mov	r1, r8
 8004918:	1a51      	subs	r1, r2, r1
 800491a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800491c:	4649      	mov	r1, r9
 800491e:	eb63 0301 	sbc.w	r3, r3, r1
 8004922:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004924:	f04f 0200 	mov.w	r2, #0
 8004928:	f04f 0300 	mov.w	r3, #0
 800492c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004930:	4649      	mov	r1, r9
 8004932:	00cb      	lsls	r3, r1, #3
 8004934:	4641      	mov	r1, r8
 8004936:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800493a:	4641      	mov	r1, r8
 800493c:	00ca      	lsls	r2, r1, #3
 800493e:	4610      	mov	r0, r2
 8004940:	4619      	mov	r1, r3
 8004942:	4603      	mov	r3, r0
 8004944:	4622      	mov	r2, r4
 8004946:	189b      	adds	r3, r3, r2
 8004948:	633b      	str	r3, [r7, #48]	@ 0x30
 800494a:	462b      	mov	r3, r5
 800494c:	460a      	mov	r2, r1
 800494e:	eb42 0303 	adc.w	r3, r2, r3
 8004952:	637b      	str	r3, [r7, #52]	@ 0x34
 8004954:	f04f 0200 	mov.w	r2, #0
 8004958:	f04f 0300 	mov.w	r3, #0
 800495c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004960:	4629      	mov	r1, r5
 8004962:	024b      	lsls	r3, r1, #9
 8004964:	4621      	mov	r1, r4
 8004966:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800496a:	4621      	mov	r1, r4
 800496c:	024a      	lsls	r2, r1, #9
 800496e:	4610      	mov	r0, r2
 8004970:	4619      	mov	r1, r3
 8004972:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004976:	2200      	movs	r2, #0
 8004978:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800497c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004980:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004984:	f7fb fc3e 	bl	8000204 <__aeabi_uldivmod>
 8004988:	4602      	mov	r2, r0
 800498a:	460b      	mov	r3, r1
 800498c:	4613      	mov	r3, r2
 800498e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004992:	e067      	b.n	8004a64 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004994:	4b75      	ldr	r3, [pc, #468]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x354>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	099b      	lsrs	r3, r3, #6
 800499a:	2200      	movs	r2, #0
 800499c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80049a0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80049a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80049a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80049ae:	2300      	movs	r3, #0
 80049b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80049b2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80049b6:	4622      	mov	r2, r4
 80049b8:	462b      	mov	r3, r5
 80049ba:	f04f 0000 	mov.w	r0, #0
 80049be:	f04f 0100 	mov.w	r1, #0
 80049c2:	0159      	lsls	r1, r3, #5
 80049c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049c8:	0150      	lsls	r0, r2, #5
 80049ca:	4602      	mov	r2, r0
 80049cc:	460b      	mov	r3, r1
 80049ce:	4621      	mov	r1, r4
 80049d0:	1a51      	subs	r1, r2, r1
 80049d2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80049d4:	4629      	mov	r1, r5
 80049d6:	eb63 0301 	sbc.w	r3, r3, r1
 80049da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049dc:	f04f 0200 	mov.w	r2, #0
 80049e0:	f04f 0300 	mov.w	r3, #0
 80049e4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80049e8:	4649      	mov	r1, r9
 80049ea:	018b      	lsls	r3, r1, #6
 80049ec:	4641      	mov	r1, r8
 80049ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049f2:	4641      	mov	r1, r8
 80049f4:	018a      	lsls	r2, r1, #6
 80049f6:	4641      	mov	r1, r8
 80049f8:	ebb2 0a01 	subs.w	sl, r2, r1
 80049fc:	4649      	mov	r1, r9
 80049fe:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a02:	f04f 0200 	mov.w	r2, #0
 8004a06:	f04f 0300 	mov.w	r3, #0
 8004a0a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a0e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a16:	4692      	mov	sl, r2
 8004a18:	469b      	mov	fp, r3
 8004a1a:	4623      	mov	r3, r4
 8004a1c:	eb1a 0303 	adds.w	r3, sl, r3
 8004a20:	623b      	str	r3, [r7, #32]
 8004a22:	462b      	mov	r3, r5
 8004a24:	eb4b 0303 	adc.w	r3, fp, r3
 8004a28:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a2a:	f04f 0200 	mov.w	r2, #0
 8004a2e:	f04f 0300 	mov.w	r3, #0
 8004a32:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004a36:	4629      	mov	r1, r5
 8004a38:	028b      	lsls	r3, r1, #10
 8004a3a:	4621      	mov	r1, r4
 8004a3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a40:	4621      	mov	r1, r4
 8004a42:	028a      	lsls	r2, r1, #10
 8004a44:	4610      	mov	r0, r2
 8004a46:	4619      	mov	r1, r3
 8004a48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a50:	677a      	str	r2, [r7, #116]	@ 0x74
 8004a52:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004a56:	f7fb fbd5 	bl	8000204 <__aeabi_uldivmod>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	4613      	mov	r3, r2
 8004a60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a64:	4b41      	ldr	r3, [pc, #260]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x354>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	0c1b      	lsrs	r3, r3, #16
 8004a6a:	f003 0303 	and.w	r3, r3, #3
 8004a6e:	3301      	adds	r3, #1
 8004a70:	005b      	lsls	r3, r3, #1
 8004a72:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8004a76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004a7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004a86:	e0eb      	b.n	8004c60 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a88:	4b38      	ldr	r3, [pc, #224]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x354>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a94:	4b35      	ldr	r3, [pc, #212]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x354>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d06b      	beq.n	8004b78 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aa0:	4b32      	ldr	r3, [pc, #200]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x354>)
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	099b      	lsrs	r3, r3, #6
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004aaa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004aac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ab2:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	667b      	str	r3, [r7, #100]	@ 0x64
 8004ab8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004abc:	4622      	mov	r2, r4
 8004abe:	462b      	mov	r3, r5
 8004ac0:	f04f 0000 	mov.w	r0, #0
 8004ac4:	f04f 0100 	mov.w	r1, #0
 8004ac8:	0159      	lsls	r1, r3, #5
 8004aca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ace:	0150      	lsls	r0, r2, #5
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	4621      	mov	r1, r4
 8004ad6:	1a51      	subs	r1, r2, r1
 8004ad8:	61b9      	str	r1, [r7, #24]
 8004ada:	4629      	mov	r1, r5
 8004adc:	eb63 0301 	sbc.w	r3, r3, r1
 8004ae0:	61fb      	str	r3, [r7, #28]
 8004ae2:	f04f 0200 	mov.w	r2, #0
 8004ae6:	f04f 0300 	mov.w	r3, #0
 8004aea:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004aee:	4659      	mov	r1, fp
 8004af0:	018b      	lsls	r3, r1, #6
 8004af2:	4651      	mov	r1, sl
 8004af4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004af8:	4651      	mov	r1, sl
 8004afa:	018a      	lsls	r2, r1, #6
 8004afc:	4651      	mov	r1, sl
 8004afe:	ebb2 0801 	subs.w	r8, r2, r1
 8004b02:	4659      	mov	r1, fp
 8004b04:	eb63 0901 	sbc.w	r9, r3, r1
 8004b08:	f04f 0200 	mov.w	r2, #0
 8004b0c:	f04f 0300 	mov.w	r3, #0
 8004b10:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b14:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b18:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b1c:	4690      	mov	r8, r2
 8004b1e:	4699      	mov	r9, r3
 8004b20:	4623      	mov	r3, r4
 8004b22:	eb18 0303 	adds.w	r3, r8, r3
 8004b26:	613b      	str	r3, [r7, #16]
 8004b28:	462b      	mov	r3, r5
 8004b2a:	eb49 0303 	adc.w	r3, r9, r3
 8004b2e:	617b      	str	r3, [r7, #20]
 8004b30:	f04f 0200 	mov.w	r2, #0
 8004b34:	f04f 0300 	mov.w	r3, #0
 8004b38:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004b3c:	4629      	mov	r1, r5
 8004b3e:	024b      	lsls	r3, r1, #9
 8004b40:	4621      	mov	r1, r4
 8004b42:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b46:	4621      	mov	r1, r4
 8004b48:	024a      	lsls	r2, r1, #9
 8004b4a:	4610      	mov	r0, r2
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b52:	2200      	movs	r2, #0
 8004b54:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b56:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004b58:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004b5c:	f7fb fb52 	bl	8000204 <__aeabi_uldivmod>
 8004b60:	4602      	mov	r2, r0
 8004b62:	460b      	mov	r3, r1
 8004b64:	4613      	mov	r3, r2
 8004b66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b6a:	e065      	b.n	8004c38 <HAL_RCC_GetSysClockFreq+0x420>
 8004b6c:	40023800 	.word	0x40023800
 8004b70:	00f42400 	.word	0x00f42400
 8004b74:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b78:	4b3d      	ldr	r3, [pc, #244]	@ (8004c70 <HAL_RCC_GetSysClockFreq+0x458>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	099b      	lsrs	r3, r3, #6
 8004b7e:	2200      	movs	r2, #0
 8004b80:	4618      	mov	r0, r3
 8004b82:	4611      	mov	r1, r2
 8004b84:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b88:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b8e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004b92:	4642      	mov	r2, r8
 8004b94:	464b      	mov	r3, r9
 8004b96:	f04f 0000 	mov.w	r0, #0
 8004b9a:	f04f 0100 	mov.w	r1, #0
 8004b9e:	0159      	lsls	r1, r3, #5
 8004ba0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ba4:	0150      	lsls	r0, r2, #5
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	460b      	mov	r3, r1
 8004baa:	4641      	mov	r1, r8
 8004bac:	1a51      	subs	r1, r2, r1
 8004bae:	60b9      	str	r1, [r7, #8]
 8004bb0:	4649      	mov	r1, r9
 8004bb2:	eb63 0301 	sbc.w	r3, r3, r1
 8004bb6:	60fb      	str	r3, [r7, #12]
 8004bb8:	f04f 0200 	mov.w	r2, #0
 8004bbc:	f04f 0300 	mov.w	r3, #0
 8004bc0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004bc4:	4659      	mov	r1, fp
 8004bc6:	018b      	lsls	r3, r1, #6
 8004bc8:	4651      	mov	r1, sl
 8004bca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004bce:	4651      	mov	r1, sl
 8004bd0:	018a      	lsls	r2, r1, #6
 8004bd2:	4651      	mov	r1, sl
 8004bd4:	1a54      	subs	r4, r2, r1
 8004bd6:	4659      	mov	r1, fp
 8004bd8:	eb63 0501 	sbc.w	r5, r3, r1
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	f04f 0300 	mov.w	r3, #0
 8004be4:	00eb      	lsls	r3, r5, #3
 8004be6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bea:	00e2      	lsls	r2, r4, #3
 8004bec:	4614      	mov	r4, r2
 8004bee:	461d      	mov	r5, r3
 8004bf0:	4643      	mov	r3, r8
 8004bf2:	18e3      	adds	r3, r4, r3
 8004bf4:	603b      	str	r3, [r7, #0]
 8004bf6:	464b      	mov	r3, r9
 8004bf8:	eb45 0303 	adc.w	r3, r5, r3
 8004bfc:	607b      	str	r3, [r7, #4]
 8004bfe:	f04f 0200 	mov.w	r2, #0
 8004c02:	f04f 0300 	mov.w	r3, #0
 8004c06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c0a:	4629      	mov	r1, r5
 8004c0c:	028b      	lsls	r3, r1, #10
 8004c0e:	4621      	mov	r1, r4
 8004c10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c14:	4621      	mov	r1, r4
 8004c16:	028a      	lsls	r2, r1, #10
 8004c18:	4610      	mov	r0, r2
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c20:	2200      	movs	r2, #0
 8004c22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c24:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004c26:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004c2a:	f7fb faeb 	bl	8000204 <__aeabi_uldivmod>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	460b      	mov	r3, r1
 8004c32:	4613      	mov	r3, r2
 8004c34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004c38:	4b0d      	ldr	r3, [pc, #52]	@ (8004c70 <HAL_RCC_GetSysClockFreq+0x458>)
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	0f1b      	lsrs	r3, r3, #28
 8004c3e:	f003 0307 	and.w	r3, r3, #7
 8004c42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8004c46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004c4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004c56:	e003      	b.n	8004c60 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c58:	4b06      	ldr	r3, [pc, #24]	@ (8004c74 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004c5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004c5e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	37b8      	adds	r7, #184	@ 0xb8
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c6e:	bf00      	nop
 8004c70:	40023800 	.word	0x40023800
 8004c74:	00f42400 	.word	0x00f42400

08004c78 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b086      	sub	sp, #24
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e28d      	b.n	80051a6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 8083 	beq.w	8004d9e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004c98:	4b94      	ldr	r3, [pc, #592]	@ (8004eec <HAL_RCC_OscConfig+0x274>)
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f003 030c 	and.w	r3, r3, #12
 8004ca0:	2b04      	cmp	r3, #4
 8004ca2:	d019      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ca4:	4b91      	ldr	r3, [pc, #580]	@ (8004eec <HAL_RCC_OscConfig+0x274>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004cac:	2b08      	cmp	r3, #8
 8004cae:	d106      	bne.n	8004cbe <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004cb0:	4b8e      	ldr	r3, [pc, #568]	@ (8004eec <HAL_RCC_OscConfig+0x274>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cbc:	d00c      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cbe:	4b8b      	ldr	r3, [pc, #556]	@ (8004eec <HAL_RCC_OscConfig+0x274>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004cc6:	2b0c      	cmp	r3, #12
 8004cc8:	d112      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cca:	4b88      	ldr	r3, [pc, #544]	@ (8004eec <HAL_RCC_OscConfig+0x274>)
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cd2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cd6:	d10b      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cd8:	4b84      	ldr	r3, [pc, #528]	@ (8004eec <HAL_RCC_OscConfig+0x274>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d05b      	beq.n	8004d9c <HAL_RCC_OscConfig+0x124>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d157      	bne.n	8004d9c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e25a      	b.n	80051a6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cf8:	d106      	bne.n	8004d08 <HAL_RCC_OscConfig+0x90>
 8004cfa:	4b7c      	ldr	r3, [pc, #496]	@ (8004eec <HAL_RCC_OscConfig+0x274>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a7b      	ldr	r2, [pc, #492]	@ (8004eec <HAL_RCC_OscConfig+0x274>)
 8004d00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d04:	6013      	str	r3, [r2, #0]
 8004d06:	e01d      	b.n	8004d44 <HAL_RCC_OscConfig+0xcc>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d10:	d10c      	bne.n	8004d2c <HAL_RCC_OscConfig+0xb4>
 8004d12:	4b76      	ldr	r3, [pc, #472]	@ (8004eec <HAL_RCC_OscConfig+0x274>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a75      	ldr	r2, [pc, #468]	@ (8004eec <HAL_RCC_OscConfig+0x274>)
 8004d18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d1c:	6013      	str	r3, [r2, #0]
 8004d1e:	4b73      	ldr	r3, [pc, #460]	@ (8004eec <HAL_RCC_OscConfig+0x274>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a72      	ldr	r2, [pc, #456]	@ (8004eec <HAL_RCC_OscConfig+0x274>)
 8004d24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d28:	6013      	str	r3, [r2, #0]
 8004d2a:	e00b      	b.n	8004d44 <HAL_RCC_OscConfig+0xcc>
 8004d2c:	4b6f      	ldr	r3, [pc, #444]	@ (8004eec <HAL_RCC_OscConfig+0x274>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a6e      	ldr	r2, [pc, #440]	@ (8004eec <HAL_RCC_OscConfig+0x274>)
 8004d32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d36:	6013      	str	r3, [r2, #0]
 8004d38:	4b6c      	ldr	r3, [pc, #432]	@ (8004eec <HAL_RCC_OscConfig+0x274>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a6b      	ldr	r2, [pc, #428]	@ (8004eec <HAL_RCC_OscConfig+0x274>)
 8004d3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d013      	beq.n	8004d74 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d4c:	f7fc ff1e 	bl	8001b8c <HAL_GetTick>
 8004d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d52:	e008      	b.n	8004d66 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d54:	f7fc ff1a 	bl	8001b8c <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b64      	cmp	r3, #100	@ 0x64
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e21f      	b.n	80051a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d66:	4b61      	ldr	r3, [pc, #388]	@ (8004eec <HAL_RCC_OscConfig+0x274>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d0f0      	beq.n	8004d54 <HAL_RCC_OscConfig+0xdc>
 8004d72:	e014      	b.n	8004d9e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d74:	f7fc ff0a 	bl	8001b8c <HAL_GetTick>
 8004d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d7a:	e008      	b.n	8004d8e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d7c:	f7fc ff06 	bl	8001b8c <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b64      	cmp	r3, #100	@ 0x64
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e20b      	b.n	80051a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d8e:	4b57      	ldr	r3, [pc, #348]	@ (8004eec <HAL_RCC_OscConfig+0x274>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1f0      	bne.n	8004d7c <HAL_RCC_OscConfig+0x104>
 8004d9a:	e000      	b.n	8004d9e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d06f      	beq.n	8004e8a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004daa:	4b50      	ldr	r3, [pc, #320]	@ (8004eec <HAL_RCC_OscConfig+0x274>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f003 030c 	and.w	r3, r3, #12
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d017      	beq.n	8004de6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004db6:	4b4d      	ldr	r3, [pc, #308]	@ (8004eec <HAL_RCC_OscConfig+0x274>)
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004dbe:	2b08      	cmp	r3, #8
 8004dc0:	d105      	bne.n	8004dce <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004dc2:	4b4a      	ldr	r3, [pc, #296]	@ (8004eec <HAL_RCC_OscConfig+0x274>)
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00b      	beq.n	8004de6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dce:	4b47      	ldr	r3, [pc, #284]	@ (8004eec <HAL_RCC_OscConfig+0x274>)
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004dd6:	2b0c      	cmp	r3, #12
 8004dd8:	d11c      	bne.n	8004e14 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dda:	4b44      	ldr	r3, [pc, #272]	@ (8004eec <HAL_RCC_OscConfig+0x274>)
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d116      	bne.n	8004e14 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004de6:	4b41      	ldr	r3, [pc, #260]	@ (8004eec <HAL_RCC_OscConfig+0x274>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d005      	beq.n	8004dfe <HAL_RCC_OscConfig+0x186>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d001      	beq.n	8004dfe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e1d3      	b.n	80051a6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dfe:	4b3b      	ldr	r3, [pc, #236]	@ (8004eec <HAL_RCC_OscConfig+0x274>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	00db      	lsls	r3, r3, #3
 8004e0c:	4937      	ldr	r1, [pc, #220]	@ (8004eec <HAL_RCC_OscConfig+0x274>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e12:	e03a      	b.n	8004e8a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d020      	beq.n	8004e5e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e1c:	4b34      	ldr	r3, [pc, #208]	@ (8004ef0 <HAL_RCC_OscConfig+0x278>)
 8004e1e:	2201      	movs	r2, #1
 8004e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e22:	f7fc feb3 	bl	8001b8c <HAL_GetTick>
 8004e26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e28:	e008      	b.n	8004e3c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e2a:	f7fc feaf 	bl	8001b8c <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d901      	bls.n	8004e3c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e1b4      	b.n	80051a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e3c:	4b2b      	ldr	r3, [pc, #172]	@ (8004eec <HAL_RCC_OscConfig+0x274>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d0f0      	beq.n	8004e2a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e48:	4b28      	ldr	r3, [pc, #160]	@ (8004eec <HAL_RCC_OscConfig+0x274>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	00db      	lsls	r3, r3, #3
 8004e56:	4925      	ldr	r1, [pc, #148]	@ (8004eec <HAL_RCC_OscConfig+0x274>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	600b      	str	r3, [r1, #0]
 8004e5c:	e015      	b.n	8004e8a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e5e:	4b24      	ldr	r3, [pc, #144]	@ (8004ef0 <HAL_RCC_OscConfig+0x278>)
 8004e60:	2200      	movs	r2, #0
 8004e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e64:	f7fc fe92 	bl	8001b8c <HAL_GetTick>
 8004e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e6a:	e008      	b.n	8004e7e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e6c:	f7fc fe8e 	bl	8001b8c <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e193      	b.n	80051a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e7e:	4b1b      	ldr	r3, [pc, #108]	@ (8004eec <HAL_RCC_OscConfig+0x274>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1f0      	bne.n	8004e6c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0308 	and.w	r3, r3, #8
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d036      	beq.n	8004f04 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d016      	beq.n	8004ecc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e9e:	4b15      	ldr	r3, [pc, #84]	@ (8004ef4 <HAL_RCC_OscConfig+0x27c>)
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ea4:	f7fc fe72 	bl	8001b8c <HAL_GetTick>
 8004ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eaa:	e008      	b.n	8004ebe <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004eac:	f7fc fe6e 	bl	8001b8c <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e173      	b.n	80051a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8004eec <HAL_RCC_OscConfig+0x274>)
 8004ec0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d0f0      	beq.n	8004eac <HAL_RCC_OscConfig+0x234>
 8004eca:	e01b      	b.n	8004f04 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ecc:	4b09      	ldr	r3, [pc, #36]	@ (8004ef4 <HAL_RCC_OscConfig+0x27c>)
 8004ece:	2200      	movs	r2, #0
 8004ed0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed2:	f7fc fe5b 	bl	8001b8c <HAL_GetTick>
 8004ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ed8:	e00e      	b.n	8004ef8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004eda:	f7fc fe57 	bl	8001b8c <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d907      	bls.n	8004ef8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e15c      	b.n	80051a6 <HAL_RCC_OscConfig+0x52e>
 8004eec:	40023800 	.word	0x40023800
 8004ef0:	42470000 	.word	0x42470000
 8004ef4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ef8:	4b8a      	ldr	r3, [pc, #552]	@ (8005124 <HAL_RCC_OscConfig+0x4ac>)
 8004efa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1ea      	bne.n	8004eda <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0304 	and.w	r3, r3, #4
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 8097 	beq.w	8005040 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f12:	2300      	movs	r3, #0
 8004f14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f16:	4b83      	ldr	r3, [pc, #524]	@ (8005124 <HAL_RCC_OscConfig+0x4ac>)
 8004f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10f      	bne.n	8004f42 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f22:	2300      	movs	r3, #0
 8004f24:	60bb      	str	r3, [r7, #8]
 8004f26:	4b7f      	ldr	r3, [pc, #508]	@ (8005124 <HAL_RCC_OscConfig+0x4ac>)
 8004f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2a:	4a7e      	ldr	r2, [pc, #504]	@ (8005124 <HAL_RCC_OscConfig+0x4ac>)
 8004f2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f30:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f32:	4b7c      	ldr	r3, [pc, #496]	@ (8005124 <HAL_RCC_OscConfig+0x4ac>)
 8004f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f3a:	60bb      	str	r3, [r7, #8]
 8004f3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f42:	4b79      	ldr	r3, [pc, #484]	@ (8005128 <HAL_RCC_OscConfig+0x4b0>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d118      	bne.n	8004f80 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f4e:	4b76      	ldr	r3, [pc, #472]	@ (8005128 <HAL_RCC_OscConfig+0x4b0>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a75      	ldr	r2, [pc, #468]	@ (8005128 <HAL_RCC_OscConfig+0x4b0>)
 8004f54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f5a:	f7fc fe17 	bl	8001b8c <HAL_GetTick>
 8004f5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f60:	e008      	b.n	8004f74 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f62:	f7fc fe13 	bl	8001b8c <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d901      	bls.n	8004f74 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e118      	b.n	80051a6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f74:	4b6c      	ldr	r3, [pc, #432]	@ (8005128 <HAL_RCC_OscConfig+0x4b0>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d0f0      	beq.n	8004f62 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d106      	bne.n	8004f96 <HAL_RCC_OscConfig+0x31e>
 8004f88:	4b66      	ldr	r3, [pc, #408]	@ (8005124 <HAL_RCC_OscConfig+0x4ac>)
 8004f8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f8c:	4a65      	ldr	r2, [pc, #404]	@ (8005124 <HAL_RCC_OscConfig+0x4ac>)
 8004f8e:	f043 0301 	orr.w	r3, r3, #1
 8004f92:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f94:	e01c      	b.n	8004fd0 <HAL_RCC_OscConfig+0x358>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	2b05      	cmp	r3, #5
 8004f9c:	d10c      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x340>
 8004f9e:	4b61      	ldr	r3, [pc, #388]	@ (8005124 <HAL_RCC_OscConfig+0x4ac>)
 8004fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fa2:	4a60      	ldr	r2, [pc, #384]	@ (8005124 <HAL_RCC_OscConfig+0x4ac>)
 8004fa4:	f043 0304 	orr.w	r3, r3, #4
 8004fa8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004faa:	4b5e      	ldr	r3, [pc, #376]	@ (8005124 <HAL_RCC_OscConfig+0x4ac>)
 8004fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fae:	4a5d      	ldr	r2, [pc, #372]	@ (8005124 <HAL_RCC_OscConfig+0x4ac>)
 8004fb0:	f043 0301 	orr.w	r3, r3, #1
 8004fb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fb6:	e00b      	b.n	8004fd0 <HAL_RCC_OscConfig+0x358>
 8004fb8:	4b5a      	ldr	r3, [pc, #360]	@ (8005124 <HAL_RCC_OscConfig+0x4ac>)
 8004fba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fbc:	4a59      	ldr	r2, [pc, #356]	@ (8005124 <HAL_RCC_OscConfig+0x4ac>)
 8004fbe:	f023 0301 	bic.w	r3, r3, #1
 8004fc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fc4:	4b57      	ldr	r3, [pc, #348]	@ (8005124 <HAL_RCC_OscConfig+0x4ac>)
 8004fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fc8:	4a56      	ldr	r2, [pc, #344]	@ (8005124 <HAL_RCC_OscConfig+0x4ac>)
 8004fca:	f023 0304 	bic.w	r3, r3, #4
 8004fce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d015      	beq.n	8005004 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd8:	f7fc fdd8 	bl	8001b8c <HAL_GetTick>
 8004fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fde:	e00a      	b.n	8004ff6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fe0:	f7fc fdd4 	bl	8001b8c <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e0d7      	b.n	80051a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ff6:	4b4b      	ldr	r3, [pc, #300]	@ (8005124 <HAL_RCC_OscConfig+0x4ac>)
 8004ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d0ee      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x368>
 8005002:	e014      	b.n	800502e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005004:	f7fc fdc2 	bl	8001b8c <HAL_GetTick>
 8005008:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800500a:	e00a      	b.n	8005022 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800500c:	f7fc fdbe 	bl	8001b8c <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	f241 3288 	movw	r2, #5000	@ 0x1388
 800501a:	4293      	cmp	r3, r2
 800501c:	d901      	bls.n	8005022 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e0c1      	b.n	80051a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005022:	4b40      	ldr	r3, [pc, #256]	@ (8005124 <HAL_RCC_OscConfig+0x4ac>)
 8005024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1ee      	bne.n	800500c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800502e:	7dfb      	ldrb	r3, [r7, #23]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d105      	bne.n	8005040 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005034:	4b3b      	ldr	r3, [pc, #236]	@ (8005124 <HAL_RCC_OscConfig+0x4ac>)
 8005036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005038:	4a3a      	ldr	r2, [pc, #232]	@ (8005124 <HAL_RCC_OscConfig+0x4ac>)
 800503a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800503e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	2b00      	cmp	r3, #0
 8005046:	f000 80ad 	beq.w	80051a4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800504a:	4b36      	ldr	r3, [pc, #216]	@ (8005124 <HAL_RCC_OscConfig+0x4ac>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f003 030c 	and.w	r3, r3, #12
 8005052:	2b08      	cmp	r3, #8
 8005054:	d060      	beq.n	8005118 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	2b02      	cmp	r3, #2
 800505c:	d145      	bne.n	80050ea <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800505e:	4b33      	ldr	r3, [pc, #204]	@ (800512c <HAL_RCC_OscConfig+0x4b4>)
 8005060:	2200      	movs	r2, #0
 8005062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005064:	f7fc fd92 	bl	8001b8c <HAL_GetTick>
 8005068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800506a:	e008      	b.n	800507e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800506c:	f7fc fd8e 	bl	8001b8c <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	2b02      	cmp	r3, #2
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e093      	b.n	80051a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800507e:	4b29      	ldr	r3, [pc, #164]	@ (8005124 <HAL_RCC_OscConfig+0x4ac>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1f0      	bne.n	800506c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	69da      	ldr	r2, [r3, #28]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	431a      	orrs	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005098:	019b      	lsls	r3, r3, #6
 800509a:	431a      	orrs	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050a0:	085b      	lsrs	r3, r3, #1
 80050a2:	3b01      	subs	r3, #1
 80050a4:	041b      	lsls	r3, r3, #16
 80050a6:	431a      	orrs	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ac:	061b      	lsls	r3, r3, #24
 80050ae:	431a      	orrs	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b4:	071b      	lsls	r3, r3, #28
 80050b6:	491b      	ldr	r1, [pc, #108]	@ (8005124 <HAL_RCC_OscConfig+0x4ac>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050bc:	4b1b      	ldr	r3, [pc, #108]	@ (800512c <HAL_RCC_OscConfig+0x4b4>)
 80050be:	2201      	movs	r2, #1
 80050c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c2:	f7fc fd63 	bl	8001b8c <HAL_GetTick>
 80050c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050c8:	e008      	b.n	80050dc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050ca:	f7fc fd5f 	bl	8001b8c <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d901      	bls.n	80050dc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e064      	b.n	80051a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050dc:	4b11      	ldr	r3, [pc, #68]	@ (8005124 <HAL_RCC_OscConfig+0x4ac>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d0f0      	beq.n	80050ca <HAL_RCC_OscConfig+0x452>
 80050e8:	e05c      	b.n	80051a4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050ea:	4b10      	ldr	r3, [pc, #64]	@ (800512c <HAL_RCC_OscConfig+0x4b4>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f0:	f7fc fd4c 	bl	8001b8c <HAL_GetTick>
 80050f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050f6:	e008      	b.n	800510a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050f8:	f7fc fd48 	bl	8001b8c <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	2b02      	cmp	r3, #2
 8005104:	d901      	bls.n	800510a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e04d      	b.n	80051a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800510a:	4b06      	ldr	r3, [pc, #24]	@ (8005124 <HAL_RCC_OscConfig+0x4ac>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1f0      	bne.n	80050f8 <HAL_RCC_OscConfig+0x480>
 8005116:	e045      	b.n	80051a4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d107      	bne.n	8005130 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e040      	b.n	80051a6 <HAL_RCC_OscConfig+0x52e>
 8005124:	40023800 	.word	0x40023800
 8005128:	40007000 	.word	0x40007000
 800512c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005130:	4b1f      	ldr	r3, [pc, #124]	@ (80051b0 <HAL_RCC_OscConfig+0x538>)
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d030      	beq.n	80051a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005148:	429a      	cmp	r2, r3
 800514a:	d129      	bne.n	80051a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005156:	429a      	cmp	r2, r3
 8005158:	d122      	bne.n	80051a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005160:	4013      	ands	r3, r2
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005166:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005168:	4293      	cmp	r3, r2
 800516a:	d119      	bne.n	80051a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005176:	085b      	lsrs	r3, r3, #1
 8005178:	3b01      	subs	r3, #1
 800517a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800517c:	429a      	cmp	r2, r3
 800517e:	d10f      	bne.n	80051a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800518a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800518c:	429a      	cmp	r2, r3
 800518e:	d107      	bne.n	80051a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800519a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800519c:	429a      	cmp	r2, r3
 800519e:	d001      	beq.n	80051a4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e000      	b.n	80051a6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3718      	adds	r7, #24
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	40023800 	.word	0x40023800

080051b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e07b      	b.n	80052be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d108      	bne.n	80051e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051d6:	d009      	beq.n	80051ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	61da      	str	r2, [r3, #28]
 80051de:	e005      	b.n	80051ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d106      	bne.n	800520c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7fc faa6 	bl	8001758 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005222:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005234:	431a      	orrs	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800523e:	431a      	orrs	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	f003 0302 	and.w	r3, r3, #2
 8005248:	431a      	orrs	r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	431a      	orrs	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800525c:	431a      	orrs	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005266:	431a      	orrs	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005270:	ea42 0103 	orr.w	r1, r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005278:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	430a      	orrs	r2, r1
 8005282:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	0c1b      	lsrs	r3, r3, #16
 800528a:	f003 0104 	and.w	r1, r3, #4
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005292:	f003 0210 	and.w	r2, r3, #16
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	69da      	ldr	r2, [r3, #28]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3708      	adds	r7, #8
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b082      	sub	sp, #8
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d101      	bne.n	80052d8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e03f      	b.n	8005358 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d106      	bne.n	80052f2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f7fc fa7b 	bl	80017e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2224      	movs	r2, #36	@ 0x24
 80052f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68da      	ldr	r2, [r3, #12]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005308:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 fdde 	bl	8005ecc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	691a      	ldr	r2, [r3, #16]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800531e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	695a      	ldr	r2, [r3, #20]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800532e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68da      	ldr	r2, [r3, #12]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800533e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2220      	movs	r2, #32
 800534a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2220      	movs	r2, #32
 8005352:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	3708      	adds	r7, #8
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b08a      	sub	sp, #40	@ 0x28
 8005364:	af02      	add	r7, sp, #8
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	603b      	str	r3, [r7, #0]
 800536c:	4613      	mov	r3, r2
 800536e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005370:	2300      	movs	r3, #0
 8005372:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b20      	cmp	r3, #32
 800537e:	d17c      	bne.n	800547a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d002      	beq.n	800538c <HAL_UART_Transmit+0x2c>
 8005386:	88fb      	ldrh	r3, [r7, #6]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d101      	bne.n	8005390 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e075      	b.n	800547c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005396:	2b01      	cmp	r3, #1
 8005398:	d101      	bne.n	800539e <HAL_UART_Transmit+0x3e>
 800539a:	2302      	movs	r3, #2
 800539c:	e06e      	b.n	800547c <HAL_UART_Transmit+0x11c>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2221      	movs	r2, #33	@ 0x21
 80053b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053b4:	f7fc fbea 	bl	8001b8c <HAL_GetTick>
 80053b8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	88fa      	ldrh	r2, [r7, #6]
 80053be:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	88fa      	ldrh	r2, [r7, #6]
 80053c4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053ce:	d108      	bne.n	80053e2 <HAL_UART_Transmit+0x82>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d104      	bne.n	80053e2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80053d8:	2300      	movs	r3, #0
 80053da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	61bb      	str	r3, [r7, #24]
 80053e0:	e003      	b.n	80053ea <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053e6:	2300      	movs	r3, #0
 80053e8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80053f2:	e02a      	b.n	800544a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	9300      	str	r3, [sp, #0]
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	2200      	movs	r2, #0
 80053fc:	2180      	movs	r1, #128	@ 0x80
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f000 fb1e 	bl	8005a40 <UART_WaitOnFlagUntilTimeout>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e036      	b.n	800547c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10b      	bne.n	800542c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	881b      	ldrh	r3, [r3, #0]
 8005418:	461a      	mov	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005422:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	3302      	adds	r3, #2
 8005428:	61bb      	str	r3, [r7, #24]
 800542a:	e007      	b.n	800543c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	781a      	ldrb	r2, [r3, #0]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	3301      	adds	r3, #1
 800543a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005440:	b29b      	uxth	r3, r3
 8005442:	3b01      	subs	r3, #1
 8005444:	b29a      	uxth	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800544e:	b29b      	uxth	r3, r3
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1cf      	bne.n	80053f4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	9300      	str	r3, [sp, #0]
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	2200      	movs	r2, #0
 800545c:	2140      	movs	r1, #64	@ 0x40
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	f000 faee 	bl	8005a40 <UART_WaitOnFlagUntilTimeout>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d001      	beq.n	800546e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e006      	b.n	800547c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2220      	movs	r2, #32
 8005472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005476:	2300      	movs	r3, #0
 8005478:	e000      	b.n	800547c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800547a:	2302      	movs	r3, #2
  }
}
 800547c:	4618      	mov	r0, r3
 800547e:	3720      	adds	r7, #32
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	4613      	mov	r3, r2
 8005490:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b20      	cmp	r3, #32
 800549c:	d11d      	bne.n	80054da <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d002      	beq.n	80054aa <HAL_UART_Receive_IT+0x26>
 80054a4:	88fb      	ldrh	r3, [r7, #6]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e016      	b.n	80054dc <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d101      	bne.n	80054bc <HAL_UART_Receive_IT+0x38>
 80054b8:	2302      	movs	r3, #2
 80054ba:	e00f      	b.n	80054dc <HAL_UART_Receive_IT+0x58>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80054ca:	88fb      	ldrh	r3, [r7, #6]
 80054cc:	461a      	mov	r2, r3
 80054ce:	68b9      	ldr	r1, [r7, #8]
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f000 fb23 	bl	8005b1c <UART_Start_Receive_IT>
 80054d6:	4603      	mov	r3, r0
 80054d8:	e000      	b.n	80054dc <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80054da:	2302      	movs	r3, #2
  }
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3710      	adds	r7, #16
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b0ba      	sub	sp, #232	@ 0xe8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800550a:	2300      	movs	r3, #0
 800550c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005510:	2300      	movs	r3, #0
 8005512:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800551a:	f003 030f 	and.w	r3, r3, #15
 800551e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005522:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005526:	2b00      	cmp	r3, #0
 8005528:	d10f      	bne.n	800554a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800552a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800552e:	f003 0320 	and.w	r3, r3, #32
 8005532:	2b00      	cmp	r3, #0
 8005534:	d009      	beq.n	800554a <HAL_UART_IRQHandler+0x66>
 8005536:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800553a:	f003 0320 	and.w	r3, r3, #32
 800553e:	2b00      	cmp	r3, #0
 8005540:	d003      	beq.n	800554a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 fc07 	bl	8005d56 <UART_Receive_IT>
      return;
 8005548:	e256      	b.n	80059f8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800554a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800554e:	2b00      	cmp	r3, #0
 8005550:	f000 80de 	beq.w	8005710 <HAL_UART_IRQHandler+0x22c>
 8005554:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005558:	f003 0301 	and.w	r3, r3, #1
 800555c:	2b00      	cmp	r3, #0
 800555e:	d106      	bne.n	800556e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005564:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005568:	2b00      	cmp	r3, #0
 800556a:	f000 80d1 	beq.w	8005710 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800556e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005572:	f003 0301 	and.w	r3, r3, #1
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00b      	beq.n	8005592 <HAL_UART_IRQHandler+0xae>
 800557a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800557e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005582:	2b00      	cmp	r3, #0
 8005584:	d005      	beq.n	8005592 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800558a:	f043 0201 	orr.w	r2, r3, #1
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005596:	f003 0304 	and.w	r3, r3, #4
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00b      	beq.n	80055b6 <HAL_UART_IRQHandler+0xd2>
 800559e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d005      	beq.n	80055b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ae:	f043 0202 	orr.w	r2, r3, #2
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00b      	beq.n	80055da <HAL_UART_IRQHandler+0xf6>
 80055c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d005      	beq.n	80055da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d2:	f043 0204 	orr.w	r2, r3, #4
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80055da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055de:	f003 0308 	and.w	r3, r3, #8
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d011      	beq.n	800560a <HAL_UART_IRQHandler+0x126>
 80055e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055ea:	f003 0320 	and.w	r3, r3, #32
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d105      	bne.n	80055fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80055f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d005      	beq.n	800560a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005602:	f043 0208 	orr.w	r2, r3, #8
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800560e:	2b00      	cmp	r3, #0
 8005610:	f000 81ed 	beq.w	80059ee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005618:	f003 0320 	and.w	r3, r3, #32
 800561c:	2b00      	cmp	r3, #0
 800561e:	d008      	beq.n	8005632 <HAL_UART_IRQHandler+0x14e>
 8005620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005624:	f003 0320 	and.w	r3, r3, #32
 8005628:	2b00      	cmp	r3, #0
 800562a:	d002      	beq.n	8005632 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 fb92 	bl	8005d56 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	695b      	ldr	r3, [r3, #20]
 8005638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800563c:	2b40      	cmp	r3, #64	@ 0x40
 800563e:	bf0c      	ite	eq
 8005640:	2301      	moveq	r3, #1
 8005642:	2300      	movne	r3, #0
 8005644:	b2db      	uxtb	r3, r3
 8005646:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800564e:	f003 0308 	and.w	r3, r3, #8
 8005652:	2b00      	cmp	r3, #0
 8005654:	d103      	bne.n	800565e <HAL_UART_IRQHandler+0x17a>
 8005656:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800565a:	2b00      	cmp	r3, #0
 800565c:	d04f      	beq.n	80056fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 fa9a 	bl	8005b98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800566e:	2b40      	cmp	r3, #64	@ 0x40
 8005670:	d141      	bne.n	80056f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	3314      	adds	r3, #20
 8005678:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005680:	e853 3f00 	ldrex	r3, [r3]
 8005684:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005688:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800568c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005690:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	3314      	adds	r3, #20
 800569a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800569e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80056a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80056aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80056ae:	e841 2300 	strex	r3, r2, [r1]
 80056b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80056b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1d9      	bne.n	8005672 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d013      	beq.n	80056ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ca:	4a7d      	ldr	r2, [pc, #500]	@ (80058c0 <HAL_UART_IRQHandler+0x3dc>)
 80056cc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7fc fe7d 	bl	80023d2 <HAL_DMA_Abort_IT>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d016      	beq.n	800570c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80056e8:	4610      	mov	r0, r2
 80056ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056ec:	e00e      	b.n	800570c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f990 	bl	8005a14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056f4:	e00a      	b.n	800570c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f98c 	bl	8005a14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056fc:	e006      	b.n	800570c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 f988 	bl	8005a14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 800570a:	e170      	b.n	80059ee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800570c:	bf00      	nop
    return;
 800570e:	e16e      	b.n	80059ee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005714:	2b01      	cmp	r3, #1
 8005716:	f040 814a 	bne.w	80059ae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800571a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800571e:	f003 0310 	and.w	r3, r3, #16
 8005722:	2b00      	cmp	r3, #0
 8005724:	f000 8143 	beq.w	80059ae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800572c:	f003 0310 	and.w	r3, r3, #16
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 813c 	beq.w	80059ae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005736:	2300      	movs	r3, #0
 8005738:	60bb      	str	r3, [r7, #8]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	60bb      	str	r3, [r7, #8]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	60bb      	str	r3, [r7, #8]
 800574a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005756:	2b40      	cmp	r3, #64	@ 0x40
 8005758:	f040 80b4 	bne.w	80058c4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005768:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800576c:	2b00      	cmp	r3, #0
 800576e:	f000 8140 	beq.w	80059f2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005776:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800577a:	429a      	cmp	r2, r3
 800577c:	f080 8139 	bcs.w	80059f2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005786:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800578c:	69db      	ldr	r3, [r3, #28]
 800578e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005792:	f000 8088 	beq.w	80058a6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	330c      	adds	r3, #12
 800579c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80057a4:	e853 3f00 	ldrex	r3, [r3]
 80057a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80057ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80057b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	330c      	adds	r3, #12
 80057be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80057c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80057c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80057ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80057d2:	e841 2300 	strex	r3, r2, [r1]
 80057d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80057da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1d9      	bne.n	8005796 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	3314      	adds	r3, #20
 80057e8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80057ec:	e853 3f00 	ldrex	r3, [r3]
 80057f0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80057f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80057f4:	f023 0301 	bic.w	r3, r3, #1
 80057f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	3314      	adds	r3, #20
 8005802:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005806:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800580a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800580e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005812:	e841 2300 	strex	r3, r2, [r1]
 8005816:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005818:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1e1      	bne.n	80057e2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	3314      	adds	r3, #20
 8005824:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005826:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005828:	e853 3f00 	ldrex	r3, [r3]
 800582c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800582e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005830:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005834:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	3314      	adds	r3, #20
 800583e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005842:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005844:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005846:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005848:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800584a:	e841 2300 	strex	r3, r2, [r1]
 800584e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005850:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1e3      	bne.n	800581e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2220      	movs	r2, #32
 800585a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	330c      	adds	r3, #12
 800586a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800586e:	e853 3f00 	ldrex	r3, [r3]
 8005872:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005874:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005876:	f023 0310 	bic.w	r3, r3, #16
 800587a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	330c      	adds	r3, #12
 8005884:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005888:	65ba      	str	r2, [r7, #88]	@ 0x58
 800588a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800588e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005890:	e841 2300 	strex	r3, r2, [r1]
 8005894:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005896:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1e3      	bne.n	8005864 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7fc fd26 	bl	80022f2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	4619      	mov	r1, r3
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 f8b6 	bl	8005a28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058bc:	e099      	b.n	80059f2 <HAL_UART_IRQHandler+0x50e>
 80058be:	bf00      	nop
 80058c0:	08005c5f 	.word	0x08005c5f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058d8:	b29b      	uxth	r3, r3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f000 808b 	beq.w	80059f6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80058e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f000 8086 	beq.w	80059f6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	330c      	adds	r3, #12
 80058f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058f4:	e853 3f00 	ldrex	r3, [r3]
 80058f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80058fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005900:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	330c      	adds	r3, #12
 800590a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800590e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005910:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005912:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005914:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005916:	e841 2300 	strex	r3, r2, [r1]
 800591a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800591c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1e3      	bne.n	80058ea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	3314      	adds	r3, #20
 8005928:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592c:	e853 3f00 	ldrex	r3, [r3]
 8005930:	623b      	str	r3, [r7, #32]
   return(result);
 8005932:	6a3b      	ldr	r3, [r7, #32]
 8005934:	f023 0301 	bic.w	r3, r3, #1
 8005938:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	3314      	adds	r3, #20
 8005942:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005946:	633a      	str	r2, [r7, #48]	@ 0x30
 8005948:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800594c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800594e:	e841 2300 	strex	r3, r2, [r1]
 8005952:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1e3      	bne.n	8005922 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2220      	movs	r2, #32
 800595e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	330c      	adds	r3, #12
 800596e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	e853 3f00 	ldrex	r3, [r3]
 8005976:	60fb      	str	r3, [r7, #12]
   return(result);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f023 0310 	bic.w	r3, r3, #16
 800597e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	330c      	adds	r3, #12
 8005988:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800598c:	61fa      	str	r2, [r7, #28]
 800598e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005990:	69b9      	ldr	r1, [r7, #24]
 8005992:	69fa      	ldr	r2, [r7, #28]
 8005994:	e841 2300 	strex	r3, r2, [r1]
 8005998:	617b      	str	r3, [r7, #20]
   return(result);
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1e3      	bne.n	8005968 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80059a4:	4619      	mov	r1, r3
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 f83e 	bl	8005a28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059ac:	e023      	b.n	80059f6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80059ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d009      	beq.n	80059ce <HAL_UART_IRQHandler+0x4ea>
 80059ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d003      	beq.n	80059ce <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 f95d 	bl	8005c86 <UART_Transmit_IT>
    return;
 80059cc:	e014      	b.n	80059f8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80059ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00e      	beq.n	80059f8 <HAL_UART_IRQHandler+0x514>
 80059da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d008      	beq.n	80059f8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f99d 	bl	8005d26 <UART_EndTransmit_IT>
    return;
 80059ec:	e004      	b.n	80059f8 <HAL_UART_IRQHandler+0x514>
    return;
 80059ee:	bf00      	nop
 80059f0:	e002      	b.n	80059f8 <HAL_UART_IRQHandler+0x514>
      return;
 80059f2:	bf00      	nop
 80059f4:	e000      	b.n	80059f8 <HAL_UART_IRQHandler+0x514>
      return;
 80059f6:	bf00      	nop
  }
}
 80059f8:	37e8      	adds	r7, #232	@ 0xe8
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop

08005a00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a08:	bf00      	nop
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	460b      	mov	r3, r1
 8005a32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b090      	sub	sp, #64	@ 0x40
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	603b      	str	r3, [r7, #0]
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a50:	e050      	b.n	8005af4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a58:	d04c      	beq.n	8005af4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d007      	beq.n	8005a70 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a60:	f7fc f894 	bl	8001b8c <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d241      	bcs.n	8005af4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	330c      	adds	r3, #12
 8005a76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a7a:	e853 3f00 	ldrex	r3, [r3]
 8005a7e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a82:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	330c      	adds	r3, #12
 8005a8e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005a90:	637a      	str	r2, [r7, #52]	@ 0x34
 8005a92:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a94:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005a96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005a98:	e841 2300 	strex	r3, r2, [r1]
 8005a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1e5      	bne.n	8005a70 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	3314      	adds	r3, #20
 8005aaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	e853 3f00 	ldrex	r3, [r3]
 8005ab2:	613b      	str	r3, [r7, #16]
   return(result);
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	f023 0301 	bic.w	r3, r3, #1
 8005aba:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	3314      	adds	r3, #20
 8005ac2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005ac4:	623a      	str	r2, [r7, #32]
 8005ac6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac8:	69f9      	ldr	r1, [r7, #28]
 8005aca:	6a3a      	ldr	r2, [r7, #32]
 8005acc:	e841 2300 	strex	r3, r2, [r1]
 8005ad0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1e5      	bne.n	8005aa4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2220      	movs	r2, #32
 8005adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	e00f      	b.n	8005b14 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	4013      	ands	r3, r2
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	bf0c      	ite	eq
 8005b04:	2301      	moveq	r3, #1
 8005b06:	2300      	movne	r3, #0
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	79fb      	ldrb	r3, [r7, #7]
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d09f      	beq.n	8005a52 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3740      	adds	r7, #64	@ 0x40
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	4613      	mov	r3, r2
 8005b28:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	68ba      	ldr	r2, [r7, #8]
 8005b2e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	88fa      	ldrh	r2, [r7, #6]
 8005b34:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	88fa      	ldrh	r2, [r7, #6]
 8005b3a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2222      	movs	r2, #34	@ 0x22
 8005b46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d007      	beq.n	8005b6a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68da      	ldr	r2, [r3, #12]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b68:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	695a      	ldr	r2, [r3, #20]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f042 0201 	orr.w	r2, r2, #1
 8005b78:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68da      	ldr	r2, [r3, #12]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f042 0220 	orr.w	r2, r2, #32
 8005b88:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3714      	adds	r7, #20
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b095      	sub	sp, #84	@ 0x54
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	330c      	adds	r3, #12
 8005ba6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005baa:	e853 3f00 	ldrex	r3, [r3]
 8005bae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	330c      	adds	r3, #12
 8005bbe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005bc0:	643a      	str	r2, [r7, #64]	@ 0x40
 8005bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005bc6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005bc8:	e841 2300 	strex	r3, r2, [r1]
 8005bcc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1e5      	bne.n	8005ba0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	3314      	adds	r3, #20
 8005bda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bdc:	6a3b      	ldr	r3, [r7, #32]
 8005bde:	e853 3f00 	ldrex	r3, [r3]
 8005be2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	f023 0301 	bic.w	r3, r3, #1
 8005bea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	3314      	adds	r3, #20
 8005bf2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005bf4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005bfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bfc:	e841 2300 	strex	r3, r2, [r1]
 8005c00:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d1e5      	bne.n	8005bd4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d119      	bne.n	8005c44 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	330c      	adds	r3, #12
 8005c16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	e853 3f00 	ldrex	r3, [r3]
 8005c1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	f023 0310 	bic.w	r3, r3, #16
 8005c26:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	330c      	adds	r3, #12
 8005c2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c30:	61ba      	str	r2, [r7, #24]
 8005c32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c34:	6979      	ldr	r1, [r7, #20]
 8005c36:	69ba      	ldr	r2, [r7, #24]
 8005c38:	e841 2300 	strex	r3, r2, [r1]
 8005c3c:	613b      	str	r3, [r7, #16]
   return(result);
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1e5      	bne.n	8005c10 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2220      	movs	r2, #32
 8005c48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005c52:	bf00      	nop
 8005c54:	3754      	adds	r7, #84	@ 0x54
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr

08005c5e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b084      	sub	sp, #16
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c6a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f7ff fecb 	bl	8005a14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c7e:	bf00      	nop
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c86:	b480      	push	{r7}
 8005c88:	b085      	sub	sp, #20
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	2b21      	cmp	r3, #33	@ 0x21
 8005c98:	d13e      	bne.n	8005d18 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ca2:	d114      	bne.n	8005cce <UART_Transmit_IT+0x48>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d110      	bne.n	8005cce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a1b      	ldr	r3, [r3, #32]
 8005cb0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	881b      	ldrh	r3, [r3, #0]
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cc0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	1c9a      	adds	r2, r3, #2
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	621a      	str	r2, [r3, #32]
 8005ccc:	e008      	b.n	8005ce0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	1c59      	adds	r1, r3, #1
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	6211      	str	r1, [r2, #32]
 8005cd8:	781a      	ldrb	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	4619      	mov	r1, r3
 8005cee:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10f      	bne.n	8005d14 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68da      	ldr	r2, [r3, #12]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005d02:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68da      	ldr	r2, [r3, #12]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d12:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005d14:	2300      	movs	r3, #0
 8005d16:	e000      	b.n	8005d1a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005d18:	2302      	movs	r3, #2
  }
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3714      	adds	r7, #20
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr

08005d26 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b082      	sub	sp, #8
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68da      	ldr	r2, [r3, #12]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d3c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2220      	movs	r2, #32
 8005d42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f7ff fe5a 	bl	8005a00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3708      	adds	r7, #8
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b08c      	sub	sp, #48	@ 0x30
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b22      	cmp	r3, #34	@ 0x22
 8005d68:	f040 80ab 	bne.w	8005ec2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d74:	d117      	bne.n	8005da6 <UART_Receive_IT+0x50>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d113      	bne.n	8005da6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d86:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d98:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d9e:	1c9a      	adds	r2, r3, #2
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	629a      	str	r2, [r3, #40]	@ 0x28
 8005da4:	e026      	b.n	8005df4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005dac:	2300      	movs	r3, #0
 8005dae:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005db8:	d007      	beq.n	8005dca <UART_Receive_IT+0x74>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10a      	bne.n	8005dd8 <UART_Receive_IT+0x82>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d106      	bne.n	8005dd8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dd4:	701a      	strb	r2, [r3, #0]
 8005dd6:	e008      	b.n	8005dea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005de4:	b2da      	uxtb	r2, r3
 8005de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005de8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dee:	1c5a      	adds	r2, r3, #1
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	4619      	mov	r1, r3
 8005e02:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d15a      	bne.n	8005ebe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68da      	ldr	r2, [r3, #12]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f022 0220 	bic.w	r2, r2, #32
 8005e16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68da      	ldr	r2, [r3, #12]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	695a      	ldr	r2, [r3, #20]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f022 0201 	bic.w	r2, r2, #1
 8005e36:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2220      	movs	r2, #32
 8005e3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d135      	bne.n	8005eb4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	330c      	adds	r3, #12
 8005e54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	e853 3f00 	ldrex	r3, [r3]
 8005e5c:	613b      	str	r3, [r7, #16]
   return(result);
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	f023 0310 	bic.w	r3, r3, #16
 8005e64:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	330c      	adds	r3, #12
 8005e6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e6e:	623a      	str	r2, [r7, #32]
 8005e70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e72:	69f9      	ldr	r1, [r7, #28]
 8005e74:	6a3a      	ldr	r2, [r7, #32]
 8005e76:	e841 2300 	strex	r3, r2, [r1]
 8005e7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1e5      	bne.n	8005e4e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0310 	and.w	r3, r3, #16
 8005e8c:	2b10      	cmp	r3, #16
 8005e8e:	d10a      	bne.n	8005ea6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e90:	2300      	movs	r3, #0
 8005e92:	60fb      	str	r3, [r7, #12]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	60fb      	str	r3, [r7, #12]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	60fb      	str	r3, [r7, #12]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005eaa:	4619      	mov	r1, r3
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f7ff fdbb 	bl	8005a28 <HAL_UARTEx_RxEventCallback>
 8005eb2:	e002      	b.n	8005eba <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f7fa fb2b 	bl	8000510 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	e002      	b.n	8005ec4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	e000      	b.n	8005ec4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005ec2:	2302      	movs	r3, #2
  }
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3730      	adds	r7, #48	@ 0x30
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ecc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ed0:	b0c0      	sub	sp, #256	@ 0x100
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ee8:	68d9      	ldr	r1, [r3, #12]
 8005eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	ea40 0301 	orr.w	r3, r0, r1
 8005ef4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005efa:	689a      	ldr	r2, [r3, #8]
 8005efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	431a      	orrs	r2, r3
 8005f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	431a      	orrs	r2, r3
 8005f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f10:	69db      	ldr	r3, [r3, #28]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005f24:	f021 010c 	bic.w	r1, r1, #12
 8005f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005f32:	430b      	orrs	r3, r1
 8005f34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f46:	6999      	ldr	r1, [r3, #24]
 8005f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	ea40 0301 	orr.w	r3, r0, r1
 8005f52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	4b8f      	ldr	r3, [pc, #572]	@ (8006198 <UART_SetConfig+0x2cc>)
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d005      	beq.n	8005f6c <UART_SetConfig+0xa0>
 8005f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	4b8d      	ldr	r3, [pc, #564]	@ (800619c <UART_SetConfig+0x2d0>)
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d104      	bne.n	8005f76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f6c:	f7fe f916 	bl	800419c <HAL_RCC_GetPCLK2Freq>
 8005f70:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005f74:	e003      	b.n	8005f7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f76:	f7fe f8fd 	bl	8004174 <HAL_RCC_GetPCLK1Freq>
 8005f7a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f82:	69db      	ldr	r3, [r3, #28]
 8005f84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f88:	f040 810c 	bne.w	80061a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f90:	2200      	movs	r2, #0
 8005f92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f96:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005f9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005f9e:	4622      	mov	r2, r4
 8005fa0:	462b      	mov	r3, r5
 8005fa2:	1891      	adds	r1, r2, r2
 8005fa4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005fa6:	415b      	adcs	r3, r3
 8005fa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005faa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005fae:	4621      	mov	r1, r4
 8005fb0:	eb12 0801 	adds.w	r8, r2, r1
 8005fb4:	4629      	mov	r1, r5
 8005fb6:	eb43 0901 	adc.w	r9, r3, r1
 8005fba:	f04f 0200 	mov.w	r2, #0
 8005fbe:	f04f 0300 	mov.w	r3, #0
 8005fc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005fc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005fca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005fce:	4690      	mov	r8, r2
 8005fd0:	4699      	mov	r9, r3
 8005fd2:	4623      	mov	r3, r4
 8005fd4:	eb18 0303 	adds.w	r3, r8, r3
 8005fd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005fdc:	462b      	mov	r3, r5
 8005fde:	eb49 0303 	adc.w	r3, r9, r3
 8005fe2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005ff2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005ff6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	18db      	adds	r3, r3, r3
 8005ffe:	653b      	str	r3, [r7, #80]	@ 0x50
 8006000:	4613      	mov	r3, r2
 8006002:	eb42 0303 	adc.w	r3, r2, r3
 8006006:	657b      	str	r3, [r7, #84]	@ 0x54
 8006008:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800600c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006010:	f7fa f8f8 	bl	8000204 <__aeabi_uldivmod>
 8006014:	4602      	mov	r2, r0
 8006016:	460b      	mov	r3, r1
 8006018:	4b61      	ldr	r3, [pc, #388]	@ (80061a0 <UART_SetConfig+0x2d4>)
 800601a:	fba3 2302 	umull	r2, r3, r3, r2
 800601e:	095b      	lsrs	r3, r3, #5
 8006020:	011c      	lsls	r4, r3, #4
 8006022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006026:	2200      	movs	r2, #0
 8006028:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800602c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006030:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006034:	4642      	mov	r2, r8
 8006036:	464b      	mov	r3, r9
 8006038:	1891      	adds	r1, r2, r2
 800603a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800603c:	415b      	adcs	r3, r3
 800603e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006040:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006044:	4641      	mov	r1, r8
 8006046:	eb12 0a01 	adds.w	sl, r2, r1
 800604a:	4649      	mov	r1, r9
 800604c:	eb43 0b01 	adc.w	fp, r3, r1
 8006050:	f04f 0200 	mov.w	r2, #0
 8006054:	f04f 0300 	mov.w	r3, #0
 8006058:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800605c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006060:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006064:	4692      	mov	sl, r2
 8006066:	469b      	mov	fp, r3
 8006068:	4643      	mov	r3, r8
 800606a:	eb1a 0303 	adds.w	r3, sl, r3
 800606e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006072:	464b      	mov	r3, r9
 8006074:	eb4b 0303 	adc.w	r3, fp, r3
 8006078:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800607c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006088:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800608c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006090:	460b      	mov	r3, r1
 8006092:	18db      	adds	r3, r3, r3
 8006094:	643b      	str	r3, [r7, #64]	@ 0x40
 8006096:	4613      	mov	r3, r2
 8006098:	eb42 0303 	adc.w	r3, r2, r3
 800609c:	647b      	str	r3, [r7, #68]	@ 0x44
 800609e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80060a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80060a6:	f7fa f8ad 	bl	8000204 <__aeabi_uldivmod>
 80060aa:	4602      	mov	r2, r0
 80060ac:	460b      	mov	r3, r1
 80060ae:	4611      	mov	r1, r2
 80060b0:	4b3b      	ldr	r3, [pc, #236]	@ (80061a0 <UART_SetConfig+0x2d4>)
 80060b2:	fba3 2301 	umull	r2, r3, r3, r1
 80060b6:	095b      	lsrs	r3, r3, #5
 80060b8:	2264      	movs	r2, #100	@ 0x64
 80060ba:	fb02 f303 	mul.w	r3, r2, r3
 80060be:	1acb      	subs	r3, r1, r3
 80060c0:	00db      	lsls	r3, r3, #3
 80060c2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80060c6:	4b36      	ldr	r3, [pc, #216]	@ (80061a0 <UART_SetConfig+0x2d4>)
 80060c8:	fba3 2302 	umull	r2, r3, r3, r2
 80060cc:	095b      	lsrs	r3, r3, #5
 80060ce:	005b      	lsls	r3, r3, #1
 80060d0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80060d4:	441c      	add	r4, r3
 80060d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060da:	2200      	movs	r2, #0
 80060dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80060e0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80060e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80060e8:	4642      	mov	r2, r8
 80060ea:	464b      	mov	r3, r9
 80060ec:	1891      	adds	r1, r2, r2
 80060ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80060f0:	415b      	adcs	r3, r3
 80060f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80060f8:	4641      	mov	r1, r8
 80060fa:	1851      	adds	r1, r2, r1
 80060fc:	6339      	str	r1, [r7, #48]	@ 0x30
 80060fe:	4649      	mov	r1, r9
 8006100:	414b      	adcs	r3, r1
 8006102:	637b      	str	r3, [r7, #52]	@ 0x34
 8006104:	f04f 0200 	mov.w	r2, #0
 8006108:	f04f 0300 	mov.w	r3, #0
 800610c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006110:	4659      	mov	r1, fp
 8006112:	00cb      	lsls	r3, r1, #3
 8006114:	4651      	mov	r1, sl
 8006116:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800611a:	4651      	mov	r1, sl
 800611c:	00ca      	lsls	r2, r1, #3
 800611e:	4610      	mov	r0, r2
 8006120:	4619      	mov	r1, r3
 8006122:	4603      	mov	r3, r0
 8006124:	4642      	mov	r2, r8
 8006126:	189b      	adds	r3, r3, r2
 8006128:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800612c:	464b      	mov	r3, r9
 800612e:	460a      	mov	r2, r1
 8006130:	eb42 0303 	adc.w	r3, r2, r3
 8006134:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006144:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006148:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800614c:	460b      	mov	r3, r1
 800614e:	18db      	adds	r3, r3, r3
 8006150:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006152:	4613      	mov	r3, r2
 8006154:	eb42 0303 	adc.w	r3, r2, r3
 8006158:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800615a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800615e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006162:	f7fa f84f 	bl	8000204 <__aeabi_uldivmod>
 8006166:	4602      	mov	r2, r0
 8006168:	460b      	mov	r3, r1
 800616a:	4b0d      	ldr	r3, [pc, #52]	@ (80061a0 <UART_SetConfig+0x2d4>)
 800616c:	fba3 1302 	umull	r1, r3, r3, r2
 8006170:	095b      	lsrs	r3, r3, #5
 8006172:	2164      	movs	r1, #100	@ 0x64
 8006174:	fb01 f303 	mul.w	r3, r1, r3
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	00db      	lsls	r3, r3, #3
 800617c:	3332      	adds	r3, #50	@ 0x32
 800617e:	4a08      	ldr	r2, [pc, #32]	@ (80061a0 <UART_SetConfig+0x2d4>)
 8006180:	fba2 2303 	umull	r2, r3, r2, r3
 8006184:	095b      	lsrs	r3, r3, #5
 8006186:	f003 0207 	and.w	r2, r3, #7
 800618a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4422      	add	r2, r4
 8006192:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006194:	e106      	b.n	80063a4 <UART_SetConfig+0x4d8>
 8006196:	bf00      	nop
 8006198:	40011000 	.word	0x40011000
 800619c:	40011400 	.word	0x40011400
 80061a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061a8:	2200      	movs	r2, #0
 80061aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80061ae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80061b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80061b6:	4642      	mov	r2, r8
 80061b8:	464b      	mov	r3, r9
 80061ba:	1891      	adds	r1, r2, r2
 80061bc:	6239      	str	r1, [r7, #32]
 80061be:	415b      	adcs	r3, r3
 80061c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80061c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80061c6:	4641      	mov	r1, r8
 80061c8:	1854      	adds	r4, r2, r1
 80061ca:	4649      	mov	r1, r9
 80061cc:	eb43 0501 	adc.w	r5, r3, r1
 80061d0:	f04f 0200 	mov.w	r2, #0
 80061d4:	f04f 0300 	mov.w	r3, #0
 80061d8:	00eb      	lsls	r3, r5, #3
 80061da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061de:	00e2      	lsls	r2, r4, #3
 80061e0:	4614      	mov	r4, r2
 80061e2:	461d      	mov	r5, r3
 80061e4:	4643      	mov	r3, r8
 80061e6:	18e3      	adds	r3, r4, r3
 80061e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80061ec:	464b      	mov	r3, r9
 80061ee:	eb45 0303 	adc.w	r3, r5, r3
 80061f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80061f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006202:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006206:	f04f 0200 	mov.w	r2, #0
 800620a:	f04f 0300 	mov.w	r3, #0
 800620e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006212:	4629      	mov	r1, r5
 8006214:	008b      	lsls	r3, r1, #2
 8006216:	4621      	mov	r1, r4
 8006218:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800621c:	4621      	mov	r1, r4
 800621e:	008a      	lsls	r2, r1, #2
 8006220:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006224:	f7f9 ffee 	bl	8000204 <__aeabi_uldivmod>
 8006228:	4602      	mov	r2, r0
 800622a:	460b      	mov	r3, r1
 800622c:	4b60      	ldr	r3, [pc, #384]	@ (80063b0 <UART_SetConfig+0x4e4>)
 800622e:	fba3 2302 	umull	r2, r3, r3, r2
 8006232:	095b      	lsrs	r3, r3, #5
 8006234:	011c      	lsls	r4, r3, #4
 8006236:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800623a:	2200      	movs	r2, #0
 800623c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006240:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006244:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006248:	4642      	mov	r2, r8
 800624a:	464b      	mov	r3, r9
 800624c:	1891      	adds	r1, r2, r2
 800624e:	61b9      	str	r1, [r7, #24]
 8006250:	415b      	adcs	r3, r3
 8006252:	61fb      	str	r3, [r7, #28]
 8006254:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006258:	4641      	mov	r1, r8
 800625a:	1851      	adds	r1, r2, r1
 800625c:	6139      	str	r1, [r7, #16]
 800625e:	4649      	mov	r1, r9
 8006260:	414b      	adcs	r3, r1
 8006262:	617b      	str	r3, [r7, #20]
 8006264:	f04f 0200 	mov.w	r2, #0
 8006268:	f04f 0300 	mov.w	r3, #0
 800626c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006270:	4659      	mov	r1, fp
 8006272:	00cb      	lsls	r3, r1, #3
 8006274:	4651      	mov	r1, sl
 8006276:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800627a:	4651      	mov	r1, sl
 800627c:	00ca      	lsls	r2, r1, #3
 800627e:	4610      	mov	r0, r2
 8006280:	4619      	mov	r1, r3
 8006282:	4603      	mov	r3, r0
 8006284:	4642      	mov	r2, r8
 8006286:	189b      	adds	r3, r3, r2
 8006288:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800628c:	464b      	mov	r3, r9
 800628e:	460a      	mov	r2, r1
 8006290:	eb42 0303 	adc.w	r3, r2, r3
 8006294:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80062a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80062a4:	f04f 0200 	mov.w	r2, #0
 80062a8:	f04f 0300 	mov.w	r3, #0
 80062ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80062b0:	4649      	mov	r1, r9
 80062b2:	008b      	lsls	r3, r1, #2
 80062b4:	4641      	mov	r1, r8
 80062b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062ba:	4641      	mov	r1, r8
 80062bc:	008a      	lsls	r2, r1, #2
 80062be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80062c2:	f7f9 ff9f 	bl	8000204 <__aeabi_uldivmod>
 80062c6:	4602      	mov	r2, r0
 80062c8:	460b      	mov	r3, r1
 80062ca:	4611      	mov	r1, r2
 80062cc:	4b38      	ldr	r3, [pc, #224]	@ (80063b0 <UART_SetConfig+0x4e4>)
 80062ce:	fba3 2301 	umull	r2, r3, r3, r1
 80062d2:	095b      	lsrs	r3, r3, #5
 80062d4:	2264      	movs	r2, #100	@ 0x64
 80062d6:	fb02 f303 	mul.w	r3, r2, r3
 80062da:	1acb      	subs	r3, r1, r3
 80062dc:	011b      	lsls	r3, r3, #4
 80062de:	3332      	adds	r3, #50	@ 0x32
 80062e0:	4a33      	ldr	r2, [pc, #204]	@ (80063b0 <UART_SetConfig+0x4e4>)
 80062e2:	fba2 2303 	umull	r2, r3, r2, r3
 80062e6:	095b      	lsrs	r3, r3, #5
 80062e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80062ec:	441c      	add	r4, r3
 80062ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062f2:	2200      	movs	r2, #0
 80062f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80062f6:	677a      	str	r2, [r7, #116]	@ 0x74
 80062f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80062fc:	4642      	mov	r2, r8
 80062fe:	464b      	mov	r3, r9
 8006300:	1891      	adds	r1, r2, r2
 8006302:	60b9      	str	r1, [r7, #8]
 8006304:	415b      	adcs	r3, r3
 8006306:	60fb      	str	r3, [r7, #12]
 8006308:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800630c:	4641      	mov	r1, r8
 800630e:	1851      	adds	r1, r2, r1
 8006310:	6039      	str	r1, [r7, #0]
 8006312:	4649      	mov	r1, r9
 8006314:	414b      	adcs	r3, r1
 8006316:	607b      	str	r3, [r7, #4]
 8006318:	f04f 0200 	mov.w	r2, #0
 800631c:	f04f 0300 	mov.w	r3, #0
 8006320:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006324:	4659      	mov	r1, fp
 8006326:	00cb      	lsls	r3, r1, #3
 8006328:	4651      	mov	r1, sl
 800632a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800632e:	4651      	mov	r1, sl
 8006330:	00ca      	lsls	r2, r1, #3
 8006332:	4610      	mov	r0, r2
 8006334:	4619      	mov	r1, r3
 8006336:	4603      	mov	r3, r0
 8006338:	4642      	mov	r2, r8
 800633a:	189b      	adds	r3, r3, r2
 800633c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800633e:	464b      	mov	r3, r9
 8006340:	460a      	mov	r2, r1
 8006342:	eb42 0303 	adc.w	r3, r2, r3
 8006346:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	663b      	str	r3, [r7, #96]	@ 0x60
 8006352:	667a      	str	r2, [r7, #100]	@ 0x64
 8006354:	f04f 0200 	mov.w	r2, #0
 8006358:	f04f 0300 	mov.w	r3, #0
 800635c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006360:	4649      	mov	r1, r9
 8006362:	008b      	lsls	r3, r1, #2
 8006364:	4641      	mov	r1, r8
 8006366:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800636a:	4641      	mov	r1, r8
 800636c:	008a      	lsls	r2, r1, #2
 800636e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006372:	f7f9 ff47 	bl	8000204 <__aeabi_uldivmod>
 8006376:	4602      	mov	r2, r0
 8006378:	460b      	mov	r3, r1
 800637a:	4b0d      	ldr	r3, [pc, #52]	@ (80063b0 <UART_SetConfig+0x4e4>)
 800637c:	fba3 1302 	umull	r1, r3, r3, r2
 8006380:	095b      	lsrs	r3, r3, #5
 8006382:	2164      	movs	r1, #100	@ 0x64
 8006384:	fb01 f303 	mul.w	r3, r1, r3
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	011b      	lsls	r3, r3, #4
 800638c:	3332      	adds	r3, #50	@ 0x32
 800638e:	4a08      	ldr	r2, [pc, #32]	@ (80063b0 <UART_SetConfig+0x4e4>)
 8006390:	fba2 2303 	umull	r2, r3, r2, r3
 8006394:	095b      	lsrs	r3, r3, #5
 8006396:	f003 020f 	and.w	r2, r3, #15
 800639a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4422      	add	r2, r4
 80063a2:	609a      	str	r2, [r3, #8]
}
 80063a4:	bf00      	nop
 80063a6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80063aa:	46bd      	mov	sp, r7
 80063ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063b0:	51eb851f 	.word	0x51eb851f

080063b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063b4:	b084      	sub	sp, #16
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b084      	sub	sp, #16
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
 80063be:	f107 001c 	add.w	r0, r7, #28
 80063c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80063c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d122      	bne.n	8006412 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063d0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80063e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80063f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d105      	bne.n	8006406 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f001 fbe8 	bl	8007bdc <USB_CoreReset>
 800640c:	4603      	mov	r3, r0
 800640e:	73fb      	strb	r3, [r7, #15]
 8006410:	e01a      	b.n	8006448 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f001 fbdc 	bl	8007bdc <USB_CoreReset>
 8006424:	4603      	mov	r3, r0
 8006426:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006428:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800642a:	2b00      	cmp	r3, #0
 800642c:	d106      	bne.n	800643c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006432:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	639a      	str	r2, [r3, #56]	@ 0x38
 800643a:	e005      	b.n	8006448 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006440:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800644a:	2b01      	cmp	r3, #1
 800644c:	d10b      	bne.n	8006466 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	f043 0206 	orr.w	r2, r3, #6
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f043 0220 	orr.w	r2, r3, #32
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006466:	7bfb      	ldrb	r3, [r7, #15]
}
 8006468:	4618      	mov	r0, r3
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006472:	b004      	add	sp, #16
 8006474:	4770      	bx	lr
	...

08006478 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006478:	b480      	push	{r7}
 800647a:	b087      	sub	sp, #28
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	4613      	mov	r3, r2
 8006484:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006486:	79fb      	ldrb	r3, [r7, #7]
 8006488:	2b02      	cmp	r3, #2
 800648a:	d165      	bne.n	8006558 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	4a41      	ldr	r2, [pc, #260]	@ (8006594 <USB_SetTurnaroundTime+0x11c>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d906      	bls.n	80064a2 <USB_SetTurnaroundTime+0x2a>
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	4a40      	ldr	r2, [pc, #256]	@ (8006598 <USB_SetTurnaroundTime+0x120>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d202      	bcs.n	80064a2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800649c:	230f      	movs	r3, #15
 800649e:	617b      	str	r3, [r7, #20]
 80064a0:	e062      	b.n	8006568 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	4a3c      	ldr	r2, [pc, #240]	@ (8006598 <USB_SetTurnaroundTime+0x120>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d306      	bcc.n	80064b8 <USB_SetTurnaroundTime+0x40>
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	4a3b      	ldr	r2, [pc, #236]	@ (800659c <USB_SetTurnaroundTime+0x124>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d202      	bcs.n	80064b8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80064b2:	230e      	movs	r3, #14
 80064b4:	617b      	str	r3, [r7, #20]
 80064b6:	e057      	b.n	8006568 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	4a38      	ldr	r2, [pc, #224]	@ (800659c <USB_SetTurnaroundTime+0x124>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d306      	bcc.n	80064ce <USB_SetTurnaroundTime+0x56>
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	4a37      	ldr	r2, [pc, #220]	@ (80065a0 <USB_SetTurnaroundTime+0x128>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d202      	bcs.n	80064ce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80064c8:	230d      	movs	r3, #13
 80064ca:	617b      	str	r3, [r7, #20]
 80064cc:	e04c      	b.n	8006568 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	4a33      	ldr	r2, [pc, #204]	@ (80065a0 <USB_SetTurnaroundTime+0x128>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d306      	bcc.n	80064e4 <USB_SetTurnaroundTime+0x6c>
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	4a32      	ldr	r2, [pc, #200]	@ (80065a4 <USB_SetTurnaroundTime+0x12c>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d802      	bhi.n	80064e4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80064de:	230c      	movs	r3, #12
 80064e0:	617b      	str	r3, [r7, #20]
 80064e2:	e041      	b.n	8006568 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	4a2f      	ldr	r2, [pc, #188]	@ (80065a4 <USB_SetTurnaroundTime+0x12c>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d906      	bls.n	80064fa <USB_SetTurnaroundTime+0x82>
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	4a2e      	ldr	r2, [pc, #184]	@ (80065a8 <USB_SetTurnaroundTime+0x130>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d802      	bhi.n	80064fa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80064f4:	230b      	movs	r3, #11
 80064f6:	617b      	str	r3, [r7, #20]
 80064f8:	e036      	b.n	8006568 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	4a2a      	ldr	r2, [pc, #168]	@ (80065a8 <USB_SetTurnaroundTime+0x130>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d906      	bls.n	8006510 <USB_SetTurnaroundTime+0x98>
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	4a29      	ldr	r2, [pc, #164]	@ (80065ac <USB_SetTurnaroundTime+0x134>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d802      	bhi.n	8006510 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800650a:	230a      	movs	r3, #10
 800650c:	617b      	str	r3, [r7, #20]
 800650e:	e02b      	b.n	8006568 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	4a26      	ldr	r2, [pc, #152]	@ (80065ac <USB_SetTurnaroundTime+0x134>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d906      	bls.n	8006526 <USB_SetTurnaroundTime+0xae>
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	4a25      	ldr	r2, [pc, #148]	@ (80065b0 <USB_SetTurnaroundTime+0x138>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d202      	bcs.n	8006526 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006520:	2309      	movs	r3, #9
 8006522:	617b      	str	r3, [r7, #20]
 8006524:	e020      	b.n	8006568 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	4a21      	ldr	r2, [pc, #132]	@ (80065b0 <USB_SetTurnaroundTime+0x138>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d306      	bcc.n	800653c <USB_SetTurnaroundTime+0xc4>
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	4a20      	ldr	r2, [pc, #128]	@ (80065b4 <USB_SetTurnaroundTime+0x13c>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d802      	bhi.n	800653c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006536:	2308      	movs	r3, #8
 8006538:	617b      	str	r3, [r7, #20]
 800653a:	e015      	b.n	8006568 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	4a1d      	ldr	r2, [pc, #116]	@ (80065b4 <USB_SetTurnaroundTime+0x13c>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d906      	bls.n	8006552 <USB_SetTurnaroundTime+0xda>
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	4a1c      	ldr	r2, [pc, #112]	@ (80065b8 <USB_SetTurnaroundTime+0x140>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d202      	bcs.n	8006552 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800654c:	2307      	movs	r3, #7
 800654e:	617b      	str	r3, [r7, #20]
 8006550:	e00a      	b.n	8006568 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006552:	2306      	movs	r3, #6
 8006554:	617b      	str	r3, [r7, #20]
 8006556:	e007      	b.n	8006568 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006558:	79fb      	ldrb	r3, [r7, #7]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d102      	bne.n	8006564 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800655e:	2309      	movs	r3, #9
 8006560:	617b      	str	r3, [r7, #20]
 8006562:	e001      	b.n	8006568 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006564:	2309      	movs	r3, #9
 8006566:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	68da      	ldr	r2, [r3, #12]
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	029b      	lsls	r3, r3, #10
 800657c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006580:	431a      	orrs	r2, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	371c      	adds	r7, #28
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr
 8006594:	00d8acbf 	.word	0x00d8acbf
 8006598:	00e4e1c0 	.word	0x00e4e1c0
 800659c:	00f42400 	.word	0x00f42400
 80065a0:	01067380 	.word	0x01067380
 80065a4:	011a499f 	.word	0x011a499f
 80065a8:	01312cff 	.word	0x01312cff
 80065ac:	014ca43f 	.word	0x014ca43f
 80065b0:	016e3600 	.word	0x016e3600
 80065b4:	01a6ab1f 	.word	0x01a6ab1f
 80065b8:	01e84800 	.word	0x01e84800

080065bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	f043 0201 	orr.w	r2, r3, #1
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	370c      	adds	r7, #12
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr

080065de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80065de:	b480      	push	{r7}
 80065e0:	b083      	sub	sp, #12
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	f023 0201 	bic.w	r2, r3, #1
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	460b      	mov	r3, r1
 800660a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800660c:	2300      	movs	r3, #0
 800660e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800661c:	78fb      	ldrb	r3, [r7, #3]
 800661e:	2b01      	cmp	r3, #1
 8006620:	d115      	bne.n	800664e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800662e:	2001      	movs	r0, #1
 8006630:	f7fb fab8 	bl	8001ba4 <HAL_Delay>
      ms++;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	3301      	adds	r3, #1
 8006638:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f001 fa3f 	bl	8007abe <USB_GetMode>
 8006640:	4603      	mov	r3, r0
 8006642:	2b01      	cmp	r3, #1
 8006644:	d01e      	beq.n	8006684 <USB_SetCurrentMode+0x84>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2b31      	cmp	r3, #49	@ 0x31
 800664a:	d9f0      	bls.n	800662e <USB_SetCurrentMode+0x2e>
 800664c:	e01a      	b.n	8006684 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800664e:	78fb      	ldrb	r3, [r7, #3]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d115      	bne.n	8006680 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006660:	2001      	movs	r0, #1
 8006662:	f7fb fa9f 	bl	8001ba4 <HAL_Delay>
      ms++;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	3301      	adds	r3, #1
 800666a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f001 fa26 	bl	8007abe <USB_GetMode>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d005      	beq.n	8006684 <USB_SetCurrentMode+0x84>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2b31      	cmp	r3, #49	@ 0x31
 800667c:	d9f0      	bls.n	8006660 <USB_SetCurrentMode+0x60>
 800667e:	e001      	b.n	8006684 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	e005      	b.n	8006690 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2b32      	cmp	r3, #50	@ 0x32
 8006688:	d101      	bne.n	800668e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e000      	b.n	8006690 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	3710      	adds	r7, #16
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006698:	b084      	sub	sp, #16
 800669a:	b580      	push	{r7, lr}
 800669c:	b086      	sub	sp, #24
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
 80066a2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80066a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80066aa:	2300      	movs	r3, #0
 80066ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80066b2:	2300      	movs	r3, #0
 80066b4:	613b      	str	r3, [r7, #16]
 80066b6:	e009      	b.n	80066cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	3340      	adds	r3, #64	@ 0x40
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	4413      	add	r3, r2
 80066c2:	2200      	movs	r2, #0
 80066c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	3301      	adds	r3, #1
 80066ca:	613b      	str	r3, [r7, #16]
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	2b0e      	cmp	r3, #14
 80066d0:	d9f2      	bls.n	80066b8 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80066d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d11c      	bne.n	8006712 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066e6:	f043 0302 	orr.w	r3, r3, #2
 80066ea:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066f0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	601a      	str	r2, [r3, #0]
 8006710:	e005      	b.n	800671e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006716:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006724:	461a      	mov	r2, r3
 8006726:	2300      	movs	r3, #0
 8006728:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006730:	4619      	mov	r1, r3
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006738:	461a      	mov	r2, r3
 800673a:	680b      	ldr	r3, [r1, #0]
 800673c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800673e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006740:	2b01      	cmp	r3, #1
 8006742:	d10c      	bne.n	800675e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006746:	2b00      	cmp	r3, #0
 8006748:	d104      	bne.n	8006754 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800674a:	2100      	movs	r1, #0
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 f965 	bl	8006a1c <USB_SetDevSpeed>
 8006752:	e008      	b.n	8006766 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006754:	2101      	movs	r1, #1
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f960 	bl	8006a1c <USB_SetDevSpeed>
 800675c:	e003      	b.n	8006766 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800675e:	2103      	movs	r1, #3
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 f95b 	bl	8006a1c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006766:	2110      	movs	r1, #16
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 f8f3 	bl	8006954 <USB_FlushTxFifo>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d001      	beq.n	8006778 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 f91f 	bl	80069bc <USB_FlushRxFifo>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d001      	beq.n	8006788 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800678e:	461a      	mov	r2, r3
 8006790:	2300      	movs	r3, #0
 8006792:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800679a:	461a      	mov	r2, r3
 800679c:	2300      	movs	r3, #0
 800679e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067a6:	461a      	mov	r2, r3
 80067a8:	2300      	movs	r3, #0
 80067aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067ac:	2300      	movs	r3, #0
 80067ae:	613b      	str	r3, [r7, #16]
 80067b0:	e043      	b.n	800683a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	015a      	lsls	r2, r3, #5
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	4413      	add	r3, r2
 80067ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067c8:	d118      	bne.n	80067fc <USB_DevInit+0x164>
    {
      if (i == 0U)
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d10a      	bne.n	80067e6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	015a      	lsls	r2, r3, #5
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	4413      	add	r3, r2
 80067d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067dc:	461a      	mov	r2, r3
 80067de:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80067e2:	6013      	str	r3, [r2, #0]
 80067e4:	e013      	b.n	800680e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	015a      	lsls	r2, r3, #5
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	4413      	add	r3, r2
 80067ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067f2:	461a      	mov	r2, r3
 80067f4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80067f8:	6013      	str	r3, [r2, #0]
 80067fa:	e008      	b.n	800680e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	015a      	lsls	r2, r3, #5
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	4413      	add	r3, r2
 8006804:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006808:	461a      	mov	r2, r3
 800680a:	2300      	movs	r3, #0
 800680c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	015a      	lsls	r2, r3, #5
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	4413      	add	r3, r2
 8006816:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800681a:	461a      	mov	r2, r3
 800681c:	2300      	movs	r3, #0
 800681e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	015a      	lsls	r2, r3, #5
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	4413      	add	r3, r2
 8006828:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800682c:	461a      	mov	r2, r3
 800682e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006832:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	3301      	adds	r3, #1
 8006838:	613b      	str	r3, [r7, #16]
 800683a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683c:	693a      	ldr	r2, [r7, #16]
 800683e:	429a      	cmp	r2, r3
 8006840:	d3b7      	bcc.n	80067b2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006842:	2300      	movs	r3, #0
 8006844:	613b      	str	r3, [r7, #16]
 8006846:	e043      	b.n	80068d0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	015a      	lsls	r2, r3, #5
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	4413      	add	r3, r2
 8006850:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800685a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800685e:	d118      	bne.n	8006892 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10a      	bne.n	800687c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	015a      	lsls	r2, r3, #5
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	4413      	add	r3, r2
 800686e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006872:	461a      	mov	r2, r3
 8006874:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006878:	6013      	str	r3, [r2, #0]
 800687a:	e013      	b.n	80068a4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	015a      	lsls	r2, r3, #5
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	4413      	add	r3, r2
 8006884:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006888:	461a      	mov	r2, r3
 800688a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800688e:	6013      	str	r3, [r2, #0]
 8006890:	e008      	b.n	80068a4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	015a      	lsls	r2, r3, #5
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	4413      	add	r3, r2
 800689a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800689e:	461a      	mov	r2, r3
 80068a0:	2300      	movs	r3, #0
 80068a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	015a      	lsls	r2, r3, #5
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	4413      	add	r3, r2
 80068ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068b0:	461a      	mov	r2, r3
 80068b2:	2300      	movs	r3, #0
 80068b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	015a      	lsls	r2, r3, #5
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	4413      	add	r3, r2
 80068be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068c2:	461a      	mov	r2, r3
 80068c4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80068c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	3301      	adds	r3, #1
 80068ce:	613b      	str	r3, [r7, #16]
 80068d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d2:	693a      	ldr	r2, [r7, #16]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d3b7      	bcc.n	8006848 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068e6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80068f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80068fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d105      	bne.n	800690c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	699b      	ldr	r3, [r3, #24]
 8006904:	f043 0210 	orr.w	r2, r3, #16
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	699a      	ldr	r2, [r3, #24]
 8006910:	4b0f      	ldr	r3, [pc, #60]	@ (8006950 <USB_DevInit+0x2b8>)
 8006912:	4313      	orrs	r3, r2
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006918:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800691a:	2b00      	cmp	r3, #0
 800691c:	d005      	beq.n	800692a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	f043 0208 	orr.w	r2, r3, #8
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800692a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800692c:	2b01      	cmp	r3, #1
 800692e:	d107      	bne.n	8006940 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	699b      	ldr	r3, [r3, #24]
 8006934:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006938:	f043 0304 	orr.w	r3, r3, #4
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006940:	7dfb      	ldrb	r3, [r7, #23]
}
 8006942:	4618      	mov	r0, r3
 8006944:	3718      	adds	r7, #24
 8006946:	46bd      	mov	sp, r7
 8006948:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800694c:	b004      	add	sp, #16
 800694e:	4770      	bx	lr
 8006950:	803c3800 	.word	0x803c3800

08006954 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800695e:	2300      	movs	r3, #0
 8006960:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	3301      	adds	r3, #1
 8006966:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	4a13      	ldr	r2, [pc, #76]	@ (80069b8 <USB_FlushTxFifo+0x64>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d901      	bls.n	8006974 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	e01b      	b.n	80069ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	2b00      	cmp	r3, #0
 800697a:	daf2      	bge.n	8006962 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800697c:	2300      	movs	r3, #0
 800697e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	019b      	lsls	r3, r3, #6
 8006984:	f043 0220 	orr.w	r2, r3, #32
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	3301      	adds	r3, #1
 8006990:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	4a08      	ldr	r2, [pc, #32]	@ (80069b8 <USB_FlushTxFifo+0x64>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d901      	bls.n	800699e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e006      	b.n	80069ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	f003 0320 	and.w	r3, r3, #32
 80069a6:	2b20      	cmp	r3, #32
 80069a8:	d0f0      	beq.n	800698c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3714      	adds	r7, #20
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr
 80069b8:	00030d40 	.word	0x00030d40

080069bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80069bc:	b480      	push	{r7}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069c4:	2300      	movs	r3, #0
 80069c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	3301      	adds	r3, #1
 80069cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	4a11      	ldr	r2, [pc, #68]	@ (8006a18 <USB_FlushRxFifo+0x5c>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d901      	bls.n	80069da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e018      	b.n	8006a0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	daf2      	bge.n	80069c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80069e2:	2300      	movs	r3, #0
 80069e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2210      	movs	r2, #16
 80069ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	3301      	adds	r3, #1
 80069f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	4a08      	ldr	r2, [pc, #32]	@ (8006a18 <USB_FlushRxFifo+0x5c>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d901      	bls.n	80069fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e006      	b.n	8006a0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	f003 0310 	and.w	r3, r3, #16
 8006a06:	2b10      	cmp	r3, #16
 8006a08:	d0f0      	beq.n	80069ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3714      	adds	r7, #20
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr
 8006a18:	00030d40 	.word	0x00030d40

08006a1c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	460b      	mov	r3, r1
 8006a26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	78fb      	ldrb	r3, [r7, #3]
 8006a36:	68f9      	ldr	r1, [r7, #12]
 8006a38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3714      	adds	r7, #20
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr

08006a4e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006a4e:	b480      	push	{r7}
 8006a50:	b087      	sub	sp, #28
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	f003 0306 	and.w	r3, r3, #6
 8006a66:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d102      	bne.n	8006a74 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	75fb      	strb	r3, [r7, #23]
 8006a72:	e00a      	b.n	8006a8a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d002      	beq.n	8006a80 <USB_GetDevSpeed+0x32>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2b06      	cmp	r3, #6
 8006a7e:	d102      	bne.n	8006a86 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006a80:	2302      	movs	r3, #2
 8006a82:	75fb      	strb	r3, [r7, #23]
 8006a84:	e001      	b.n	8006a8a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006a86:	230f      	movs	r3, #15
 8006a88:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	371c      	adds	r7, #28
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b085      	sub	sp, #20
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	785b      	ldrb	r3, [r3, #1]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d13a      	bne.n	8006b2a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006aba:	69da      	ldr	r2, [r3, #28]
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	f003 030f 	and.w	r3, r3, #15
 8006ac4:	2101      	movs	r1, #1
 8006ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	68f9      	ldr	r1, [r7, #12]
 8006ace:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	015a      	lsls	r2, r3, #5
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	4413      	add	r3, r2
 8006ade:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d155      	bne.n	8006b98 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	015a      	lsls	r2, r3, #5
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	4413      	add	r3, r2
 8006af4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	791b      	ldrb	r3, [r3, #4]
 8006b06:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b08:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	059b      	lsls	r3, r3, #22
 8006b0e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b10:	4313      	orrs	r3, r2
 8006b12:	68ba      	ldr	r2, [r7, #8]
 8006b14:	0151      	lsls	r1, r2, #5
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	440a      	add	r2, r1
 8006b1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b26:	6013      	str	r3, [r2, #0]
 8006b28:	e036      	b.n	8006b98 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b30:	69da      	ldr	r2, [r3, #28]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	f003 030f 	and.w	r3, r3, #15
 8006b3a:	2101      	movs	r1, #1
 8006b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b40:	041b      	lsls	r3, r3, #16
 8006b42:	68f9      	ldr	r1, [r7, #12]
 8006b44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	015a      	lsls	r2, r3, #5
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	4413      	add	r3, r2
 8006b54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d11a      	bne.n	8006b98 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	015a      	lsls	r2, r3, #5
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	4413      	add	r3, r2
 8006b6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	791b      	ldrb	r3, [r3, #4]
 8006b7c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006b7e:	430b      	orrs	r3, r1
 8006b80:	4313      	orrs	r3, r2
 8006b82:	68ba      	ldr	r2, [r7, #8]
 8006b84:	0151      	lsls	r1, r2, #5
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	440a      	add	r2, r1
 8006b8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b96:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3714      	adds	r7, #20
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr
	...

08006ba8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b085      	sub	sp, #20
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	785b      	ldrb	r3, [r3, #1]
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d161      	bne.n	8006c88 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	015a      	lsls	r2, r3, #5
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	4413      	add	r3, r2
 8006bcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006bd6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bda:	d11f      	bne.n	8006c1c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	015a      	lsls	r2, r3, #5
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	4413      	add	r3, r2
 8006be4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68ba      	ldr	r2, [r7, #8]
 8006bec:	0151      	lsls	r1, r2, #5
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	440a      	add	r2, r1
 8006bf2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bf6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006bfa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	015a      	lsls	r2, r3, #5
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	4413      	add	r3, r2
 8006c04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68ba      	ldr	r2, [r7, #8]
 8006c0c:	0151      	lsls	r1, r2, #5
 8006c0e:	68fa      	ldr	r2, [r7, #12]
 8006c10:	440a      	add	r2, r1
 8006c12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c16:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006c1a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	f003 030f 	and.w	r3, r3, #15
 8006c2c:	2101      	movs	r1, #1
 8006c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	43db      	mvns	r3, r3
 8006c36:	68f9      	ldr	r1, [r7, #12]
 8006c38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c46:	69da      	ldr	r2, [r3, #28]
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	f003 030f 	and.w	r3, r3, #15
 8006c50:	2101      	movs	r1, #1
 8006c52:	fa01 f303 	lsl.w	r3, r1, r3
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	43db      	mvns	r3, r3
 8006c5a:	68f9      	ldr	r1, [r7, #12]
 8006c5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c60:	4013      	ands	r3, r2
 8006c62:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	015a      	lsls	r2, r3, #5
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	0159      	lsls	r1, r3, #5
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	440b      	add	r3, r1
 8006c7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c7e:	4619      	mov	r1, r3
 8006c80:	4b35      	ldr	r3, [pc, #212]	@ (8006d58 <USB_DeactivateEndpoint+0x1b0>)
 8006c82:	4013      	ands	r3, r2
 8006c84:	600b      	str	r3, [r1, #0]
 8006c86:	e060      	b.n	8006d4a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	015a      	lsls	r2, r3, #5
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	4413      	add	r3, r2
 8006c90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c9e:	d11f      	bne.n	8006ce0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	015a      	lsls	r2, r3, #5
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	0151      	lsls	r1, r2, #5
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	440a      	add	r2, r1
 8006cb6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006cba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006cbe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	015a      	lsls	r2, r3, #5
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	68ba      	ldr	r2, [r7, #8]
 8006cd0:	0151      	lsls	r1, r2, #5
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	440a      	add	r2, r1
 8006cd6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006cda:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006cde:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ce6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	f003 030f 	and.w	r3, r3, #15
 8006cf0:	2101      	movs	r1, #1
 8006cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8006cf6:	041b      	lsls	r3, r3, #16
 8006cf8:	43db      	mvns	r3, r3
 8006cfa:	68f9      	ldr	r1, [r7, #12]
 8006cfc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006d00:	4013      	ands	r3, r2
 8006d02:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d0a:	69da      	ldr	r2, [r3, #28]
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	f003 030f 	and.w	r3, r3, #15
 8006d14:	2101      	movs	r1, #1
 8006d16:	fa01 f303 	lsl.w	r3, r1, r3
 8006d1a:	041b      	lsls	r3, r3, #16
 8006d1c:	43db      	mvns	r3, r3
 8006d1e:	68f9      	ldr	r1, [r7, #12]
 8006d20:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006d24:	4013      	ands	r3, r2
 8006d26:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	015a      	lsls	r2, r3, #5
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	4413      	add	r3, r2
 8006d30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	0159      	lsls	r1, r3, #5
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	440b      	add	r3, r1
 8006d3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d42:	4619      	mov	r1, r3
 8006d44:	4b05      	ldr	r3, [pc, #20]	@ (8006d5c <USB_DeactivateEndpoint+0x1b4>)
 8006d46:	4013      	ands	r3, r2
 8006d48:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3714      	adds	r7, #20
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr
 8006d58:	ec337800 	.word	0xec337800
 8006d5c:	eff37800 	.word	0xeff37800

08006d60 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b08a      	sub	sp, #40	@ 0x28
 8006d64:	af02      	add	r7, sp, #8
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	785b      	ldrb	r3, [r3, #1]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	f040 815c 	bne.w	800703a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	699b      	ldr	r3, [r3, #24]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d132      	bne.n	8006df0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d8a:	69bb      	ldr	r3, [r7, #24]
 8006d8c:	015a      	lsls	r2, r3, #5
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	4413      	add	r3, r2
 8006d92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	69ba      	ldr	r2, [r7, #24]
 8006d9a:	0151      	lsls	r1, r2, #5
 8006d9c:	69fa      	ldr	r2, [r7, #28]
 8006d9e:	440a      	add	r2, r1
 8006da0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006da4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006da8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006dac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006dae:	69bb      	ldr	r3, [r7, #24]
 8006db0:	015a      	lsls	r2, r3, #5
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	4413      	add	r3, r2
 8006db6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	69ba      	ldr	r2, [r7, #24]
 8006dbe:	0151      	lsls	r1, r2, #5
 8006dc0:	69fa      	ldr	r2, [r7, #28]
 8006dc2:	440a      	add	r2, r1
 8006dc4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006dc8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006dcc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	015a      	lsls	r2, r3, #5
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	69ba      	ldr	r2, [r7, #24]
 8006dde:	0151      	lsls	r1, r2, #5
 8006de0:	69fa      	ldr	r2, [r7, #28]
 8006de2:	440a      	add	r2, r1
 8006de4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006de8:	0cdb      	lsrs	r3, r3, #19
 8006dea:	04db      	lsls	r3, r3, #19
 8006dec:	6113      	str	r3, [r2, #16]
 8006dee:	e074      	b.n	8006eda <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	015a      	lsls	r2, r3, #5
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	4413      	add	r3, r2
 8006df8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	69ba      	ldr	r2, [r7, #24]
 8006e00:	0151      	lsls	r1, r2, #5
 8006e02:	69fa      	ldr	r2, [r7, #28]
 8006e04:	440a      	add	r2, r1
 8006e06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e0a:	0cdb      	lsrs	r3, r3, #19
 8006e0c:	04db      	lsls	r3, r3, #19
 8006e0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	015a      	lsls	r2, r3, #5
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	4413      	add	r3, r2
 8006e18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	69ba      	ldr	r2, [r7, #24]
 8006e20:	0151      	lsls	r1, r2, #5
 8006e22:	69fa      	ldr	r2, [r7, #28]
 8006e24:	440a      	add	r2, r1
 8006e26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e2a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006e2e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006e32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	015a      	lsls	r2, r3, #5
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e40:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	6999      	ldr	r1, [r3, #24]
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	440b      	add	r3, r1
 8006e4c:	1e59      	subs	r1, r3, #1
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e56:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006e58:	4b9d      	ldr	r3, [pc, #628]	@ (80070d0 <USB_EPStartXfer+0x370>)
 8006e5a:	400b      	ands	r3, r1
 8006e5c:	69b9      	ldr	r1, [r7, #24]
 8006e5e:	0148      	lsls	r0, r1, #5
 8006e60:	69f9      	ldr	r1, [r7, #28]
 8006e62:	4401      	add	r1, r0
 8006e64:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	015a      	lsls	r2, r3, #5
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	4413      	add	r3, r2
 8006e74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e78:	691a      	ldr	r2, [r3, #16]
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e82:	69b9      	ldr	r1, [r7, #24]
 8006e84:	0148      	lsls	r0, r1, #5
 8006e86:	69f9      	ldr	r1, [r7, #28]
 8006e88:	4401      	add	r1, r0
 8006e8a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	791b      	ldrb	r3, [r3, #4]
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d11f      	bne.n	8006eda <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	015a      	lsls	r2, r3, #5
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	69ba      	ldr	r2, [r7, #24]
 8006eaa:	0151      	lsls	r1, r2, #5
 8006eac:	69fa      	ldr	r2, [r7, #28]
 8006eae:	440a      	add	r2, r1
 8006eb0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006eb4:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006eb8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	015a      	lsls	r2, r3, #5
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	69ba      	ldr	r2, [r7, #24]
 8006eca:	0151      	lsls	r1, r2, #5
 8006ecc:	69fa      	ldr	r2, [r7, #28]
 8006ece:	440a      	add	r2, r1
 8006ed0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ed4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006ed8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006eda:	79fb      	ldrb	r3, [r7, #7]
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d14b      	bne.n	8006f78 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	695b      	ldr	r3, [r3, #20]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d009      	beq.n	8006efc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	015a      	lsls	r2, r3, #5
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	4413      	add	r3, r2
 8006ef0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	791b      	ldrb	r3, [r3, #4]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d128      	bne.n	8006f56 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d110      	bne.n	8006f36 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	015a      	lsls	r2, r3, #5
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	4413      	add	r3, r2
 8006f1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	69ba      	ldr	r2, [r7, #24]
 8006f24:	0151      	lsls	r1, r2, #5
 8006f26:	69fa      	ldr	r2, [r7, #28]
 8006f28:	440a      	add	r2, r1
 8006f2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f2e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006f32:	6013      	str	r3, [r2, #0]
 8006f34:	e00f      	b.n	8006f56 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	015a      	lsls	r2, r3, #5
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	69ba      	ldr	r2, [r7, #24]
 8006f46:	0151      	lsls	r1, r2, #5
 8006f48:	69fa      	ldr	r2, [r7, #28]
 8006f4a:	440a      	add	r2, r1
 8006f4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f54:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f56:	69bb      	ldr	r3, [r7, #24]
 8006f58:	015a      	lsls	r2, r3, #5
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	69ba      	ldr	r2, [r7, #24]
 8006f66:	0151      	lsls	r1, r2, #5
 8006f68:	69fa      	ldr	r2, [r7, #28]
 8006f6a:	440a      	add	r2, r1
 8006f6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f70:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006f74:	6013      	str	r3, [r2, #0]
 8006f76:	e133      	b.n	80071e0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f78:	69bb      	ldr	r3, [r7, #24]
 8006f7a:	015a      	lsls	r2, r3, #5
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	4413      	add	r3, r2
 8006f80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	69ba      	ldr	r2, [r7, #24]
 8006f88:	0151      	lsls	r1, r2, #5
 8006f8a:	69fa      	ldr	r2, [r7, #28]
 8006f8c:	440a      	add	r2, r1
 8006f8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f92:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006f96:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	791b      	ldrb	r3, [r3, #4]
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d015      	beq.n	8006fcc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	699b      	ldr	r3, [r3, #24]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f000 811b 	beq.w	80071e0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	f003 030f 	and.w	r3, r3, #15
 8006fba:	2101      	movs	r1, #1
 8006fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8006fc0:	69f9      	ldr	r1, [r7, #28]
 8006fc2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	634b      	str	r3, [r1, #52]	@ 0x34
 8006fca:	e109      	b.n	80071e0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d110      	bne.n	8006ffe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	015a      	lsls	r2, r3, #5
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	69ba      	ldr	r2, [r7, #24]
 8006fec:	0151      	lsls	r1, r2, #5
 8006fee:	69fa      	ldr	r2, [r7, #28]
 8006ff0:	440a      	add	r2, r1
 8006ff2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ff6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006ffa:	6013      	str	r3, [r2, #0]
 8006ffc:	e00f      	b.n	800701e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	015a      	lsls	r2, r3, #5
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	4413      	add	r3, r2
 8007006:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	69ba      	ldr	r2, [r7, #24]
 800700e:	0151      	lsls	r1, r2, #5
 8007010:	69fa      	ldr	r2, [r7, #28]
 8007012:	440a      	add	r2, r1
 8007014:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007018:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800701c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	6919      	ldr	r1, [r3, #16]
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	781a      	ldrb	r2, [r3, #0]
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	b298      	uxth	r0, r3
 800702c:	79fb      	ldrb	r3, [r7, #7]
 800702e:	9300      	str	r3, [sp, #0]
 8007030:	4603      	mov	r3, r0
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	f000 fade 	bl	80075f4 <USB_WritePacket>
 8007038:	e0d2      	b.n	80071e0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	015a      	lsls	r2, r3, #5
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	4413      	add	r3, r2
 8007042:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	69ba      	ldr	r2, [r7, #24]
 800704a:	0151      	lsls	r1, r2, #5
 800704c:	69fa      	ldr	r2, [r7, #28]
 800704e:	440a      	add	r2, r1
 8007050:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007054:	0cdb      	lsrs	r3, r3, #19
 8007056:	04db      	lsls	r3, r3, #19
 8007058:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	015a      	lsls	r2, r3, #5
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	4413      	add	r3, r2
 8007062:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	69ba      	ldr	r2, [r7, #24]
 800706a:	0151      	lsls	r1, r2, #5
 800706c:	69fa      	ldr	r2, [r7, #28]
 800706e:	440a      	add	r2, r1
 8007070:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007074:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007078:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800707c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d126      	bne.n	80070d4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	015a      	lsls	r2, r3, #5
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	4413      	add	r3, r2
 800708e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007092:	691a      	ldr	r2, [r3, #16]
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800709c:	69b9      	ldr	r1, [r7, #24]
 800709e:	0148      	lsls	r0, r1, #5
 80070a0:	69f9      	ldr	r1, [r7, #28]
 80070a2:	4401      	add	r1, r0
 80070a4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80070a8:	4313      	orrs	r3, r2
 80070aa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	015a      	lsls	r2, r3, #5
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	4413      	add	r3, r2
 80070b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	69ba      	ldr	r2, [r7, #24]
 80070bc:	0151      	lsls	r1, r2, #5
 80070be:	69fa      	ldr	r2, [r7, #28]
 80070c0:	440a      	add	r2, r1
 80070c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80070ca:	6113      	str	r3, [r2, #16]
 80070cc:	e03a      	b.n	8007144 <USB_EPStartXfer+0x3e4>
 80070ce:	bf00      	nop
 80070d0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	699a      	ldr	r2, [r3, #24]
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	4413      	add	r3, r2
 80070de:	1e5a      	subs	r2, r3, #1
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070e8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	8afa      	ldrh	r2, [r7, #22]
 80070f0:	fb03 f202 	mul.w	r2, r3, r2
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	015a      	lsls	r2, r3, #5
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	4413      	add	r3, r2
 8007100:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007104:	691a      	ldr	r2, [r3, #16]
 8007106:	8afb      	ldrh	r3, [r7, #22]
 8007108:	04d9      	lsls	r1, r3, #19
 800710a:	4b38      	ldr	r3, [pc, #224]	@ (80071ec <USB_EPStartXfer+0x48c>)
 800710c:	400b      	ands	r3, r1
 800710e:	69b9      	ldr	r1, [r7, #24]
 8007110:	0148      	lsls	r0, r1, #5
 8007112:	69f9      	ldr	r1, [r7, #28]
 8007114:	4401      	add	r1, r0
 8007116:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800711a:	4313      	orrs	r3, r2
 800711c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	015a      	lsls	r2, r3, #5
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	4413      	add	r3, r2
 8007126:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800712a:	691a      	ldr	r2, [r3, #16]
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	69db      	ldr	r3, [r3, #28]
 8007130:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007134:	69b9      	ldr	r1, [r7, #24]
 8007136:	0148      	lsls	r0, r1, #5
 8007138:	69f9      	ldr	r1, [r7, #28]
 800713a:	4401      	add	r1, r0
 800713c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007140:	4313      	orrs	r3, r2
 8007142:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007144:	79fb      	ldrb	r3, [r7, #7]
 8007146:	2b01      	cmp	r3, #1
 8007148:	d10d      	bne.n	8007166 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d009      	beq.n	8007166 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	6919      	ldr	r1, [r3, #16]
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	015a      	lsls	r2, r3, #5
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	4413      	add	r3, r2
 800715e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007162:	460a      	mov	r2, r1
 8007164:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	791b      	ldrb	r3, [r3, #4]
 800716a:	2b01      	cmp	r3, #1
 800716c:	d128      	bne.n	80071c0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800717a:	2b00      	cmp	r3, #0
 800717c:	d110      	bne.n	80071a0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	015a      	lsls	r2, r3, #5
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	4413      	add	r3, r2
 8007186:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	69ba      	ldr	r2, [r7, #24]
 800718e:	0151      	lsls	r1, r2, #5
 8007190:	69fa      	ldr	r2, [r7, #28]
 8007192:	440a      	add	r2, r1
 8007194:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007198:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800719c:	6013      	str	r3, [r2, #0]
 800719e:	e00f      	b.n	80071c0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	015a      	lsls	r2, r3, #5
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	4413      	add	r3, r2
 80071a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	69ba      	ldr	r2, [r7, #24]
 80071b0:	0151      	lsls	r1, r2, #5
 80071b2:	69fa      	ldr	r2, [r7, #28]
 80071b4:	440a      	add	r2, r1
 80071b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071be:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	015a      	lsls	r2, r3, #5
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	4413      	add	r3, r2
 80071c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	69ba      	ldr	r2, [r7, #24]
 80071d0:	0151      	lsls	r1, r2, #5
 80071d2:	69fa      	ldr	r2, [r7, #28]
 80071d4:	440a      	add	r2, r1
 80071d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071da:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80071de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3720      	adds	r7, #32
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	1ff80000 	.word	0x1ff80000

080071f0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b087      	sub	sp, #28
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	4613      	mov	r3, r2
 80071fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	785b      	ldrb	r3, [r3, #1]
 800720c:	2b01      	cmp	r3, #1
 800720e:	f040 80ce 	bne.w	80073ae <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d132      	bne.n	8007280 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	015a      	lsls	r2, r3, #5
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	4413      	add	r3, r2
 8007222:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	693a      	ldr	r2, [r7, #16]
 800722a:	0151      	lsls	r1, r2, #5
 800722c:	697a      	ldr	r2, [r7, #20]
 800722e:	440a      	add	r2, r1
 8007230:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007234:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007238:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800723c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	015a      	lsls	r2, r3, #5
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	4413      	add	r3, r2
 8007246:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	693a      	ldr	r2, [r7, #16]
 800724e:	0151      	lsls	r1, r2, #5
 8007250:	697a      	ldr	r2, [r7, #20]
 8007252:	440a      	add	r2, r1
 8007254:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007258:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800725c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	015a      	lsls	r2, r3, #5
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	4413      	add	r3, r2
 8007266:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800726a:	691b      	ldr	r3, [r3, #16]
 800726c:	693a      	ldr	r2, [r7, #16]
 800726e:	0151      	lsls	r1, r2, #5
 8007270:	697a      	ldr	r2, [r7, #20]
 8007272:	440a      	add	r2, r1
 8007274:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007278:	0cdb      	lsrs	r3, r3, #19
 800727a:	04db      	lsls	r3, r3, #19
 800727c:	6113      	str	r3, [r2, #16]
 800727e:	e04e      	b.n	800731e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	015a      	lsls	r2, r3, #5
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	4413      	add	r3, r2
 8007288:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	693a      	ldr	r2, [r7, #16]
 8007290:	0151      	lsls	r1, r2, #5
 8007292:	697a      	ldr	r2, [r7, #20]
 8007294:	440a      	add	r2, r1
 8007296:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800729a:	0cdb      	lsrs	r3, r3, #19
 800729c:	04db      	lsls	r3, r3, #19
 800729e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	015a      	lsls	r2, r3, #5
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	4413      	add	r3, r2
 80072a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	693a      	ldr	r2, [r7, #16]
 80072b0:	0151      	lsls	r1, r2, #5
 80072b2:	697a      	ldr	r2, [r7, #20]
 80072b4:	440a      	add	r2, r1
 80072b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072ba:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80072be:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80072c2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	699a      	ldr	r2, [r3, #24]
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d903      	bls.n	80072d8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	68da      	ldr	r2, [r3, #12]
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	015a      	lsls	r2, r3, #5
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	4413      	add	r3, r2
 80072e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	693a      	ldr	r2, [r7, #16]
 80072e8:	0151      	lsls	r1, r2, #5
 80072ea:	697a      	ldr	r2, [r7, #20]
 80072ec:	440a      	add	r2, r1
 80072ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80072f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	015a      	lsls	r2, r3, #5
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	4413      	add	r3, r2
 8007300:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007304:	691a      	ldr	r2, [r3, #16]
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	699b      	ldr	r3, [r3, #24]
 800730a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800730e:	6939      	ldr	r1, [r7, #16]
 8007310:	0148      	lsls	r0, r1, #5
 8007312:	6979      	ldr	r1, [r7, #20]
 8007314:	4401      	add	r1, r0
 8007316:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800731a:	4313      	orrs	r3, r2
 800731c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800731e:	79fb      	ldrb	r3, [r7, #7]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d11e      	bne.n	8007362 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	695b      	ldr	r3, [r3, #20]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d009      	beq.n	8007340 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	015a      	lsls	r2, r3, #5
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	4413      	add	r3, r2
 8007334:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007338:	461a      	mov	r2, r3
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	695b      	ldr	r3, [r3, #20]
 800733e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	015a      	lsls	r2, r3, #5
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	4413      	add	r3, r2
 8007348:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	693a      	ldr	r2, [r7, #16]
 8007350:	0151      	lsls	r1, r2, #5
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	440a      	add	r2, r1
 8007356:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800735a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800735e:	6013      	str	r3, [r2, #0]
 8007360:	e097      	b.n	8007492 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	015a      	lsls	r2, r3, #5
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	4413      	add	r3, r2
 800736a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	693a      	ldr	r2, [r7, #16]
 8007372:	0151      	lsls	r1, r2, #5
 8007374:	697a      	ldr	r2, [r7, #20]
 8007376:	440a      	add	r2, r1
 8007378:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800737c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007380:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	699b      	ldr	r3, [r3, #24]
 8007386:	2b00      	cmp	r3, #0
 8007388:	f000 8083 	beq.w	8007492 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007392:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	f003 030f 	and.w	r3, r3, #15
 800739c:	2101      	movs	r1, #1
 800739e:	fa01 f303 	lsl.w	r3, r1, r3
 80073a2:	6979      	ldr	r1, [r7, #20]
 80073a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80073a8:	4313      	orrs	r3, r2
 80073aa:	634b      	str	r3, [r1, #52]	@ 0x34
 80073ac:	e071      	b.n	8007492 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	015a      	lsls	r2, r3, #5
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	4413      	add	r3, r2
 80073b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	693a      	ldr	r2, [r7, #16]
 80073be:	0151      	lsls	r1, r2, #5
 80073c0:	697a      	ldr	r2, [r7, #20]
 80073c2:	440a      	add	r2, r1
 80073c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073c8:	0cdb      	lsrs	r3, r3, #19
 80073ca:	04db      	lsls	r3, r3, #19
 80073cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	015a      	lsls	r2, r3, #5
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	4413      	add	r3, r2
 80073d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	693a      	ldr	r2, [r7, #16]
 80073de:	0151      	lsls	r1, r2, #5
 80073e0:	697a      	ldr	r2, [r7, #20]
 80073e2:	440a      	add	r2, r1
 80073e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073e8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80073ec:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80073f0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	699b      	ldr	r3, [r3, #24]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d003      	beq.n	8007402 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	68da      	ldr	r2, [r3, #12]
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	68da      	ldr	r2, [r3, #12]
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	015a      	lsls	r2, r3, #5
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	4413      	add	r3, r2
 8007412:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007416:	691b      	ldr	r3, [r3, #16]
 8007418:	693a      	ldr	r2, [r7, #16]
 800741a:	0151      	lsls	r1, r2, #5
 800741c:	697a      	ldr	r2, [r7, #20]
 800741e:	440a      	add	r2, r1
 8007420:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007424:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007428:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	015a      	lsls	r2, r3, #5
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	4413      	add	r3, r2
 8007432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007436:	691a      	ldr	r2, [r3, #16]
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	69db      	ldr	r3, [r3, #28]
 800743c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007440:	6939      	ldr	r1, [r7, #16]
 8007442:	0148      	lsls	r0, r1, #5
 8007444:	6979      	ldr	r1, [r7, #20]
 8007446:	4401      	add	r1, r0
 8007448:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800744c:	4313      	orrs	r3, r2
 800744e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007450:	79fb      	ldrb	r3, [r7, #7]
 8007452:	2b01      	cmp	r3, #1
 8007454:	d10d      	bne.n	8007472 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d009      	beq.n	8007472 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	6919      	ldr	r1, [r3, #16]
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	015a      	lsls	r2, r3, #5
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	4413      	add	r3, r2
 800746a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800746e:	460a      	mov	r2, r1
 8007470:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	015a      	lsls	r2, r3, #5
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	4413      	add	r3, r2
 800747a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	693a      	ldr	r2, [r7, #16]
 8007482:	0151      	lsls	r1, r2, #5
 8007484:	697a      	ldr	r2, [r7, #20]
 8007486:	440a      	add	r2, r1
 8007488:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800748c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007490:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007492:	2300      	movs	r3, #0
}
 8007494:	4618      	mov	r0, r3
 8007496:	371c      	adds	r7, #28
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b087      	sub	sp, #28
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80074aa:	2300      	movs	r3, #0
 80074ac:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80074ae:	2300      	movs	r3, #0
 80074b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	785b      	ldrb	r3, [r3, #1]
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d14a      	bne.n	8007554 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	015a      	lsls	r2, r3, #5
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	4413      	add	r3, r2
 80074c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80074d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074d6:	f040 8086 	bne.w	80075e6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	015a      	lsls	r2, r3, #5
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	4413      	add	r3, r2
 80074e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	683a      	ldr	r2, [r7, #0]
 80074ec:	7812      	ldrb	r2, [r2, #0]
 80074ee:	0151      	lsls	r1, r2, #5
 80074f0:	693a      	ldr	r2, [r7, #16]
 80074f2:	440a      	add	r2, r1
 80074f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074f8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80074fc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	015a      	lsls	r2, r3, #5
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	4413      	add	r3, r2
 8007508:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	683a      	ldr	r2, [r7, #0]
 8007510:	7812      	ldrb	r2, [r2, #0]
 8007512:	0151      	lsls	r1, r2, #5
 8007514:	693a      	ldr	r2, [r7, #16]
 8007516:	440a      	add	r2, r1
 8007518:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800751c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007520:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	3301      	adds	r3, #1
 8007526:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800752e:	4293      	cmp	r3, r2
 8007530:	d902      	bls.n	8007538 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	75fb      	strb	r3, [r7, #23]
          break;
 8007536:	e056      	b.n	80075e6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	015a      	lsls	r2, r3, #5
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	4413      	add	r3, r2
 8007542:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800754c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007550:	d0e7      	beq.n	8007522 <USB_EPStopXfer+0x82>
 8007552:	e048      	b.n	80075e6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	015a      	lsls	r2, r3, #5
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	4413      	add	r3, r2
 800755e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007568:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800756c:	d13b      	bne.n	80075e6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	015a      	lsls	r2, r3, #5
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	4413      	add	r3, r2
 8007578:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	683a      	ldr	r2, [r7, #0]
 8007580:	7812      	ldrb	r2, [r2, #0]
 8007582:	0151      	lsls	r1, r2, #5
 8007584:	693a      	ldr	r2, [r7, #16]
 8007586:	440a      	add	r2, r1
 8007588:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800758c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007590:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	015a      	lsls	r2, r3, #5
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	4413      	add	r3, r2
 800759c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	683a      	ldr	r2, [r7, #0]
 80075a4:	7812      	ldrb	r2, [r2, #0]
 80075a6:	0151      	lsls	r1, r2, #5
 80075a8:	693a      	ldr	r2, [r7, #16]
 80075aa:	440a      	add	r2, r1
 80075ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80075b4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	3301      	adds	r3, #1
 80075ba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f242 7210 	movw	r2, #10000	@ 0x2710
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d902      	bls.n	80075cc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80075c6:	2301      	movs	r3, #1
 80075c8:	75fb      	strb	r3, [r7, #23]
          break;
 80075ca:	e00c      	b.n	80075e6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	015a      	lsls	r2, r3, #5
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	4413      	add	r3, r2
 80075d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80075e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80075e4:	d0e7      	beq.n	80075b6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80075e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	371c      	adds	r7, #28
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b089      	sub	sp, #36	@ 0x24
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	4611      	mov	r1, r2
 8007600:	461a      	mov	r2, r3
 8007602:	460b      	mov	r3, r1
 8007604:	71fb      	strb	r3, [r7, #7]
 8007606:	4613      	mov	r3, r2
 8007608:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007612:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007616:	2b00      	cmp	r3, #0
 8007618:	d123      	bne.n	8007662 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800761a:	88bb      	ldrh	r3, [r7, #4]
 800761c:	3303      	adds	r3, #3
 800761e:	089b      	lsrs	r3, r3, #2
 8007620:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007622:	2300      	movs	r3, #0
 8007624:	61bb      	str	r3, [r7, #24]
 8007626:	e018      	b.n	800765a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007628:	79fb      	ldrb	r3, [r7, #7]
 800762a:	031a      	lsls	r2, r3, #12
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	4413      	add	r3, r2
 8007630:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007634:	461a      	mov	r2, r3
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	3301      	adds	r3, #1
 8007640:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	3301      	adds	r3, #1
 8007646:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	3301      	adds	r3, #1
 800764c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	3301      	adds	r3, #1
 8007652:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	3301      	adds	r3, #1
 8007658:	61bb      	str	r3, [r7, #24]
 800765a:	69ba      	ldr	r2, [r7, #24]
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	429a      	cmp	r2, r3
 8007660:	d3e2      	bcc.n	8007628 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007662:	2300      	movs	r3, #0
}
 8007664:	4618      	mov	r0, r3
 8007666:	3724      	adds	r7, #36	@ 0x24
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007670:	b480      	push	{r7}
 8007672:	b08b      	sub	sp, #44	@ 0x2c
 8007674:	af00      	add	r7, sp, #0
 8007676:	60f8      	str	r0, [r7, #12]
 8007678:	60b9      	str	r1, [r7, #8]
 800767a:	4613      	mov	r3, r2
 800767c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007686:	88fb      	ldrh	r3, [r7, #6]
 8007688:	089b      	lsrs	r3, r3, #2
 800768a:	b29b      	uxth	r3, r3
 800768c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800768e:	88fb      	ldrh	r3, [r7, #6]
 8007690:	f003 0303 	and.w	r3, r3, #3
 8007694:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007696:	2300      	movs	r3, #0
 8007698:	623b      	str	r3, [r7, #32]
 800769a:	e014      	b.n	80076c6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a6:	601a      	str	r2, [r3, #0]
    pDest++;
 80076a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076aa:	3301      	adds	r3, #1
 80076ac:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80076ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b0:	3301      	adds	r3, #1
 80076b2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80076b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b6:	3301      	adds	r3, #1
 80076b8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80076ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076bc:	3301      	adds	r3, #1
 80076be:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80076c0:	6a3b      	ldr	r3, [r7, #32]
 80076c2:	3301      	adds	r3, #1
 80076c4:	623b      	str	r3, [r7, #32]
 80076c6:	6a3a      	ldr	r2, [r7, #32]
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d3e6      	bcc.n	800769c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80076ce:	8bfb      	ldrh	r3, [r7, #30]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d01e      	beq.n	8007712 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80076d4:	2300      	movs	r3, #0
 80076d6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076de:	461a      	mov	r2, r3
 80076e0:	f107 0310 	add.w	r3, r7, #16
 80076e4:	6812      	ldr	r2, [r2, #0]
 80076e6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80076e8:	693a      	ldr	r2, [r7, #16]
 80076ea:	6a3b      	ldr	r3, [r7, #32]
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	00db      	lsls	r3, r3, #3
 80076f0:	fa22 f303 	lsr.w	r3, r2, r3
 80076f4:	b2da      	uxtb	r2, r3
 80076f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f8:	701a      	strb	r2, [r3, #0]
      i++;
 80076fa:	6a3b      	ldr	r3, [r7, #32]
 80076fc:	3301      	adds	r3, #1
 80076fe:	623b      	str	r3, [r7, #32]
      pDest++;
 8007700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007702:	3301      	adds	r3, #1
 8007704:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007706:	8bfb      	ldrh	r3, [r7, #30]
 8007708:	3b01      	subs	r3, #1
 800770a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800770c:	8bfb      	ldrh	r3, [r7, #30]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d1ea      	bne.n	80076e8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007714:	4618      	mov	r0, r3
 8007716:	372c      	adds	r7, #44	@ 0x2c
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007720:	b480      	push	{r7}
 8007722:	b085      	sub	sp, #20
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	785b      	ldrb	r3, [r3, #1]
 8007738:	2b01      	cmp	r3, #1
 800773a:	d12c      	bne.n	8007796 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	015a      	lsls	r2, r3, #5
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	4413      	add	r3, r2
 8007744:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	db12      	blt.n	8007774 <USB_EPSetStall+0x54>
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d00f      	beq.n	8007774 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	015a      	lsls	r2, r3, #5
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	4413      	add	r3, r2
 800775c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68ba      	ldr	r2, [r7, #8]
 8007764:	0151      	lsls	r1, r2, #5
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	440a      	add	r2, r1
 800776a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800776e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007772:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	015a      	lsls	r2, r3, #5
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	4413      	add	r3, r2
 800777c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68ba      	ldr	r2, [r7, #8]
 8007784:	0151      	lsls	r1, r2, #5
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	440a      	add	r2, r1
 800778a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800778e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007792:	6013      	str	r3, [r2, #0]
 8007794:	e02b      	b.n	80077ee <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	015a      	lsls	r2, r3, #5
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	4413      	add	r3, r2
 800779e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	db12      	blt.n	80077ce <USB_EPSetStall+0xae>
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00f      	beq.n	80077ce <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	015a      	lsls	r2, r3, #5
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	4413      	add	r3, r2
 80077b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68ba      	ldr	r2, [r7, #8]
 80077be:	0151      	lsls	r1, r2, #5
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	440a      	add	r2, r1
 80077c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077c8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80077cc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	015a      	lsls	r2, r3, #5
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	4413      	add	r3, r2
 80077d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	0151      	lsls	r1, r2, #5
 80077e0:	68fa      	ldr	r2, [r7, #12]
 80077e2:	440a      	add	r2, r1
 80077e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80077ec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3714      	adds	r7, #20
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	785b      	ldrb	r3, [r3, #1]
 8007814:	2b01      	cmp	r3, #1
 8007816:	d128      	bne.n	800786a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	015a      	lsls	r2, r3, #5
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	4413      	add	r3, r2
 8007820:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	68ba      	ldr	r2, [r7, #8]
 8007828:	0151      	lsls	r1, r2, #5
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	440a      	add	r2, r1
 800782e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007832:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007836:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	791b      	ldrb	r3, [r3, #4]
 800783c:	2b03      	cmp	r3, #3
 800783e:	d003      	beq.n	8007848 <USB_EPClearStall+0x4c>
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	791b      	ldrb	r3, [r3, #4]
 8007844:	2b02      	cmp	r3, #2
 8007846:	d138      	bne.n	80078ba <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	015a      	lsls	r2, r3, #5
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	4413      	add	r3, r2
 8007850:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	68ba      	ldr	r2, [r7, #8]
 8007858:	0151      	lsls	r1, r2, #5
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	440a      	add	r2, r1
 800785e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007862:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007866:	6013      	str	r3, [r2, #0]
 8007868:	e027      	b.n	80078ba <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	015a      	lsls	r2, r3, #5
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	4413      	add	r3, r2
 8007872:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	68ba      	ldr	r2, [r7, #8]
 800787a:	0151      	lsls	r1, r2, #5
 800787c:	68fa      	ldr	r2, [r7, #12]
 800787e:	440a      	add	r2, r1
 8007880:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007884:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007888:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	791b      	ldrb	r3, [r3, #4]
 800788e:	2b03      	cmp	r3, #3
 8007890:	d003      	beq.n	800789a <USB_EPClearStall+0x9e>
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	791b      	ldrb	r3, [r3, #4]
 8007896:	2b02      	cmp	r3, #2
 8007898:	d10f      	bne.n	80078ba <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	015a      	lsls	r2, r3, #5
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	4413      	add	r3, r2
 80078a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	68ba      	ldr	r2, [r7, #8]
 80078aa:	0151      	lsls	r1, r2, #5
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	440a      	add	r2, r1
 80078b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078b8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80078ba:	2300      	movs	r3, #0
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3714      	adds	r7, #20
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b085      	sub	sp, #20
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	460b      	mov	r3, r1
 80078d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	68fa      	ldr	r2, [r7, #12]
 80078e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80078e6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80078ea:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	78fb      	ldrb	r3, [r7, #3]
 80078f6:	011b      	lsls	r3, r3, #4
 80078f8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80078fc:	68f9      	ldr	r1, [r7, #12]
 80078fe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007902:	4313      	orrs	r3, r2
 8007904:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007906:	2300      	movs	r3, #0
}
 8007908:	4618      	mov	r0, r3
 800790a:	3714      	adds	r7, #20
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007914:	b480      	push	{r7}
 8007916:	b085      	sub	sp, #20
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800792e:	f023 0303 	bic.w	r3, r3, #3
 8007932:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007942:	f023 0302 	bic.w	r3, r3, #2
 8007946:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	3714      	adds	r7, #20
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr

08007956 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007956:	b480      	push	{r7}
 8007958:	b085      	sub	sp, #20
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	68fa      	ldr	r2, [r7, #12]
 800796c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007970:	f023 0303 	bic.w	r3, r3, #3
 8007974:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	68fa      	ldr	r2, [r7, #12]
 8007980:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007984:	f043 0302 	orr.w	r3, r3, #2
 8007988:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	3714      	adds	r7, #20
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007998:	b480      	push	{r7}
 800799a:	b085      	sub	sp, #20
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	695b      	ldr	r3, [r3, #20]
 80079a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	699b      	ldr	r3, [r3, #24]
 80079aa:	68fa      	ldr	r2, [r7, #12]
 80079ac:	4013      	ands	r3, r2
 80079ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80079b0:	68fb      	ldr	r3, [r7, #12]
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3714      	adds	r7, #20
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr

080079be <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80079be:	b480      	push	{r7}
 80079c0:	b085      	sub	sp, #20
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079d0:	699b      	ldr	r3, [r3, #24]
 80079d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079da:	69db      	ldr	r3, [r3, #28]
 80079dc:	68ba      	ldr	r2, [r7, #8]
 80079de:	4013      	ands	r3, r2
 80079e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	0c1b      	lsrs	r3, r3, #16
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3714      	adds	r7, #20
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr

080079f2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80079f2:	b480      	push	{r7}
 80079f4:	b085      	sub	sp, #20
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a04:	699b      	ldr	r3, [r3, #24]
 8007a06:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a0e:	69db      	ldr	r3, [r3, #28]
 8007a10:	68ba      	ldr	r2, [r7, #8]
 8007a12:	4013      	ands	r3, r2
 8007a14:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	b29b      	uxth	r3, r3
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3714      	adds	r7, #20
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr

08007a26 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007a26:	b480      	push	{r7}
 8007a28:	b085      	sub	sp, #20
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
 8007a2e:	460b      	mov	r3, r1
 8007a30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007a36:	78fb      	ldrb	r3, [r7, #3]
 8007a38:	015a      	lsls	r2, r3, #5
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	4413      	add	r3, r2
 8007a3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a4c:	695b      	ldr	r3, [r3, #20]
 8007a4e:	68ba      	ldr	r2, [r7, #8]
 8007a50:	4013      	ands	r3, r2
 8007a52:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007a54:	68bb      	ldr	r3, [r7, #8]
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3714      	adds	r7, #20
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr

08007a62 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007a62:	b480      	push	{r7}
 8007a64:	b087      	sub	sp, #28
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a84:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007a86:	78fb      	ldrb	r3, [r7, #3]
 8007a88:	f003 030f 	and.w	r3, r3, #15
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8007a92:	01db      	lsls	r3, r3, #7
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	693a      	ldr	r2, [r7, #16]
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007a9c:	78fb      	ldrb	r3, [r7, #3]
 8007a9e:	015a      	lsls	r2, r3, #5
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	693a      	ldr	r2, [r7, #16]
 8007aac:	4013      	ands	r3, r2
 8007aae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007ab0:	68bb      	ldr	r3, [r7, #8]
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	371c      	adds	r7, #28
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr

08007abe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007abe:	b480      	push	{r7}
 8007ac0:	b083      	sub	sp, #12
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	695b      	ldr	r3, [r3, #20]
 8007aca:	f003 0301 	and.w	r3, r3, #1
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	370c      	adds	r7, #12
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr

08007ada <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007ada:	b480      	push	{r7}
 8007adc:	b085      	sub	sp, #20
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	68fa      	ldr	r2, [r7, #12]
 8007af0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007af4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007af8:	f023 0307 	bic.w	r3, r3, #7
 8007afc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	68fa      	ldr	r2, [r7, #12]
 8007b08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007b12:	2300      	movs	r3, #0
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3714      	adds	r7, #20
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b087      	sub	sp, #28
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	460b      	mov	r3, r1
 8007b2a:	607a      	str	r2, [r7, #4]
 8007b2c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	333c      	adds	r3, #60	@ 0x3c
 8007b36:	3304      	adds	r3, #4
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	4a26      	ldr	r2, [pc, #152]	@ (8007bd8 <USB_EP0_OutStart+0xb8>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d90a      	bls.n	8007b5a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b54:	d101      	bne.n	8007b5a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007b56:	2300      	movs	r3, #0
 8007b58:	e037      	b.n	8007bca <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b60:	461a      	mov	r2, r3
 8007b62:	2300      	movs	r3, #0
 8007b64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b6c:	691b      	ldr	r3, [r3, #16]
 8007b6e:	697a      	ldr	r2, [r7, #20]
 8007b70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b74:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007b78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	697a      	ldr	r2, [r7, #20]
 8007b84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b88:	f043 0318 	orr.w	r3, r3, #24
 8007b8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	697a      	ldr	r2, [r7, #20]
 8007b98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b9c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007ba0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007ba2:	7afb      	ldrb	r3, [r7, #11]
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d10f      	bne.n	8007bc8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bae:	461a      	mov	r2, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	697a      	ldr	r2, [r7, #20]
 8007bbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007bc2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007bc6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	371c      	adds	r7, #28
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	4f54300a 	.word	0x4f54300a

08007bdc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b085      	sub	sp, #20
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007be4:	2300      	movs	r3, #0
 8007be6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	3301      	adds	r3, #1
 8007bec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	4a13      	ldr	r2, [pc, #76]	@ (8007c40 <USB_CoreReset+0x64>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d901      	bls.n	8007bfa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	e01b      	b.n	8007c32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	691b      	ldr	r3, [r3, #16]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	daf2      	bge.n	8007be8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007c02:	2300      	movs	r3, #0
 8007c04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	f043 0201 	orr.w	r2, r3, #1
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	3301      	adds	r3, #1
 8007c16:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	4a09      	ldr	r2, [pc, #36]	@ (8007c40 <USB_CoreReset+0x64>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d901      	bls.n	8007c24 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007c20:	2303      	movs	r3, #3
 8007c22:	e006      	b.n	8007c32 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	f003 0301 	and.w	r3, r3, #1
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d0f0      	beq.n	8007c12 <USB_CoreReset+0x36>

  return HAL_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3714      	adds	r7, #20
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr
 8007c3e:	bf00      	nop
 8007c40:	00030d40 	.word	0x00030d40

08007c44 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007c48:	4904      	ldr	r1, [pc, #16]	@ (8007c5c <MX_FATFS_Init+0x18>)
 8007c4a:	4805      	ldr	r0, [pc, #20]	@ (8007c60 <MX_FATFS_Init+0x1c>)
 8007c4c:	f002 f85a 	bl	8009d04 <FATFS_LinkDriver>
 8007c50:	4603      	mov	r3, r0
 8007c52:	461a      	mov	r2, r3
 8007c54:	4b03      	ldr	r3, [pc, #12]	@ (8007c64 <MX_FATFS_Init+0x20>)
 8007c56:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007c58:	bf00      	nop
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	20000500 	.word	0x20000500
 8007c60:	2000000c 	.word	0x2000000c
 8007c64:	200004fc 	.word	0x200004fc

08007c68 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	4603      	mov	r3, r0
 8007c70:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8007c72:	4b06      	ldr	r3, [pc, #24]	@ (8007c8c <USER_initialize+0x24>)
 8007c74:	2201      	movs	r2, #1
 8007c76:	701a      	strb	r2, [r3, #0]
    return Stat;
 8007c78:	4b04      	ldr	r3, [pc, #16]	@ (8007c8c <USER_initialize+0x24>)
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	370c      	adds	r7, #12
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	20000009 	.word	0x20000009

08007c90 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b083      	sub	sp, #12
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	4603      	mov	r3, r0
 8007c98:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8007c9a:	4b06      	ldr	r3, [pc, #24]	@ (8007cb4 <USER_status+0x24>)
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8007ca0:	4b04      	ldr	r3, [pc, #16]	@ (8007cb4 <USER_status+0x24>)
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	370c      	adds	r7, #12
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr
 8007cb2:	bf00      	nop
 8007cb4:	20000009 	.word	0x20000009

08007cb8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b085      	sub	sp, #20
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60b9      	str	r1, [r7, #8]
 8007cc0:	607a      	str	r2, [r7, #4]
 8007cc2:	603b      	str	r3, [r7, #0]
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8007cc8:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3714      	adds	r7, #20
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr

08007cd6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007cd6:	b480      	push	{r7}
 8007cd8:	b085      	sub	sp, #20
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	607a      	str	r2, [r7, #4]
 8007ce0:	603b      	str	r3, [r7, #0]
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8007ce6:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3714      	adds	r7, #20
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b085      	sub	sp, #20
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	603a      	str	r2, [r7, #0]
 8007cfe:	71fb      	strb	r3, [r7, #7]
 8007d00:	460b      	mov	r3, r1
 8007d02:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	73fb      	strb	r3, [r7, #15]
    return res;
 8007d08:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3714      	adds	r7, #20
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr
	...

08007d18 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	460b      	mov	r3, r1
 8007d22:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007d24:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007d28:	f002 fd22 	bl	800a770 <USBD_static_malloc>
 8007d2c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d109      	bne.n	8007d48 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	32b0      	adds	r2, #176	@ 0xb0
 8007d3e:	2100      	movs	r1, #0
 8007d40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007d44:	2302      	movs	r3, #2
 8007d46:	e0d4      	b.n	8007ef2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007d48:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007d4c:	2100      	movs	r1, #0
 8007d4e:	68f8      	ldr	r0, [r7, #12]
 8007d50:	f002 fd52 	bl	800a7f8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	32b0      	adds	r2, #176	@ 0xb0
 8007d5e:	68f9      	ldr	r1, [r7, #12]
 8007d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	32b0      	adds	r2, #176	@ 0xb0
 8007d6e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	7c1b      	ldrb	r3, [r3, #16]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d138      	bne.n	8007df2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007d80:	4b5e      	ldr	r3, [pc, #376]	@ (8007efc <USBD_CDC_Init+0x1e4>)
 8007d82:	7819      	ldrb	r1, [r3, #0]
 8007d84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d88:	2202      	movs	r2, #2
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f002 fb7f 	bl	800a48e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007d90:	4b5a      	ldr	r3, [pc, #360]	@ (8007efc <USBD_CDC_Init+0x1e4>)
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	f003 020f 	and.w	r2, r3, #15
 8007d98:	6879      	ldr	r1, [r7, #4]
 8007d9a:	4613      	mov	r3, r2
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	4413      	add	r3, r2
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	440b      	add	r3, r1
 8007da4:	3324      	adds	r3, #36	@ 0x24
 8007da6:	2201      	movs	r2, #1
 8007da8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007daa:	4b55      	ldr	r3, [pc, #340]	@ (8007f00 <USBD_CDC_Init+0x1e8>)
 8007dac:	7819      	ldrb	r1, [r3, #0]
 8007dae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007db2:	2202      	movs	r2, #2
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f002 fb6a 	bl	800a48e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007dba:	4b51      	ldr	r3, [pc, #324]	@ (8007f00 <USBD_CDC_Init+0x1e8>)
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	f003 020f 	and.w	r2, r3, #15
 8007dc2:	6879      	ldr	r1, [r7, #4]
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	4413      	add	r3, r2
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	440b      	add	r3, r1
 8007dce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007dd6:	4b4b      	ldr	r3, [pc, #300]	@ (8007f04 <USBD_CDC_Init+0x1ec>)
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	f003 020f 	and.w	r2, r3, #15
 8007dde:	6879      	ldr	r1, [r7, #4]
 8007de0:	4613      	mov	r3, r2
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	4413      	add	r3, r2
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	440b      	add	r3, r1
 8007dea:	3326      	adds	r3, #38	@ 0x26
 8007dec:	2210      	movs	r2, #16
 8007dee:	801a      	strh	r2, [r3, #0]
 8007df0:	e035      	b.n	8007e5e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007df2:	4b42      	ldr	r3, [pc, #264]	@ (8007efc <USBD_CDC_Init+0x1e4>)
 8007df4:	7819      	ldrb	r1, [r3, #0]
 8007df6:	2340      	movs	r3, #64	@ 0x40
 8007df8:	2202      	movs	r2, #2
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f002 fb47 	bl	800a48e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007e00:	4b3e      	ldr	r3, [pc, #248]	@ (8007efc <USBD_CDC_Init+0x1e4>)
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	f003 020f 	and.w	r2, r3, #15
 8007e08:	6879      	ldr	r1, [r7, #4]
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	009b      	lsls	r3, r3, #2
 8007e0e:	4413      	add	r3, r2
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	440b      	add	r3, r1
 8007e14:	3324      	adds	r3, #36	@ 0x24
 8007e16:	2201      	movs	r2, #1
 8007e18:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007e1a:	4b39      	ldr	r3, [pc, #228]	@ (8007f00 <USBD_CDC_Init+0x1e8>)
 8007e1c:	7819      	ldrb	r1, [r3, #0]
 8007e1e:	2340      	movs	r3, #64	@ 0x40
 8007e20:	2202      	movs	r2, #2
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f002 fb33 	bl	800a48e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007e28:	4b35      	ldr	r3, [pc, #212]	@ (8007f00 <USBD_CDC_Init+0x1e8>)
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	f003 020f 	and.w	r2, r3, #15
 8007e30:	6879      	ldr	r1, [r7, #4]
 8007e32:	4613      	mov	r3, r2
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	4413      	add	r3, r2
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	440b      	add	r3, r1
 8007e3c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007e40:	2201      	movs	r2, #1
 8007e42:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007e44:	4b2f      	ldr	r3, [pc, #188]	@ (8007f04 <USBD_CDC_Init+0x1ec>)
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	f003 020f 	and.w	r2, r3, #15
 8007e4c:	6879      	ldr	r1, [r7, #4]
 8007e4e:	4613      	mov	r3, r2
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	4413      	add	r3, r2
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	440b      	add	r3, r1
 8007e58:	3326      	adds	r3, #38	@ 0x26
 8007e5a:	2210      	movs	r2, #16
 8007e5c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007e5e:	4b29      	ldr	r3, [pc, #164]	@ (8007f04 <USBD_CDC_Init+0x1ec>)
 8007e60:	7819      	ldrb	r1, [r3, #0]
 8007e62:	2308      	movs	r3, #8
 8007e64:	2203      	movs	r2, #3
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f002 fb11 	bl	800a48e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007e6c:	4b25      	ldr	r3, [pc, #148]	@ (8007f04 <USBD_CDC_Init+0x1ec>)
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	f003 020f 	and.w	r2, r3, #15
 8007e74:	6879      	ldr	r1, [r7, #4]
 8007e76:	4613      	mov	r3, r2
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	4413      	add	r3, r2
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	440b      	add	r3, r1
 8007e80:	3324      	adds	r3, #36	@ 0x24
 8007e82:	2201      	movs	r2, #1
 8007e84:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	33b0      	adds	r3, #176	@ 0xb0
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	4413      	add	r3, r2
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d101      	bne.n	8007ec0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007ebc:	2302      	movs	r3, #2
 8007ebe:	e018      	b.n	8007ef2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	7c1b      	ldrb	r3, [r3, #16]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d10a      	bne.n	8007ede <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007ec8:	4b0d      	ldr	r3, [pc, #52]	@ (8007f00 <USBD_CDC_Init+0x1e8>)
 8007eca:	7819      	ldrb	r1, [r3, #0]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007ed2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f002 fbc8 	bl	800a66c <USBD_LL_PrepareReceive>
 8007edc:	e008      	b.n	8007ef0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007ede:	4b08      	ldr	r3, [pc, #32]	@ (8007f00 <USBD_CDC_Init+0x1e8>)
 8007ee0:	7819      	ldrb	r1, [r3, #0]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007ee8:	2340      	movs	r3, #64	@ 0x40
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f002 fbbe 	bl	800a66c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	200000a7 	.word	0x200000a7
 8007f00:	200000a8 	.word	0x200000a8
 8007f04:	200000a9 	.word	0x200000a9

08007f08 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	460b      	mov	r3, r1
 8007f12:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007f14:	4b3a      	ldr	r3, [pc, #232]	@ (8008000 <USBD_CDC_DeInit+0xf8>)
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	4619      	mov	r1, r3
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f002 fadd 	bl	800a4da <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007f20:	4b37      	ldr	r3, [pc, #220]	@ (8008000 <USBD_CDC_DeInit+0xf8>)
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	f003 020f 	and.w	r2, r3, #15
 8007f28:	6879      	ldr	r1, [r7, #4]
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	4413      	add	r3, r2
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	440b      	add	r3, r1
 8007f34:	3324      	adds	r3, #36	@ 0x24
 8007f36:	2200      	movs	r2, #0
 8007f38:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007f3a:	4b32      	ldr	r3, [pc, #200]	@ (8008004 <USBD_CDC_DeInit+0xfc>)
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	4619      	mov	r1, r3
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f002 faca 	bl	800a4da <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007f46:	4b2f      	ldr	r3, [pc, #188]	@ (8008004 <USBD_CDC_DeInit+0xfc>)
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	f003 020f 	and.w	r2, r3, #15
 8007f4e:	6879      	ldr	r1, [r7, #4]
 8007f50:	4613      	mov	r3, r2
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	4413      	add	r3, r2
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	440b      	add	r3, r1
 8007f5a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007f5e:	2200      	movs	r2, #0
 8007f60:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007f62:	4b29      	ldr	r3, [pc, #164]	@ (8008008 <USBD_CDC_DeInit+0x100>)
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	4619      	mov	r1, r3
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f002 fab6 	bl	800a4da <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007f6e:	4b26      	ldr	r3, [pc, #152]	@ (8008008 <USBD_CDC_DeInit+0x100>)
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	f003 020f 	and.w	r2, r3, #15
 8007f76:	6879      	ldr	r1, [r7, #4]
 8007f78:	4613      	mov	r3, r2
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	4413      	add	r3, r2
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	440b      	add	r3, r1
 8007f82:	3324      	adds	r3, #36	@ 0x24
 8007f84:	2200      	movs	r2, #0
 8007f86:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007f88:	4b1f      	ldr	r3, [pc, #124]	@ (8008008 <USBD_CDC_DeInit+0x100>)
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	f003 020f 	and.w	r2, r3, #15
 8007f90:	6879      	ldr	r1, [r7, #4]
 8007f92:	4613      	mov	r3, r2
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	4413      	add	r3, r2
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	440b      	add	r3, r1
 8007f9c:	3326      	adds	r3, #38	@ 0x26
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	32b0      	adds	r2, #176	@ 0xb0
 8007fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d01f      	beq.n	8007ff4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	33b0      	adds	r3, #176	@ 0xb0
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	4413      	add	r3, r2
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	32b0      	adds	r2, #176	@ 0xb0
 8007fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f002 fbd8 	bl	800a78c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	32b0      	adds	r2, #176	@ 0xb0
 8007fe6:	2100      	movs	r1, #0
 8007fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007ff4:	2300      	movs	r3, #0
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3708      	adds	r7, #8
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	200000a7 	.word	0x200000a7
 8008004:	200000a8 	.word	0x200000a8
 8008008:	200000a9 	.word	0x200000a9

0800800c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b086      	sub	sp, #24
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	32b0      	adds	r2, #176	@ 0xb0
 8008020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008024:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008026:	2300      	movs	r3, #0
 8008028:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800802a:	2300      	movs	r3, #0
 800802c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800802e:	2300      	movs	r3, #0
 8008030:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d101      	bne.n	800803c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008038:	2303      	movs	r3, #3
 800803a:	e0bf      	b.n	80081bc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008044:	2b00      	cmp	r3, #0
 8008046:	d050      	beq.n	80080ea <USBD_CDC_Setup+0xde>
 8008048:	2b20      	cmp	r3, #32
 800804a:	f040 80af 	bne.w	80081ac <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	88db      	ldrh	r3, [r3, #6]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d03a      	beq.n	80080cc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	b25b      	sxtb	r3, r3
 800805c:	2b00      	cmp	r3, #0
 800805e:	da1b      	bge.n	8008098 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	33b0      	adds	r3, #176	@ 0xb0
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	4413      	add	r3, r2
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	683a      	ldr	r2, [r7, #0]
 8008074:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008076:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008078:	683a      	ldr	r2, [r7, #0]
 800807a:	88d2      	ldrh	r2, [r2, #6]
 800807c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	88db      	ldrh	r3, [r3, #6]
 8008082:	2b07      	cmp	r3, #7
 8008084:	bf28      	it	cs
 8008086:	2307      	movcs	r3, #7
 8008088:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	89fa      	ldrh	r2, [r7, #14]
 800808e:	4619      	mov	r1, r3
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f001 fd6b 	bl	8009b6c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008096:	e090      	b.n	80081ba <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	785a      	ldrb	r2, [r3, #1]
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	88db      	ldrh	r3, [r3, #6]
 80080a6:	2b3f      	cmp	r3, #63	@ 0x3f
 80080a8:	d803      	bhi.n	80080b2 <USBD_CDC_Setup+0xa6>
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	88db      	ldrh	r3, [r3, #6]
 80080ae:	b2da      	uxtb	r2, r3
 80080b0:	e000      	b.n	80080b4 <USBD_CDC_Setup+0xa8>
 80080b2:	2240      	movs	r2, #64	@ 0x40
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80080ba:	6939      	ldr	r1, [r7, #16]
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80080c2:	461a      	mov	r2, r3
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f001 fd7d 	bl	8009bc4 <USBD_CtlPrepareRx>
      break;
 80080ca:	e076      	b.n	80081ba <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	33b0      	adds	r3, #176	@ 0xb0
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	4413      	add	r3, r2
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	683a      	ldr	r2, [r7, #0]
 80080e0:	7850      	ldrb	r0, [r2, #1]
 80080e2:	2200      	movs	r2, #0
 80080e4:	6839      	ldr	r1, [r7, #0]
 80080e6:	4798      	blx	r3
      break;
 80080e8:	e067      	b.n	80081ba <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	785b      	ldrb	r3, [r3, #1]
 80080ee:	2b0b      	cmp	r3, #11
 80080f0:	d851      	bhi.n	8008196 <USBD_CDC_Setup+0x18a>
 80080f2:	a201      	add	r2, pc, #4	@ (adr r2, 80080f8 <USBD_CDC_Setup+0xec>)
 80080f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f8:	08008129 	.word	0x08008129
 80080fc:	080081a5 	.word	0x080081a5
 8008100:	08008197 	.word	0x08008197
 8008104:	08008197 	.word	0x08008197
 8008108:	08008197 	.word	0x08008197
 800810c:	08008197 	.word	0x08008197
 8008110:	08008197 	.word	0x08008197
 8008114:	08008197 	.word	0x08008197
 8008118:	08008197 	.word	0x08008197
 800811c:	08008197 	.word	0x08008197
 8008120:	08008153 	.word	0x08008153
 8008124:	0800817d 	.word	0x0800817d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800812e:	b2db      	uxtb	r3, r3
 8008130:	2b03      	cmp	r3, #3
 8008132:	d107      	bne.n	8008144 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008134:	f107 030a 	add.w	r3, r7, #10
 8008138:	2202      	movs	r2, #2
 800813a:	4619      	mov	r1, r3
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f001 fd15 	bl	8009b6c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008142:	e032      	b.n	80081aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008144:	6839      	ldr	r1, [r7, #0]
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f001 fc9f 	bl	8009a8a <USBD_CtlError>
            ret = USBD_FAIL;
 800814c:	2303      	movs	r3, #3
 800814e:	75fb      	strb	r3, [r7, #23]
          break;
 8008150:	e02b      	b.n	80081aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008158:	b2db      	uxtb	r3, r3
 800815a:	2b03      	cmp	r3, #3
 800815c:	d107      	bne.n	800816e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800815e:	f107 030d 	add.w	r3, r7, #13
 8008162:	2201      	movs	r2, #1
 8008164:	4619      	mov	r1, r3
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f001 fd00 	bl	8009b6c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800816c:	e01d      	b.n	80081aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800816e:	6839      	ldr	r1, [r7, #0]
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f001 fc8a 	bl	8009a8a <USBD_CtlError>
            ret = USBD_FAIL;
 8008176:	2303      	movs	r3, #3
 8008178:	75fb      	strb	r3, [r7, #23]
          break;
 800817a:	e016      	b.n	80081aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008182:	b2db      	uxtb	r3, r3
 8008184:	2b03      	cmp	r3, #3
 8008186:	d00f      	beq.n	80081a8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008188:	6839      	ldr	r1, [r7, #0]
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f001 fc7d 	bl	8009a8a <USBD_CtlError>
            ret = USBD_FAIL;
 8008190:	2303      	movs	r3, #3
 8008192:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008194:	e008      	b.n	80081a8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008196:	6839      	ldr	r1, [r7, #0]
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f001 fc76 	bl	8009a8a <USBD_CtlError>
          ret = USBD_FAIL;
 800819e:	2303      	movs	r3, #3
 80081a0:	75fb      	strb	r3, [r7, #23]
          break;
 80081a2:	e002      	b.n	80081aa <USBD_CDC_Setup+0x19e>
          break;
 80081a4:	bf00      	nop
 80081a6:	e008      	b.n	80081ba <USBD_CDC_Setup+0x1ae>
          break;
 80081a8:	bf00      	nop
      }
      break;
 80081aa:	e006      	b.n	80081ba <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80081ac:	6839      	ldr	r1, [r7, #0]
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f001 fc6b 	bl	8009a8a <USBD_CtlError>
      ret = USBD_FAIL;
 80081b4:	2303      	movs	r3, #3
 80081b6:	75fb      	strb	r3, [r7, #23]
      break;
 80081b8:	bf00      	nop
  }

  return (uint8_t)ret;
 80081ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3718      	adds	r7, #24
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	460b      	mov	r3, r1
 80081ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80081d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	32b0      	adds	r2, #176	@ 0xb0
 80081e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d101      	bne.n	80081ee <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80081ea:	2303      	movs	r3, #3
 80081ec:	e065      	b.n	80082ba <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	32b0      	adds	r2, #176	@ 0xb0
 80081f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081fc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80081fe:	78fb      	ldrb	r3, [r7, #3]
 8008200:	f003 020f 	and.w	r2, r3, #15
 8008204:	6879      	ldr	r1, [r7, #4]
 8008206:	4613      	mov	r3, r2
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	4413      	add	r3, r2
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	440b      	add	r3, r1
 8008210:	3318      	adds	r3, #24
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d02f      	beq.n	8008278 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008218:	78fb      	ldrb	r3, [r7, #3]
 800821a:	f003 020f 	and.w	r2, r3, #15
 800821e:	6879      	ldr	r1, [r7, #4]
 8008220:	4613      	mov	r3, r2
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	4413      	add	r3, r2
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	440b      	add	r3, r1
 800822a:	3318      	adds	r3, #24
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	78fb      	ldrb	r3, [r7, #3]
 8008230:	f003 010f 	and.w	r1, r3, #15
 8008234:	68f8      	ldr	r0, [r7, #12]
 8008236:	460b      	mov	r3, r1
 8008238:	00db      	lsls	r3, r3, #3
 800823a:	440b      	add	r3, r1
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	4403      	add	r3, r0
 8008240:	3348      	adds	r3, #72	@ 0x48
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	fbb2 f1f3 	udiv	r1, r2, r3
 8008248:	fb01 f303 	mul.w	r3, r1, r3
 800824c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800824e:	2b00      	cmp	r3, #0
 8008250:	d112      	bne.n	8008278 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008252:	78fb      	ldrb	r3, [r7, #3]
 8008254:	f003 020f 	and.w	r2, r3, #15
 8008258:	6879      	ldr	r1, [r7, #4]
 800825a:	4613      	mov	r3, r2
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	4413      	add	r3, r2
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	440b      	add	r3, r1
 8008264:	3318      	adds	r3, #24
 8008266:	2200      	movs	r2, #0
 8008268:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800826a:	78f9      	ldrb	r1, [r7, #3]
 800826c:	2300      	movs	r3, #0
 800826e:	2200      	movs	r2, #0
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f002 f9da 	bl	800a62a <USBD_LL_Transmit>
 8008276:	e01f      	b.n	80082b8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	2200      	movs	r2, #0
 800827c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	33b0      	adds	r3, #176	@ 0xb0
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	4413      	add	r3, r2
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	691b      	ldr	r3, [r3, #16]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d010      	beq.n	80082b8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	33b0      	adds	r3, #176	@ 0xb0
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	4413      	add	r3, r2
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	691b      	ldr	r3, [r3, #16]
 80082a8:	68ba      	ldr	r2, [r7, #8]
 80082aa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80082ae:	68ba      	ldr	r2, [r7, #8]
 80082b0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80082b4:	78fa      	ldrb	r2, [r7, #3]
 80082b6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3710      	adds	r7, #16
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b084      	sub	sp, #16
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
 80082ca:	460b      	mov	r3, r1
 80082cc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	32b0      	adds	r2, #176	@ 0xb0
 80082d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082dc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	32b0      	adds	r2, #176	@ 0xb0
 80082e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d101      	bne.n	80082f4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80082f0:	2303      	movs	r3, #3
 80082f2:	e01a      	b.n	800832a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80082f4:	78fb      	ldrb	r3, [r7, #3]
 80082f6:	4619      	mov	r1, r3
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f002 f9d8 	bl	800a6ae <USBD_LL_GetRxDataSize>
 80082fe:	4602      	mov	r2, r0
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	33b0      	adds	r3, #176	@ 0xb0
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	4413      	add	r3, r2
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	68fa      	ldr	r2, [r7, #12]
 800831a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800831e:	68fa      	ldr	r2, [r7, #12]
 8008320:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008324:	4611      	mov	r1, r2
 8008326:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008328:	2300      	movs	r3, #0
}
 800832a:	4618      	mov	r0, r3
 800832c:	3710      	adds	r7, #16
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}

08008332 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008332:	b580      	push	{r7, lr}
 8008334:	b084      	sub	sp, #16
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	32b0      	adds	r2, #176	@ 0xb0
 8008344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008348:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d101      	bne.n	8008354 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008350:	2303      	movs	r3, #3
 8008352:	e024      	b.n	800839e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	33b0      	adds	r3, #176	@ 0xb0
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	4413      	add	r3, r2
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d019      	beq.n	800839c <USBD_CDC_EP0_RxReady+0x6a>
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800836e:	2bff      	cmp	r3, #255	@ 0xff
 8008370:	d014      	beq.n	800839c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	33b0      	adds	r3, #176	@ 0xb0
 800837c:	009b      	lsls	r3, r3, #2
 800837e:	4413      	add	r3, r2
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	68fa      	ldr	r2, [r7, #12]
 8008386:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800838a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800838c:	68fa      	ldr	r2, [r7, #12]
 800838e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008392:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	22ff      	movs	r2, #255	@ 0xff
 8008398:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3710      	adds	r7, #16
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
	...

080083a8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b086      	sub	sp, #24
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80083b0:	2182      	movs	r1, #130	@ 0x82
 80083b2:	4818      	ldr	r0, [pc, #96]	@ (8008414 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80083b4:	f000 fd09 	bl	8008dca <USBD_GetEpDesc>
 80083b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80083ba:	2101      	movs	r1, #1
 80083bc:	4815      	ldr	r0, [pc, #84]	@ (8008414 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80083be:	f000 fd04 	bl	8008dca <USBD_GetEpDesc>
 80083c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80083c4:	2181      	movs	r1, #129	@ 0x81
 80083c6:	4813      	ldr	r0, [pc, #76]	@ (8008414 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80083c8:	f000 fcff 	bl	8008dca <USBD_GetEpDesc>
 80083cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d002      	beq.n	80083da <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	2210      	movs	r2, #16
 80083d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d006      	beq.n	80083ee <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	2200      	movs	r2, #0
 80083e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80083e8:	711a      	strb	r2, [r3, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d006      	beq.n	8008402 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80083fc:	711a      	strb	r2, [r3, #4]
 80083fe:	2200      	movs	r2, #0
 8008400:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2243      	movs	r2, #67	@ 0x43
 8008406:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008408:	4b02      	ldr	r3, [pc, #8]	@ (8008414 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800840a:	4618      	mov	r0, r3
 800840c:	3718      	adds	r7, #24
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
 8008412:	bf00      	nop
 8008414:	20000064 	.word	0x20000064

08008418 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b086      	sub	sp, #24
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008420:	2182      	movs	r1, #130	@ 0x82
 8008422:	4818      	ldr	r0, [pc, #96]	@ (8008484 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008424:	f000 fcd1 	bl	8008dca <USBD_GetEpDesc>
 8008428:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800842a:	2101      	movs	r1, #1
 800842c:	4815      	ldr	r0, [pc, #84]	@ (8008484 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800842e:	f000 fccc 	bl	8008dca <USBD_GetEpDesc>
 8008432:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008434:	2181      	movs	r1, #129	@ 0x81
 8008436:	4813      	ldr	r0, [pc, #76]	@ (8008484 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008438:	f000 fcc7 	bl	8008dca <USBD_GetEpDesc>
 800843c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d002      	beq.n	800844a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	2210      	movs	r2, #16
 8008448:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d006      	beq.n	800845e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	2200      	movs	r2, #0
 8008454:	711a      	strb	r2, [r3, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	f042 0202 	orr.w	r2, r2, #2
 800845c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d006      	beq.n	8008472 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2200      	movs	r2, #0
 8008468:	711a      	strb	r2, [r3, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	f042 0202 	orr.w	r2, r2, #2
 8008470:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2243      	movs	r2, #67	@ 0x43
 8008476:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008478:	4b02      	ldr	r3, [pc, #8]	@ (8008484 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800847a:	4618      	mov	r0, r3
 800847c:	3718      	adds	r7, #24
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	20000064 	.word	0x20000064

08008488 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b086      	sub	sp, #24
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008490:	2182      	movs	r1, #130	@ 0x82
 8008492:	4818      	ldr	r0, [pc, #96]	@ (80084f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008494:	f000 fc99 	bl	8008dca <USBD_GetEpDesc>
 8008498:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800849a:	2101      	movs	r1, #1
 800849c:	4815      	ldr	r0, [pc, #84]	@ (80084f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800849e:	f000 fc94 	bl	8008dca <USBD_GetEpDesc>
 80084a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80084a4:	2181      	movs	r1, #129	@ 0x81
 80084a6:	4813      	ldr	r0, [pc, #76]	@ (80084f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80084a8:	f000 fc8f 	bl	8008dca <USBD_GetEpDesc>
 80084ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d002      	beq.n	80084ba <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	2210      	movs	r2, #16
 80084b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d006      	beq.n	80084ce <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	2200      	movs	r2, #0
 80084c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80084c8:	711a      	strb	r2, [r3, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d006      	beq.n	80084e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2200      	movs	r2, #0
 80084d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80084dc:	711a      	strb	r2, [r3, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2243      	movs	r2, #67	@ 0x43
 80084e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80084e8:	4b02      	ldr	r3, [pc, #8]	@ (80084f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3718      	adds	r7, #24
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	20000064 	.word	0x20000064

080084f8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	220a      	movs	r2, #10
 8008504:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008506:	4b03      	ldr	r3, [pc, #12]	@ (8008514 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008508:	4618      	mov	r0, r3
 800850a:	370c      	adds	r7, #12
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr
 8008514:	20000020 	.word	0x20000020

08008518 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d101      	bne.n	800852c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008528:	2303      	movs	r3, #3
 800852a:	e009      	b.n	8008540 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	33b0      	adds	r3, #176	@ 0xb0
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	4413      	add	r3, r2
 800853a:	683a      	ldr	r2, [r7, #0]
 800853c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800853e:	2300      	movs	r3, #0
}
 8008540:	4618      	mov	r0, r3
 8008542:	370c      	adds	r7, #12
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800854c:	b480      	push	{r7}
 800854e:	b087      	sub	sp, #28
 8008550:	af00      	add	r7, sp, #0
 8008552:	60f8      	str	r0, [r7, #12]
 8008554:	60b9      	str	r1, [r7, #8]
 8008556:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	32b0      	adds	r2, #176	@ 0xb0
 8008562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008566:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d101      	bne.n	8008572 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800856e:	2303      	movs	r3, #3
 8008570:	e008      	b.n	8008584 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	68ba      	ldr	r2, [r7, #8]
 8008576:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008582:	2300      	movs	r3, #0
}
 8008584:	4618      	mov	r0, r3
 8008586:	371c      	adds	r7, #28
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr

08008590 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008590:	b480      	push	{r7}
 8008592:	b085      	sub	sp, #20
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	32b0      	adds	r2, #176	@ 0xb0
 80085a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085a8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d101      	bne.n	80085b4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80085b0:	2303      	movs	r3, #3
 80085b2:	e004      	b.n	80085be <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	683a      	ldr	r2, [r7, #0]
 80085b8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80085bc:	2300      	movs	r3, #0
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3714      	adds	r7, #20
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr
	...

080085cc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b084      	sub	sp, #16
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	32b0      	adds	r2, #176	@ 0xb0
 80085de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085e2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	32b0      	adds	r2, #176	@ 0xb0
 80085ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d101      	bne.n	80085fa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80085f6:	2303      	movs	r3, #3
 80085f8:	e018      	b.n	800862c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	7c1b      	ldrb	r3, [r3, #16]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d10a      	bne.n	8008618 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008602:	4b0c      	ldr	r3, [pc, #48]	@ (8008634 <USBD_CDC_ReceivePacket+0x68>)
 8008604:	7819      	ldrb	r1, [r3, #0]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800860c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f002 f82b 	bl	800a66c <USBD_LL_PrepareReceive>
 8008616:	e008      	b.n	800862a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008618:	4b06      	ldr	r3, [pc, #24]	@ (8008634 <USBD_CDC_ReceivePacket+0x68>)
 800861a:	7819      	ldrb	r1, [r3, #0]
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008622:	2340      	movs	r3, #64	@ 0x40
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f002 f821 	bl	800a66c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800862a:	2300      	movs	r3, #0
}
 800862c:	4618      	mov	r0, r3
 800862e:	3710      	adds	r7, #16
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}
 8008634:	200000a8 	.word	0x200000a8

08008638 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b086      	sub	sp, #24
 800863c:	af00      	add	r7, sp, #0
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	4613      	mov	r3, r2
 8008644:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d101      	bne.n	8008650 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800864c:	2303      	movs	r3, #3
 800864e:	e01f      	b.n	8008690 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2200      	movs	r2, #0
 8008654:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2200      	movs	r2, #0
 800865c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2200      	movs	r2, #0
 8008664:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d003      	beq.n	8008676 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	68ba      	ldr	r2, [r7, #8]
 8008672:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2201      	movs	r2, #1
 800867a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	79fa      	ldrb	r2, [r7, #7]
 8008682:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008684:	68f8      	ldr	r0, [r7, #12]
 8008686:	f001 fe9b 	bl	800a3c0 <USBD_LL_Init>
 800868a:	4603      	mov	r3, r0
 800868c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800868e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008690:	4618      	mov	r0, r3
 8008692:	3718      	adds	r7, #24
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80086a2:	2300      	movs	r3, #0
 80086a4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d101      	bne.n	80086b0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80086ac:	2303      	movs	r3, #3
 80086ae:	e025      	b.n	80086fc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	683a      	ldr	r2, [r7, #0]
 80086b4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	32ae      	adds	r2, #174	@ 0xae
 80086c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00f      	beq.n	80086ec <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	32ae      	adds	r2, #174	@ 0xae
 80086d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086dc:	f107 020e 	add.w	r2, r7, #14
 80086e0:	4610      	mov	r0, r2
 80086e2:	4798      	blx	r3
 80086e4:	4602      	mov	r2, r0
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80086f2:	1c5a      	adds	r2, r3, #1
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80086fa:	2300      	movs	r3, #0
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3710      	adds	r7, #16
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f001 fea3 	bl	800a458 <USBD_LL_Start>
 8008712:	4603      	mov	r3, r0
}
 8008714:	4618      	mov	r0, r3
 8008716:	3708      	adds	r7, #8
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800871c:	b480      	push	{r7}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008724:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008726:	4618      	mov	r0, r3
 8008728:	370c      	adds	r7, #12
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr

08008732 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008732:	b580      	push	{r7, lr}
 8008734:	b084      	sub	sp, #16
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
 800873a:	460b      	mov	r3, r1
 800873c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800873e:	2300      	movs	r3, #0
 8008740:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008748:	2b00      	cmp	r3, #0
 800874a:	d009      	beq.n	8008760 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	78fa      	ldrb	r2, [r7, #3]
 8008756:	4611      	mov	r1, r2
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	4798      	blx	r3
 800875c:	4603      	mov	r3, r0
 800875e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008760:	7bfb      	ldrb	r3, [r7, #15]
}
 8008762:	4618      	mov	r0, r3
 8008764:	3710      	adds	r7, #16
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800876a:	b580      	push	{r7, lr}
 800876c:	b084      	sub	sp, #16
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
 8008772:	460b      	mov	r3, r1
 8008774:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008776:	2300      	movs	r3, #0
 8008778:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	78fa      	ldrb	r2, [r7, #3]
 8008784:	4611      	mov	r1, r2
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	4798      	blx	r3
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d001      	beq.n	8008794 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008790:	2303      	movs	r3, #3
 8008792:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008794:	7bfb      	ldrb	r3, [r7, #15]
}
 8008796:	4618      	mov	r0, r3
 8008798:	3710      	adds	r7, #16
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}

0800879e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800879e:	b580      	push	{r7, lr}
 80087a0:	b084      	sub	sp, #16
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
 80087a6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80087ae:	6839      	ldr	r1, [r7, #0]
 80087b0:	4618      	mov	r0, r3
 80087b2:	f001 f930 	bl	8009a16 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2201      	movs	r2, #1
 80087ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80087c4:	461a      	mov	r2, r3
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80087d2:	f003 031f 	and.w	r3, r3, #31
 80087d6:	2b02      	cmp	r3, #2
 80087d8:	d01a      	beq.n	8008810 <USBD_LL_SetupStage+0x72>
 80087da:	2b02      	cmp	r3, #2
 80087dc:	d822      	bhi.n	8008824 <USBD_LL_SetupStage+0x86>
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d002      	beq.n	80087e8 <USBD_LL_SetupStage+0x4a>
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d00a      	beq.n	80087fc <USBD_LL_SetupStage+0x5e>
 80087e6:	e01d      	b.n	8008824 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80087ee:	4619      	mov	r1, r3
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 fb5d 	bl	8008eb0 <USBD_StdDevReq>
 80087f6:	4603      	mov	r3, r0
 80087f8:	73fb      	strb	r3, [r7, #15]
      break;
 80087fa:	e020      	b.n	800883e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008802:	4619      	mov	r1, r3
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 fbc5 	bl	8008f94 <USBD_StdItfReq>
 800880a:	4603      	mov	r3, r0
 800880c:	73fb      	strb	r3, [r7, #15]
      break;
 800880e:	e016      	b.n	800883e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008816:	4619      	mov	r1, r3
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 fc27 	bl	800906c <USBD_StdEPReq>
 800881e:	4603      	mov	r3, r0
 8008820:	73fb      	strb	r3, [r7, #15]
      break;
 8008822:	e00c      	b.n	800883e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800882a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800882e:	b2db      	uxtb	r3, r3
 8008830:	4619      	mov	r1, r3
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f001 fe70 	bl	800a518 <USBD_LL_StallEP>
 8008838:	4603      	mov	r3, r0
 800883a:	73fb      	strb	r3, [r7, #15]
      break;
 800883c:	bf00      	nop
  }

  return ret;
 800883e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008840:	4618      	mov	r0, r3
 8008842:	3710      	adds	r7, #16
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b086      	sub	sp, #24
 800884c:	af00      	add	r7, sp, #0
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	460b      	mov	r3, r1
 8008852:	607a      	str	r2, [r7, #4]
 8008854:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008856:	2300      	movs	r3, #0
 8008858:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800885a:	7afb      	ldrb	r3, [r7, #11]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d16e      	bne.n	800893e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008866:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800886e:	2b03      	cmp	r3, #3
 8008870:	f040 8098 	bne.w	80089a4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	689a      	ldr	r2, [r3, #8]
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	68db      	ldr	r3, [r3, #12]
 800887c:	429a      	cmp	r2, r3
 800887e:	d913      	bls.n	80088a8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	689a      	ldr	r2, [r3, #8]
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	1ad2      	subs	r2, r2, r3
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	68da      	ldr	r2, [r3, #12]
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	689b      	ldr	r3, [r3, #8]
 8008896:	4293      	cmp	r3, r2
 8008898:	bf28      	it	cs
 800889a:	4613      	movcs	r3, r2
 800889c:	461a      	mov	r2, r3
 800889e:	6879      	ldr	r1, [r7, #4]
 80088a0:	68f8      	ldr	r0, [r7, #12]
 80088a2:	f001 f9ac 	bl	8009bfe <USBD_CtlContinueRx>
 80088a6:	e07d      	b.n	80089a4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80088ae:	f003 031f 	and.w	r3, r3, #31
 80088b2:	2b02      	cmp	r3, #2
 80088b4:	d014      	beq.n	80088e0 <USBD_LL_DataOutStage+0x98>
 80088b6:	2b02      	cmp	r3, #2
 80088b8:	d81d      	bhi.n	80088f6 <USBD_LL_DataOutStage+0xae>
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d002      	beq.n	80088c4 <USBD_LL_DataOutStage+0x7c>
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d003      	beq.n	80088ca <USBD_LL_DataOutStage+0x82>
 80088c2:	e018      	b.n	80088f6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80088c4:	2300      	movs	r3, #0
 80088c6:	75bb      	strb	r3, [r7, #22]
            break;
 80088c8:	e018      	b.n	80088fc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	4619      	mov	r1, r3
 80088d4:	68f8      	ldr	r0, [r7, #12]
 80088d6:	f000 fa5e 	bl	8008d96 <USBD_CoreFindIF>
 80088da:	4603      	mov	r3, r0
 80088dc:	75bb      	strb	r3, [r7, #22]
            break;
 80088de:	e00d      	b.n	80088fc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	4619      	mov	r1, r3
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f000 fa60 	bl	8008db0 <USBD_CoreFindEP>
 80088f0:	4603      	mov	r3, r0
 80088f2:	75bb      	strb	r3, [r7, #22]
            break;
 80088f4:	e002      	b.n	80088fc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80088f6:	2300      	movs	r3, #0
 80088f8:	75bb      	strb	r3, [r7, #22]
            break;
 80088fa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80088fc:	7dbb      	ldrb	r3, [r7, #22]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d119      	bne.n	8008936 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008908:	b2db      	uxtb	r3, r3
 800890a:	2b03      	cmp	r3, #3
 800890c:	d113      	bne.n	8008936 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800890e:	7dba      	ldrb	r2, [r7, #22]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	32ae      	adds	r2, #174	@ 0xae
 8008914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008918:	691b      	ldr	r3, [r3, #16]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d00b      	beq.n	8008936 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800891e:	7dba      	ldrb	r2, [r7, #22]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008926:	7dba      	ldrb	r2, [r7, #22]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	32ae      	adds	r2, #174	@ 0xae
 800892c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008930:	691b      	ldr	r3, [r3, #16]
 8008932:	68f8      	ldr	r0, [r7, #12]
 8008934:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008936:	68f8      	ldr	r0, [r7, #12]
 8008938:	f001 f972 	bl	8009c20 <USBD_CtlSendStatus>
 800893c:	e032      	b.n	80089a4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800893e:	7afb      	ldrb	r3, [r7, #11]
 8008940:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008944:	b2db      	uxtb	r3, r3
 8008946:	4619      	mov	r1, r3
 8008948:	68f8      	ldr	r0, [r7, #12]
 800894a:	f000 fa31 	bl	8008db0 <USBD_CoreFindEP>
 800894e:	4603      	mov	r3, r0
 8008950:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008952:	7dbb      	ldrb	r3, [r7, #22]
 8008954:	2bff      	cmp	r3, #255	@ 0xff
 8008956:	d025      	beq.n	80089a4 <USBD_LL_DataOutStage+0x15c>
 8008958:	7dbb      	ldrb	r3, [r7, #22]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d122      	bne.n	80089a4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008964:	b2db      	uxtb	r3, r3
 8008966:	2b03      	cmp	r3, #3
 8008968:	d117      	bne.n	800899a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800896a:	7dba      	ldrb	r2, [r7, #22]
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	32ae      	adds	r2, #174	@ 0xae
 8008970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008974:	699b      	ldr	r3, [r3, #24]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d00f      	beq.n	800899a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800897a:	7dba      	ldrb	r2, [r7, #22]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008982:	7dba      	ldrb	r2, [r7, #22]
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	32ae      	adds	r2, #174	@ 0xae
 8008988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800898c:	699b      	ldr	r3, [r3, #24]
 800898e:	7afa      	ldrb	r2, [r7, #11]
 8008990:	4611      	mov	r1, r2
 8008992:	68f8      	ldr	r0, [r7, #12]
 8008994:	4798      	blx	r3
 8008996:	4603      	mov	r3, r0
 8008998:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800899a:	7dfb      	ldrb	r3, [r7, #23]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d001      	beq.n	80089a4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80089a0:	7dfb      	ldrb	r3, [r7, #23]
 80089a2:	e000      	b.n	80089a6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3718      	adds	r7, #24
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}

080089ae <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80089ae:	b580      	push	{r7, lr}
 80089b0:	b086      	sub	sp, #24
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	60f8      	str	r0, [r7, #12]
 80089b6:	460b      	mov	r3, r1
 80089b8:	607a      	str	r2, [r7, #4]
 80089ba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80089bc:	7afb      	ldrb	r3, [r7, #11]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d16f      	bne.n	8008aa2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	3314      	adds	r3, #20
 80089c6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80089ce:	2b02      	cmp	r3, #2
 80089d0:	d15a      	bne.n	8008a88 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	689a      	ldr	r2, [r3, #8]
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	429a      	cmp	r2, r3
 80089dc:	d914      	bls.n	8008a08 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	689a      	ldr	r2, [r3, #8]
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	68db      	ldr	r3, [r3, #12]
 80089e6:	1ad2      	subs	r2, r2, r3
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	461a      	mov	r2, r3
 80089f2:	6879      	ldr	r1, [r7, #4]
 80089f4:	68f8      	ldr	r0, [r7, #12]
 80089f6:	f001 f8d4 	bl	8009ba2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80089fa:	2300      	movs	r3, #0
 80089fc:	2200      	movs	r2, #0
 80089fe:	2100      	movs	r1, #0
 8008a00:	68f8      	ldr	r0, [r7, #12]
 8008a02:	f001 fe33 	bl	800a66c <USBD_LL_PrepareReceive>
 8008a06:	e03f      	b.n	8008a88 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	68da      	ldr	r2, [r3, #12]
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d11c      	bne.n	8008a4e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	685a      	ldr	r2, [r3, #4]
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d316      	bcc.n	8008a4e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	685a      	ldr	r2, [r3, #4]
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d20f      	bcs.n	8008a4e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008a2e:	2200      	movs	r2, #0
 8008a30:	2100      	movs	r1, #0
 8008a32:	68f8      	ldr	r0, [r7, #12]
 8008a34:	f001 f8b5 	bl	8009ba2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a40:	2300      	movs	r3, #0
 8008a42:	2200      	movs	r2, #0
 8008a44:	2100      	movs	r1, #0
 8008a46:	68f8      	ldr	r0, [r7, #12]
 8008a48:	f001 fe10 	bl	800a66c <USBD_LL_PrepareReceive>
 8008a4c:	e01c      	b.n	8008a88 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	2b03      	cmp	r3, #3
 8008a58:	d10f      	bne.n	8008a7a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a60:	68db      	ldr	r3, [r3, #12]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d009      	beq.n	8008a7a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a74:	68db      	ldr	r3, [r3, #12]
 8008a76:	68f8      	ldr	r0, [r7, #12]
 8008a78:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a7a:	2180      	movs	r1, #128	@ 0x80
 8008a7c:	68f8      	ldr	r0, [r7, #12]
 8008a7e:	f001 fd4b 	bl	800a518 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008a82:	68f8      	ldr	r0, [r7, #12]
 8008a84:	f001 f8df 	bl	8009c46 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d03a      	beq.n	8008b08 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008a92:	68f8      	ldr	r0, [r7, #12]
 8008a94:	f7ff fe42 	bl	800871c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008aa0:	e032      	b.n	8008b08 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008aa2:	7afb      	ldrb	r3, [r7, #11]
 8008aa4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	4619      	mov	r1, r3
 8008aac:	68f8      	ldr	r0, [r7, #12]
 8008aae:	f000 f97f 	bl	8008db0 <USBD_CoreFindEP>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ab6:	7dfb      	ldrb	r3, [r7, #23]
 8008ab8:	2bff      	cmp	r3, #255	@ 0xff
 8008aba:	d025      	beq.n	8008b08 <USBD_LL_DataInStage+0x15a>
 8008abc:	7dfb      	ldrb	r3, [r7, #23]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d122      	bne.n	8008b08 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	2b03      	cmp	r3, #3
 8008acc:	d11c      	bne.n	8008b08 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008ace:	7dfa      	ldrb	r2, [r7, #23]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	32ae      	adds	r2, #174	@ 0xae
 8008ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ad8:	695b      	ldr	r3, [r3, #20]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d014      	beq.n	8008b08 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008ade:	7dfa      	ldrb	r2, [r7, #23]
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008ae6:	7dfa      	ldrb	r2, [r7, #23]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	32ae      	adds	r2, #174	@ 0xae
 8008aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008af0:	695b      	ldr	r3, [r3, #20]
 8008af2:	7afa      	ldrb	r2, [r7, #11]
 8008af4:	4611      	mov	r1, r2
 8008af6:	68f8      	ldr	r0, [r7, #12]
 8008af8:	4798      	blx	r3
 8008afa:	4603      	mov	r3, r0
 8008afc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008afe:	7dbb      	ldrb	r3, [r7, #22]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d001      	beq.n	8008b08 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008b04:	7dbb      	ldrb	r3, [r7, #22]
 8008b06:	e000      	b.n	8008b0a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008b08:	2300      	movs	r3, #0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3718      	adds	r7, #24
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008b12:	b580      	push	{r7, lr}
 8008b14:	b084      	sub	sp, #16
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2201      	movs	r2, #1
 8008b22:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2200      	movs	r2, #0
 8008b38:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d014      	beq.n	8008b78 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d00e      	beq.n	8008b78 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	6852      	ldr	r2, [r2, #4]
 8008b66:	b2d2      	uxtb	r2, r2
 8008b68:	4611      	mov	r1, r2
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	4798      	blx	r3
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d001      	beq.n	8008b78 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008b74:	2303      	movs	r3, #3
 8008b76:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008b78:	2340      	movs	r3, #64	@ 0x40
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	2100      	movs	r1, #0
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f001 fc85 	bl	800a48e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2240      	movs	r2, #64	@ 0x40
 8008b90:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008b94:	2340      	movs	r3, #64	@ 0x40
 8008b96:	2200      	movs	r2, #0
 8008b98:	2180      	movs	r1, #128	@ 0x80
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f001 fc77 	bl	800a48e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2240      	movs	r2, #64	@ 0x40
 8008baa:	621a      	str	r2, [r3, #32]

  return ret;
 8008bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3710      	adds	r7, #16
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008bb6:	b480      	push	{r7}
 8008bb8:	b083      	sub	sp, #12
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
 8008bbe:	460b      	mov	r3, r1
 8008bc0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	78fa      	ldrb	r2, [r7, #3]
 8008bc6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008bc8:	2300      	movs	r3, #0
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	370c      	adds	r7, #12
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr

08008bd6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008bd6:	b480      	push	{r7}
 8008bd8:	b083      	sub	sp, #12
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008be4:	b2da      	uxtb	r2, r3
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2204      	movs	r2, #4
 8008bf0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008bf4:	2300      	movs	r3, #0
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	370c      	adds	r7, #12
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr

08008c02 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008c02:	b480      	push	{r7}
 8008c04:	b083      	sub	sp, #12
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	2b04      	cmp	r3, #4
 8008c14:	d106      	bne.n	8008c24 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008c1c:	b2da      	uxtb	r2, r3
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	370c      	adds	r7, #12
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr

08008c32 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b082      	sub	sp, #8
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	2b03      	cmp	r3, #3
 8008c44:	d110      	bne.n	8008c68 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d00b      	beq.n	8008c68 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c56:	69db      	ldr	r3, [r3, #28]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d005      	beq.n	8008c68 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c62:	69db      	ldr	r3, [r3, #28]
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008c68:	2300      	movs	r3, #0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3708      	adds	r7, #8
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b082      	sub	sp, #8
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	32ae      	adds	r2, #174	@ 0xae
 8008c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d101      	bne.n	8008c94 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008c90:	2303      	movs	r3, #3
 8008c92:	e01c      	b.n	8008cce <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	2b03      	cmp	r3, #3
 8008c9e:	d115      	bne.n	8008ccc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	32ae      	adds	r2, #174	@ 0xae
 8008caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cae:	6a1b      	ldr	r3, [r3, #32]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d00b      	beq.n	8008ccc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	32ae      	adds	r2, #174	@ 0xae
 8008cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cc2:	6a1b      	ldr	r3, [r3, #32]
 8008cc4:	78fa      	ldrb	r2, [r7, #3]
 8008cc6:	4611      	mov	r1, r2
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008ccc:	2300      	movs	r3, #0
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3708      	adds	r7, #8
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}

08008cd6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008cd6:	b580      	push	{r7, lr}
 8008cd8:	b082      	sub	sp, #8
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
 8008cde:	460b      	mov	r3, r1
 8008ce0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	32ae      	adds	r2, #174	@ 0xae
 8008cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d101      	bne.n	8008cf8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008cf4:	2303      	movs	r3, #3
 8008cf6:	e01c      	b.n	8008d32 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	2b03      	cmp	r3, #3
 8008d02:	d115      	bne.n	8008d30 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	32ae      	adds	r2, #174	@ 0xae
 8008d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d00b      	beq.n	8008d30 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	32ae      	adds	r2, #174	@ 0xae
 8008d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d28:	78fa      	ldrb	r2, [r7, #3]
 8008d2a:	4611      	mov	r1, r2
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3708      	adds	r7, #8
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}

08008d3a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008d3a:	b480      	push	{r7}
 8008d3c:	b083      	sub	sp, #12
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008d42:	2300      	movs	r3, #0
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	370c      	adds	r7, #12
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d00e      	beq.n	8008d8c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	6852      	ldr	r2, [r2, #4]
 8008d7a:	b2d2      	uxtb	r2, r2
 8008d7c:	4611      	mov	r1, r2
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	4798      	blx	r3
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d001      	beq.n	8008d8c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008d88:	2303      	movs	r3, #3
 8008d8a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3710      	adds	r7, #16
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}

08008d96 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008d96:	b480      	push	{r7}
 8008d98:	b083      	sub	sp, #12
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
 8008d9e:	460b      	mov	r3, r1
 8008da0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008da2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	370c      	adds	r7, #12
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b083      	sub	sp, #12
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	460b      	mov	r3, r1
 8008dba:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008dbc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	370c      	adds	r7, #12
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr

08008dca <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	b086      	sub	sp, #24
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
 8008dd2:	460b      	mov	r3, r1
 8008dd4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008dde:	2300      	movs	r3, #0
 8008de0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	885b      	ldrh	r3, [r3, #2]
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	68fa      	ldr	r2, [r7, #12]
 8008dea:	7812      	ldrb	r2, [r2, #0]
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d91f      	bls.n	8008e30 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008df6:	e013      	b.n	8008e20 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008df8:	f107 030a 	add.w	r3, r7, #10
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	6978      	ldr	r0, [r7, #20]
 8008e00:	f000 f81b 	bl	8008e3a <USBD_GetNextDesc>
 8008e04:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	785b      	ldrb	r3, [r3, #1]
 8008e0a:	2b05      	cmp	r3, #5
 8008e0c:	d108      	bne.n	8008e20 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	789b      	ldrb	r3, [r3, #2]
 8008e16:	78fa      	ldrb	r2, [r7, #3]
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d008      	beq.n	8008e2e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	885b      	ldrh	r3, [r3, #2]
 8008e24:	b29a      	uxth	r2, r3
 8008e26:	897b      	ldrh	r3, [r7, #10]
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d8e5      	bhi.n	8008df8 <USBD_GetEpDesc+0x2e>
 8008e2c:	e000      	b.n	8008e30 <USBD_GetEpDesc+0x66>
          break;
 8008e2e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008e30:	693b      	ldr	r3, [r7, #16]
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3718      	adds	r7, #24
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}

08008e3a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008e3a:	b480      	push	{r7}
 8008e3c:	b085      	sub	sp, #20
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]
 8008e42:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	881b      	ldrh	r3, [r3, #0]
 8008e4c:	68fa      	ldr	r2, [r7, #12]
 8008e4e:	7812      	ldrb	r2, [r2, #0]
 8008e50:	4413      	add	r3, r2
 8008e52:	b29a      	uxth	r2, r3
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	4413      	add	r3, r2
 8008e62:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008e64:	68fb      	ldr	r3, [r7, #12]
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3714      	adds	r7, #20
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr

08008e72 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008e72:	b480      	push	{r7}
 8008e74:	b087      	sub	sp, #28
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	3301      	adds	r3, #1
 8008e88:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008e90:	8a3b      	ldrh	r3, [r7, #16]
 8008e92:	021b      	lsls	r3, r3, #8
 8008e94:	b21a      	sxth	r2, r3
 8008e96:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	b21b      	sxth	r3, r3
 8008e9e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008ea0:	89fb      	ldrh	r3, [r7, #14]
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	371c      	adds	r7, #28
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr
	...

08008eb0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b084      	sub	sp, #16
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	781b      	ldrb	r3, [r3, #0]
 8008ec2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008ec6:	2b40      	cmp	r3, #64	@ 0x40
 8008ec8:	d005      	beq.n	8008ed6 <USBD_StdDevReq+0x26>
 8008eca:	2b40      	cmp	r3, #64	@ 0x40
 8008ecc:	d857      	bhi.n	8008f7e <USBD_StdDevReq+0xce>
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d00f      	beq.n	8008ef2 <USBD_StdDevReq+0x42>
 8008ed2:	2b20      	cmp	r3, #32
 8008ed4:	d153      	bne.n	8008f7e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	32ae      	adds	r2, #174	@ 0xae
 8008ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ee4:	689b      	ldr	r3, [r3, #8]
 8008ee6:	6839      	ldr	r1, [r7, #0]
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	4798      	blx	r3
 8008eec:	4603      	mov	r3, r0
 8008eee:	73fb      	strb	r3, [r7, #15]
      break;
 8008ef0:	e04a      	b.n	8008f88 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	785b      	ldrb	r3, [r3, #1]
 8008ef6:	2b09      	cmp	r3, #9
 8008ef8:	d83b      	bhi.n	8008f72 <USBD_StdDevReq+0xc2>
 8008efa:	a201      	add	r2, pc, #4	@ (adr r2, 8008f00 <USBD_StdDevReq+0x50>)
 8008efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f00:	08008f55 	.word	0x08008f55
 8008f04:	08008f69 	.word	0x08008f69
 8008f08:	08008f73 	.word	0x08008f73
 8008f0c:	08008f5f 	.word	0x08008f5f
 8008f10:	08008f73 	.word	0x08008f73
 8008f14:	08008f33 	.word	0x08008f33
 8008f18:	08008f29 	.word	0x08008f29
 8008f1c:	08008f73 	.word	0x08008f73
 8008f20:	08008f4b 	.word	0x08008f4b
 8008f24:	08008f3d 	.word	0x08008f3d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008f28:	6839      	ldr	r1, [r7, #0]
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f000 fa3c 	bl	80093a8 <USBD_GetDescriptor>
          break;
 8008f30:	e024      	b.n	8008f7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008f32:	6839      	ldr	r1, [r7, #0]
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 fbcb 	bl	80096d0 <USBD_SetAddress>
          break;
 8008f3a:	e01f      	b.n	8008f7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008f3c:	6839      	ldr	r1, [r7, #0]
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 fc0a 	bl	8009758 <USBD_SetConfig>
 8008f44:	4603      	mov	r3, r0
 8008f46:	73fb      	strb	r3, [r7, #15]
          break;
 8008f48:	e018      	b.n	8008f7c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008f4a:	6839      	ldr	r1, [r7, #0]
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 fcad 	bl	80098ac <USBD_GetConfig>
          break;
 8008f52:	e013      	b.n	8008f7c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008f54:	6839      	ldr	r1, [r7, #0]
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 fcde 	bl	8009918 <USBD_GetStatus>
          break;
 8008f5c:	e00e      	b.n	8008f7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008f5e:	6839      	ldr	r1, [r7, #0]
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 fd0d 	bl	8009980 <USBD_SetFeature>
          break;
 8008f66:	e009      	b.n	8008f7c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008f68:	6839      	ldr	r1, [r7, #0]
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 fd31 	bl	80099d2 <USBD_ClrFeature>
          break;
 8008f70:	e004      	b.n	8008f7c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008f72:	6839      	ldr	r1, [r7, #0]
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f000 fd88 	bl	8009a8a <USBD_CtlError>
          break;
 8008f7a:	bf00      	nop
      }
      break;
 8008f7c:	e004      	b.n	8008f88 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008f7e:	6839      	ldr	r1, [r7, #0]
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 fd82 	bl	8009a8a <USBD_CtlError>
      break;
 8008f86:	bf00      	nop
  }

  return ret;
 8008f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3710      	adds	r7, #16
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
 8008f92:	bf00      	nop

08008f94 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008faa:	2b40      	cmp	r3, #64	@ 0x40
 8008fac:	d005      	beq.n	8008fba <USBD_StdItfReq+0x26>
 8008fae:	2b40      	cmp	r3, #64	@ 0x40
 8008fb0:	d852      	bhi.n	8009058 <USBD_StdItfReq+0xc4>
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d001      	beq.n	8008fba <USBD_StdItfReq+0x26>
 8008fb6:	2b20      	cmp	r3, #32
 8008fb8:	d14e      	bne.n	8009058 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	3b01      	subs	r3, #1
 8008fc4:	2b02      	cmp	r3, #2
 8008fc6:	d840      	bhi.n	800904a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	889b      	ldrh	r3, [r3, #4]
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d836      	bhi.n	8009040 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	889b      	ldrh	r3, [r3, #4]
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	4619      	mov	r1, r3
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f7ff fedb 	bl	8008d96 <USBD_CoreFindIF>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008fe4:	7bbb      	ldrb	r3, [r7, #14]
 8008fe6:	2bff      	cmp	r3, #255	@ 0xff
 8008fe8:	d01d      	beq.n	8009026 <USBD_StdItfReq+0x92>
 8008fea:	7bbb      	ldrb	r3, [r7, #14]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d11a      	bne.n	8009026 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008ff0:	7bba      	ldrb	r2, [r7, #14]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	32ae      	adds	r2, #174	@ 0xae
 8008ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d00f      	beq.n	8009020 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009000:	7bba      	ldrb	r2, [r7, #14]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009008:	7bba      	ldrb	r2, [r7, #14]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	32ae      	adds	r2, #174	@ 0xae
 800900e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	6839      	ldr	r1, [r7, #0]
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	4798      	blx	r3
 800901a:	4603      	mov	r3, r0
 800901c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800901e:	e004      	b.n	800902a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009020:	2303      	movs	r3, #3
 8009022:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009024:	e001      	b.n	800902a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009026:	2303      	movs	r3, #3
 8009028:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	88db      	ldrh	r3, [r3, #6]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d110      	bne.n	8009054 <USBD_StdItfReq+0xc0>
 8009032:	7bfb      	ldrb	r3, [r7, #15]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d10d      	bne.n	8009054 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 fdf1 	bl	8009c20 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800903e:	e009      	b.n	8009054 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009040:	6839      	ldr	r1, [r7, #0]
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 fd21 	bl	8009a8a <USBD_CtlError>
          break;
 8009048:	e004      	b.n	8009054 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800904a:	6839      	ldr	r1, [r7, #0]
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 fd1c 	bl	8009a8a <USBD_CtlError>
          break;
 8009052:	e000      	b.n	8009056 <USBD_StdItfReq+0xc2>
          break;
 8009054:	bf00      	nop
      }
      break;
 8009056:	e004      	b.n	8009062 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009058:	6839      	ldr	r1, [r7, #0]
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 fd15 	bl	8009a8a <USBD_CtlError>
      break;
 8009060:	bf00      	nop
  }

  return ret;
 8009062:	7bfb      	ldrb	r3, [r7, #15]
}
 8009064:	4618      	mov	r0, r3
 8009066:	3710      	adds	r7, #16
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009076:	2300      	movs	r3, #0
 8009078:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	889b      	ldrh	r3, [r3, #4]
 800907e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009088:	2b40      	cmp	r3, #64	@ 0x40
 800908a:	d007      	beq.n	800909c <USBD_StdEPReq+0x30>
 800908c:	2b40      	cmp	r3, #64	@ 0x40
 800908e:	f200 817f 	bhi.w	8009390 <USBD_StdEPReq+0x324>
 8009092:	2b00      	cmp	r3, #0
 8009094:	d02a      	beq.n	80090ec <USBD_StdEPReq+0x80>
 8009096:	2b20      	cmp	r3, #32
 8009098:	f040 817a 	bne.w	8009390 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800909c:	7bbb      	ldrb	r3, [r7, #14]
 800909e:	4619      	mov	r1, r3
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f7ff fe85 	bl	8008db0 <USBD_CoreFindEP>
 80090a6:	4603      	mov	r3, r0
 80090a8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80090aa:	7b7b      	ldrb	r3, [r7, #13]
 80090ac:	2bff      	cmp	r3, #255	@ 0xff
 80090ae:	f000 8174 	beq.w	800939a <USBD_StdEPReq+0x32e>
 80090b2:	7b7b      	ldrb	r3, [r7, #13]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	f040 8170 	bne.w	800939a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80090ba:	7b7a      	ldrb	r2, [r7, #13]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80090c2:	7b7a      	ldrb	r2, [r7, #13]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	32ae      	adds	r2, #174	@ 0xae
 80090c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	f000 8163 	beq.w	800939a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80090d4:	7b7a      	ldrb	r2, [r7, #13]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	32ae      	adds	r2, #174	@ 0xae
 80090da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090de:	689b      	ldr	r3, [r3, #8]
 80090e0:	6839      	ldr	r1, [r7, #0]
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	4798      	blx	r3
 80090e6:	4603      	mov	r3, r0
 80090e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80090ea:	e156      	b.n	800939a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	785b      	ldrb	r3, [r3, #1]
 80090f0:	2b03      	cmp	r3, #3
 80090f2:	d008      	beq.n	8009106 <USBD_StdEPReq+0x9a>
 80090f4:	2b03      	cmp	r3, #3
 80090f6:	f300 8145 	bgt.w	8009384 <USBD_StdEPReq+0x318>
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	f000 809b 	beq.w	8009236 <USBD_StdEPReq+0x1ca>
 8009100:	2b01      	cmp	r3, #1
 8009102:	d03c      	beq.n	800917e <USBD_StdEPReq+0x112>
 8009104:	e13e      	b.n	8009384 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800910c:	b2db      	uxtb	r3, r3
 800910e:	2b02      	cmp	r3, #2
 8009110:	d002      	beq.n	8009118 <USBD_StdEPReq+0xac>
 8009112:	2b03      	cmp	r3, #3
 8009114:	d016      	beq.n	8009144 <USBD_StdEPReq+0xd8>
 8009116:	e02c      	b.n	8009172 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009118:	7bbb      	ldrb	r3, [r7, #14]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d00d      	beq.n	800913a <USBD_StdEPReq+0xce>
 800911e:	7bbb      	ldrb	r3, [r7, #14]
 8009120:	2b80      	cmp	r3, #128	@ 0x80
 8009122:	d00a      	beq.n	800913a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009124:	7bbb      	ldrb	r3, [r7, #14]
 8009126:	4619      	mov	r1, r3
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f001 f9f5 	bl	800a518 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800912e:	2180      	movs	r1, #128	@ 0x80
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f001 f9f1 	bl	800a518 <USBD_LL_StallEP>
 8009136:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009138:	e020      	b.n	800917c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800913a:	6839      	ldr	r1, [r7, #0]
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f000 fca4 	bl	8009a8a <USBD_CtlError>
              break;
 8009142:	e01b      	b.n	800917c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	885b      	ldrh	r3, [r3, #2]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d10e      	bne.n	800916a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800914c:	7bbb      	ldrb	r3, [r7, #14]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d00b      	beq.n	800916a <USBD_StdEPReq+0xfe>
 8009152:	7bbb      	ldrb	r3, [r7, #14]
 8009154:	2b80      	cmp	r3, #128	@ 0x80
 8009156:	d008      	beq.n	800916a <USBD_StdEPReq+0xfe>
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	88db      	ldrh	r3, [r3, #6]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d104      	bne.n	800916a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009160:	7bbb      	ldrb	r3, [r7, #14]
 8009162:	4619      	mov	r1, r3
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f001 f9d7 	bl	800a518 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f000 fd58 	bl	8009c20 <USBD_CtlSendStatus>

              break;
 8009170:	e004      	b.n	800917c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009172:	6839      	ldr	r1, [r7, #0]
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 fc88 	bl	8009a8a <USBD_CtlError>
              break;
 800917a:	bf00      	nop
          }
          break;
 800917c:	e107      	b.n	800938e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009184:	b2db      	uxtb	r3, r3
 8009186:	2b02      	cmp	r3, #2
 8009188:	d002      	beq.n	8009190 <USBD_StdEPReq+0x124>
 800918a:	2b03      	cmp	r3, #3
 800918c:	d016      	beq.n	80091bc <USBD_StdEPReq+0x150>
 800918e:	e04b      	b.n	8009228 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009190:	7bbb      	ldrb	r3, [r7, #14]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d00d      	beq.n	80091b2 <USBD_StdEPReq+0x146>
 8009196:	7bbb      	ldrb	r3, [r7, #14]
 8009198:	2b80      	cmp	r3, #128	@ 0x80
 800919a:	d00a      	beq.n	80091b2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800919c:	7bbb      	ldrb	r3, [r7, #14]
 800919e:	4619      	mov	r1, r3
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f001 f9b9 	bl	800a518 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80091a6:	2180      	movs	r1, #128	@ 0x80
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f001 f9b5 	bl	800a518 <USBD_LL_StallEP>
 80091ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80091b0:	e040      	b.n	8009234 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80091b2:	6839      	ldr	r1, [r7, #0]
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 fc68 	bl	8009a8a <USBD_CtlError>
              break;
 80091ba:	e03b      	b.n	8009234 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	885b      	ldrh	r3, [r3, #2]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d136      	bne.n	8009232 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80091c4:	7bbb      	ldrb	r3, [r7, #14]
 80091c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d004      	beq.n	80091d8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80091ce:	7bbb      	ldrb	r3, [r7, #14]
 80091d0:	4619      	mov	r1, r3
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f001 f9bf 	bl	800a556 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 fd21 	bl	8009c20 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80091de:	7bbb      	ldrb	r3, [r7, #14]
 80091e0:	4619      	mov	r1, r3
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f7ff fde4 	bl	8008db0 <USBD_CoreFindEP>
 80091e8:	4603      	mov	r3, r0
 80091ea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80091ec:	7b7b      	ldrb	r3, [r7, #13]
 80091ee:	2bff      	cmp	r3, #255	@ 0xff
 80091f0:	d01f      	beq.n	8009232 <USBD_StdEPReq+0x1c6>
 80091f2:	7b7b      	ldrb	r3, [r7, #13]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d11c      	bne.n	8009232 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80091f8:	7b7a      	ldrb	r2, [r7, #13]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009200:	7b7a      	ldrb	r2, [r7, #13]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	32ae      	adds	r2, #174	@ 0xae
 8009206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d010      	beq.n	8009232 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009210:	7b7a      	ldrb	r2, [r7, #13]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	32ae      	adds	r2, #174	@ 0xae
 8009216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	6839      	ldr	r1, [r7, #0]
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	4798      	blx	r3
 8009222:	4603      	mov	r3, r0
 8009224:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009226:	e004      	b.n	8009232 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009228:	6839      	ldr	r1, [r7, #0]
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 fc2d 	bl	8009a8a <USBD_CtlError>
              break;
 8009230:	e000      	b.n	8009234 <USBD_StdEPReq+0x1c8>
              break;
 8009232:	bf00      	nop
          }
          break;
 8009234:	e0ab      	b.n	800938e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800923c:	b2db      	uxtb	r3, r3
 800923e:	2b02      	cmp	r3, #2
 8009240:	d002      	beq.n	8009248 <USBD_StdEPReq+0x1dc>
 8009242:	2b03      	cmp	r3, #3
 8009244:	d032      	beq.n	80092ac <USBD_StdEPReq+0x240>
 8009246:	e097      	b.n	8009378 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009248:	7bbb      	ldrb	r3, [r7, #14]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d007      	beq.n	800925e <USBD_StdEPReq+0x1f2>
 800924e:	7bbb      	ldrb	r3, [r7, #14]
 8009250:	2b80      	cmp	r3, #128	@ 0x80
 8009252:	d004      	beq.n	800925e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009254:	6839      	ldr	r1, [r7, #0]
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 fc17 	bl	8009a8a <USBD_CtlError>
                break;
 800925c:	e091      	b.n	8009382 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800925e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009262:	2b00      	cmp	r3, #0
 8009264:	da0b      	bge.n	800927e <USBD_StdEPReq+0x212>
 8009266:	7bbb      	ldrb	r3, [r7, #14]
 8009268:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800926c:	4613      	mov	r3, r2
 800926e:	009b      	lsls	r3, r3, #2
 8009270:	4413      	add	r3, r2
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	3310      	adds	r3, #16
 8009276:	687a      	ldr	r2, [r7, #4]
 8009278:	4413      	add	r3, r2
 800927a:	3304      	adds	r3, #4
 800927c:	e00b      	b.n	8009296 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800927e:	7bbb      	ldrb	r3, [r7, #14]
 8009280:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009284:	4613      	mov	r3, r2
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	4413      	add	r3, r2
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	4413      	add	r3, r2
 8009294:	3304      	adds	r3, #4
 8009296:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	2200      	movs	r2, #0
 800929c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	2202      	movs	r2, #2
 80092a2:	4619      	mov	r1, r3
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 fc61 	bl	8009b6c <USBD_CtlSendData>
              break;
 80092aa:	e06a      	b.n	8009382 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80092ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	da11      	bge.n	80092d8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80092b4:	7bbb      	ldrb	r3, [r7, #14]
 80092b6:	f003 020f 	and.w	r2, r3, #15
 80092ba:	6879      	ldr	r1, [r7, #4]
 80092bc:	4613      	mov	r3, r2
 80092be:	009b      	lsls	r3, r3, #2
 80092c0:	4413      	add	r3, r2
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	440b      	add	r3, r1
 80092c6:	3324      	adds	r3, #36	@ 0x24
 80092c8:	881b      	ldrh	r3, [r3, #0]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d117      	bne.n	80092fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80092ce:	6839      	ldr	r1, [r7, #0]
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 fbda 	bl	8009a8a <USBD_CtlError>
                  break;
 80092d6:	e054      	b.n	8009382 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80092d8:	7bbb      	ldrb	r3, [r7, #14]
 80092da:	f003 020f 	and.w	r2, r3, #15
 80092de:	6879      	ldr	r1, [r7, #4]
 80092e0:	4613      	mov	r3, r2
 80092e2:	009b      	lsls	r3, r3, #2
 80092e4:	4413      	add	r3, r2
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	440b      	add	r3, r1
 80092ea:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80092ee:	881b      	ldrh	r3, [r3, #0]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d104      	bne.n	80092fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80092f4:	6839      	ldr	r1, [r7, #0]
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f000 fbc7 	bl	8009a8a <USBD_CtlError>
                  break;
 80092fc:	e041      	b.n	8009382 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80092fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009302:	2b00      	cmp	r3, #0
 8009304:	da0b      	bge.n	800931e <USBD_StdEPReq+0x2b2>
 8009306:	7bbb      	ldrb	r3, [r7, #14]
 8009308:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800930c:	4613      	mov	r3, r2
 800930e:	009b      	lsls	r3, r3, #2
 8009310:	4413      	add	r3, r2
 8009312:	009b      	lsls	r3, r3, #2
 8009314:	3310      	adds	r3, #16
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	4413      	add	r3, r2
 800931a:	3304      	adds	r3, #4
 800931c:	e00b      	b.n	8009336 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800931e:	7bbb      	ldrb	r3, [r7, #14]
 8009320:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009324:	4613      	mov	r3, r2
 8009326:	009b      	lsls	r3, r3, #2
 8009328:	4413      	add	r3, r2
 800932a:	009b      	lsls	r3, r3, #2
 800932c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	4413      	add	r3, r2
 8009334:	3304      	adds	r3, #4
 8009336:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009338:	7bbb      	ldrb	r3, [r7, #14]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d002      	beq.n	8009344 <USBD_StdEPReq+0x2d8>
 800933e:	7bbb      	ldrb	r3, [r7, #14]
 8009340:	2b80      	cmp	r3, #128	@ 0x80
 8009342:	d103      	bne.n	800934c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	2200      	movs	r2, #0
 8009348:	601a      	str	r2, [r3, #0]
 800934a:	e00e      	b.n	800936a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800934c:	7bbb      	ldrb	r3, [r7, #14]
 800934e:	4619      	mov	r1, r3
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f001 f91f 	bl	800a594 <USBD_LL_IsStallEP>
 8009356:	4603      	mov	r3, r0
 8009358:	2b00      	cmp	r3, #0
 800935a:	d003      	beq.n	8009364 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	2201      	movs	r2, #1
 8009360:	601a      	str	r2, [r3, #0]
 8009362:	e002      	b.n	800936a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	2200      	movs	r2, #0
 8009368:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	2202      	movs	r2, #2
 800936e:	4619      	mov	r1, r3
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 fbfb 	bl	8009b6c <USBD_CtlSendData>
              break;
 8009376:	e004      	b.n	8009382 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009378:	6839      	ldr	r1, [r7, #0]
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 fb85 	bl	8009a8a <USBD_CtlError>
              break;
 8009380:	bf00      	nop
          }
          break;
 8009382:	e004      	b.n	800938e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009384:	6839      	ldr	r1, [r7, #0]
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 fb7f 	bl	8009a8a <USBD_CtlError>
          break;
 800938c:	bf00      	nop
      }
      break;
 800938e:	e005      	b.n	800939c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009390:	6839      	ldr	r1, [r7, #0]
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 fb79 	bl	8009a8a <USBD_CtlError>
      break;
 8009398:	e000      	b.n	800939c <USBD_StdEPReq+0x330>
      break;
 800939a:	bf00      	nop
  }

  return ret;
 800939c:	7bfb      	ldrb	r3, [r7, #15]
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3710      	adds	r7, #16
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}
	...

080093a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80093b2:	2300      	movs	r3, #0
 80093b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80093b6:	2300      	movs	r3, #0
 80093b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80093ba:	2300      	movs	r3, #0
 80093bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	885b      	ldrh	r3, [r3, #2]
 80093c2:	0a1b      	lsrs	r3, r3, #8
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	3b01      	subs	r3, #1
 80093c8:	2b0e      	cmp	r3, #14
 80093ca:	f200 8152 	bhi.w	8009672 <USBD_GetDescriptor+0x2ca>
 80093ce:	a201      	add	r2, pc, #4	@ (adr r2, 80093d4 <USBD_GetDescriptor+0x2c>)
 80093d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093d4:	08009445 	.word	0x08009445
 80093d8:	0800945d 	.word	0x0800945d
 80093dc:	0800949d 	.word	0x0800949d
 80093e0:	08009673 	.word	0x08009673
 80093e4:	08009673 	.word	0x08009673
 80093e8:	08009613 	.word	0x08009613
 80093ec:	0800963f 	.word	0x0800963f
 80093f0:	08009673 	.word	0x08009673
 80093f4:	08009673 	.word	0x08009673
 80093f8:	08009673 	.word	0x08009673
 80093fc:	08009673 	.word	0x08009673
 8009400:	08009673 	.word	0x08009673
 8009404:	08009673 	.word	0x08009673
 8009408:	08009673 	.word	0x08009673
 800940c:	08009411 	.word	0x08009411
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009416:	69db      	ldr	r3, [r3, #28]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d00b      	beq.n	8009434 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009422:	69db      	ldr	r3, [r3, #28]
 8009424:	687a      	ldr	r2, [r7, #4]
 8009426:	7c12      	ldrb	r2, [r2, #16]
 8009428:	f107 0108 	add.w	r1, r7, #8
 800942c:	4610      	mov	r0, r2
 800942e:	4798      	blx	r3
 8009430:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009432:	e126      	b.n	8009682 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009434:	6839      	ldr	r1, [r7, #0]
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 fb27 	bl	8009a8a <USBD_CtlError>
        err++;
 800943c:	7afb      	ldrb	r3, [r7, #11]
 800943e:	3301      	adds	r3, #1
 8009440:	72fb      	strb	r3, [r7, #11]
      break;
 8009442:	e11e      	b.n	8009682 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	687a      	ldr	r2, [r7, #4]
 800944e:	7c12      	ldrb	r2, [r2, #16]
 8009450:	f107 0108 	add.w	r1, r7, #8
 8009454:	4610      	mov	r0, r2
 8009456:	4798      	blx	r3
 8009458:	60f8      	str	r0, [r7, #12]
      break;
 800945a:	e112      	b.n	8009682 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	7c1b      	ldrb	r3, [r3, #16]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d10d      	bne.n	8009480 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800946a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800946c:	f107 0208 	add.w	r2, r7, #8
 8009470:	4610      	mov	r0, r2
 8009472:	4798      	blx	r3
 8009474:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	3301      	adds	r3, #1
 800947a:	2202      	movs	r2, #2
 800947c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800947e:	e100      	b.n	8009682 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009488:	f107 0208 	add.w	r2, r7, #8
 800948c:	4610      	mov	r0, r2
 800948e:	4798      	blx	r3
 8009490:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	3301      	adds	r3, #1
 8009496:	2202      	movs	r2, #2
 8009498:	701a      	strb	r2, [r3, #0]
      break;
 800949a:	e0f2      	b.n	8009682 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	885b      	ldrh	r3, [r3, #2]
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	2b05      	cmp	r3, #5
 80094a4:	f200 80ac 	bhi.w	8009600 <USBD_GetDescriptor+0x258>
 80094a8:	a201      	add	r2, pc, #4	@ (adr r2, 80094b0 <USBD_GetDescriptor+0x108>)
 80094aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ae:	bf00      	nop
 80094b0:	080094c9 	.word	0x080094c9
 80094b4:	080094fd 	.word	0x080094fd
 80094b8:	08009531 	.word	0x08009531
 80094bc:	08009565 	.word	0x08009565
 80094c0:	08009599 	.word	0x08009599
 80094c4:	080095cd 	.word	0x080095cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d00b      	beq.n	80094ec <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	687a      	ldr	r2, [r7, #4]
 80094de:	7c12      	ldrb	r2, [r2, #16]
 80094e0:	f107 0108 	add.w	r1, r7, #8
 80094e4:	4610      	mov	r0, r2
 80094e6:	4798      	blx	r3
 80094e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094ea:	e091      	b.n	8009610 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80094ec:	6839      	ldr	r1, [r7, #0]
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 facb 	bl	8009a8a <USBD_CtlError>
            err++;
 80094f4:	7afb      	ldrb	r3, [r7, #11]
 80094f6:	3301      	adds	r3, #1
 80094f8:	72fb      	strb	r3, [r7, #11]
          break;
 80094fa:	e089      	b.n	8009610 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009502:	689b      	ldr	r3, [r3, #8]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d00b      	beq.n	8009520 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	7c12      	ldrb	r2, [r2, #16]
 8009514:	f107 0108 	add.w	r1, r7, #8
 8009518:	4610      	mov	r0, r2
 800951a:	4798      	blx	r3
 800951c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800951e:	e077      	b.n	8009610 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009520:	6839      	ldr	r1, [r7, #0]
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 fab1 	bl	8009a8a <USBD_CtlError>
            err++;
 8009528:	7afb      	ldrb	r3, [r7, #11]
 800952a:	3301      	adds	r3, #1
 800952c:	72fb      	strb	r3, [r7, #11]
          break;
 800952e:	e06f      	b.n	8009610 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009536:	68db      	ldr	r3, [r3, #12]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d00b      	beq.n	8009554 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	7c12      	ldrb	r2, [r2, #16]
 8009548:	f107 0108 	add.w	r1, r7, #8
 800954c:	4610      	mov	r0, r2
 800954e:	4798      	blx	r3
 8009550:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009552:	e05d      	b.n	8009610 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009554:	6839      	ldr	r1, [r7, #0]
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 fa97 	bl	8009a8a <USBD_CtlError>
            err++;
 800955c:	7afb      	ldrb	r3, [r7, #11]
 800955e:	3301      	adds	r3, #1
 8009560:	72fb      	strb	r3, [r7, #11]
          break;
 8009562:	e055      	b.n	8009610 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800956a:	691b      	ldr	r3, [r3, #16]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d00b      	beq.n	8009588 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009576:	691b      	ldr	r3, [r3, #16]
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	7c12      	ldrb	r2, [r2, #16]
 800957c:	f107 0108 	add.w	r1, r7, #8
 8009580:	4610      	mov	r0, r2
 8009582:	4798      	blx	r3
 8009584:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009586:	e043      	b.n	8009610 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009588:	6839      	ldr	r1, [r7, #0]
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 fa7d 	bl	8009a8a <USBD_CtlError>
            err++;
 8009590:	7afb      	ldrb	r3, [r7, #11]
 8009592:	3301      	adds	r3, #1
 8009594:	72fb      	strb	r3, [r7, #11]
          break;
 8009596:	e03b      	b.n	8009610 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800959e:	695b      	ldr	r3, [r3, #20]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d00b      	beq.n	80095bc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095aa:	695b      	ldr	r3, [r3, #20]
 80095ac:	687a      	ldr	r2, [r7, #4]
 80095ae:	7c12      	ldrb	r2, [r2, #16]
 80095b0:	f107 0108 	add.w	r1, r7, #8
 80095b4:	4610      	mov	r0, r2
 80095b6:	4798      	blx	r3
 80095b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095ba:	e029      	b.n	8009610 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80095bc:	6839      	ldr	r1, [r7, #0]
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 fa63 	bl	8009a8a <USBD_CtlError>
            err++;
 80095c4:	7afb      	ldrb	r3, [r7, #11]
 80095c6:	3301      	adds	r3, #1
 80095c8:	72fb      	strb	r3, [r7, #11]
          break;
 80095ca:	e021      	b.n	8009610 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095d2:	699b      	ldr	r3, [r3, #24]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d00b      	beq.n	80095f0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095de:	699b      	ldr	r3, [r3, #24]
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	7c12      	ldrb	r2, [r2, #16]
 80095e4:	f107 0108 	add.w	r1, r7, #8
 80095e8:	4610      	mov	r0, r2
 80095ea:	4798      	blx	r3
 80095ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095ee:	e00f      	b.n	8009610 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80095f0:	6839      	ldr	r1, [r7, #0]
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f000 fa49 	bl	8009a8a <USBD_CtlError>
            err++;
 80095f8:	7afb      	ldrb	r3, [r7, #11]
 80095fa:	3301      	adds	r3, #1
 80095fc:	72fb      	strb	r3, [r7, #11]
          break;
 80095fe:	e007      	b.n	8009610 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009600:	6839      	ldr	r1, [r7, #0]
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 fa41 	bl	8009a8a <USBD_CtlError>
          err++;
 8009608:	7afb      	ldrb	r3, [r7, #11]
 800960a:	3301      	adds	r3, #1
 800960c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800960e:	bf00      	nop
      }
      break;
 8009610:	e037      	b.n	8009682 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	7c1b      	ldrb	r3, [r3, #16]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d109      	bne.n	800962e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009620:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009622:	f107 0208 	add.w	r2, r7, #8
 8009626:	4610      	mov	r0, r2
 8009628:	4798      	blx	r3
 800962a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800962c:	e029      	b.n	8009682 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800962e:	6839      	ldr	r1, [r7, #0]
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 fa2a 	bl	8009a8a <USBD_CtlError>
        err++;
 8009636:	7afb      	ldrb	r3, [r7, #11]
 8009638:	3301      	adds	r3, #1
 800963a:	72fb      	strb	r3, [r7, #11]
      break;
 800963c:	e021      	b.n	8009682 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	7c1b      	ldrb	r3, [r3, #16]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d10d      	bne.n	8009662 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800964c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800964e:	f107 0208 	add.w	r2, r7, #8
 8009652:	4610      	mov	r0, r2
 8009654:	4798      	blx	r3
 8009656:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	3301      	adds	r3, #1
 800965c:	2207      	movs	r2, #7
 800965e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009660:	e00f      	b.n	8009682 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009662:	6839      	ldr	r1, [r7, #0]
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f000 fa10 	bl	8009a8a <USBD_CtlError>
        err++;
 800966a:	7afb      	ldrb	r3, [r7, #11]
 800966c:	3301      	adds	r3, #1
 800966e:	72fb      	strb	r3, [r7, #11]
      break;
 8009670:	e007      	b.n	8009682 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009672:	6839      	ldr	r1, [r7, #0]
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 fa08 	bl	8009a8a <USBD_CtlError>
      err++;
 800967a:	7afb      	ldrb	r3, [r7, #11]
 800967c:	3301      	adds	r3, #1
 800967e:	72fb      	strb	r3, [r7, #11]
      break;
 8009680:	bf00      	nop
  }

  if (err != 0U)
 8009682:	7afb      	ldrb	r3, [r7, #11]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d11e      	bne.n	80096c6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	88db      	ldrh	r3, [r3, #6]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d016      	beq.n	80096be <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009690:	893b      	ldrh	r3, [r7, #8]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d00e      	beq.n	80096b4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	88da      	ldrh	r2, [r3, #6]
 800969a:	893b      	ldrh	r3, [r7, #8]
 800969c:	4293      	cmp	r3, r2
 800969e:	bf28      	it	cs
 80096a0:	4613      	movcs	r3, r2
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80096a6:	893b      	ldrh	r3, [r7, #8]
 80096a8:	461a      	mov	r2, r3
 80096aa:	68f9      	ldr	r1, [r7, #12]
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f000 fa5d 	bl	8009b6c <USBD_CtlSendData>
 80096b2:	e009      	b.n	80096c8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80096b4:	6839      	ldr	r1, [r7, #0]
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f000 f9e7 	bl	8009a8a <USBD_CtlError>
 80096bc:	e004      	b.n	80096c8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 faae 	bl	8009c20 <USBD_CtlSendStatus>
 80096c4:	e000      	b.n	80096c8 <USBD_GetDescriptor+0x320>
    return;
 80096c6:	bf00      	nop
  }
}
 80096c8:	3710      	adds	r7, #16
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop

080096d0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	889b      	ldrh	r3, [r3, #4]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d131      	bne.n	8009746 <USBD_SetAddress+0x76>
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	88db      	ldrh	r3, [r3, #6]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d12d      	bne.n	8009746 <USBD_SetAddress+0x76>
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	885b      	ldrh	r3, [r3, #2]
 80096ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80096f0:	d829      	bhi.n	8009746 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	885b      	ldrh	r3, [r3, #2]
 80096f6:	b2db      	uxtb	r3, r3
 80096f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009704:	b2db      	uxtb	r3, r3
 8009706:	2b03      	cmp	r3, #3
 8009708:	d104      	bne.n	8009714 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800970a:	6839      	ldr	r1, [r7, #0]
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 f9bc 	bl	8009a8a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009712:	e01d      	b.n	8009750 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	7bfa      	ldrb	r2, [r7, #15]
 8009718:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800971c:	7bfb      	ldrb	r3, [r7, #15]
 800971e:	4619      	mov	r1, r3
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 ff63 	bl	800a5ec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 fa7a 	bl	8009c20 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800972c:	7bfb      	ldrb	r3, [r7, #15]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d004      	beq.n	800973c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2202      	movs	r2, #2
 8009736:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800973a:	e009      	b.n	8009750 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2201      	movs	r2, #1
 8009740:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009744:	e004      	b.n	8009750 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009746:	6839      	ldr	r1, [r7, #0]
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f000 f99e 	bl	8009a8a <USBD_CtlError>
  }
}
 800974e:	bf00      	nop
 8009750:	bf00      	nop
 8009752:	3710      	adds	r7, #16
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009762:	2300      	movs	r3, #0
 8009764:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	885b      	ldrh	r3, [r3, #2]
 800976a:	b2da      	uxtb	r2, r3
 800976c:	4b4e      	ldr	r3, [pc, #312]	@ (80098a8 <USBD_SetConfig+0x150>)
 800976e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009770:	4b4d      	ldr	r3, [pc, #308]	@ (80098a8 <USBD_SetConfig+0x150>)
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	2b01      	cmp	r3, #1
 8009776:	d905      	bls.n	8009784 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009778:	6839      	ldr	r1, [r7, #0]
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 f985 	bl	8009a8a <USBD_CtlError>
    return USBD_FAIL;
 8009780:	2303      	movs	r3, #3
 8009782:	e08c      	b.n	800989e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800978a:	b2db      	uxtb	r3, r3
 800978c:	2b02      	cmp	r3, #2
 800978e:	d002      	beq.n	8009796 <USBD_SetConfig+0x3e>
 8009790:	2b03      	cmp	r3, #3
 8009792:	d029      	beq.n	80097e8 <USBD_SetConfig+0x90>
 8009794:	e075      	b.n	8009882 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009796:	4b44      	ldr	r3, [pc, #272]	@ (80098a8 <USBD_SetConfig+0x150>)
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d020      	beq.n	80097e0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800979e:	4b42      	ldr	r3, [pc, #264]	@ (80098a8 <USBD_SetConfig+0x150>)
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	461a      	mov	r2, r3
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80097a8:	4b3f      	ldr	r3, [pc, #252]	@ (80098a8 <USBD_SetConfig+0x150>)
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	4619      	mov	r1, r3
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f7fe ffbf 	bl	8008732 <USBD_SetClassConfig>
 80097b4:	4603      	mov	r3, r0
 80097b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80097b8:	7bfb      	ldrb	r3, [r7, #15]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d008      	beq.n	80097d0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80097be:	6839      	ldr	r1, [r7, #0]
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 f962 	bl	8009a8a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2202      	movs	r2, #2
 80097ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80097ce:	e065      	b.n	800989c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 fa25 	bl	8009c20 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2203      	movs	r2, #3
 80097da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80097de:	e05d      	b.n	800989c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f000 fa1d 	bl	8009c20 <USBD_CtlSendStatus>
      break;
 80097e6:	e059      	b.n	800989c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80097e8:	4b2f      	ldr	r3, [pc, #188]	@ (80098a8 <USBD_SetConfig+0x150>)
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d112      	bne.n	8009816 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2202      	movs	r2, #2
 80097f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80097f8:	4b2b      	ldr	r3, [pc, #172]	@ (80098a8 <USBD_SetConfig+0x150>)
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	461a      	mov	r2, r3
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009802:	4b29      	ldr	r3, [pc, #164]	@ (80098a8 <USBD_SetConfig+0x150>)
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	4619      	mov	r1, r3
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f7fe ffae 	bl	800876a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 fa06 	bl	8009c20 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009814:	e042      	b.n	800989c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009816:	4b24      	ldr	r3, [pc, #144]	@ (80098a8 <USBD_SetConfig+0x150>)
 8009818:	781b      	ldrb	r3, [r3, #0]
 800981a:	461a      	mov	r2, r3
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	429a      	cmp	r2, r3
 8009822:	d02a      	beq.n	800987a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	b2db      	uxtb	r3, r3
 800982a:	4619      	mov	r1, r3
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f7fe ff9c 	bl	800876a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009832:	4b1d      	ldr	r3, [pc, #116]	@ (80098a8 <USBD_SetConfig+0x150>)
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	461a      	mov	r2, r3
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800983c:	4b1a      	ldr	r3, [pc, #104]	@ (80098a8 <USBD_SetConfig+0x150>)
 800983e:	781b      	ldrb	r3, [r3, #0]
 8009840:	4619      	mov	r1, r3
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f7fe ff75 	bl	8008732 <USBD_SetClassConfig>
 8009848:	4603      	mov	r3, r0
 800984a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800984c:	7bfb      	ldrb	r3, [r7, #15]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d00f      	beq.n	8009872 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009852:	6839      	ldr	r1, [r7, #0]
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 f918 	bl	8009a8a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	b2db      	uxtb	r3, r3
 8009860:	4619      	mov	r1, r3
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f7fe ff81 	bl	800876a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2202      	movs	r2, #2
 800986c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009870:	e014      	b.n	800989c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 f9d4 	bl	8009c20 <USBD_CtlSendStatus>
      break;
 8009878:	e010      	b.n	800989c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 f9d0 	bl	8009c20 <USBD_CtlSendStatus>
      break;
 8009880:	e00c      	b.n	800989c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009882:	6839      	ldr	r1, [r7, #0]
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f000 f900 	bl	8009a8a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800988a:	4b07      	ldr	r3, [pc, #28]	@ (80098a8 <USBD_SetConfig+0x150>)
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	4619      	mov	r1, r3
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f7fe ff6a 	bl	800876a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009896:	2303      	movs	r3, #3
 8009898:	73fb      	strb	r3, [r7, #15]
      break;
 800989a:	bf00      	nop
  }

  return ret;
 800989c:	7bfb      	ldrb	r3, [r7, #15]
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3710      	adds	r7, #16
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	bf00      	nop
 80098a8:	20000504 	.word	0x20000504

080098ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	88db      	ldrh	r3, [r3, #6]
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d004      	beq.n	80098c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80098be:	6839      	ldr	r1, [r7, #0]
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 f8e2 	bl	8009a8a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80098c6:	e023      	b.n	8009910 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098ce:	b2db      	uxtb	r3, r3
 80098d0:	2b02      	cmp	r3, #2
 80098d2:	dc02      	bgt.n	80098da <USBD_GetConfig+0x2e>
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	dc03      	bgt.n	80098e0 <USBD_GetConfig+0x34>
 80098d8:	e015      	b.n	8009906 <USBD_GetConfig+0x5a>
 80098da:	2b03      	cmp	r3, #3
 80098dc:	d00b      	beq.n	80098f6 <USBD_GetConfig+0x4a>
 80098de:	e012      	b.n	8009906 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2200      	movs	r2, #0
 80098e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	3308      	adds	r3, #8
 80098ea:	2201      	movs	r2, #1
 80098ec:	4619      	mov	r1, r3
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 f93c 	bl	8009b6c <USBD_CtlSendData>
        break;
 80098f4:	e00c      	b.n	8009910 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	3304      	adds	r3, #4
 80098fa:	2201      	movs	r2, #1
 80098fc:	4619      	mov	r1, r3
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 f934 	bl	8009b6c <USBD_CtlSendData>
        break;
 8009904:	e004      	b.n	8009910 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009906:	6839      	ldr	r1, [r7, #0]
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f000 f8be 	bl	8009a8a <USBD_CtlError>
        break;
 800990e:	bf00      	nop
}
 8009910:	bf00      	nop
 8009912:	3708      	adds	r7, #8
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009928:	b2db      	uxtb	r3, r3
 800992a:	3b01      	subs	r3, #1
 800992c:	2b02      	cmp	r3, #2
 800992e:	d81e      	bhi.n	800996e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	88db      	ldrh	r3, [r3, #6]
 8009934:	2b02      	cmp	r3, #2
 8009936:	d004      	beq.n	8009942 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009938:	6839      	ldr	r1, [r7, #0]
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f000 f8a5 	bl	8009a8a <USBD_CtlError>
        break;
 8009940:	e01a      	b.n	8009978 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2201      	movs	r2, #1
 8009946:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800994e:	2b00      	cmp	r3, #0
 8009950:	d005      	beq.n	800995e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	68db      	ldr	r3, [r3, #12]
 8009956:	f043 0202 	orr.w	r2, r3, #2
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	330c      	adds	r3, #12
 8009962:	2202      	movs	r2, #2
 8009964:	4619      	mov	r1, r3
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 f900 	bl	8009b6c <USBD_CtlSendData>
      break;
 800996c:	e004      	b.n	8009978 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800996e:	6839      	ldr	r1, [r7, #0]
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f000 f88a 	bl	8009a8a <USBD_CtlError>
      break;
 8009976:	bf00      	nop
  }
}
 8009978:	bf00      	nop
 800997a:	3708      	adds	r7, #8
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	885b      	ldrh	r3, [r3, #2]
 800998e:	2b01      	cmp	r3, #1
 8009990:	d107      	bne.n	80099a2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2201      	movs	r2, #1
 8009996:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f000 f940 	bl	8009c20 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80099a0:	e013      	b.n	80099ca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	885b      	ldrh	r3, [r3, #2]
 80099a6:	2b02      	cmp	r3, #2
 80099a8:	d10b      	bne.n	80099c2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	889b      	ldrh	r3, [r3, #4]
 80099ae:	0a1b      	lsrs	r3, r3, #8
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	b2da      	uxtb	r2, r3
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f000 f930 	bl	8009c20 <USBD_CtlSendStatus>
}
 80099c0:	e003      	b.n	80099ca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80099c2:	6839      	ldr	r1, [r7, #0]
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 f860 	bl	8009a8a <USBD_CtlError>
}
 80099ca:	bf00      	nop
 80099cc:	3708      	adds	r7, #8
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}

080099d2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099d2:	b580      	push	{r7, lr}
 80099d4:	b082      	sub	sp, #8
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
 80099da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	3b01      	subs	r3, #1
 80099e6:	2b02      	cmp	r3, #2
 80099e8:	d80b      	bhi.n	8009a02 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	885b      	ldrh	r3, [r3, #2]
 80099ee:	2b01      	cmp	r3, #1
 80099f0:	d10c      	bne.n	8009a0c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2200      	movs	r2, #0
 80099f6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 f910 	bl	8009c20 <USBD_CtlSendStatus>
      }
      break;
 8009a00:	e004      	b.n	8009a0c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009a02:	6839      	ldr	r1, [r7, #0]
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 f840 	bl	8009a8a <USBD_CtlError>
      break;
 8009a0a:	e000      	b.n	8009a0e <USBD_ClrFeature+0x3c>
      break;
 8009a0c:	bf00      	nop
  }
}
 8009a0e:	bf00      	nop
 8009a10:	3708      	adds	r7, #8
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}

08009a16 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b084      	sub	sp, #16
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
 8009a1e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	781a      	ldrb	r2, [r3, #0]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	3301      	adds	r3, #1
 8009a30:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	781a      	ldrb	r2, [r3, #0]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	3301      	adds	r3, #1
 8009a3e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009a40:	68f8      	ldr	r0, [r7, #12]
 8009a42:	f7ff fa16 	bl	8008e72 <SWAPBYTE>
 8009a46:	4603      	mov	r3, r0
 8009a48:	461a      	mov	r2, r3
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	3301      	adds	r3, #1
 8009a52:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	3301      	adds	r3, #1
 8009a58:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009a5a:	68f8      	ldr	r0, [r7, #12]
 8009a5c:	f7ff fa09 	bl	8008e72 <SWAPBYTE>
 8009a60:	4603      	mov	r3, r0
 8009a62:	461a      	mov	r2, r3
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	3301      	adds	r3, #1
 8009a6c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	3301      	adds	r3, #1
 8009a72:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009a74:	68f8      	ldr	r0, [r7, #12]
 8009a76:	f7ff f9fc 	bl	8008e72 <SWAPBYTE>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	80da      	strh	r2, [r3, #6]
}
 8009a82:	bf00      	nop
 8009a84:	3710      	adds	r7, #16
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}

08009a8a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a8a:	b580      	push	{r7, lr}
 8009a8c:	b082      	sub	sp, #8
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
 8009a92:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a94:	2180      	movs	r1, #128	@ 0x80
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 fd3e 	bl	800a518 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009a9c:	2100      	movs	r1, #0
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 fd3a 	bl	800a518 <USBD_LL_StallEP>
}
 8009aa4:	bf00      	nop
 8009aa6:	3708      	adds	r7, #8
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b086      	sub	sp, #24
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	60f8      	str	r0, [r7, #12]
 8009ab4:	60b9      	str	r1, [r7, #8]
 8009ab6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d036      	beq.n	8009b30 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009ac6:	6938      	ldr	r0, [r7, #16]
 8009ac8:	f000 f836 	bl	8009b38 <USBD_GetLen>
 8009acc:	4603      	mov	r3, r0
 8009ace:	3301      	adds	r3, #1
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	005b      	lsls	r3, r3, #1
 8009ad4:	b29a      	uxth	r2, r3
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009ada:	7dfb      	ldrb	r3, [r7, #23]
 8009adc:	68ba      	ldr	r2, [r7, #8]
 8009ade:	4413      	add	r3, r2
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	7812      	ldrb	r2, [r2, #0]
 8009ae4:	701a      	strb	r2, [r3, #0]
  idx++;
 8009ae6:	7dfb      	ldrb	r3, [r7, #23]
 8009ae8:	3301      	adds	r3, #1
 8009aea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009aec:	7dfb      	ldrb	r3, [r7, #23]
 8009aee:	68ba      	ldr	r2, [r7, #8]
 8009af0:	4413      	add	r3, r2
 8009af2:	2203      	movs	r2, #3
 8009af4:	701a      	strb	r2, [r3, #0]
  idx++;
 8009af6:	7dfb      	ldrb	r3, [r7, #23]
 8009af8:	3301      	adds	r3, #1
 8009afa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009afc:	e013      	b.n	8009b26 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009afe:	7dfb      	ldrb	r3, [r7, #23]
 8009b00:	68ba      	ldr	r2, [r7, #8]
 8009b02:	4413      	add	r3, r2
 8009b04:	693a      	ldr	r2, [r7, #16]
 8009b06:	7812      	ldrb	r2, [r2, #0]
 8009b08:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	3301      	adds	r3, #1
 8009b0e:	613b      	str	r3, [r7, #16]
    idx++;
 8009b10:	7dfb      	ldrb	r3, [r7, #23]
 8009b12:	3301      	adds	r3, #1
 8009b14:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009b16:	7dfb      	ldrb	r3, [r7, #23]
 8009b18:	68ba      	ldr	r2, [r7, #8]
 8009b1a:	4413      	add	r3, r2
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	701a      	strb	r2, [r3, #0]
    idx++;
 8009b20:	7dfb      	ldrb	r3, [r7, #23]
 8009b22:	3301      	adds	r3, #1
 8009b24:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d1e7      	bne.n	8009afe <USBD_GetString+0x52>
 8009b2e:	e000      	b.n	8009b32 <USBD_GetString+0x86>
    return;
 8009b30:	bf00      	nop
  }
}
 8009b32:	3718      	adds	r7, #24
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b085      	sub	sp, #20
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009b40:	2300      	movs	r3, #0
 8009b42:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009b48:	e005      	b.n	8009b56 <USBD_GetLen+0x1e>
  {
    len++;
 8009b4a:	7bfb      	ldrb	r3, [r7, #15]
 8009b4c:	3301      	adds	r3, #1
 8009b4e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	3301      	adds	r3, #1
 8009b54:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d1f5      	bne.n	8009b4a <USBD_GetLen+0x12>
  }

  return len;
 8009b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3714      	adds	r7, #20
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr

08009b6c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b084      	sub	sp, #16
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	60f8      	str	r0, [r7, #12]
 8009b74:	60b9      	str	r1, [r7, #8]
 8009b76:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2202      	movs	r2, #2
 8009b7c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	687a      	ldr	r2, [r7, #4]
 8009b8a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	68ba      	ldr	r2, [r7, #8]
 8009b90:	2100      	movs	r1, #0
 8009b92:	68f8      	ldr	r0, [r7, #12]
 8009b94:	f000 fd49 	bl	800a62a <USBD_LL_Transmit>

  return USBD_OK;
 8009b98:	2300      	movs	r3, #0
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3710      	adds	r7, #16
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009ba2:	b580      	push	{r7, lr}
 8009ba4:	b084      	sub	sp, #16
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	60f8      	str	r0, [r7, #12]
 8009baa:	60b9      	str	r1, [r7, #8]
 8009bac:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	68ba      	ldr	r2, [r7, #8]
 8009bb2:	2100      	movs	r1, #0
 8009bb4:	68f8      	ldr	r0, [r7, #12]
 8009bb6:	f000 fd38 	bl	800a62a <USBD_LL_Transmit>

  return USBD_OK;
 8009bba:	2300      	movs	r3, #0
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3710      	adds	r7, #16
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b084      	sub	sp, #16
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	60f8      	str	r0, [r7, #12]
 8009bcc:	60b9      	str	r1, [r7, #8]
 8009bce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2203      	movs	r2, #3
 8009bd4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	687a      	ldr	r2, [r7, #4]
 8009bdc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	687a      	ldr	r2, [r7, #4]
 8009be4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	68ba      	ldr	r2, [r7, #8]
 8009bec:	2100      	movs	r1, #0
 8009bee:	68f8      	ldr	r0, [r7, #12]
 8009bf0:	f000 fd3c 	bl	800a66c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009bf4:	2300      	movs	r3, #0
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3710      	adds	r7, #16
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}

08009bfe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009bfe:	b580      	push	{r7, lr}
 8009c00:	b084      	sub	sp, #16
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	60f8      	str	r0, [r7, #12]
 8009c06:	60b9      	str	r1, [r7, #8]
 8009c08:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	68ba      	ldr	r2, [r7, #8]
 8009c0e:	2100      	movs	r1, #0
 8009c10:	68f8      	ldr	r0, [r7, #12]
 8009c12:	f000 fd2b 	bl	800a66c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c16:	2300      	movs	r3, #0
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3710      	adds	r7, #16
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b082      	sub	sp, #8
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2204      	movs	r2, #4
 8009c2c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009c30:	2300      	movs	r3, #0
 8009c32:	2200      	movs	r2, #0
 8009c34:	2100      	movs	r1, #0
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f000 fcf7 	bl	800a62a <USBD_LL_Transmit>

  return USBD_OK;
 8009c3c:	2300      	movs	r3, #0
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3708      	adds	r7, #8
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}

08009c46 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009c46:	b580      	push	{r7, lr}
 8009c48:	b082      	sub	sp, #8
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2205      	movs	r2, #5
 8009c52:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c56:	2300      	movs	r3, #0
 8009c58:	2200      	movs	r2, #0
 8009c5a:	2100      	movs	r1, #0
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 fd05 	bl	800a66c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c62:	2300      	movs	r3, #0
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3708      	adds	r7, #8
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b087      	sub	sp, #28
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	60b9      	str	r1, [r7, #8]
 8009c76:	4613      	mov	r3, r2
 8009c78:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009c82:	4b1f      	ldr	r3, [pc, #124]	@ (8009d00 <FATFS_LinkDriverEx+0x94>)
 8009c84:	7a5b      	ldrb	r3, [r3, #9]
 8009c86:	b2db      	uxtb	r3, r3
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d131      	bne.n	8009cf0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009c8c:	4b1c      	ldr	r3, [pc, #112]	@ (8009d00 <FATFS_LinkDriverEx+0x94>)
 8009c8e:	7a5b      	ldrb	r3, [r3, #9]
 8009c90:	b2db      	uxtb	r3, r3
 8009c92:	461a      	mov	r2, r3
 8009c94:	4b1a      	ldr	r3, [pc, #104]	@ (8009d00 <FATFS_LinkDriverEx+0x94>)
 8009c96:	2100      	movs	r1, #0
 8009c98:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009c9a:	4b19      	ldr	r3, [pc, #100]	@ (8009d00 <FATFS_LinkDriverEx+0x94>)
 8009c9c:	7a5b      	ldrb	r3, [r3, #9]
 8009c9e:	b2db      	uxtb	r3, r3
 8009ca0:	4a17      	ldr	r2, [pc, #92]	@ (8009d00 <FATFS_LinkDriverEx+0x94>)
 8009ca2:	009b      	lsls	r3, r3, #2
 8009ca4:	4413      	add	r3, r2
 8009ca6:	68fa      	ldr	r2, [r7, #12]
 8009ca8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009caa:	4b15      	ldr	r3, [pc, #84]	@ (8009d00 <FATFS_LinkDriverEx+0x94>)
 8009cac:	7a5b      	ldrb	r3, [r3, #9]
 8009cae:	b2db      	uxtb	r3, r3
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	4b13      	ldr	r3, [pc, #76]	@ (8009d00 <FATFS_LinkDriverEx+0x94>)
 8009cb4:	4413      	add	r3, r2
 8009cb6:	79fa      	ldrb	r2, [r7, #7]
 8009cb8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009cba:	4b11      	ldr	r3, [pc, #68]	@ (8009d00 <FATFS_LinkDriverEx+0x94>)
 8009cbc:	7a5b      	ldrb	r3, [r3, #9]
 8009cbe:	b2db      	uxtb	r3, r3
 8009cc0:	1c5a      	adds	r2, r3, #1
 8009cc2:	b2d1      	uxtb	r1, r2
 8009cc4:	4a0e      	ldr	r2, [pc, #56]	@ (8009d00 <FATFS_LinkDriverEx+0x94>)
 8009cc6:	7251      	strb	r1, [r2, #9]
 8009cc8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009cca:	7dbb      	ldrb	r3, [r7, #22]
 8009ccc:	3330      	adds	r3, #48	@ 0x30
 8009cce:	b2da      	uxtb	r2, r3
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	3301      	adds	r3, #1
 8009cd8:	223a      	movs	r2, #58	@ 0x3a
 8009cda:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	3302      	adds	r3, #2
 8009ce0:	222f      	movs	r2, #47	@ 0x2f
 8009ce2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	3303      	adds	r3, #3
 8009ce8:	2200      	movs	r2, #0
 8009cea:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009cec:	2300      	movs	r3, #0
 8009cee:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	371c      	adds	r7, #28
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfc:	4770      	bx	lr
 8009cfe:	bf00      	nop
 8009d00:	20000508 	.word	0x20000508

08009d04 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b082      	sub	sp, #8
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009d0e:	2200      	movs	r2, #0
 8009d10:	6839      	ldr	r1, [r7, #0]
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f7ff ffaa 	bl	8009c6c <FATFS_LinkDriverEx>
 8009d18:	4603      	mov	r3, r0
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3708      	adds	r7, #8
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
	...

08009d24 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009d28:	2200      	movs	r2, #0
 8009d2a:	4912      	ldr	r1, [pc, #72]	@ (8009d74 <MX_USB_DEVICE_Init+0x50>)
 8009d2c:	4812      	ldr	r0, [pc, #72]	@ (8009d78 <MX_USB_DEVICE_Init+0x54>)
 8009d2e:	f7fe fc83 	bl	8008638 <USBD_Init>
 8009d32:	4603      	mov	r3, r0
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d001      	beq.n	8009d3c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009d38:	f7f7 fc54 	bl	80015e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009d3c:	490f      	ldr	r1, [pc, #60]	@ (8009d7c <MX_USB_DEVICE_Init+0x58>)
 8009d3e:	480e      	ldr	r0, [pc, #56]	@ (8009d78 <MX_USB_DEVICE_Init+0x54>)
 8009d40:	f7fe fcaa 	bl	8008698 <USBD_RegisterClass>
 8009d44:	4603      	mov	r3, r0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d001      	beq.n	8009d4e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009d4a:	f7f7 fc4b 	bl	80015e4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009d4e:	490c      	ldr	r1, [pc, #48]	@ (8009d80 <MX_USB_DEVICE_Init+0x5c>)
 8009d50:	4809      	ldr	r0, [pc, #36]	@ (8009d78 <MX_USB_DEVICE_Init+0x54>)
 8009d52:	f7fe fbe1 	bl	8008518 <USBD_CDC_RegisterInterface>
 8009d56:	4603      	mov	r3, r0
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d001      	beq.n	8009d60 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009d5c:	f7f7 fc42 	bl	80015e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009d60:	4805      	ldr	r0, [pc, #20]	@ (8009d78 <MX_USB_DEVICE_Init+0x54>)
 8009d62:	f7fe fccf 	bl	8008704 <USBD_Start>
 8009d66:	4603      	mov	r3, r0
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d001      	beq.n	8009d70 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009d6c:	f7f7 fc3a 	bl	80015e4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009d70:	bf00      	nop
 8009d72:	bd80      	pop	{r7, pc}
 8009d74:	200000c0 	.word	0x200000c0
 8009d78:	20000514 	.word	0x20000514
 8009d7c:	2000002c 	.word	0x2000002c
 8009d80:	200000ac 	.word	0x200000ac

08009d84 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009d88:	2200      	movs	r2, #0
 8009d8a:	4905      	ldr	r1, [pc, #20]	@ (8009da0 <CDC_Init_FS+0x1c>)
 8009d8c:	4805      	ldr	r0, [pc, #20]	@ (8009da4 <CDC_Init_FS+0x20>)
 8009d8e:	f7fe fbdd 	bl	800854c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009d92:	4905      	ldr	r1, [pc, #20]	@ (8009da8 <CDC_Init_FS+0x24>)
 8009d94:	4803      	ldr	r0, [pc, #12]	@ (8009da4 <CDC_Init_FS+0x20>)
 8009d96:	f7fe fbfb 	bl	8008590 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009d9a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	bd80      	pop	{r7, pc}
 8009da0:	20000bf0 	.word	0x20000bf0
 8009da4:	20000514 	.word	0x20000514
 8009da8:	200007f0 	.word	0x200007f0

08009dac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009dac:	b480      	push	{r7}
 8009dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009db0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr

08009dbc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b083      	sub	sp, #12
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	6039      	str	r1, [r7, #0]
 8009dc6:	71fb      	strb	r3, [r7, #7]
 8009dc8:	4613      	mov	r3, r2
 8009dca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009dcc:	79fb      	ldrb	r3, [r7, #7]
 8009dce:	2b23      	cmp	r3, #35	@ 0x23
 8009dd0:	d84a      	bhi.n	8009e68 <CDC_Control_FS+0xac>
 8009dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8009dd8 <CDC_Control_FS+0x1c>)
 8009dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd8:	08009e69 	.word	0x08009e69
 8009ddc:	08009e69 	.word	0x08009e69
 8009de0:	08009e69 	.word	0x08009e69
 8009de4:	08009e69 	.word	0x08009e69
 8009de8:	08009e69 	.word	0x08009e69
 8009dec:	08009e69 	.word	0x08009e69
 8009df0:	08009e69 	.word	0x08009e69
 8009df4:	08009e69 	.word	0x08009e69
 8009df8:	08009e69 	.word	0x08009e69
 8009dfc:	08009e69 	.word	0x08009e69
 8009e00:	08009e69 	.word	0x08009e69
 8009e04:	08009e69 	.word	0x08009e69
 8009e08:	08009e69 	.word	0x08009e69
 8009e0c:	08009e69 	.word	0x08009e69
 8009e10:	08009e69 	.word	0x08009e69
 8009e14:	08009e69 	.word	0x08009e69
 8009e18:	08009e69 	.word	0x08009e69
 8009e1c:	08009e69 	.word	0x08009e69
 8009e20:	08009e69 	.word	0x08009e69
 8009e24:	08009e69 	.word	0x08009e69
 8009e28:	08009e69 	.word	0x08009e69
 8009e2c:	08009e69 	.word	0x08009e69
 8009e30:	08009e69 	.word	0x08009e69
 8009e34:	08009e69 	.word	0x08009e69
 8009e38:	08009e69 	.word	0x08009e69
 8009e3c:	08009e69 	.word	0x08009e69
 8009e40:	08009e69 	.word	0x08009e69
 8009e44:	08009e69 	.word	0x08009e69
 8009e48:	08009e69 	.word	0x08009e69
 8009e4c:	08009e69 	.word	0x08009e69
 8009e50:	08009e69 	.word	0x08009e69
 8009e54:	08009e69 	.word	0x08009e69
 8009e58:	08009e69 	.word	0x08009e69
 8009e5c:	08009e69 	.word	0x08009e69
 8009e60:	08009e69 	.word	0x08009e69
 8009e64:	08009e69 	.word	0x08009e69
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009e68:	bf00      	nop
  }

  return (USBD_OK);
 8009e6a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	370c      	adds	r7, #12
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr

08009e78 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009e82:	6879      	ldr	r1, [r7, #4]
 8009e84:	4805      	ldr	r0, [pc, #20]	@ (8009e9c <CDC_Receive_FS+0x24>)
 8009e86:	f7fe fb83 	bl	8008590 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009e8a:	4804      	ldr	r0, [pc, #16]	@ (8009e9c <CDC_Receive_FS+0x24>)
 8009e8c:	f7fe fb9e 	bl	80085cc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009e90:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3708      	adds	r7, #8
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	bf00      	nop
 8009e9c:	20000514 	.word	0x20000514

08009ea0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b087      	sub	sp, #28
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	60b9      	str	r1, [r7, #8]
 8009eaa:	4613      	mov	r3, r2
 8009eac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009eb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	371c      	adds	r7, #28
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr
	...

08009ec4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b083      	sub	sp, #12
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	4603      	mov	r3, r0
 8009ecc:	6039      	str	r1, [r7, #0]
 8009ece:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	2212      	movs	r2, #18
 8009ed4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009ed6:	4b03      	ldr	r3, [pc, #12]	@ (8009ee4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	370c      	adds	r7, #12
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr
 8009ee4:	200000e0 	.word	0x200000e0

08009ee8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b083      	sub	sp, #12
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	4603      	mov	r3, r0
 8009ef0:	6039      	str	r1, [r7, #0]
 8009ef2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	2204      	movs	r2, #4
 8009ef8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009efa:	4b03      	ldr	r3, [pc, #12]	@ (8009f08 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	370c      	adds	r7, #12
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr
 8009f08:	20000100 	.word	0x20000100

08009f0c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	4603      	mov	r3, r0
 8009f14:	6039      	str	r1, [r7, #0]
 8009f16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009f18:	79fb      	ldrb	r3, [r7, #7]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d105      	bne.n	8009f2a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009f1e:	683a      	ldr	r2, [r7, #0]
 8009f20:	4907      	ldr	r1, [pc, #28]	@ (8009f40 <USBD_FS_ProductStrDescriptor+0x34>)
 8009f22:	4808      	ldr	r0, [pc, #32]	@ (8009f44 <USBD_FS_ProductStrDescriptor+0x38>)
 8009f24:	f7ff fdc2 	bl	8009aac <USBD_GetString>
 8009f28:	e004      	b.n	8009f34 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009f2a:	683a      	ldr	r2, [r7, #0]
 8009f2c:	4904      	ldr	r1, [pc, #16]	@ (8009f40 <USBD_FS_ProductStrDescriptor+0x34>)
 8009f2e:	4805      	ldr	r0, [pc, #20]	@ (8009f44 <USBD_FS_ProductStrDescriptor+0x38>)
 8009f30:	f7ff fdbc 	bl	8009aac <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f34:	4b02      	ldr	r3, [pc, #8]	@ (8009f40 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3708      	adds	r7, #8
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
 8009f3e:	bf00      	nop
 8009f40:	20000ff0 	.word	0x20000ff0
 8009f44:	0800a868 	.word	0x0800a868

08009f48 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	4603      	mov	r3, r0
 8009f50:	6039      	str	r1, [r7, #0]
 8009f52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009f54:	683a      	ldr	r2, [r7, #0]
 8009f56:	4904      	ldr	r1, [pc, #16]	@ (8009f68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009f58:	4804      	ldr	r0, [pc, #16]	@ (8009f6c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009f5a:	f7ff fda7 	bl	8009aac <USBD_GetString>
  return USBD_StrDesc;
 8009f5e:	4b02      	ldr	r3, [pc, #8]	@ (8009f68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3708      	adds	r7, #8
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}
 8009f68:	20000ff0 	.word	0x20000ff0
 8009f6c:	0800a880 	.word	0x0800a880

08009f70 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b082      	sub	sp, #8
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	4603      	mov	r3, r0
 8009f78:	6039      	str	r1, [r7, #0]
 8009f7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	221a      	movs	r2, #26
 8009f80:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009f82:	f000 f855 	bl	800a030 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009f86:	4b02      	ldr	r3, [pc, #8]	@ (8009f90 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3708      	adds	r7, #8
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}
 8009f90:	20000104 	.word	0x20000104

08009f94 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b082      	sub	sp, #8
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	6039      	str	r1, [r7, #0]
 8009f9e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009fa0:	79fb      	ldrb	r3, [r7, #7]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d105      	bne.n	8009fb2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009fa6:	683a      	ldr	r2, [r7, #0]
 8009fa8:	4907      	ldr	r1, [pc, #28]	@ (8009fc8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009faa:	4808      	ldr	r0, [pc, #32]	@ (8009fcc <USBD_FS_ConfigStrDescriptor+0x38>)
 8009fac:	f7ff fd7e 	bl	8009aac <USBD_GetString>
 8009fb0:	e004      	b.n	8009fbc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009fb2:	683a      	ldr	r2, [r7, #0]
 8009fb4:	4904      	ldr	r1, [pc, #16]	@ (8009fc8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009fb6:	4805      	ldr	r0, [pc, #20]	@ (8009fcc <USBD_FS_ConfigStrDescriptor+0x38>)
 8009fb8:	f7ff fd78 	bl	8009aac <USBD_GetString>
  }
  return USBD_StrDesc;
 8009fbc:	4b02      	ldr	r3, [pc, #8]	@ (8009fc8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3708      	adds	r7, #8
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
 8009fc6:	bf00      	nop
 8009fc8:	20000ff0 	.word	0x20000ff0
 8009fcc:	0800a894 	.word	0x0800a894

08009fd0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b082      	sub	sp, #8
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	6039      	str	r1, [r7, #0]
 8009fda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009fdc:	79fb      	ldrb	r3, [r7, #7]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d105      	bne.n	8009fee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009fe2:	683a      	ldr	r2, [r7, #0]
 8009fe4:	4907      	ldr	r1, [pc, #28]	@ (800a004 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009fe6:	4808      	ldr	r0, [pc, #32]	@ (800a008 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009fe8:	f7ff fd60 	bl	8009aac <USBD_GetString>
 8009fec:	e004      	b.n	8009ff8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009fee:	683a      	ldr	r2, [r7, #0]
 8009ff0:	4904      	ldr	r1, [pc, #16]	@ (800a004 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009ff2:	4805      	ldr	r0, [pc, #20]	@ (800a008 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009ff4:	f7ff fd5a 	bl	8009aac <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ff8:	4b02      	ldr	r3, [pc, #8]	@ (800a004 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3708      	adds	r7, #8
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop
 800a004:	20000ff0 	.word	0x20000ff0
 800a008:	0800a8a0 	.word	0x0800a8a0

0800a00c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b083      	sub	sp, #12
 800a010:	af00      	add	r7, sp, #0
 800a012:	4603      	mov	r3, r0
 800a014:	6039      	str	r1, [r7, #0]
 800a016:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	220c      	movs	r2, #12
 800a01c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800a01e:	4b03      	ldr	r3, [pc, #12]	@ (800a02c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800a020:	4618      	mov	r0, r3
 800a022:	370c      	adds	r7, #12
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr
 800a02c:	200000f4 	.word	0x200000f4

0800a030 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b084      	sub	sp, #16
 800a034:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a036:	4b0f      	ldr	r3, [pc, #60]	@ (800a074 <Get_SerialNum+0x44>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a03c:	4b0e      	ldr	r3, [pc, #56]	@ (800a078 <Get_SerialNum+0x48>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a042:	4b0e      	ldr	r3, [pc, #56]	@ (800a07c <Get_SerialNum+0x4c>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a048:	68fa      	ldr	r2, [r7, #12]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	4413      	add	r3, r2
 800a04e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d009      	beq.n	800a06a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a056:	2208      	movs	r2, #8
 800a058:	4909      	ldr	r1, [pc, #36]	@ (800a080 <Get_SerialNum+0x50>)
 800a05a:	68f8      	ldr	r0, [r7, #12]
 800a05c:	f000 f814 	bl	800a088 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a060:	2204      	movs	r2, #4
 800a062:	4908      	ldr	r1, [pc, #32]	@ (800a084 <Get_SerialNum+0x54>)
 800a064:	68b8      	ldr	r0, [r7, #8]
 800a066:	f000 f80f 	bl	800a088 <IntToUnicode>
  }
}
 800a06a:	bf00      	nop
 800a06c:	3710      	adds	r7, #16
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
 800a072:	bf00      	nop
 800a074:	1fff7a10 	.word	0x1fff7a10
 800a078:	1fff7a14 	.word	0x1fff7a14
 800a07c:	1fff7a18 	.word	0x1fff7a18
 800a080:	20000106 	.word	0x20000106
 800a084:	20000116 	.word	0x20000116

0800a088 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a088:	b480      	push	{r7}
 800a08a:	b087      	sub	sp, #28
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	60f8      	str	r0, [r7, #12]
 800a090:	60b9      	str	r1, [r7, #8]
 800a092:	4613      	mov	r3, r2
 800a094:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a096:	2300      	movs	r3, #0
 800a098:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a09a:	2300      	movs	r3, #0
 800a09c:	75fb      	strb	r3, [r7, #23]
 800a09e:	e027      	b.n	800a0f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	0f1b      	lsrs	r3, r3, #28
 800a0a4:	2b09      	cmp	r3, #9
 800a0a6:	d80b      	bhi.n	800a0c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	0f1b      	lsrs	r3, r3, #28
 800a0ac:	b2da      	uxtb	r2, r3
 800a0ae:	7dfb      	ldrb	r3, [r7, #23]
 800a0b0:	005b      	lsls	r3, r3, #1
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	440b      	add	r3, r1
 800a0b8:	3230      	adds	r2, #48	@ 0x30
 800a0ba:	b2d2      	uxtb	r2, r2
 800a0bc:	701a      	strb	r2, [r3, #0]
 800a0be:	e00a      	b.n	800a0d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	0f1b      	lsrs	r3, r3, #28
 800a0c4:	b2da      	uxtb	r2, r3
 800a0c6:	7dfb      	ldrb	r3, [r7, #23]
 800a0c8:	005b      	lsls	r3, r3, #1
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	440b      	add	r3, r1
 800a0d0:	3237      	adds	r2, #55	@ 0x37
 800a0d2:	b2d2      	uxtb	r2, r2
 800a0d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	011b      	lsls	r3, r3, #4
 800a0da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a0dc:	7dfb      	ldrb	r3, [r7, #23]
 800a0de:	005b      	lsls	r3, r3, #1
 800a0e0:	3301      	adds	r3, #1
 800a0e2:	68ba      	ldr	r2, [r7, #8]
 800a0e4:	4413      	add	r3, r2
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a0ea:	7dfb      	ldrb	r3, [r7, #23]
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	75fb      	strb	r3, [r7, #23]
 800a0f0:	7dfa      	ldrb	r2, [r7, #23]
 800a0f2:	79fb      	ldrb	r3, [r7, #7]
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	d3d3      	bcc.n	800a0a0 <IntToUnicode+0x18>
  }
}
 800a0f8:	bf00      	nop
 800a0fa:	bf00      	nop
 800a0fc:	371c      	adds	r7, #28
 800a0fe:	46bd      	mov	sp, r7
 800a100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a104:	4770      	bx	lr
	...

0800a108 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b0a0      	sub	sp, #128	@ 0x80
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a110:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800a114:	2200      	movs	r2, #0
 800a116:	601a      	str	r2, [r3, #0]
 800a118:	605a      	str	r2, [r3, #4]
 800a11a:	609a      	str	r2, [r3, #8]
 800a11c:	60da      	str	r2, [r3, #12]
 800a11e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a120:	f107 0310 	add.w	r3, r7, #16
 800a124:	225c      	movs	r2, #92	@ 0x5c
 800a126:	2100      	movs	r1, #0
 800a128:	4618      	mov	r0, r3
 800a12a:	f000 fb65 	bl	800a7f8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a136:	d149      	bne.n	800a1cc <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800a138:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a13c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800a13e:	2300      	movs	r3, #0
 800a140:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a142:	f107 0310 	add.w	r3, r7, #16
 800a146:	4618      	mov	r0, r3
 800a148:	f7fa f83c 	bl	80041c4 <HAL_RCCEx_PeriphCLKConfig>
 800a14c:	4603      	mov	r3, r0
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d001      	beq.n	800a156 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800a152:	f7f7 fa47 	bl	80015e4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a156:	2300      	movs	r3, #0
 800a158:	60fb      	str	r3, [r7, #12]
 800a15a:	4b1e      	ldr	r3, [pc, #120]	@ (800a1d4 <HAL_PCD_MspInit+0xcc>)
 800a15c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a15e:	4a1d      	ldr	r2, [pc, #116]	@ (800a1d4 <HAL_PCD_MspInit+0xcc>)
 800a160:	f043 0301 	orr.w	r3, r3, #1
 800a164:	6313      	str	r3, [r2, #48]	@ 0x30
 800a166:	4b1b      	ldr	r3, [pc, #108]	@ (800a1d4 <HAL_PCD_MspInit+0xcc>)
 800a168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a16a:	f003 0301 	and.w	r3, r3, #1
 800a16e:	60fb      	str	r3, [r7, #12]
 800a170:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a172:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a176:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a178:	2302      	movs	r3, #2
 800a17a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a17c:	2300      	movs	r3, #0
 800a17e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a180:	2303      	movs	r3, #3
 800a182:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a184:	230a      	movs	r3, #10
 800a186:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a188:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800a18c:	4619      	mov	r1, r3
 800a18e:	4812      	ldr	r0, [pc, #72]	@ (800a1d8 <HAL_PCD_MspInit+0xd0>)
 800a190:	f7f8 f942 	bl	8002418 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a194:	4b0f      	ldr	r3, [pc, #60]	@ (800a1d4 <HAL_PCD_MspInit+0xcc>)
 800a196:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a198:	4a0e      	ldr	r2, [pc, #56]	@ (800a1d4 <HAL_PCD_MspInit+0xcc>)
 800a19a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a19e:	6353      	str	r3, [r2, #52]	@ 0x34
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	60bb      	str	r3, [r7, #8]
 800a1a4:	4b0b      	ldr	r3, [pc, #44]	@ (800a1d4 <HAL_PCD_MspInit+0xcc>)
 800a1a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1a8:	4a0a      	ldr	r2, [pc, #40]	@ (800a1d4 <HAL_PCD_MspInit+0xcc>)
 800a1aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a1ae:	6453      	str	r3, [r2, #68]	@ 0x44
 800a1b0:	4b08      	ldr	r3, [pc, #32]	@ (800a1d4 <HAL_PCD_MspInit+0xcc>)
 800a1b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a1b8:	60bb      	str	r3, [r7, #8]
 800a1ba:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a1bc:	2200      	movs	r2, #0
 800a1be:	2100      	movs	r1, #0
 800a1c0:	2043      	movs	r0, #67	@ 0x43
 800a1c2:	f7f8 f860 	bl	8002286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a1c6:	2043      	movs	r0, #67	@ 0x43
 800a1c8:	f7f8 f879 	bl	80022be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a1cc:	bf00      	nop
 800a1ce:	3780      	adds	r7, #128	@ 0x80
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}
 800a1d4:	40023800 	.word	0x40023800
 800a1d8:	40020000 	.word	0x40020000

0800a1dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	4610      	mov	r0, r2
 800a1f4:	f7fe fad3 	bl	800879e <USBD_LL_SetupStage>
}
 800a1f8:	bf00      	nop
 800a1fa:	3708      	adds	r7, #8
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}

0800a200 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b082      	sub	sp, #8
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	460b      	mov	r3, r1
 800a20a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800a212:	78fa      	ldrb	r2, [r7, #3]
 800a214:	6879      	ldr	r1, [r7, #4]
 800a216:	4613      	mov	r3, r2
 800a218:	00db      	lsls	r3, r3, #3
 800a21a:	4413      	add	r3, r2
 800a21c:	009b      	lsls	r3, r3, #2
 800a21e:	440b      	add	r3, r1
 800a220:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800a224:	681a      	ldr	r2, [r3, #0]
 800a226:	78fb      	ldrb	r3, [r7, #3]
 800a228:	4619      	mov	r1, r3
 800a22a:	f7fe fb0d 	bl	8008848 <USBD_LL_DataOutStage>
}
 800a22e:	bf00      	nop
 800a230:	3708      	adds	r7, #8
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}

0800a236 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a236:	b580      	push	{r7, lr}
 800a238:	b082      	sub	sp, #8
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	6078      	str	r0, [r7, #4]
 800a23e:	460b      	mov	r3, r1
 800a240:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800a248:	78fa      	ldrb	r2, [r7, #3]
 800a24a:	6879      	ldr	r1, [r7, #4]
 800a24c:	4613      	mov	r3, r2
 800a24e:	00db      	lsls	r3, r3, #3
 800a250:	4413      	add	r3, r2
 800a252:	009b      	lsls	r3, r3, #2
 800a254:	440b      	add	r3, r1
 800a256:	334c      	adds	r3, #76	@ 0x4c
 800a258:	681a      	ldr	r2, [r3, #0]
 800a25a:	78fb      	ldrb	r3, [r7, #3]
 800a25c:	4619      	mov	r1, r3
 800a25e:	f7fe fba6 	bl	80089ae <USBD_LL_DataInStage>
}
 800a262:	bf00      	nop
 800a264:	3708      	adds	r7, #8
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}

0800a26a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a26a:	b580      	push	{r7, lr}
 800a26c:	b082      	sub	sp, #8
 800a26e:	af00      	add	r7, sp, #0
 800a270:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800a278:	4618      	mov	r0, r3
 800a27a:	f7fe fcda 	bl	8008c32 <USBD_LL_SOF>
}
 800a27e:	bf00      	nop
 800a280:	3708      	adds	r7, #8
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}

0800a286 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a286:	b580      	push	{r7, lr}
 800a288:	b084      	sub	sp, #16
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a28e:	2301      	movs	r3, #1
 800a290:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	68db      	ldr	r3, [r3, #12]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d102      	bne.n	800a2a0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a29a:	2300      	movs	r3, #0
 800a29c:	73fb      	strb	r3, [r7, #15]
 800a29e:	e008      	b.n	800a2b2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	68db      	ldr	r3, [r3, #12]
 800a2a4:	2b02      	cmp	r3, #2
 800a2a6:	d102      	bne.n	800a2ae <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	73fb      	strb	r3, [r7, #15]
 800a2ac:	e001      	b.n	800a2b2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a2ae:	f7f7 f999 	bl	80015e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800a2b8:	7bfa      	ldrb	r2, [r7, #15]
 800a2ba:	4611      	mov	r1, r2
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f7fe fc7a 	bl	8008bb6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f7fe fc22 	bl	8008b12 <USBD_LL_Reset>
}
 800a2ce:	bf00      	nop
 800a2d0:	3710      	adds	r7, #16
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
	...

0800a2d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b082      	sub	sp, #8
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f7fe fc75 	bl	8008bd6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	6812      	ldr	r2, [r2, #0]
 800a2fa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a2fe:	f043 0301 	orr.w	r3, r3, #1
 800a302:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6a1b      	ldr	r3, [r3, #32]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d005      	beq.n	800a318 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a30c:	4b04      	ldr	r3, [pc, #16]	@ (800a320 <HAL_PCD_SuspendCallback+0x48>)
 800a30e:	691b      	ldr	r3, [r3, #16]
 800a310:	4a03      	ldr	r2, [pc, #12]	@ (800a320 <HAL_PCD_SuspendCallback+0x48>)
 800a312:	f043 0306 	orr.w	r3, r3, #6
 800a316:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a318:	bf00      	nop
 800a31a:	3708      	adds	r7, #8
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	e000ed00 	.word	0xe000ed00

0800a324 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b082      	sub	sp, #8
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800a332:	4618      	mov	r0, r3
 800a334:	f7fe fc65 	bl	8008c02 <USBD_LL_Resume>
}
 800a338:	bf00      	nop
 800a33a:	3708      	adds	r7, #8
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	460b      	mov	r3, r1
 800a34a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800a352:	78fa      	ldrb	r2, [r7, #3]
 800a354:	4611      	mov	r1, r2
 800a356:	4618      	mov	r0, r3
 800a358:	f7fe fcbd 	bl	8008cd6 <USBD_LL_IsoOUTIncomplete>
}
 800a35c:	bf00      	nop
 800a35e:	3708      	adds	r7, #8
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}

0800a364 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b082      	sub	sp, #8
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	460b      	mov	r3, r1
 800a36e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800a376:	78fa      	ldrb	r2, [r7, #3]
 800a378:	4611      	mov	r1, r2
 800a37a:	4618      	mov	r0, r3
 800a37c:	f7fe fc79 	bl	8008c72 <USBD_LL_IsoINIncomplete>
}
 800a380:	bf00      	nop
 800a382:	3708      	adds	r7, #8
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}

0800a388 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b082      	sub	sp, #8
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800a396:	4618      	mov	r0, r3
 800a398:	f7fe fccf 	bl	8008d3a <USBD_LL_DevConnected>
}
 800a39c:	bf00      	nop
 800a39e:	3708      	adds	r7, #8
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b082      	sub	sp, #8
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f7fe fccc 	bl	8008d50 <USBD_LL_DevDisconnected>
}
 800a3b8:	bf00      	nop
 800a3ba:	3708      	adds	r7, #8
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}

0800a3c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b082      	sub	sp, #8
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	781b      	ldrb	r3, [r3, #0]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d13c      	bne.n	800a44a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a3d0:	4a20      	ldr	r2, [pc, #128]	@ (800a454 <USBD_LL_Init+0x94>)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	4a1e      	ldr	r2, [pc, #120]	@ (800a454 <USBD_LL_Init+0x94>)
 800a3dc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a3e0:	4b1c      	ldr	r3, [pc, #112]	@ (800a454 <USBD_LL_Init+0x94>)
 800a3e2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a3e6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800a3e8:	4b1a      	ldr	r3, [pc, #104]	@ (800a454 <USBD_LL_Init+0x94>)
 800a3ea:	2206      	movs	r2, #6
 800a3ec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a3ee:	4b19      	ldr	r3, [pc, #100]	@ (800a454 <USBD_LL_Init+0x94>)
 800a3f0:	2202      	movs	r2, #2
 800a3f2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a3f4:	4b17      	ldr	r3, [pc, #92]	@ (800a454 <USBD_LL_Init+0x94>)
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a3fa:	4b16      	ldr	r3, [pc, #88]	@ (800a454 <USBD_LL_Init+0x94>)
 800a3fc:	2202      	movs	r2, #2
 800a3fe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a400:	4b14      	ldr	r3, [pc, #80]	@ (800a454 <USBD_LL_Init+0x94>)
 800a402:	2200      	movs	r2, #0
 800a404:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a406:	4b13      	ldr	r3, [pc, #76]	@ (800a454 <USBD_LL_Init+0x94>)
 800a408:	2200      	movs	r2, #0
 800a40a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a40c:	4b11      	ldr	r3, [pc, #68]	@ (800a454 <USBD_LL_Init+0x94>)
 800a40e:	2200      	movs	r2, #0
 800a410:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a412:	4b10      	ldr	r3, [pc, #64]	@ (800a454 <USBD_LL_Init+0x94>)
 800a414:	2200      	movs	r2, #0
 800a416:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a418:	4b0e      	ldr	r3, [pc, #56]	@ (800a454 <USBD_LL_Init+0x94>)
 800a41a:	2200      	movs	r2, #0
 800a41c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a41e:	480d      	ldr	r0, [pc, #52]	@ (800a454 <USBD_LL_Init+0x94>)
 800a420:	f7f8 faec 	bl	80029fc <HAL_PCD_Init>
 800a424:	4603      	mov	r3, r0
 800a426:	2b00      	cmp	r3, #0
 800a428:	d001      	beq.n	800a42e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a42a:	f7f7 f8db 	bl	80015e4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a42e:	2180      	movs	r1, #128	@ 0x80
 800a430:	4808      	ldr	r0, [pc, #32]	@ (800a454 <USBD_LL_Init+0x94>)
 800a432:	f7f9 fd78 	bl	8003f26 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a436:	2240      	movs	r2, #64	@ 0x40
 800a438:	2100      	movs	r1, #0
 800a43a:	4806      	ldr	r0, [pc, #24]	@ (800a454 <USBD_LL_Init+0x94>)
 800a43c:	f7f9 fd2c 	bl	8003e98 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a440:	2280      	movs	r2, #128	@ 0x80
 800a442:	2101      	movs	r1, #1
 800a444:	4803      	ldr	r0, [pc, #12]	@ (800a454 <USBD_LL_Init+0x94>)
 800a446:	f7f9 fd27 	bl	8003e98 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a44a:	2300      	movs	r3, #0
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3708      	adds	r7, #8
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}
 800a454:	200011f0 	.word	0x200011f0

0800a458 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b084      	sub	sp, #16
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a460:	2300      	movs	r3, #0
 800a462:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a464:	2300      	movs	r3, #0
 800a466:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a46e:	4618      	mov	r0, r3
 800a470:	f7f8 fbe8 	bl	8002c44 <HAL_PCD_Start>
 800a474:	4603      	mov	r3, r0
 800a476:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a478:	7bfb      	ldrb	r3, [r7, #15]
 800a47a:	4618      	mov	r0, r3
 800a47c:	f000 f990 	bl	800a7a0 <USBD_Get_USB_Status>
 800a480:	4603      	mov	r3, r0
 800a482:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a484:	7bbb      	ldrb	r3, [r7, #14]
}
 800a486:	4618      	mov	r0, r3
 800a488:	3710      	adds	r7, #16
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}

0800a48e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a48e:	b580      	push	{r7, lr}
 800a490:	b084      	sub	sp, #16
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
 800a496:	4608      	mov	r0, r1
 800a498:	4611      	mov	r1, r2
 800a49a:	461a      	mov	r2, r3
 800a49c:	4603      	mov	r3, r0
 800a49e:	70fb      	strb	r3, [r7, #3]
 800a4a0:	460b      	mov	r3, r1
 800a4a2:	70bb      	strb	r3, [r7, #2]
 800a4a4:	4613      	mov	r3, r2
 800a4a6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a4b6:	78bb      	ldrb	r3, [r7, #2]
 800a4b8:	883a      	ldrh	r2, [r7, #0]
 800a4ba:	78f9      	ldrb	r1, [r7, #3]
 800a4bc:	f7f9 f8e6 	bl	800368c <HAL_PCD_EP_Open>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4c4:	7bfb      	ldrb	r3, [r7, #15]
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f000 f96a 	bl	800a7a0 <USBD_Get_USB_Status>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3710      	adds	r7, #16
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}

0800a4da <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4da:	b580      	push	{r7, lr}
 800a4dc:	b084      	sub	sp, #16
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	6078      	str	r0, [r7, #4]
 800a4e2:	460b      	mov	r3, r1
 800a4e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a4f4:	78fa      	ldrb	r2, [r7, #3]
 800a4f6:	4611      	mov	r1, r2
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f7f9 f92f 	bl	800375c <HAL_PCD_EP_Close>
 800a4fe:	4603      	mov	r3, r0
 800a500:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a502:	7bfb      	ldrb	r3, [r7, #15]
 800a504:	4618      	mov	r0, r3
 800a506:	f000 f94b 	bl	800a7a0 <USBD_Get_USB_Status>
 800a50a:	4603      	mov	r3, r0
 800a50c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a50e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a510:	4618      	mov	r0, r3
 800a512:	3710      	adds	r7, #16
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}

0800a518 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b084      	sub	sp, #16
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	460b      	mov	r3, r1
 800a522:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a524:	2300      	movs	r3, #0
 800a526:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a528:	2300      	movs	r3, #0
 800a52a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a532:	78fa      	ldrb	r2, [r7, #3]
 800a534:	4611      	mov	r1, r2
 800a536:	4618      	mov	r0, r3
 800a538:	f7f9 fa07 	bl	800394a <HAL_PCD_EP_SetStall>
 800a53c:	4603      	mov	r3, r0
 800a53e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a540:	7bfb      	ldrb	r3, [r7, #15]
 800a542:	4618      	mov	r0, r3
 800a544:	f000 f92c 	bl	800a7a0 <USBD_Get_USB_Status>
 800a548:	4603      	mov	r3, r0
 800a54a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a54c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3710      	adds	r7, #16
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}

0800a556 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a556:	b580      	push	{r7, lr}
 800a558:	b084      	sub	sp, #16
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
 800a55e:	460b      	mov	r3, r1
 800a560:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a562:	2300      	movs	r3, #0
 800a564:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a566:	2300      	movs	r3, #0
 800a568:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a570:	78fa      	ldrb	r2, [r7, #3]
 800a572:	4611      	mov	r1, r2
 800a574:	4618      	mov	r0, r3
 800a576:	f7f9 fa4c 	bl	8003a12 <HAL_PCD_EP_ClrStall>
 800a57a:	4603      	mov	r3, r0
 800a57c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a57e:	7bfb      	ldrb	r3, [r7, #15]
 800a580:	4618      	mov	r0, r3
 800a582:	f000 f90d 	bl	800a7a0 <USBD_Get_USB_Status>
 800a586:	4603      	mov	r3, r0
 800a588:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a58a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3710      	adds	r7, #16
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a594:	b480      	push	{r7}
 800a596:	b085      	sub	sp, #20
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
 800a59c:	460b      	mov	r3, r1
 800a59e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a5a6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a5a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	da0b      	bge.n	800a5c8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a5b0:	78fb      	ldrb	r3, [r7, #3]
 800a5b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a5b6:	68f9      	ldr	r1, [r7, #12]
 800a5b8:	4613      	mov	r3, r2
 800a5ba:	00db      	lsls	r3, r3, #3
 800a5bc:	4413      	add	r3, r2
 800a5be:	009b      	lsls	r3, r3, #2
 800a5c0:	440b      	add	r3, r1
 800a5c2:	333e      	adds	r3, #62	@ 0x3e
 800a5c4:	781b      	ldrb	r3, [r3, #0]
 800a5c6:	e00b      	b.n	800a5e0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a5c8:	78fb      	ldrb	r3, [r7, #3]
 800a5ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a5ce:	68f9      	ldr	r1, [r7, #12]
 800a5d0:	4613      	mov	r3, r2
 800a5d2:	00db      	lsls	r3, r3, #3
 800a5d4:	4413      	add	r3, r2
 800a5d6:	009b      	lsls	r3, r3, #2
 800a5d8:	440b      	add	r3, r1
 800a5da:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800a5de:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3714      	adds	r7, #20
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr

0800a5ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b084      	sub	sp, #16
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	460b      	mov	r3, r1
 800a5f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a606:	78fa      	ldrb	r2, [r7, #3]
 800a608:	4611      	mov	r1, r2
 800a60a:	4618      	mov	r0, r3
 800a60c:	f7f9 f819 	bl	8003642 <HAL_PCD_SetAddress>
 800a610:	4603      	mov	r3, r0
 800a612:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a614:	7bfb      	ldrb	r3, [r7, #15]
 800a616:	4618      	mov	r0, r3
 800a618:	f000 f8c2 	bl	800a7a0 <USBD_Get_USB_Status>
 800a61c:	4603      	mov	r3, r0
 800a61e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a620:	7bbb      	ldrb	r3, [r7, #14]
}
 800a622:	4618      	mov	r0, r3
 800a624:	3710      	adds	r7, #16
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}

0800a62a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a62a:	b580      	push	{r7, lr}
 800a62c:	b086      	sub	sp, #24
 800a62e:	af00      	add	r7, sp, #0
 800a630:	60f8      	str	r0, [r7, #12]
 800a632:	607a      	str	r2, [r7, #4]
 800a634:	603b      	str	r3, [r7, #0]
 800a636:	460b      	mov	r3, r1
 800a638:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a63a:	2300      	movs	r3, #0
 800a63c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a63e:	2300      	movs	r3, #0
 800a640:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a648:	7af9      	ldrb	r1, [r7, #11]
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	687a      	ldr	r2, [r7, #4]
 800a64e:	f7f9 f932 	bl	80038b6 <HAL_PCD_EP_Transmit>
 800a652:	4603      	mov	r3, r0
 800a654:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a656:	7dfb      	ldrb	r3, [r7, #23]
 800a658:	4618      	mov	r0, r3
 800a65a:	f000 f8a1 	bl	800a7a0 <USBD_Get_USB_Status>
 800a65e:	4603      	mov	r3, r0
 800a660:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a662:	7dbb      	ldrb	r3, [r7, #22]
}
 800a664:	4618      	mov	r0, r3
 800a666:	3718      	adds	r7, #24
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b086      	sub	sp, #24
 800a670:	af00      	add	r7, sp, #0
 800a672:	60f8      	str	r0, [r7, #12]
 800a674:	607a      	str	r2, [r7, #4]
 800a676:	603b      	str	r3, [r7, #0]
 800a678:	460b      	mov	r3, r1
 800a67a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a67c:	2300      	movs	r3, #0
 800a67e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a680:	2300      	movs	r3, #0
 800a682:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a68a:	7af9      	ldrb	r1, [r7, #11]
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	687a      	ldr	r2, [r7, #4]
 800a690:	f7f9 f8ae 	bl	80037f0 <HAL_PCD_EP_Receive>
 800a694:	4603      	mov	r3, r0
 800a696:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a698:	7dfb      	ldrb	r3, [r7, #23]
 800a69a:	4618      	mov	r0, r3
 800a69c:	f000 f880 	bl	800a7a0 <USBD_Get_USB_Status>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a6a4:	7dbb      	ldrb	r3, [r7, #22]
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3718      	adds	r7, #24
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}

0800a6ae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6ae:	b580      	push	{r7, lr}
 800a6b0:	b082      	sub	sp, #8
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
 800a6b6:	460b      	mov	r3, r1
 800a6b8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a6c0:	78fa      	ldrb	r2, [r7, #3]
 800a6c2:	4611      	mov	r1, r2
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f7f9 f8de 	bl	8003886 <HAL_PCD_EP_GetRxCount>
 800a6ca:	4603      	mov	r3, r0
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3708      	adds	r7, #8
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b082      	sub	sp, #8
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
 800a6dc:	460b      	mov	r3, r1
 800a6de:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a6e0:	78fb      	ldrb	r3, [r7, #3]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d002      	beq.n	800a6ec <HAL_PCDEx_LPM_Callback+0x18>
 800a6e6:	2b01      	cmp	r3, #1
 800a6e8:	d01f      	beq.n	800a72a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a6ea:	e03b      	b.n	800a764 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6a1b      	ldr	r3, [r3, #32]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d007      	beq.n	800a704 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800a6f4:	f7f6 fb82 	bl	8000dfc <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a6f8:	4b1c      	ldr	r3, [pc, #112]	@ (800a76c <HAL_PCDEx_LPM_Callback+0x98>)
 800a6fa:	691b      	ldr	r3, [r3, #16]
 800a6fc:	4a1b      	ldr	r2, [pc, #108]	@ (800a76c <HAL_PCDEx_LPM_Callback+0x98>)
 800a6fe:	f023 0306 	bic.w	r3, r3, #6
 800a702:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	687a      	ldr	r2, [r7, #4]
 800a710:	6812      	ldr	r2, [r2, #0]
 800a712:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a716:	f023 0301 	bic.w	r3, r3, #1
 800a71a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800a722:	4618      	mov	r0, r3
 800a724:	f7fe fa6d 	bl	8008c02 <USBD_LL_Resume>
    break;
 800a728:	e01c      	b.n	800a764 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	687a      	ldr	r2, [r7, #4]
 800a736:	6812      	ldr	r2, [r2, #0]
 800a738:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a73c:	f043 0301 	orr.w	r3, r3, #1
 800a740:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800a748:	4618      	mov	r0, r3
 800a74a:	f7fe fa44 	bl	8008bd6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6a1b      	ldr	r3, [r3, #32]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d005      	beq.n	800a762 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a756:	4b05      	ldr	r3, [pc, #20]	@ (800a76c <HAL_PCDEx_LPM_Callback+0x98>)
 800a758:	691b      	ldr	r3, [r3, #16]
 800a75a:	4a04      	ldr	r2, [pc, #16]	@ (800a76c <HAL_PCDEx_LPM_Callback+0x98>)
 800a75c:	f043 0306 	orr.w	r3, r3, #6
 800a760:	6113      	str	r3, [r2, #16]
    break;
 800a762:	bf00      	nop
}
 800a764:	bf00      	nop
 800a766:	3708      	adds	r7, #8
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}
 800a76c:	e000ed00 	.word	0xe000ed00

0800a770 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a770:	b480      	push	{r7}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a778:	4b03      	ldr	r3, [pc, #12]	@ (800a788 <USBD_static_malloc+0x18>)
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	370c      	adds	r7, #12
 800a77e:	46bd      	mov	sp, r7
 800a780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a784:	4770      	bx	lr
 800a786:	bf00      	nop
 800a788:	200016fc 	.word	0x200016fc

0800a78c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b083      	sub	sp, #12
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]

}
 800a794:	bf00      	nop
 800a796:	370c      	adds	r7, #12
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr

0800a7a0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b085      	sub	sp, #20
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a7ae:	79fb      	ldrb	r3, [r7, #7]
 800a7b0:	2b03      	cmp	r3, #3
 800a7b2:	d817      	bhi.n	800a7e4 <USBD_Get_USB_Status+0x44>
 800a7b4:	a201      	add	r2, pc, #4	@ (adr r2, 800a7bc <USBD_Get_USB_Status+0x1c>)
 800a7b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7ba:	bf00      	nop
 800a7bc:	0800a7cd 	.word	0x0800a7cd
 800a7c0:	0800a7d3 	.word	0x0800a7d3
 800a7c4:	0800a7d9 	.word	0x0800a7d9
 800a7c8:	0800a7df 	.word	0x0800a7df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	73fb      	strb	r3, [r7, #15]
    break;
 800a7d0:	e00b      	b.n	800a7ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a7d2:	2303      	movs	r3, #3
 800a7d4:	73fb      	strb	r3, [r7, #15]
    break;
 800a7d6:	e008      	b.n	800a7ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a7d8:	2301      	movs	r3, #1
 800a7da:	73fb      	strb	r3, [r7, #15]
    break;
 800a7dc:	e005      	b.n	800a7ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a7de:	2303      	movs	r3, #3
 800a7e0:	73fb      	strb	r3, [r7, #15]
    break;
 800a7e2:	e002      	b.n	800a7ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a7e4:	2303      	movs	r3, #3
 800a7e6:	73fb      	strb	r3, [r7, #15]
    break;
 800a7e8:	bf00      	nop
  }
  return usb_status;
 800a7ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3714      	adds	r7, #20
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr

0800a7f8 <memset>:
 800a7f8:	4402      	add	r2, r0
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d100      	bne.n	800a802 <memset+0xa>
 800a800:	4770      	bx	lr
 800a802:	f803 1b01 	strb.w	r1, [r3], #1
 800a806:	e7f9      	b.n	800a7fc <memset+0x4>

0800a808 <__libc_init_array>:
 800a808:	b570      	push	{r4, r5, r6, lr}
 800a80a:	4d0d      	ldr	r5, [pc, #52]	@ (800a840 <__libc_init_array+0x38>)
 800a80c:	4c0d      	ldr	r4, [pc, #52]	@ (800a844 <__libc_init_array+0x3c>)
 800a80e:	1b64      	subs	r4, r4, r5
 800a810:	10a4      	asrs	r4, r4, #2
 800a812:	2600      	movs	r6, #0
 800a814:	42a6      	cmp	r6, r4
 800a816:	d109      	bne.n	800a82c <__libc_init_array+0x24>
 800a818:	4d0b      	ldr	r5, [pc, #44]	@ (800a848 <__libc_init_array+0x40>)
 800a81a:	4c0c      	ldr	r4, [pc, #48]	@ (800a84c <__libc_init_array+0x44>)
 800a81c:	f000 f818 	bl	800a850 <_init>
 800a820:	1b64      	subs	r4, r4, r5
 800a822:	10a4      	asrs	r4, r4, #2
 800a824:	2600      	movs	r6, #0
 800a826:	42a6      	cmp	r6, r4
 800a828:	d105      	bne.n	800a836 <__libc_init_array+0x2e>
 800a82a:	bd70      	pop	{r4, r5, r6, pc}
 800a82c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a830:	4798      	blx	r3
 800a832:	3601      	adds	r6, #1
 800a834:	e7ee      	b.n	800a814 <__libc_init_array+0xc>
 800a836:	f855 3b04 	ldr.w	r3, [r5], #4
 800a83a:	4798      	blx	r3
 800a83c:	3601      	adds	r6, #1
 800a83e:	e7f2      	b.n	800a826 <__libc_init_array+0x1e>
 800a840:	0800a8d0 	.word	0x0800a8d0
 800a844:	0800a8d0 	.word	0x0800a8d0
 800a848:	0800a8d0 	.word	0x0800a8d0
 800a84c:	0800a8d4 	.word	0x0800a8d4

0800a850 <_init>:
 800a850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a852:	bf00      	nop
 800a854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a856:	bc08      	pop	{r3}
 800a858:	469e      	mov	lr, r3
 800a85a:	4770      	bx	lr

0800a85c <_fini>:
 800a85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a85e:	bf00      	nop
 800a860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a862:	bc08      	pop	{r3}
 800a864:	469e      	mov	lr, r3
 800a866:	4770      	bx	lr
