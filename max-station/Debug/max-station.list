
max-station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3a4  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800a568  0800a568  0000b568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5c8  0800a5c8  0000c120  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5c8  0800a5c8  0000b5c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5d0  0800a5d0  0000c120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5d0  0800a5d0  0000b5d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5d4  0800a5d4  0000b5d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  20000000  0800a5d8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017bc  20000120  0800a6f8  0000c120  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200018dc  0800a6f8  0000c8dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c120  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ad93  00000000  00000000  0000c150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004233  00000000  00000000  00026ee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001590  00000000  00000000  0002b118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000109e  00000000  00000000  0002c6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027784  00000000  00000000  0002d746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f919  00000000  00000000  00054eca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df39d  00000000  00000000  000747e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00153b80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059ec  00000000  00000000  00153bc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  001595b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000120 	.word	0x20000120
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800a550 	.word	0x0800a550

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000124 	.word	0x20000124
 8000200:	0800a550 	.word	0x0800a550

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 80004fc:	22b0      	movs	r2, #176	@ 0xb0
 80004fe:	2100      	movs	r1, #0
 8000500:	6878      	ldr	r0, [r7, #4]
 8000502:	f009 fff9 	bl	800a4f8 <memset>
    return 1;
 8000506:	2301      	movs	r3, #1
}
 8000508:	4618      	mov	r0, r3
 800050a:	3708      	adds	r7, #8
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}

08000510 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	if(huart == &huart3){
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	4a13      	ldr	r2, [pc, #76]	@ (8000568 <HAL_UART_RxCpltCallback+0x58>)
 800051c:	4293      	cmp	r3, r2
 800051e:	d11e      	bne.n	800055e <HAL_UART_RxCpltCallback+0x4e>
	if(rx_data_lora != '\n'&& rx_index_lora < LORA_RX_BUFFER_SIZE){
 8000520:	4b12      	ldr	r3, [pc, #72]	@ (800056c <HAL_UART_RxCpltCallback+0x5c>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	2b0a      	cmp	r3, #10
 8000526:	d00f      	beq.n	8000548 <HAL_UART_RxCpltCallback+0x38>
 8000528:	4b11      	ldr	r3, [pc, #68]	@ (8000570 <HAL_UART_RxCpltCallback+0x60>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b45      	cmp	r3, #69	@ 0x45
 800052e:	d80b      	bhi.n	8000548 <HAL_UART_RxCpltCallback+0x38>
	lora_rx_buffer[rx_index_lora++]=rx_data_lora;
 8000530:	4b0f      	ldr	r3, [pc, #60]	@ (8000570 <HAL_UART_RxCpltCallback+0x60>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	1c5a      	adds	r2, r3, #1
 8000536:	b2d1      	uxtb	r1, r2
 8000538:	4a0d      	ldr	r2, [pc, #52]	@ (8000570 <HAL_UART_RxCpltCallback+0x60>)
 800053a:	7011      	strb	r1, [r2, #0]
 800053c:	461a      	mov	r2, r3
 800053e:	4b0b      	ldr	r3, [pc, #44]	@ (800056c <HAL_UART_RxCpltCallback+0x5c>)
 8000540:	7819      	ldrb	r1, [r3, #0]
 8000542:	4b0c      	ldr	r3, [pc, #48]	@ (8000574 <HAL_UART_RxCpltCallback+0x64>)
 8000544:	5499      	strb	r1, [r3, r2]
 8000546:	e005      	b.n	8000554 <HAL_UART_RxCpltCallback+0x44>

	}
	else{
		rx_data_lora=0;
 8000548:	4b08      	ldr	r3, [pc, #32]	@ (800056c <HAL_UART_RxCpltCallback+0x5c>)
 800054a:	2200      	movs	r2, #0
 800054c:	701a      	strb	r2, [r3, #0]
		rx_index_lora=0;
 800054e:	4b08      	ldr	r3, [pc, #32]	@ (8000570 <HAL_UART_RxCpltCallback+0x60>)
 8000550:	2200      	movs	r2, #0
 8000552:	701a      	strb	r2, [r3, #0]

		}
HAL_UART_Receive_IT(&huart3, &rx_data_lora, 1);
 8000554:	2201      	movs	r2, #1
 8000556:	4905      	ldr	r1, [pc, #20]	@ (800056c <HAL_UART_RxCpltCallback+0x5c>)
 8000558:	4803      	ldr	r0, [pc, #12]	@ (8000568 <HAL_UART_RxCpltCallback+0x58>)
 800055a:	f004 fe13 	bl	8005184 <HAL_UART_Receive_IT>
//				rx_index = 0;
//				rx_data = 0;
//			}
//			HAL_UART_Receive_IT(&huart2, &rx_data, 1);
//		}
}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	200002b8 	.word	0x200002b8
 800056c:	20000343 	.word	0x20000343
 8000570:	20000342 	.word	0x20000342
 8000574:	200002fc 	.word	0x200002fc

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b0a0      	sub	sp, #128	@ 0x80
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f001 f91f 	bl	80017c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 fc05 	bl	8000d90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 fda3 	bl	80010d0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800058a:	f000 fc6d 	bl	8000e68 <MX_ADC1_Init>
  MX_I2C1_Init();
 800058e:	f000 fcbd 	bl	8000f0c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000592:	f000 fce9 	bl	8000f68 <MX_SPI1_Init>
  MX_UART4_Init();
 8000596:	f000 fd1d 	bl	8000fd4 <MX_UART4_Init>
  MX_USART2_UART_Init();
 800059a:	f000 fd45 	bl	8001028 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800059e:	f000 fd6d 	bl	800107c <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 80005a2:	f009 fa3f 	bl	8009a24 <MX_USB_DEVICE_Init>
  MX_FATFS_Init();
 80005a6:	f007 f9cd 	bl	8007944 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &rx_data_lora, 1);
 80005aa:	2201      	movs	r2, #1
 80005ac:	49b7      	ldr	r1, [pc, #732]	@ (800088c <main+0x314>)
 80005ae:	48b8      	ldr	r0, [pc, #736]	@ (8000890 <main+0x318>)
 80005b0:	f004 fde8 	bl	8005184 <HAL_UART_Receive_IT>
//  HAL_UART_Receive_IT(&huart2,&rx_data, 1);
  E220_CONFIG(0x8,0x2A,0x10,1);
 80005b4:	2301      	movs	r3, #1
 80005b6:	2210      	movs	r2, #16
 80005b8:	212a      	movs	r1, #42	@ 0x2a
 80005ba:	2008      	movs	r0, #8
 80005bc:	f000 fe34 	bl	8001228 <E220_CONFIG>
  lwgps_init(&gps);
 80005c0:	48b4      	ldr	r0, [pc, #720]	@ (8000894 <main+0x31c>)
 80005c2:	f7ff ff97 	bl	80004f4 <lwgps_init>


  tim1=HAL_GetTick();
 80005c6:	f001 f961 	bl	800188c <HAL_GetTick>
 80005ca:	4603      	mov	r3, r0
 80005cc:	4ab2      	ldr	r2, [pc, #712]	@ (8000898 <main+0x320>)
 80005ce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if(HAL_GetTick()-tim1>500)
 80005d0:	f001 f95c 	bl	800188c <HAL_GetTick>
 80005d4:	4602      	mov	r2, r0
 80005d6:	4bb0      	ldr	r3, [pc, #704]	@ (8000898 <main+0x320>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	1ad3      	subs	r3, r2, r3
 80005dc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80005e0:	d9f6      	bls.n	80005d0 <main+0x58>
{

	  if(lora_rx_buffer[3]==2){
 80005e2:	4bae      	ldr	r3, [pc, #696]	@ (800089c <main+0x324>)
 80005e4:	78db      	ldrb	r3, [r3, #3]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	f040 8220 	bne.w	8000a2c <main+0x4b4>

		  sustgpssatsinview=lora_rx_buffer[4];
 80005ec:	4bab      	ldr	r3, [pc, #684]	@ (800089c <main+0x324>)
 80005ee:	791a      	ldrb	r2, [r3, #4]
 80005f0:	4bab      	ldr	r3, [pc, #684]	@ (80008a0 <main+0x328>)
 80005f2:	701a      	strb	r2, [r3, #0]

			 float2unit8 f2u8_gpsalt;
				 for(uint8_t i=0;i<4;i++)
 80005f4:	2300      	movs	r3, #0
 80005f6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80005fa:	e019      	b.n	8000630 <main+0xb8>
				 {
					 f2u8_gpsalt.array[i]=lora_rx_buffer[i+5];
 80005fc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000600:	1d5a      	adds	r2, r3, #5
 8000602:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000606:	49a5      	ldr	r1, [pc, #660]	@ (800089c <main+0x324>)
 8000608:	5c8a      	ldrb	r2, [r1, r2]
 800060a:	3380      	adds	r3, #128	@ 0x80
 800060c:	443b      	add	r3, r7
 800060e:	f803 2c20 	strb.w	r2, [r3, #-32]
					 HYI_BUFFER[10+i] =lora_rx_buffer[i+5]; // 10 11 12 13
 8000612:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000616:	1d5a      	adds	r2, r3, #5
 8000618:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800061c:	330a      	adds	r3, #10
 800061e:	499f      	ldr	r1, [pc, #636]	@ (800089c <main+0x324>)
 8000620:	5c89      	ldrb	r1, [r1, r2]
 8000622:	4aa0      	ldr	r2, [pc, #640]	@ (80008a4 <main+0x32c>)
 8000624:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 8000626:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800062a:	3301      	adds	r3, #1
 800062c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8000630:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000634:	2b03      	cmp	r3, #3
 8000636:	d9e1      	bls.n	80005fc <main+0x84>
				 }
				 sustgpsaltitude=f2u8_gpsalt.fVal;
 8000638:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800063a:	4a9b      	ldr	r2, [pc, #620]	@ (80008a8 <main+0x330>)
 800063c:	6013      	str	r3, [r2, #0]
			 float2unit8 f2u8_latitude;

				 for(uint8_t i=0;i<4;i++)
 800063e:	2300      	movs	r3, #0
 8000640:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8000644:	e01b      	b.n	800067e <main+0x106>
				 {
					f2u8_latitude.array[i]=lora_rx_buffer[i+9];
 8000646:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800064a:	f103 0209 	add.w	r2, r3, #9
 800064e:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000652:	4992      	ldr	r1, [pc, #584]	@ (800089c <main+0x324>)
 8000654:	5c8a      	ldrb	r2, [r1, r2]
 8000656:	3380      	adds	r3, #128	@ 0x80
 8000658:	443b      	add	r3, r7
 800065a:	f803 2c24 	strb.w	r2, [r3, #-36]
					HYI_BUFFER[14+i] =lora_rx_buffer[i+9]; // 14 15 16 17
 800065e:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000662:	f103 0209 	add.w	r2, r3, #9
 8000666:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800066a:	330e      	adds	r3, #14
 800066c:	498b      	ldr	r1, [pc, #556]	@ (800089c <main+0x324>)
 800066e:	5c89      	ldrb	r1, [r1, r2]
 8000670:	4a8c      	ldr	r2, [pc, #560]	@ (80008a4 <main+0x32c>)
 8000672:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 8000674:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000678:	3301      	adds	r3, #1
 800067a:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 800067e:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000682:	2b03      	cmp	r3, #3
 8000684:	d9df      	bls.n	8000646 <main+0xce>
				 }
				 sustgpslatitude=f2u8_latitude.fVal;
 8000686:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000688:	4a88      	ldr	r2, [pc, #544]	@ (80008ac <main+0x334>)
 800068a:	6013      	str	r3, [r2, #0]

			 float2unit8 f2u8_longitude;
				 for(uint8_t i=0;i<4;i++)
 800068c:	2300      	movs	r3, #0
 800068e:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 8000692:	e01b      	b.n	80006cc <main+0x154>
				 {
					f2u8_longitude.array[i]=lora_rx_buffer[i+13];
 8000694:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8000698:	f103 020d 	add.w	r2, r3, #13
 800069c:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 80006a0:	497e      	ldr	r1, [pc, #504]	@ (800089c <main+0x324>)
 80006a2:	5c8a      	ldrb	r2, [r1, r2]
 80006a4:	3380      	adds	r3, #128	@ 0x80
 80006a6:	443b      	add	r3, r7
 80006a8:	f803 2c28 	strb.w	r2, [r3, #-40]
					HYI_BUFFER[18+i] =lora_rx_buffer[i+13]; // 18 19 20 21
 80006ac:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 80006b0:	f103 020d 	add.w	r2, r3, #13
 80006b4:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 80006b8:	3312      	adds	r3, #18
 80006ba:	4978      	ldr	r1, [pc, #480]	@ (800089c <main+0x324>)
 80006bc:	5c89      	ldrb	r1, [r1, r2]
 80006be:	4a79      	ldr	r2, [pc, #484]	@ (80008a4 <main+0x32c>)
 80006c0:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 80006c2:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 80006c6:	3301      	adds	r3, #1
 80006c8:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 80006cc:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 80006d0:	2b03      	cmp	r3, #3
 80006d2:	d9df      	bls.n	8000694 <main+0x11c>
				 }
				 sustgpslongitude=f2u8_longitude.fVal;
 80006d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80006d6:	4a76      	ldr	r2, [pc, #472]	@ (80008b0 <main+0x338>)
 80006d8:	6013      	str	r3, [r2, #0]

			 float2unit8 f2u8_altitude;
				 for(uint8_t i=0;i<4;i++)
 80006da:	2300      	movs	r3, #0
 80006dc:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
 80006e0:	e01b      	b.n	800071a <main+0x1a2>
				 {
					f2u8_altitude.array[i]=lora_rx_buffer[i+17];
 80006e2:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 80006e6:	f103 0211 	add.w	r2, r3, #17
 80006ea:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 80006ee:	496b      	ldr	r1, [pc, #428]	@ (800089c <main+0x324>)
 80006f0:	5c8a      	ldrb	r2, [r1, r2]
 80006f2:	3380      	adds	r3, #128	@ 0x80
 80006f4:	443b      	add	r3, r7
 80006f6:	f803 2c2c 	strb.w	r2, [r3, #-44]
					HYI_BUFFER[6+i] =lora_rx_buffer[i+17]; // 6 7 8 9
 80006fa:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 80006fe:	f103 0211 	add.w	r2, r3, #17
 8000702:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8000706:	3306      	adds	r3, #6
 8000708:	4964      	ldr	r1, [pc, #400]	@ (800089c <main+0x324>)
 800070a:	5c89      	ldrb	r1, [r1, r2]
 800070c:	4a65      	ldr	r2, [pc, #404]	@ (80008a4 <main+0x32c>)
 800070e:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 8000710:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8000714:	3301      	adds	r3, #1
 8000716:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
 800071a:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800071e:	2b03      	cmp	r3, #3
 8000720:	d9df      	bls.n	80006e2 <main+0x16a>
				 }
				 sustaltitude=f2u8_altitude.fVal;
 8000722:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000724:	4a63      	ldr	r2, [pc, #396]	@ (80008b4 <main+0x33c>)
 8000726:	6013      	str	r3, [r2, #0]

			 float2unit8 f2u8_speed;

				 for(uint8_t i=0;i<4;i++)
 8000728:	2300      	movs	r3, #0
 800072a:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 800072e:	e010      	b.n	8000752 <main+0x1da>
				 {
					 f2u8_speed.array[i]=lora_rx_buffer[i+21];
 8000730:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8000734:	f103 0215 	add.w	r2, r3, #21
 8000738:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800073c:	4957      	ldr	r1, [pc, #348]	@ (800089c <main+0x324>)
 800073e:	5c8a      	ldrb	r2, [r1, r2]
 8000740:	3380      	adds	r3, #128	@ 0x80
 8000742:	443b      	add	r3, r7
 8000744:	f803 2c30 	strb.w	r2, [r3, #-48]
				 for(uint8_t i=0;i<4;i++)
 8000748:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800074c:	3301      	adds	r3, #1
 800074e:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8000752:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8000756:	2b03      	cmp	r3, #3
 8000758:	d9ea      	bls.n	8000730 <main+0x1b8>
				 }
				 sustspeed=f2u8_speed.fVal;
 800075a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800075c:	4a56      	ldr	r2, [pc, #344]	@ (80008b8 <main+0x340>)
 800075e:	6013      	str	r3, [r2, #0]

			 float2unit8 f2u8_temp;
				 for(uint8_t i=0;i<4;i++)
 8000760:	2300      	movs	r3, #0
 8000762:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
 8000766:	e010      	b.n	800078a <main+0x212>
				 {
					 f2u8_temp.array[i]=lora_rx_buffer[i+25];
 8000768:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 800076c:	f103 0219 	add.w	r2, r3, #25
 8000770:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 8000774:	4949      	ldr	r1, [pc, #292]	@ (800089c <main+0x324>)
 8000776:	5c8a      	ldrb	r2, [r1, r2]
 8000778:	3380      	adds	r3, #128	@ 0x80
 800077a:	443b      	add	r3, r7
 800077c:	f803 2c34 	strb.w	r2, [r3, #-52]
				 for(uint8_t i=0;i<4;i++)
 8000780:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 8000784:	3301      	adds	r3, #1
 8000786:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
 800078a:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 800078e:	2b03      	cmp	r3, #3
 8000790:	d9ea      	bls.n	8000768 <main+0x1f0>
				 }
				 susttemperature=f2u8_temp.fVal;
 8000792:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000794:	4a49      	ldr	r2, [pc, #292]	@ (80008bc <main+0x344>)
 8000796:	6013      	str	r3, [r2, #0]

			 float2unit8 f2u8_accx;
				 for(uint8_t i=0;i<4;i++)
 8000798:	2300      	movs	r3, #0
 800079a:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
 800079e:	e01b      	b.n	80007d8 <main+0x260>
				 {
					 f2u8_accx.array[i]=lora_rx_buffer[i+29];
 80007a0:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 80007a4:	f103 021d 	add.w	r2, r3, #29
 80007a8:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 80007ac:	493b      	ldr	r1, [pc, #236]	@ (800089c <main+0x324>)
 80007ae:	5c8a      	ldrb	r2, [r1, r2]
 80007b0:	3380      	adds	r3, #128	@ 0x80
 80007b2:	443b      	add	r3, r7
 80007b4:	f803 2c38 	strb.w	r2, [r3, #-56]
					 HYI_BUFFER[58+i]=lora_rx_buffer[i+29]; //
 80007b8:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 80007bc:	f103 021d 	add.w	r2, r3, #29
 80007c0:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 80007c4:	333a      	adds	r3, #58	@ 0x3a
 80007c6:	4935      	ldr	r1, [pc, #212]	@ (800089c <main+0x324>)
 80007c8:	5c89      	ldrb	r1, [r1, r2]
 80007ca:	4a36      	ldr	r2, [pc, #216]	@ (80008a4 <main+0x32c>)
 80007cc:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 80007ce:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 80007d2:	3301      	adds	r3, #1
 80007d4:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
 80007d8:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 80007dc:	2b03      	cmp	r3, #3
 80007de:	d9df      	bls.n	80007a0 <main+0x228>
				 }
				 sustaccx=f2u8_accx.fVal;
 80007e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80007e2:	4a37      	ldr	r2, [pc, #220]	@ (80008c0 <main+0x348>)
 80007e4:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_accy;
				 for(uint8_t i=0;i<4;i++)
 80007e6:	2300      	movs	r3, #0
 80007e8:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
 80007ec:	e01b      	b.n	8000826 <main+0x2ae>
				 {
					 f2u8_accy.array[i]=lora_rx_buffer[i+33];
 80007ee:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 80007f2:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 80007f6:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 80007fa:	4928      	ldr	r1, [pc, #160]	@ (800089c <main+0x324>)
 80007fc:	5c8a      	ldrb	r2, [r1, r2]
 80007fe:	3380      	adds	r3, #128	@ 0x80
 8000800:	443b      	add	r3, r7
 8000802:	f803 2c3c 	strb.w	r2, [r3, #-60]
					 HYI_BUFFER[62+i]=lora_rx_buffer[i+33];
 8000806:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 800080a:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 800080e:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8000812:	333e      	adds	r3, #62	@ 0x3e
 8000814:	4921      	ldr	r1, [pc, #132]	@ (800089c <main+0x324>)
 8000816:	5c89      	ldrb	r1, [r1, r2]
 8000818:	4a22      	ldr	r2, [pc, #136]	@ (80008a4 <main+0x32c>)
 800081a:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 800081c:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8000820:	3301      	adds	r3, #1
 8000822:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
 8000826:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 800082a:	2b03      	cmp	r3, #3
 800082c:	d9df      	bls.n	80007ee <main+0x276>
				 }
					 sustaccy=f2u8_accy.fVal;
 800082e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000830:	4a24      	ldr	r2, [pc, #144]	@ (80008c4 <main+0x34c>)
 8000832:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_accz;
			      for(uint8_t i=0;i<4;i++)
 8000834:	2300      	movs	r3, #0
 8000836:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800083a:	e01b      	b.n	8000874 <main+0x2fc>
				 {
			    	  f2u8_accz.array[i]=lora_rx_buffer[i+37];
 800083c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000840:	f103 0225 	add.w	r2, r3, #37	@ 0x25
 8000844:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000848:	4914      	ldr	r1, [pc, #80]	@ (800089c <main+0x324>)
 800084a:	5c8a      	ldrb	r2, [r1, r2]
 800084c:	3380      	adds	r3, #128	@ 0x80
 800084e:	443b      	add	r3, r7
 8000850:	f803 2c40 	strb.w	r2, [r3, #-64]
			    	  HYI_BUFFER[66+i]=lora_rx_buffer[i+37];
 8000854:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000858:	f103 0225 	add.w	r2, r3, #37	@ 0x25
 800085c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000860:	3342      	adds	r3, #66	@ 0x42
 8000862:	490e      	ldr	r1, [pc, #56]	@ (800089c <main+0x324>)
 8000864:	5c89      	ldrb	r1, [r1, r2]
 8000866:	4a0f      	ldr	r2, [pc, #60]	@ (80008a4 <main+0x32c>)
 8000868:	54d1      	strb	r1, [r2, r3]
			      for(uint8_t i=0;i<4;i++)
 800086a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800086e:	3301      	adds	r3, #1
 8000870:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8000874:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000878:	2b03      	cmp	r3, #3
 800087a:	d9df      	bls.n	800083c <main+0x2c4>
				 }
					 sustaccz=f2u8_accz.fVal;
 800087c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800087e:	4a12      	ldr	r2, [pc, #72]	@ (80008c8 <main+0x350>)
 8000880:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_roll;
				  for(uint8_t i=0;i<4;i++)
 8000882:	2300      	movs	r3, #0
 8000884:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8000888:	e031      	b.n	80008ee <main+0x376>
 800088a:	bf00      	nop
 800088c:	20000343 	.word	0x20000343
 8000890:	200002b8 	.word	0x200002b8
 8000894:	20000408 	.word	0x20000408
 8000898:	20000404 	.word	0x20000404
 800089c:	200002fc 	.word	0x200002fc
 80008a0:	20000391 	.word	0x20000391
 80008a4:	20000344 	.word	0x20000344
 80008a8:	20000394 	.word	0x20000394
 80008ac:	20000398 	.word	0x20000398
 80008b0:	2000039c 	.word	0x2000039c
 80008b4:	200003a4 	.word	0x200003a4
 80008b8:	200003a0 	.word	0x200003a0
 80008bc:	200003a8 	.word	0x200003a8
 80008c0:	200003ac 	.word	0x200003ac
 80008c4:	200003b0 	.word	0x200003b0
 80008c8:	200003b4 	.word	0x200003b4
				 {
					  f2u8_roll.array[i]=lora_rx_buffer[i+41];
 80008cc:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80008d0:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 80008d4:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80008d8:	49be      	ldr	r1, [pc, #760]	@ (8000bd4 <main+0x65c>)
 80008da:	5c8a      	ldrb	r2, [r1, r2]
 80008dc:	3380      	adds	r3, #128	@ 0x80
 80008de:	443b      	add	r3, r7
 80008e0:	f803 2c44 	strb.w	r2, [r3, #-68]
				  for(uint8_t i=0;i<4;i++)
 80008e4:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80008e8:	3301      	adds	r3, #1
 80008ea:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 80008ee:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80008f2:	2b03      	cmp	r3, #3
 80008f4:	d9ea      	bls.n	80008cc <main+0x354>
				 }
					 sustroll=f2u8_roll.fVal;
 80008f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80008f8:	4ab7      	ldr	r2, [pc, #732]	@ (8000bd8 <main+0x660>)
 80008fa:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_pitch;
				  for(uint8_t i=0;i<4;i++)
 80008fc:	2300      	movs	r3, #0
 80008fe:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 8000902:	e010      	b.n	8000926 <main+0x3ae>
				 {
					  f2u8_pitch.array[i]=lora_rx_buffer[i+45];
 8000904:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8000908:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
 800090c:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8000910:	49b0      	ldr	r1, [pc, #704]	@ (8000bd4 <main+0x65c>)
 8000912:	5c8a      	ldrb	r2, [r1, r2]
 8000914:	3380      	adds	r3, #128	@ 0x80
 8000916:	443b      	add	r3, r7
 8000918:	f803 2c48 	strb.w	r2, [r3, #-72]
				  for(uint8_t i=0;i<4;i++)
 800091c:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8000920:	3301      	adds	r3, #1
 8000922:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 8000926:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 800092a:	2b03      	cmp	r3, #3
 800092c:	d9ea      	bls.n	8000904 <main+0x38c>
				 }
					 sustpitch=f2u8_pitch.fVal;
 800092e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000930:	4aaa      	ldr	r2, [pc, #680]	@ (8000bdc <main+0x664>)
 8000932:	6013      	str	r3, [r2, #0]

					 sustv4_battery=lora_rx_buffer[49];
 8000934:	4ba7      	ldr	r3, [pc, #668]	@ (8000bd4 <main+0x65c>)
 8000936:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 800093a:	4ba9      	ldr	r3, [pc, #676]	@ (8000be0 <main+0x668>)
 800093c:	701a      	strb	r2, [r3, #0]
					 sustv4_mod=lora_rx_buffer[50];
 800093e:	4ba5      	ldr	r3, [pc, #660]	@ (8000bd4 <main+0x65c>)
 8000940:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8000944:	4ba7      	ldr	r3, [pc, #668]	@ (8000be4 <main+0x66c>)
 8000946:	701a      	strb	r2, [r3, #0]
					 suststage_communication=lora_rx_buffer[51];
 8000948:	4ba2      	ldr	r3, [pc, #648]	@ (8000bd4 <main+0x65c>)
 800094a:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 800094e:	4ba6      	ldr	r3, [pc, #664]	@ (8000be8 <main+0x670>)
 8000950:	701a      	strb	r2, [r3, #0]

					 //EGU PART
					 EGU_ARIZA=lora_rx_buffer[52];
 8000952:	4ba0      	ldr	r3, [pc, #640]	@ (8000bd4 <main+0x65c>)
 8000954:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8000958:	4ba4      	ldr	r3, [pc, #656]	@ (8000bec <main+0x674>)
 800095a:	701a      	strb	r2, [r3, #0]
					 EGU_AYRILMA_TESPIT=lora_rx_buffer[53];
 800095c:	4b9d      	ldr	r3, [pc, #628]	@ (8000bd4 <main+0x65c>)
 800095e:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 8000962:	4ba3      	ldr	r3, [pc, #652]	@ (8000bf0 <main+0x678>)
 8000964:	701a      	strb	r2, [r3, #0]

			float2unit8 f2u8_EGU_BATTERY;
					for(uint8_t i=0;i<4;i++)
 8000966:	2300      	movs	r3, #0
 8000968:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
 800096c:	e010      	b.n	8000990 <main+0x418>
				 {
						f2u8_EGU_BATTERY.array[i]=lora_rx_buffer[i+54];
 800096e:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8000972:	f103 0236 	add.w	r2, r3, #54	@ 0x36
 8000976:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800097a:	4996      	ldr	r1, [pc, #600]	@ (8000bd4 <main+0x65c>)
 800097c:	5c8a      	ldrb	r2, [r1, r2]
 800097e:	3380      	adds	r3, #128	@ 0x80
 8000980:	443b      	add	r3, r7
 8000982:	f803 2c4c 	strb.w	r2, [r3, #-76]
					for(uint8_t i=0;i<4;i++)
 8000986:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800098a:	3301      	adds	r3, #1
 800098c:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
 8000990:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8000994:	2b03      	cmp	r3, #3
 8000996:	d9ea      	bls.n	800096e <main+0x3f6>
				 }
					 EGU_BATTERY=f2u8_EGU_BATTERY.fVal;
 8000998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800099a:	4a96      	ldr	r2, [pc, #600]	@ (8000bf4 <main+0x67c>)
 800099c:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_EGU_ANGLE;
					for(uint8_t i=0;i<4;i++)
 800099e:	2300      	movs	r3, #0
 80009a0:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 80009a4:	e010      	b.n	80009c8 <main+0x450>
				{
						f2u8_EGU_ANGLE.array[i]=lora_rx_buffer[i+58];
 80009a6:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80009aa:	f103 023a 	add.w	r2, r3, #58	@ 0x3a
 80009ae:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80009b2:	4988      	ldr	r1, [pc, #544]	@ (8000bd4 <main+0x65c>)
 80009b4:	5c8a      	ldrb	r2, [r1, r2]
 80009b6:	3380      	adds	r3, #128	@ 0x80
 80009b8:	443b      	add	r3, r7
 80009ba:	f803 2c50 	strb.w	r2, [r3, #-80]
					for(uint8_t i=0;i<4;i++)
 80009be:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80009c2:	3301      	adds	r3, #1
 80009c4:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 80009c8:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80009cc:	2b03      	cmp	r3, #3
 80009ce:	d9ea      	bls.n	80009a6 <main+0x42e>
				 }
					  EGU_ANGLE=f2u8_EGU_ANGLE.fVal;
 80009d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009d2:	4a89      	ldr	r2, [pc, #548]	@ (8000bf8 <main+0x680>)
 80009d4:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_EGU_IRTIFA;
					for(uint8_t i=0;i<4;i++)
 80009d6:	2300      	movs	r3, #0
 80009d8:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
 80009dc:	e010      	b.n	8000a00 <main+0x488>
				{
						f2u8_EGU_IRTIFA.array[i]=lora_rx_buffer[i+62];
 80009de:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80009e2:	f103 023e 	add.w	r2, r3, #62	@ 0x3e
 80009e6:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80009ea:	497a      	ldr	r1, [pc, #488]	@ (8000bd4 <main+0x65c>)
 80009ec:	5c8a      	ldrb	r2, [r1, r2]
 80009ee:	3380      	adds	r3, #128	@ 0x80
 80009f0:	443b      	add	r3, r7
 80009f2:	f803 2c54 	strb.w	r2, [r3, #-84]
					for(uint8_t i=0;i<4;i++)
 80009f6:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80009fa:	3301      	adds	r3, #1
 80009fc:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
 8000a00:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8000a04:	2b03      	cmp	r3, #3
 8000a06:	d9ea      	bls.n	80009de <main+0x466>
				}
					  EGU_IRTIFA=f2u8_EGU_IRTIFA.fVal;
 8000a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a0a:	4a7c      	ldr	r2, [pc, #496]	@ (8000bfc <main+0x684>)
 8000a0c:	6013      	str	r3, [r2, #0]

					  EGU_UCUS_BASLADIMI=lora_rx_buffer[66];
 8000a0e:	4b71      	ldr	r3, [pc, #452]	@ (8000bd4 <main+0x65c>)
 8000a10:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 8000a14:	4b7a      	ldr	r3, [pc, #488]	@ (8000c00 <main+0x688>)
 8000a16:	701a      	strb	r2, [r3, #0]
					  EGU_STAGE_DURUM=lora_rx_buffer[67];
 8000a18:	4b6e      	ldr	r3, [pc, #440]	@ (8000bd4 <main+0x65c>)
 8000a1a:	f893 2043 	ldrb.w	r2, [r3, #67]	@ 0x43
 8000a1e:	4b79      	ldr	r3, [pc, #484]	@ (8000c04 <main+0x68c>)
 8000a20:	701a      	strb	r2, [r3, #0]
					  EGU_MOTOR_ATESLEME_TALEP_IN=lora_rx_buffer[68];
 8000a22:	4b6c      	ldr	r3, [pc, #432]	@ (8000bd4 <main+0x65c>)
 8000a24:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8000a28:	4b77      	ldr	r3, [pc, #476]	@ (8000c08 <main+0x690>)
 8000a2a:	701a      	strb	r2, [r3, #0]
}

	  if(lora_rx_buffer[3]==1){
 8000a2c:	4b69      	ldr	r3, [pc, #420]	@ (8000bd4 <main+0x65c>)
 8000a2e:	78db      	ldrb	r3, [r3, #3]
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	f040 8192 	bne.w	8000d5a <main+0x7e2>

		  boostgpssatsinview=lora_rx_buffer[4];
 8000a36:	4b67      	ldr	r3, [pc, #412]	@ (8000bd4 <main+0x65c>)
 8000a38:	791a      	ldrb	r2, [r3, #4]
 8000a3a:	4b74      	ldr	r3, [pc, #464]	@ (8000c0c <main+0x694>)
 8000a3c:	701a      	strb	r2, [r3, #0]

			 float2unit8 f2u8_bgpsalt;
				 for(uint8_t i=0;i<4;i++)
 8000a3e:	2300      	movs	r3, #0
 8000a40:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
 8000a44:	e019      	b.n	8000a7a <main+0x502>
				 {
					 f2u8_bgpsalt.array[i]=lora_rx_buffer[i+5];
 8000a46:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8000a4a:	1d5a      	adds	r2, r3, #5
 8000a4c:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8000a50:	4960      	ldr	r1, [pc, #384]	@ (8000bd4 <main+0x65c>)
 8000a52:	5c8a      	ldrb	r2, [r1, r2]
 8000a54:	3380      	adds	r3, #128	@ 0x80
 8000a56:	443b      	add	r3, r7
 8000a58:	f803 2c58 	strb.w	r2, [r3, #-88]
					 HYI_BUFFER[34+i]=lora_rx_buffer[i+5]; // 34 35 36 37
 8000a5c:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8000a60:	1d5a      	adds	r2, r3, #5
 8000a62:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8000a66:	3322      	adds	r3, #34	@ 0x22
 8000a68:	495a      	ldr	r1, [pc, #360]	@ (8000bd4 <main+0x65c>)
 8000a6a:	5c89      	ldrb	r1, [r1, r2]
 8000a6c:	4a68      	ldr	r2, [pc, #416]	@ (8000c10 <main+0x698>)
 8000a6e:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 8000a70:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8000a74:	3301      	adds	r3, #1
 8000a76:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
 8000a7a:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8000a7e:	2b03      	cmp	r3, #3
 8000a80:	d9e1      	bls.n	8000a46 <main+0x4ce>
				 }
				 sustgpsaltitude=f2u8_bgpsalt.fVal;
 8000a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a84:	4a63      	ldr	r2, [pc, #396]	@ (8000c14 <main+0x69c>)
 8000a86:	6013      	str	r3, [r2, #0]
			 float2unit8 f2u8_blatitude;

				 for(uint8_t i=0;i<4;i++)
 8000a88:	2300      	movs	r3, #0
 8000a8a:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
 8000a8e:	e01b      	b.n	8000ac8 <main+0x550>
				 {
					 f2u8_blatitude.array[i]=lora_rx_buffer[i+9];
 8000a90:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8000a94:	f103 0209 	add.w	r2, r3, #9
 8000a98:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8000a9c:	494d      	ldr	r1, [pc, #308]	@ (8000bd4 <main+0x65c>)
 8000a9e:	5c8a      	ldrb	r2, [r1, r2]
 8000aa0:	3380      	adds	r3, #128	@ 0x80
 8000aa2:	443b      	add	r3, r7
 8000aa4:	f803 2c5c 	strb.w	r2, [r3, #-92]
					 HYI_BUFFER[38+i]=lora_rx_buffer[i+9]; // 38 39 40 41
 8000aa8:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8000aac:	f103 0209 	add.w	r2, r3, #9
 8000ab0:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8000ab4:	3326      	adds	r3, #38	@ 0x26
 8000ab6:	4947      	ldr	r1, [pc, #284]	@ (8000bd4 <main+0x65c>)
 8000ab8:	5c89      	ldrb	r1, [r1, r2]
 8000aba:	4a55      	ldr	r2, [pc, #340]	@ (8000c10 <main+0x698>)
 8000abc:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 8000abe:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
 8000ac8:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8000acc:	2b03      	cmp	r3, #3
 8000ace:	d9df      	bls.n	8000a90 <main+0x518>
				 }
				 boostgpslatitude=f2u8_blatitude.fVal;
 8000ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ad2:	4a51      	ldr	r2, [pc, #324]	@ (8000c18 <main+0x6a0>)
 8000ad4:	6013      	str	r3, [r2, #0]

			 float2unit8 f2u8_blongitude;
				 for(uint8_t i=0;i<4;i++)
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8000adc:	e01b      	b.n	8000b16 <main+0x59e>
				 {
					 f2u8_blongitude.array[i]=lora_rx_buffer[i+13];
 8000ade:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000ae2:	f103 020d 	add.w	r2, r3, #13
 8000ae6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000aea:	493a      	ldr	r1, [pc, #232]	@ (8000bd4 <main+0x65c>)
 8000aec:	5c8a      	ldrb	r2, [r1, r2]
 8000aee:	3380      	adds	r3, #128	@ 0x80
 8000af0:	443b      	add	r3, r7
 8000af2:	f803 2c60 	strb.w	r2, [r3, #-96]
					 HYI_BUFFER[42+i]=lora_rx_buffer[i+13]; // 42 43 44 45
 8000af6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000afa:	f103 020d 	add.w	r2, r3, #13
 8000afe:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000b02:	332a      	adds	r3, #42	@ 0x2a
 8000b04:	4933      	ldr	r1, [pc, #204]	@ (8000bd4 <main+0x65c>)
 8000b06:	5c89      	ldrb	r1, [r1, r2]
 8000b08:	4a41      	ldr	r2, [pc, #260]	@ (8000c10 <main+0x698>)
 8000b0a:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 8000b0c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000b10:	3301      	adds	r3, #1
 8000b12:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8000b16:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000b1a:	2b03      	cmp	r3, #3
 8000b1c:	d9df      	bls.n	8000ade <main+0x566>
				 }
				 boostgpslongitude=f2u8_blongitude.fVal;
 8000b1e:	6a3b      	ldr	r3, [r7, #32]
 8000b20:	4a3e      	ldr	r2, [pc, #248]	@ (8000c1c <main+0x6a4>)
 8000b22:	6013      	str	r3, [r2, #0]

			 float2unit8 f2u8_baltitude;
				 for(uint8_t i=0;i<4;i++)
 8000b24:	2300      	movs	r3, #0
 8000b26:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8000b2a:	e010      	b.n	8000b4e <main+0x5d6>
				 {
					f2u8_baltitude.array[i]=lora_rx_buffer[i+17];
 8000b2c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8000b30:	f103 0211 	add.w	r2, r3, #17
 8000b34:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8000b38:	4926      	ldr	r1, [pc, #152]	@ (8000bd4 <main+0x65c>)
 8000b3a:	5c8a      	ldrb	r2, [r1, r2]
 8000b3c:	3380      	adds	r3, #128	@ 0x80
 8000b3e:	443b      	add	r3, r7
 8000b40:	f803 2c64 	strb.w	r2, [r3, #-100]
				 for(uint8_t i=0;i<4;i++)
 8000b44:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8000b48:	3301      	adds	r3, #1
 8000b4a:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8000b4e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8000b52:	2b03      	cmp	r3, #3
 8000b54:	d9ea      	bls.n	8000b2c <main+0x5b4>
				 }
				 boostaltitude=f2u8_baltitude.fVal;
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	4a31      	ldr	r2, [pc, #196]	@ (8000c20 <main+0x6a8>)
 8000b5a:	6013      	str	r3, [r2, #0]

			 float2unit8 f2u8_bspeed;

				 for(uint8_t i=0;i<4;i++)
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
 8000b62:	e010      	b.n	8000b86 <main+0x60e>
				 {
					 f2u8_bspeed.array[i]=lora_rx_buffer[i+21];
 8000b64:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8000b68:	f103 0215 	add.w	r2, r3, #21
 8000b6c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8000b70:	4918      	ldr	r1, [pc, #96]	@ (8000bd4 <main+0x65c>)
 8000b72:	5c8a      	ldrb	r2, [r1, r2]
 8000b74:	3380      	adds	r3, #128	@ 0x80
 8000b76:	443b      	add	r3, r7
 8000b78:	f803 2c68 	strb.w	r2, [r3, #-104]
				 for(uint8_t i=0;i<4;i++)
 8000b7c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8000b80:	3301      	adds	r3, #1
 8000b82:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
 8000b86:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8000b8a:	2b03      	cmp	r3, #3
 8000b8c:	d9ea      	bls.n	8000b64 <main+0x5ec>
				 }
				 boostspeed=f2u8_bspeed.fVal;
 8000b8e:	69bb      	ldr	r3, [r7, #24]
 8000b90:	4a24      	ldr	r2, [pc, #144]	@ (8000c24 <main+0x6ac>)
 8000b92:	6013      	str	r3, [r2, #0]

			 float2unit8 f2u8_btemp;
				 for(uint8_t i=0;i<4;i++)
 8000b94:	2300      	movs	r3, #0
 8000b96:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 8000b9a:	e010      	b.n	8000bbe <main+0x646>
				 {
					 f2u8_btemp.array[i]=lora_rx_buffer[i+25];
 8000b9c:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8000ba0:	f103 0219 	add.w	r2, r3, #25
 8000ba4:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8000ba8:	490a      	ldr	r1, [pc, #40]	@ (8000bd4 <main+0x65c>)
 8000baa:	5c8a      	ldrb	r2, [r1, r2]
 8000bac:	3380      	adds	r3, #128	@ 0x80
 8000bae:	443b      	add	r3, r7
 8000bb0:	f803 2c6c 	strb.w	r2, [r3, #-108]
				 for(uint8_t i=0;i<4;i++)
 8000bb4:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8000bb8:	3301      	adds	r3, #1
 8000bba:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 8000bbe:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8000bc2:	2b03      	cmp	r3, #3
 8000bc4:	d9ea      	bls.n	8000b9c <main+0x624>
				 }
				 boosttemperature=f2u8_btemp.fVal;
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	4a17      	ldr	r2, [pc, #92]	@ (8000c28 <main+0x6b0>)
 8000bca:	6013      	str	r3, [r2, #0]

			 float2unit8 f2u8_baccx;
				 for(uint8_t i=0;i<4;i++)
 8000bcc:	2300      	movs	r3, #0
 8000bce:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 8000bd2:	e03c      	b.n	8000c4e <main+0x6d6>
 8000bd4:	200002fc 	.word	0x200002fc
 8000bd8:	200003b8 	.word	0x200003b8
 8000bdc:	200003bc 	.word	0x200003bc
 8000be0:	200003c0 	.word	0x200003c0
 8000be4:	200003c1 	.word	0x200003c1
 8000be8:	200003c2 	.word	0x200003c2
 8000bec:	200003c3 	.word	0x200003c3
 8000bf0:	200003c4 	.word	0x200003c4
 8000bf4:	200003c8 	.word	0x200003c8
 8000bf8:	200003d0 	.word	0x200003d0
 8000bfc:	200003cc 	.word	0x200003cc
 8000c00:	200003c7 	.word	0x200003c7
 8000c04:	200003c6 	.word	0x200003c6
 8000c08:	200003c5 	.word	0x200003c5
 8000c0c:	200003d4 	.word	0x200003d4
 8000c10:	20000344 	.word	0x20000344
 8000c14:	20000394 	.word	0x20000394
 8000c18:	200003d8 	.word	0x200003d8
 8000c1c:	200003dc 	.word	0x200003dc
 8000c20:	200003e4 	.word	0x200003e4
 8000c24:	200003e0 	.word	0x200003e0
 8000c28:	200003e8 	.word	0x200003e8
				 {
					 f2u8_baccx.array[i]=lora_rx_buffer[i+29];
 8000c2c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000c30:	f103 021d 	add.w	r2, r3, #29
 8000c34:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000c38:	494b      	ldr	r1, [pc, #300]	@ (8000d68 <main+0x7f0>)
 8000c3a:	5c8a      	ldrb	r2, [r1, r2]
 8000c3c:	3380      	adds	r3, #128	@ 0x80
 8000c3e:	443b      	add	r3, r7
 8000c40:	f803 2c70 	strb.w	r2, [r3, #-112]
				 for(uint8_t i=0;i<4;i++)
 8000c44:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000c48:	3301      	adds	r3, #1
 8000c4a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 8000c4e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000c52:	2b03      	cmp	r3, #3
 8000c54:	d9ea      	bls.n	8000c2c <main+0x6b4>
				 }
				 boostaccx=f2u8_baccx.fVal;
 8000c56:	693b      	ldr	r3, [r7, #16]
 8000c58:	4a44      	ldr	r2, [pc, #272]	@ (8000d6c <main+0x7f4>)
 8000c5a:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_baccy;
				 for(uint8_t i=0;i<4;i++)
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
 8000c62:	e010      	b.n	8000c86 <main+0x70e>
				 {
					 f2u8_baccy.array[i]=lora_rx_buffer[i+33];
 8000c64:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8000c68:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 8000c6c:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8000c70:	493d      	ldr	r1, [pc, #244]	@ (8000d68 <main+0x7f0>)
 8000c72:	5c8a      	ldrb	r2, [r1, r2]
 8000c74:	3380      	adds	r3, #128	@ 0x80
 8000c76:	443b      	add	r3, r7
 8000c78:	f803 2c74 	strb.w	r2, [r3, #-116]
				 for(uint8_t i=0;i<4;i++)
 8000c7c:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8000c80:	3301      	adds	r3, #1
 8000c82:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
 8000c86:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8000c8a:	2b03      	cmp	r3, #3
 8000c8c:	d9ea      	bls.n	8000c64 <main+0x6ec>
				 }
					 boostaccy=f2u8_baccy.fVal;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	4a37      	ldr	r2, [pc, #220]	@ (8000d70 <main+0x7f8>)
 8000c92:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_baccz;
			      for(uint8_t i=0;i<4;i++)
 8000c94:	2300      	movs	r3, #0
 8000c96:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
 8000c9a:	e010      	b.n	8000cbe <main+0x746>
				 {
			    	  f2u8_baccz.array[i]=lora_rx_buffer[i+37];
 8000c9c:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8000ca0:	f103 0225 	add.w	r2, r3, #37	@ 0x25
 8000ca4:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8000ca8:	492f      	ldr	r1, [pc, #188]	@ (8000d68 <main+0x7f0>)
 8000caa:	5c8a      	ldrb	r2, [r1, r2]
 8000cac:	3380      	adds	r3, #128	@ 0x80
 8000cae:	443b      	add	r3, r7
 8000cb0:	f803 2c78 	strb.w	r2, [r3, #-120]
			      for(uint8_t i=0;i<4;i++)
 8000cb4:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8000cb8:	3301      	adds	r3, #1
 8000cba:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
 8000cbe:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8000cc2:	2b03      	cmp	r3, #3
 8000cc4:	d9ea      	bls.n	8000c9c <main+0x724>
				 }
					 boostaccz=f2u8_baccz.fVal;
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	4a2a      	ldr	r2, [pc, #168]	@ (8000d74 <main+0x7fc>)
 8000cca:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_broll;
				  for(uint8_t i=0;i<4;i++)
 8000ccc:	2300      	movs	r3, #0
 8000cce:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 8000cd2:	e010      	b.n	8000cf6 <main+0x77e>
				 {
					  f2u8_broll.array[i]=lora_rx_buffer[i+41];
 8000cd4:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8000cd8:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 8000cdc:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8000ce0:	4921      	ldr	r1, [pc, #132]	@ (8000d68 <main+0x7f0>)
 8000ce2:	5c8a      	ldrb	r2, [r1, r2]
 8000ce4:	3380      	adds	r3, #128	@ 0x80
 8000ce6:	443b      	add	r3, r7
 8000ce8:	f803 2c7c 	strb.w	r2, [r3, #-124]
				  for(uint8_t i=0;i<4;i++)
 8000cec:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 8000cf6:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8000cfa:	2b03      	cmp	r3, #3
 8000cfc:	d9ea      	bls.n	8000cd4 <main+0x75c>
				 }
					 boostroll=f2u8_broll.fVal;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a1d      	ldr	r2, [pc, #116]	@ (8000d78 <main+0x800>)
 8000d02:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_bpitch;
				  for(uint8_t i=0;i<4;i++)
 8000d04:	2300      	movs	r3, #0
 8000d06:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8000d0a:	e010      	b.n	8000d2e <main+0x7b6>
				 {
					  f2u8_bpitch.array[i]=lora_rx_buffer[i+45];
 8000d0c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000d10:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
 8000d14:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000d18:	4913      	ldr	r1, [pc, #76]	@ (8000d68 <main+0x7f0>)
 8000d1a:	5c8a      	ldrb	r2, [r1, r2]
 8000d1c:	3380      	adds	r3, #128	@ 0x80
 8000d1e:	443b      	add	r3, r7
 8000d20:	f803 2c80 	strb.w	r2, [r3, #-128]
				  for(uint8_t i=0;i<4;i++)
 8000d24:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000d28:	3301      	adds	r3, #1
 8000d2a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8000d2e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000d32:	2b03      	cmp	r3, #3
 8000d34:	d9ea      	bls.n	8000d0c <main+0x794>
				 }
					 boostpitch=f2u8_bpitch.fVal;
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	4a10      	ldr	r2, [pc, #64]	@ (8000d7c <main+0x804>)
 8000d3a:	6013      	str	r3, [r2, #0]

					 boostv4_battery=lora_rx_buffer[49];
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d68 <main+0x7f0>)
 8000d3e:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 8000d42:	4b0f      	ldr	r3, [pc, #60]	@ (8000d80 <main+0x808>)
 8000d44:	701a      	strb	r2, [r3, #0]
					 boostv4_mod=lora_rx_buffer[50];
 8000d46:	4b08      	ldr	r3, [pc, #32]	@ (8000d68 <main+0x7f0>)
 8000d48:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8000d4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d84 <main+0x80c>)
 8000d4e:	701a      	strb	r2, [r3, #0]
					 booststage_communication=lora_rx_buffer[51];
 8000d50:	4b05      	ldr	r3, [pc, #20]	@ (8000d68 <main+0x7f0>)
 8000d52:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 8000d56:	4b0c      	ldr	r3, [pc, #48]	@ (8000d88 <main+0x810>)
 8000d58:	701a      	strb	r2, [r3, #0]
}




	  tim1=HAL_GetTick();
 8000d5a:	f000 fd97 	bl	800188c <HAL_GetTick>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	4a0a      	ldr	r2, [pc, #40]	@ (8000d8c <main+0x814>)
 8000d62:	6013      	str	r3, [r2, #0]
	  if(HAL_GetTick()-tim1>500)
 8000d64:	e434      	b.n	80005d0 <main+0x58>
 8000d66:	bf00      	nop
 8000d68:	200002fc 	.word	0x200002fc
 8000d6c:	200003ec 	.word	0x200003ec
 8000d70:	200003f0 	.word	0x200003f0
 8000d74:	200003f4 	.word	0x200003f4
 8000d78:	200003f8 	.word	0x200003f8
 8000d7c:	200003fc 	.word	0x200003fc
 8000d80:	20000400 	.word	0x20000400
 8000d84:	20000401 	.word	0x20000401
 8000d88:	20000402 	.word	0x20000402
 8000d8c:	20000404 	.word	0x20000404

08000d90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b094      	sub	sp, #80	@ 0x50
 8000d94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d96:	f107 031c 	add.w	r3, r7, #28
 8000d9a:	2234      	movs	r2, #52	@ 0x34
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f009 fbaa 	bl	800a4f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da4:	f107 0308 	add.w	r3, r7, #8
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db4:	2300      	movs	r3, #0
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	4b29      	ldr	r3, [pc, #164]	@ (8000e60 <SystemClock_Config+0xd0>)
 8000dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dbc:	4a28      	ldr	r2, [pc, #160]	@ (8000e60 <SystemClock_Config+0xd0>)
 8000dbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dc4:	4b26      	ldr	r3, [pc, #152]	@ (8000e60 <SystemClock_Config+0xd0>)
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dcc:	607b      	str	r3, [r7, #4]
 8000dce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	603b      	str	r3, [r7, #0]
 8000dd4:	4b23      	ldr	r3, [pc, #140]	@ (8000e64 <SystemClock_Config+0xd4>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a22      	ldr	r2, [pc, #136]	@ (8000e64 <SystemClock_Config+0xd4>)
 8000dda:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000dde:	6013      	str	r3, [r2, #0]
 8000de0:	4b20      	ldr	r3, [pc, #128]	@ (8000e64 <SystemClock_Config+0xd4>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000de8:	603b      	str	r3, [r7, #0]
 8000dea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dec:	2301      	movs	r3, #1
 8000dee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000df0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000df4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df6:	2302      	movs	r3, #2
 8000df8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dfa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e00:	2304      	movs	r3, #4
 8000e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e04:	23a8      	movs	r3, #168	@ 0xa8
 8000e06:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e0c:	2307      	movs	r3, #7
 8000e0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e10:	2302      	movs	r3, #2
 8000e12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e14:	f107 031c 	add.w	r3, r7, #28
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f003 fdad 	bl	8004978 <HAL_RCC_OscConfig>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e24:	f000 fa5e 	bl	80012e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e28:	230f      	movs	r3, #15
 8000e2a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e34:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e38:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e3e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e40:	f107 0308 	add.w	r3, r7, #8
 8000e44:	2105      	movs	r1, #5
 8000e46:	4618      	mov	r0, r3
 8000e48:	f002 ff22 	bl	8003c90 <HAL_RCC_ClockConfig>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000e52:	f000 fa47 	bl	80012e4 <Error_Handler>
  }
}
 8000e56:	bf00      	nop
 8000e58:	3750      	adds	r7, #80	@ 0x50
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40007000 	.word	0x40007000

08000e68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e6e:	463b      	mov	r3, r7
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e7a:	4b21      	ldr	r3, [pc, #132]	@ (8000f00 <MX_ADC1_Init+0x98>)
 8000e7c:	4a21      	ldr	r2, [pc, #132]	@ (8000f04 <MX_ADC1_Init+0x9c>)
 8000e7e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e80:	4b1f      	ldr	r3, [pc, #124]	@ (8000f00 <MX_ADC1_Init+0x98>)
 8000e82:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e86:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e88:	4b1d      	ldr	r3, [pc, #116]	@ (8000f00 <MX_ADC1_Init+0x98>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f00 <MX_ADC1_Init+0x98>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e94:	4b1a      	ldr	r3, [pc, #104]	@ (8000f00 <MX_ADC1_Init+0x98>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e9a:	4b19      	ldr	r3, [pc, #100]	@ (8000f00 <MX_ADC1_Init+0x98>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ea2:	4b17      	ldr	r3, [pc, #92]	@ (8000f00 <MX_ADC1_Init+0x98>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ea8:	4b15      	ldr	r3, [pc, #84]	@ (8000f00 <MX_ADC1_Init+0x98>)
 8000eaa:	4a17      	ldr	r2, [pc, #92]	@ (8000f08 <MX_ADC1_Init+0xa0>)
 8000eac:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eae:	4b14      	ldr	r3, [pc, #80]	@ (8000f00 <MX_ADC1_Init+0x98>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000eb4:	4b12      	ldr	r3, [pc, #72]	@ (8000f00 <MX_ADC1_Init+0x98>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000eba:	4b11      	ldr	r3, [pc, #68]	@ (8000f00 <MX_ADC1_Init+0x98>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f00 <MX_ADC1_Init+0x98>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ec8:	480d      	ldr	r0, [pc, #52]	@ (8000f00 <MX_ADC1_Init+0x98>)
 8000eca:	f000 fd0f 	bl	80018ec <HAL_ADC_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ed4:	f000 fa06 	bl	80012e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000ed8:	230c      	movs	r3, #12
 8000eda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000edc:	2301      	movs	r3, #1
 8000ede:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee4:	463b      	mov	r3, r7
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4805      	ldr	r0, [pc, #20]	@ (8000f00 <MX_ADC1_Init+0x98>)
 8000eea:	f000 fd43 	bl	8001974 <HAL_ADC_ConfigChannel>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ef4:	f000 f9f6 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ef8:	bf00      	nop
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	2000013c 	.word	0x2000013c
 8000f04:	40012000 	.word	0x40012000
 8000f08:	0f000001 	.word	0x0f000001

08000f0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f10:	4b12      	ldr	r3, [pc, #72]	@ (8000f5c <MX_I2C1_Init+0x50>)
 8000f12:	4a13      	ldr	r2, [pc, #76]	@ (8000f60 <MX_I2C1_Init+0x54>)
 8000f14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f16:	4b11      	ldr	r3, [pc, #68]	@ (8000f5c <MX_I2C1_Init+0x50>)
 8000f18:	4a12      	ldr	r2, [pc, #72]	@ (8000f64 <MX_I2C1_Init+0x58>)
 8000f1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f5c <MX_I2C1_Init+0x50>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f22:	4b0e      	ldr	r3, [pc, #56]	@ (8000f5c <MX_I2C1_Init+0x50>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f28:	4b0c      	ldr	r3, [pc, #48]	@ (8000f5c <MX_I2C1_Init+0x50>)
 8000f2a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f30:	4b0a      	ldr	r3, [pc, #40]	@ (8000f5c <MX_I2C1_Init+0x50>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f36:	4b09      	ldr	r3, [pc, #36]	@ (8000f5c <MX_I2C1_Init+0x50>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f3c:	4b07      	ldr	r3, [pc, #28]	@ (8000f5c <MX_I2C1_Init+0x50>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f42:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <MX_I2C1_Init+0x50>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f48:	4804      	ldr	r0, [pc, #16]	@ (8000f5c <MX_I2C1_Init+0x50>)
 8000f4a:	f001 fa93 	bl	8002474 <HAL_I2C_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f54:	f000 f9c6 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000184 	.word	0x20000184
 8000f60:	40005400 	.word	0x40005400
 8000f64:	000186a0 	.word	0x000186a0

08000f68 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f6c:	4b17      	ldr	r3, [pc, #92]	@ (8000fcc <MX_SPI1_Init+0x64>)
 8000f6e:	4a18      	ldr	r2, [pc, #96]	@ (8000fd0 <MX_SPI1_Init+0x68>)
 8000f70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f72:	4b16      	ldr	r3, [pc, #88]	@ (8000fcc <MX_SPI1_Init+0x64>)
 8000f74:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f7a:	4b14      	ldr	r3, [pc, #80]	@ (8000fcc <MX_SPI1_Init+0x64>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f80:	4b12      	ldr	r3, [pc, #72]	@ (8000fcc <MX_SPI1_Init+0x64>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f86:	4b11      	ldr	r3, [pc, #68]	@ (8000fcc <MX_SPI1_Init+0x64>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fcc <MX_SPI1_Init+0x64>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f92:	4b0e      	ldr	r3, [pc, #56]	@ (8000fcc <MX_SPI1_Init+0x64>)
 8000f94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f98:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fcc <MX_SPI1_Init+0x64>)
 8000f9c:	2220      	movs	r2, #32
 8000f9e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8000fcc <MX_SPI1_Init+0x64>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fa6:	4b09      	ldr	r3, [pc, #36]	@ (8000fcc <MX_SPI1_Init+0x64>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fac:	4b07      	ldr	r3, [pc, #28]	@ (8000fcc <MX_SPI1_Init+0x64>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000fb2:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <MX_SPI1_Init+0x64>)
 8000fb4:	220a      	movs	r2, #10
 8000fb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fb8:	4804      	ldr	r0, [pc, #16]	@ (8000fcc <MX_SPI1_Init+0x64>)
 8000fba:	f003 ff7b 	bl	8004eb4 <HAL_SPI_Init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000fc4:	f000 f98e 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	200001d8 	.word	0x200001d8
 8000fd0:	40013000 	.word	0x40013000

08000fd4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	@ (8001020 <MX_UART4_Init+0x4c>)
 8000fda:	4a12      	ldr	r2, [pc, #72]	@ (8001024 <MX_UART4_Init+0x50>)
 8000fdc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000fde:	4b10      	ldr	r3, [pc, #64]	@ (8001020 <MX_UART4_Init+0x4c>)
 8000fe0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fe4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8001020 <MX_UART4_Init+0x4c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000fec:	4b0c      	ldr	r3, [pc, #48]	@ (8001020 <MX_UART4_Init+0x4c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8001020 <MX_UART4_Init+0x4c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000ff8:	4b09      	ldr	r3, [pc, #36]	@ (8001020 <MX_UART4_Init+0x4c>)
 8000ffa:	220c      	movs	r2, #12
 8000ffc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ffe:	4b08      	ldr	r3, [pc, #32]	@ (8001020 <MX_UART4_Init+0x4c>)
 8001000:	2200      	movs	r2, #0
 8001002:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001004:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <MX_UART4_Init+0x4c>)
 8001006:	2200      	movs	r2, #0
 8001008:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800100a:	4805      	ldr	r0, [pc, #20]	@ (8001020 <MX_UART4_Init+0x4c>)
 800100c:	f003 ffdb 	bl	8004fc6 <HAL_UART_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001016:	f000 f965 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000230 	.word	0x20000230
 8001024:	40004c00 	.word	0x40004c00

08001028 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800102c:	4b11      	ldr	r3, [pc, #68]	@ (8001074 <MX_USART2_UART_Init+0x4c>)
 800102e:	4a12      	ldr	r2, [pc, #72]	@ (8001078 <MX_USART2_UART_Init+0x50>)
 8001030:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001032:	4b10      	ldr	r3, [pc, #64]	@ (8001074 <MX_USART2_UART_Init+0x4c>)
 8001034:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001038:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800103a:	4b0e      	ldr	r3, [pc, #56]	@ (8001074 <MX_USART2_UART_Init+0x4c>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001040:	4b0c      	ldr	r3, [pc, #48]	@ (8001074 <MX_USART2_UART_Init+0x4c>)
 8001042:	2200      	movs	r2, #0
 8001044:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001046:	4b0b      	ldr	r3, [pc, #44]	@ (8001074 <MX_USART2_UART_Init+0x4c>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800104c:	4b09      	ldr	r3, [pc, #36]	@ (8001074 <MX_USART2_UART_Init+0x4c>)
 800104e:	220c      	movs	r2, #12
 8001050:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001052:	4b08      	ldr	r3, [pc, #32]	@ (8001074 <MX_USART2_UART_Init+0x4c>)
 8001054:	2200      	movs	r2, #0
 8001056:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001058:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <MX_USART2_UART_Init+0x4c>)
 800105a:	2200      	movs	r2, #0
 800105c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800105e:	4805      	ldr	r0, [pc, #20]	@ (8001074 <MX_USART2_UART_Init+0x4c>)
 8001060:	f003 ffb1 	bl	8004fc6 <HAL_UART_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800106a:	f000 f93b 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000274 	.word	0x20000274
 8001078:	40004400 	.word	0x40004400

0800107c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001080:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <MX_USART3_UART_Init+0x4c>)
 8001082:	4a12      	ldr	r2, [pc, #72]	@ (80010cc <MX_USART3_UART_Init+0x50>)
 8001084:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001086:	4b10      	ldr	r3, [pc, #64]	@ (80010c8 <MX_USART3_UART_Init+0x4c>)
 8001088:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800108c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800108e:	4b0e      	ldr	r3, [pc, #56]	@ (80010c8 <MX_USART3_UART_Init+0x4c>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001094:	4b0c      	ldr	r3, [pc, #48]	@ (80010c8 <MX_USART3_UART_Init+0x4c>)
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800109a:	4b0b      	ldr	r3, [pc, #44]	@ (80010c8 <MX_USART3_UART_Init+0x4c>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010a0:	4b09      	ldr	r3, [pc, #36]	@ (80010c8 <MX_USART3_UART_Init+0x4c>)
 80010a2:	220c      	movs	r2, #12
 80010a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a6:	4b08      	ldr	r3, [pc, #32]	@ (80010c8 <MX_USART3_UART_Init+0x4c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ac:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <MX_USART3_UART_Init+0x4c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010b2:	4805      	ldr	r0, [pc, #20]	@ (80010c8 <MX_USART3_UART_Init+0x4c>)
 80010b4:	f003 ff87 	bl	8004fc6 <HAL_UART_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80010be:	f000 f911 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200002b8 	.word	0x200002b8
 80010cc:	40004800 	.word	0x40004800

080010d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	@ 0x28
 80010d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]
 80010e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	4b4c      	ldr	r3, [pc, #304]	@ (800121c <MX_GPIO_Init+0x14c>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	4a4b      	ldr	r2, [pc, #300]	@ (800121c <MX_GPIO_Init+0x14c>)
 80010f0:	f043 0304 	orr.w	r3, r3, #4
 80010f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f6:	4b49      	ldr	r3, [pc, #292]	@ (800121c <MX_GPIO_Init+0x14c>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fa:	f003 0304 	and.w	r3, r3, #4
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	4b45      	ldr	r3, [pc, #276]	@ (800121c <MX_GPIO_Init+0x14c>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	4a44      	ldr	r2, [pc, #272]	@ (800121c <MX_GPIO_Init+0x14c>)
 800110c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001110:	6313      	str	r3, [r2, #48]	@ 0x30
 8001112:	4b42      	ldr	r3, [pc, #264]	@ (800121c <MX_GPIO_Init+0x14c>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	4b3e      	ldr	r3, [pc, #248]	@ (800121c <MX_GPIO_Init+0x14c>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001126:	4a3d      	ldr	r2, [pc, #244]	@ (800121c <MX_GPIO_Init+0x14c>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	6313      	str	r3, [r2, #48]	@ 0x30
 800112e:	4b3b      	ldr	r3, [pc, #236]	@ (800121c <MX_GPIO_Init+0x14c>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	4b37      	ldr	r3, [pc, #220]	@ (800121c <MX_GPIO_Init+0x14c>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	4a36      	ldr	r2, [pc, #216]	@ (800121c <MX_GPIO_Init+0x14c>)
 8001144:	f043 0302 	orr.w	r3, r3, #2
 8001148:	6313      	str	r3, [r2, #48]	@ 0x30
 800114a:	4b34      	ldr	r3, [pc, #208]	@ (800121c <MX_GPIO_Init+0x14c>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|BUZZER_Pin|GATE_D_Pin|GATE_C_Pin, GPIO_PIN_RESET);
 8001156:	2200      	movs	r2, #0
 8001158:	f640 4112 	movw	r1, #3090	@ 0xc12
 800115c:	4830      	ldr	r0, [pc, #192]	@ (8001220 <MX_GPIO_Init+0x150>)
 800115e:	f001 f96f 	bl	8002440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M0_Pin|M1_Pin|FN_Pin|LED2_Pin
 8001162:	2200      	movs	r2, #0
 8001164:	f246 011f 	movw	r1, #24607	@ 0x601f
 8001168:	482e      	ldr	r0, [pc, #184]	@ (8001224 <MX_GPIO_Init+0x154>)
 800116a:	f001 f969 	bl	8002440 <HAL_GPIO_WritePin>
                          |LED1_Pin|GATE_B_Pin|GATE_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800116e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001172:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001174:	2300      	movs	r3, #0
 8001176:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	4619      	mov	r1, r3
 8001182:	4827      	ldr	r0, [pc, #156]	@ (8001220 <MX_GPIO_Init+0x150>)
 8001184:	f000 ffc8 	bl	8002118 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin BUZZER_Pin GATE_D_Pin GATE_C_Pin */
  GPIO_InitStruct.Pin = CS_Pin|BUZZER_Pin|GATE_D_Pin|GATE_C_Pin;
 8001188:	f640 4312 	movw	r3, #3090	@ 0xc12
 800118c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118e:	2301      	movs	r3, #1
 8001190:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001196:	2300      	movs	r3, #0
 8001198:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	4619      	mov	r1, r3
 80011a0:	481f      	ldr	r0, [pc, #124]	@ (8001220 <MX_GPIO_Init+0x150>)
 80011a2:	f000 ffb9 	bl	8002118 <HAL_GPIO_Init>

  /*Configure GPIO pins : M0_Pin M1_Pin FN_Pin LED2_Pin
                           LED1_Pin GATE_B_Pin GATE_A_Pin */
  GPIO_InitStruct.Pin = M0_Pin|M1_Pin|FN_Pin|LED2_Pin
 80011a6:	f246 031f 	movw	r3, #24607	@ 0x601f
 80011aa:	617b      	str	r3, [r7, #20]
                          |LED1_Pin|GATE_B_Pin|GATE_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ac:	2301      	movs	r3, #1
 80011ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b4:	2300      	movs	r3, #0
 80011b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	4619      	mov	r1, r3
 80011be:	4819      	ldr	r0, [pc, #100]	@ (8001224 <MX_GPIO_Init+0x154>)
 80011c0:	f000 ffaa 	bl	8002118 <HAL_GPIO_Init>

  /*Configure GPIO pin : SECINP_Pin */
  GPIO_InitStruct.Pin = SECINP_Pin;
 80011c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ce:	2301      	movs	r3, #1
 80011d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SECINP_GPIO_Port, &GPIO_InitStruct);
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	4619      	mov	r1, r3
 80011d8:	4812      	ldr	r0, [pc, #72]	@ (8001224 <MX_GPIO_Init+0x154>)
 80011da:	f000 ff9d 	bl	8002118 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80011de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011e8:	2301      	movs	r3, #1
 80011ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	4619      	mov	r1, r3
 80011f2:	480b      	ldr	r0, [pc, #44]	@ (8001220 <MX_GPIO_Init+0x150>)
 80011f4:	f000 ff90 	bl	8002118 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|INT2_Pin;
 80011f8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011fe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001202:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	4619      	mov	r1, r3
 800120e:	4805      	ldr	r0, [pc, #20]	@ (8001224 <MX_GPIO_Init+0x154>)
 8001210:	f000 ff82 	bl	8002118 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001214:	bf00      	nop
 8001216:	3728      	adds	r7, #40	@ 0x28
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40023800 	.word	0x40023800
 8001220:	40020800 	.word	0x40020800
 8001224:	40020400 	.word	0x40020400

08001228 <E220_CONFIG>:

/* USER CODE BEGIN 4 */
void E220_CONFIG(uint8_t ADDH, uint8_t ADDL, uint8_t CHN, uint8_t MODE)
{
 8001228:	b590      	push	{r4, r7, lr}
 800122a:	b087      	sub	sp, #28
 800122c:	af00      	add	r7, sp, #0
 800122e:	4604      	mov	r4, r0
 8001230:	4608      	mov	r0, r1
 8001232:	4611      	mov	r1, r2
 8001234:	461a      	mov	r2, r3
 8001236:	4623      	mov	r3, r4
 8001238:	71fb      	strb	r3, [r7, #7]
 800123a:	4603      	mov	r3, r0
 800123c:	71bb      	strb	r3, [r7, #6]
 800123e:	460b      	mov	r3, r1
 8001240:	717b      	strb	r3, [r7, #5]
 8001242:	4613      	mov	r3, r2
 8001244:	713b      	strb	r3, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, SET);
 8001246:	2201      	movs	r2, #1
 8001248:	2104      	movs	r1, #4
 800124a:	4824      	ldr	r0, [pc, #144]	@ (80012dc <E220_CONFIG+0xb4>)
 800124c:	f001 f8f8 	bl	8002440 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 8001250:	2201      	movs	r2, #1
 8001252:	2102      	movs	r1, #2
 8001254:	4821      	ldr	r0, [pc, #132]	@ (80012dc <E220_CONFIG+0xb4>)
 8001256:	f001 f8f3 	bl	8002440 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800125a:	2032      	movs	r0, #50	@ 0x32
 800125c:	f000 fb22 	bl	80018a4 <HAL_Delay>

    char cfg_buff[8] = {0}; // E220 için 8 elemanlı bir dizi kullanıyoruz
 8001260:	2300      	movs	r3, #0
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	2300      	movs	r3, #0
 8001266:	613b      	str	r3, [r7, #16]
    enum {Transparent, Fixed} mode;
    mode = MODE;
 8001268:	793b      	ldrb	r3, [r7, #4]
 800126a:	75fb      	strb	r3, [r7, #23]

    cfg_buff[0] = ADDH;
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	733b      	strb	r3, [r7, #12]
    cfg_buff[1] = ADDL;
 8001270:	79bb      	ldrb	r3, [r7, #6]
 8001272:	737b      	strb	r3, [r7, #13]
    cfg_buff[2] = 0x62;
 8001274:	2362      	movs	r3, #98	@ 0x62
 8001276:	73bb      	strb	r3, [r7, #14]
    cfg_buff[3] = 0x00;
 8001278:	2300      	movs	r3, #0
 800127a:	73fb      	strb	r3, [r7, #15]
    cfg_buff[4] = CHN;
 800127c:	797b      	ldrb	r3, [r7, #5]
 800127e:	743b      	strb	r3, [r7, #16]

    switch(mode){
 8001280:	7dfb      	ldrb	r3, [r7, #23]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d002      	beq.n	800128c <E220_CONFIG+0x64>
 8001286:	2b01      	cmp	r3, #1
 8001288:	d003      	beq.n	8001292 <E220_CONFIG+0x6a>
 800128a:	e005      	b.n	8001298 <E220_CONFIG+0x70>
        case Transparent:
            cfg_buff[5] = 0x00;  // opsiyon
 800128c:	2300      	movs	r3, #0
 800128e:	747b      	strb	r3, [r7, #17]
            break;
 8001290:	e004      	b.n	800129c <E220_CONFIG+0x74>
        case Fixed:
            cfg_buff[5] = 0x11;
 8001292:	2311      	movs	r3, #17
 8001294:	747b      	strb	r3, [r7, #17]
            break;
 8001296:	e001      	b.n	800129c <E220_CONFIG+0x74>
        default:
            cfg_buff[5] = 0x11;
 8001298:	2311      	movs	r3, #17
 800129a:	747b      	strb	r3, [r7, #17]
     }

     cfg_buff[6] = 0x00;
 800129c:	2300      	movs	r3, #0
 800129e:	74bb      	strb	r3, [r7, #18]
     cfg_buff[7] = 0x00;
 80012a0:	2300      	movs	r3, #0
 80012a2:	74fb      	strb	r3, [r7, #19]


    HAL_UART_Transmit(&huart3, (uint8_t*) cfg_buff, 8, 1000);
 80012a4:	f107 010c 	add.w	r1, r7, #12
 80012a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ac:	2208      	movs	r2, #8
 80012ae:	480c      	ldr	r0, [pc, #48]	@ (80012e0 <E220_CONFIG+0xb8>)
 80012b0:	f003 fed6 	bl	8005060 <HAL_UART_Transmit>

    HAL_Delay(25);
 80012b4:	2019      	movs	r0, #25
 80012b6:	f000 faf5 	bl	80018a4 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2104      	movs	r1, #4
 80012be:	4807      	ldr	r0, [pc, #28]	@ (80012dc <E220_CONFIG+0xb4>)
 80012c0:	f001 f8be 	bl	8002440 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 80012c4:	2200      	movs	r2, #0
 80012c6:	2102      	movs	r1, #2
 80012c8:	4804      	ldr	r0, [pc, #16]	@ (80012dc <E220_CONFIG+0xb4>)
 80012ca:	f001 f8b9 	bl	8002440 <HAL_GPIO_WritePin>
    HAL_Delay(25);
 80012ce:	2019      	movs	r0, #25
 80012d0:	f000 fae8 	bl	80018a4 <HAL_Delay>
}
 80012d4:	bf00      	nop
 80012d6:	371c      	adds	r7, #28
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd90      	pop	{r4, r7, pc}
 80012dc:	40020400 	.word	0x40020400
 80012e0:	200002b8 	.word	0x200002b8

080012e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e8:	b672      	cpsid	i
}
 80012ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ec:	bf00      	nop
 80012ee:	e7fd      	b.n	80012ec <Error_Handler+0x8>

080012f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	4b10      	ldr	r3, [pc, #64]	@ (800133c <HAL_MspInit+0x4c>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fe:	4a0f      	ldr	r2, [pc, #60]	@ (800133c <HAL_MspInit+0x4c>)
 8001300:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001304:	6453      	str	r3, [r2, #68]	@ 0x44
 8001306:	4b0d      	ldr	r3, [pc, #52]	@ (800133c <HAL_MspInit+0x4c>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	603b      	str	r3, [r7, #0]
 8001316:	4b09      	ldr	r3, [pc, #36]	@ (800133c <HAL_MspInit+0x4c>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131a:	4a08      	ldr	r2, [pc, #32]	@ (800133c <HAL_MspInit+0x4c>)
 800131c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001320:	6413      	str	r3, [r2, #64]	@ 0x40
 8001322:	4b06      	ldr	r3, [pc, #24]	@ (800133c <HAL_MspInit+0x4c>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001326:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800132a:	603b      	str	r3, [r7, #0]
 800132c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800

08001340 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08a      	sub	sp, #40	@ 0x28
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a17      	ldr	r2, [pc, #92]	@ (80013bc <HAL_ADC_MspInit+0x7c>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d127      	bne.n	80013b2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	4b16      	ldr	r3, [pc, #88]	@ (80013c0 <HAL_ADC_MspInit+0x80>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136a:	4a15      	ldr	r2, [pc, #84]	@ (80013c0 <HAL_ADC_MspInit+0x80>)
 800136c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001370:	6453      	str	r3, [r2, #68]	@ 0x44
 8001372:	4b13      	ldr	r3, [pc, #76]	@ (80013c0 <HAL_ADC_MspInit+0x80>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001376:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	4b0f      	ldr	r3, [pc, #60]	@ (80013c0 <HAL_ADC_MspInit+0x80>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	4a0e      	ldr	r2, [pc, #56]	@ (80013c0 <HAL_ADC_MspInit+0x80>)
 8001388:	f043 0304 	orr.w	r3, r3, #4
 800138c:	6313      	str	r3, [r2, #48]	@ 0x30
 800138e:	4b0c      	ldr	r3, [pc, #48]	@ (80013c0 <HAL_ADC_MspInit+0x80>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	f003 0304 	and.w	r3, r3, #4
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC_VCC_Pin;
 800139a:	2304      	movs	r3, #4
 800139c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800139e:	2303      	movs	r3, #3
 80013a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_VCC_GPIO_Port, &GPIO_InitStruct);
 80013a6:	f107 0314 	add.w	r3, r7, #20
 80013aa:	4619      	mov	r1, r3
 80013ac:	4805      	ldr	r0, [pc, #20]	@ (80013c4 <HAL_ADC_MspInit+0x84>)
 80013ae:	f000 feb3 	bl	8002118 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013b2:	bf00      	nop
 80013b4:	3728      	adds	r7, #40	@ 0x28
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40012000 	.word	0x40012000
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40020800 	.word	0x40020800

080013c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	@ 0x28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a19      	ldr	r2, [pc, #100]	@ (800144c <HAL_I2C_MspInit+0x84>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d12b      	bne.n	8001442 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	4b18      	ldr	r3, [pc, #96]	@ (8001450 <HAL_I2C_MspInit+0x88>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f2:	4a17      	ldr	r2, [pc, #92]	@ (8001450 <HAL_I2C_MspInit+0x88>)
 80013f4:	f043 0302 	orr.w	r3, r3, #2
 80013f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fa:	4b15      	ldr	r3, [pc, #84]	@ (8001450 <HAL_I2C_MspInit+0x88>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001406:	23c0      	movs	r3, #192	@ 0xc0
 8001408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800140a:	2312      	movs	r3, #18
 800140c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001412:	2303      	movs	r3, #3
 8001414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001416:	2304      	movs	r3, #4
 8001418:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	4619      	mov	r1, r3
 8001420:	480c      	ldr	r0, [pc, #48]	@ (8001454 <HAL_I2C_MspInit+0x8c>)
 8001422:	f000 fe79 	bl	8002118 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <HAL_I2C_MspInit+0x88>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142e:	4a08      	ldr	r2, [pc, #32]	@ (8001450 <HAL_I2C_MspInit+0x88>)
 8001430:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001434:	6413      	str	r3, [r2, #64]	@ 0x40
 8001436:	4b06      	ldr	r3, [pc, #24]	@ (8001450 <HAL_I2C_MspInit+0x88>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001442:	bf00      	nop
 8001444:	3728      	adds	r7, #40	@ 0x28
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40005400 	.word	0x40005400
 8001450:	40023800 	.word	0x40023800
 8001454:	40020400 	.word	0x40020400

08001458 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08a      	sub	sp, #40	@ 0x28
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a19      	ldr	r2, [pc, #100]	@ (80014dc <HAL_SPI_MspInit+0x84>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d12b      	bne.n	80014d2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	4b18      	ldr	r3, [pc, #96]	@ (80014e0 <HAL_SPI_MspInit+0x88>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001482:	4a17      	ldr	r2, [pc, #92]	@ (80014e0 <HAL_SPI_MspInit+0x88>)
 8001484:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001488:	6453      	str	r3, [r2, #68]	@ 0x44
 800148a:	4b15      	ldr	r3, [pc, #84]	@ (80014e0 <HAL_SPI_MspInit+0x88>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001492:	613b      	str	r3, [r7, #16]
 8001494:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	4b11      	ldr	r3, [pc, #68]	@ (80014e0 <HAL_SPI_MspInit+0x88>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	4a10      	ldr	r2, [pc, #64]	@ (80014e0 <HAL_SPI_MspInit+0x88>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a6:	4b0e      	ldr	r3, [pc, #56]	@ (80014e0 <HAL_SPI_MspInit+0x88>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80014b2:	23e0      	movs	r3, #224	@ 0xe0
 80014b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014be:	2303      	movs	r3, #3
 80014c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014c2:	2305      	movs	r3, #5
 80014c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	4619      	mov	r1, r3
 80014cc:	4805      	ldr	r0, [pc, #20]	@ (80014e4 <HAL_SPI_MspInit+0x8c>)
 80014ce:	f000 fe23 	bl	8002118 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014d2:	bf00      	nop
 80014d4:	3728      	adds	r7, #40	@ 0x28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40013000 	.word	0x40013000
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40020000 	.word	0x40020000

080014e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08e      	sub	sp, #56	@ 0x38
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a62      	ldr	r2, [pc, #392]	@ (8001690 <HAL_UART_MspInit+0x1a8>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d12c      	bne.n	8001564 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	623b      	str	r3, [r7, #32]
 800150e:	4b61      	ldr	r3, [pc, #388]	@ (8001694 <HAL_UART_MspInit+0x1ac>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001512:	4a60      	ldr	r2, [pc, #384]	@ (8001694 <HAL_UART_MspInit+0x1ac>)
 8001514:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001518:	6413      	str	r3, [r2, #64]	@ 0x40
 800151a:	4b5e      	ldr	r3, [pc, #376]	@ (8001694 <HAL_UART_MspInit+0x1ac>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001522:	623b      	str	r3, [r7, #32]
 8001524:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	61fb      	str	r3, [r7, #28]
 800152a:	4b5a      	ldr	r3, [pc, #360]	@ (8001694 <HAL_UART_MspInit+0x1ac>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	4a59      	ldr	r2, [pc, #356]	@ (8001694 <HAL_UART_MspInit+0x1ac>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	6313      	str	r3, [r2, #48]	@ 0x30
 8001536:	4b57      	ldr	r3, [pc, #348]	@ (8001694 <HAL_UART_MspInit+0x1ac>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	61fb      	str	r3, [r7, #28]
 8001540:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001542:	2303      	movs	r3, #3
 8001544:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154e:	2303      	movs	r3, #3
 8001550:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001552:	2308      	movs	r3, #8
 8001554:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001556:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800155a:	4619      	mov	r1, r3
 800155c:	484e      	ldr	r0, [pc, #312]	@ (8001698 <HAL_UART_MspInit+0x1b0>)
 800155e:	f000 fddb 	bl	8002118 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001562:	e091      	b.n	8001688 <HAL_UART_MspInit+0x1a0>
  else if(huart->Instance==USART2)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a4c      	ldr	r2, [pc, #304]	@ (800169c <HAL_UART_MspInit+0x1b4>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d134      	bne.n	80015d8 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	61bb      	str	r3, [r7, #24]
 8001572:	4b48      	ldr	r3, [pc, #288]	@ (8001694 <HAL_UART_MspInit+0x1ac>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001576:	4a47      	ldr	r2, [pc, #284]	@ (8001694 <HAL_UART_MspInit+0x1ac>)
 8001578:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800157c:	6413      	str	r3, [r2, #64]	@ 0x40
 800157e:	4b45      	ldr	r3, [pc, #276]	@ (8001694 <HAL_UART_MspInit+0x1ac>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001586:	61bb      	str	r3, [r7, #24]
 8001588:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
 800158e:	4b41      	ldr	r3, [pc, #260]	@ (8001694 <HAL_UART_MspInit+0x1ac>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	4a40      	ldr	r2, [pc, #256]	@ (8001694 <HAL_UART_MspInit+0x1ac>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6313      	str	r3, [r2, #48]	@ 0x30
 800159a:	4b3e      	ldr	r3, [pc, #248]	@ (8001694 <HAL_UART_MspInit+0x1ac>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TX2_GPS_Pin|RX2_GPS_Pin;
 80015a6:	230c      	movs	r3, #12
 80015a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015aa:	2302      	movs	r3, #2
 80015ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b2:	2303      	movs	r3, #3
 80015b4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015b6:	2307      	movs	r3, #7
 80015b8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015be:	4619      	mov	r1, r3
 80015c0:	4835      	ldr	r0, [pc, #212]	@ (8001698 <HAL_UART_MspInit+0x1b0>)
 80015c2:	f000 fda9 	bl	8002118 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2100      	movs	r1, #0
 80015ca:	2026      	movs	r0, #38	@ 0x26
 80015cc:	f000 fcdb 	bl	8001f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015d0:	2026      	movs	r0, #38	@ 0x26
 80015d2:	f000 fcf4 	bl	8001fbe <HAL_NVIC_EnableIRQ>
}
 80015d6:	e057      	b.n	8001688 <HAL_UART_MspInit+0x1a0>
  else if(huart->Instance==USART3)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a30      	ldr	r2, [pc, #192]	@ (80016a0 <HAL_UART_MspInit+0x1b8>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d152      	bne.n	8001688 <HAL_UART_MspInit+0x1a0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
 80015e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001694 <HAL_UART_MspInit+0x1ac>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ea:	4a2a      	ldr	r2, [pc, #168]	@ (8001694 <HAL_UART_MspInit+0x1ac>)
 80015ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80015f2:	4b28      	ldr	r3, [pc, #160]	@ (8001694 <HAL_UART_MspInit+0x1ac>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	4b24      	ldr	r3, [pc, #144]	@ (8001694 <HAL_UART_MspInit+0x1ac>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001606:	4a23      	ldr	r2, [pc, #140]	@ (8001694 <HAL_UART_MspInit+0x1ac>)
 8001608:	f043 0304 	orr.w	r3, r3, #4
 800160c:	6313      	str	r3, [r2, #48]	@ 0x30
 800160e:	4b21      	ldr	r3, [pc, #132]	@ (8001694 <HAL_UART_MspInit+0x1ac>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	f003 0304 	and.w	r3, r3, #4
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	60bb      	str	r3, [r7, #8]
 800161e:	4b1d      	ldr	r3, [pc, #116]	@ (8001694 <HAL_UART_MspInit+0x1ac>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	4a1c      	ldr	r2, [pc, #112]	@ (8001694 <HAL_UART_MspInit+0x1ac>)
 8001624:	f043 0302 	orr.w	r3, r3, #2
 8001628:	6313      	str	r3, [r2, #48]	@ 0x30
 800162a:	4b1a      	ldr	r3, [pc, #104]	@ (8001694 <HAL_UART_MspInit+0x1ac>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RX3_LORA_Pin;
 8001636:	2320      	movs	r3, #32
 8001638:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163a:	2302      	movs	r3, #2
 800163c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001642:	2303      	movs	r3, #3
 8001644:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001646:	2307      	movs	r3, #7
 8001648:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RX3_LORA_GPIO_Port, &GPIO_InitStruct);
 800164a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800164e:	4619      	mov	r1, r3
 8001650:	4814      	ldr	r0, [pc, #80]	@ (80016a4 <HAL_UART_MspInit+0x1bc>)
 8001652:	f000 fd61 	bl	8002118 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TX3_LORA_Pin;
 8001656:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800165a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165c:	2302      	movs	r3, #2
 800165e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001664:	2303      	movs	r3, #3
 8001666:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001668:	2307      	movs	r3, #7
 800166a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(TX3_LORA_GPIO_Port, &GPIO_InitStruct);
 800166c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001670:	4619      	mov	r1, r3
 8001672:	480d      	ldr	r0, [pc, #52]	@ (80016a8 <HAL_UART_MspInit+0x1c0>)
 8001674:	f000 fd50 	bl	8002118 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001678:	2200      	movs	r2, #0
 800167a:	2100      	movs	r1, #0
 800167c:	2027      	movs	r0, #39	@ 0x27
 800167e:	f000 fc82 	bl	8001f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001682:	2027      	movs	r0, #39	@ 0x27
 8001684:	f000 fc9b 	bl	8001fbe <HAL_NVIC_EnableIRQ>
}
 8001688:	bf00      	nop
 800168a:	3738      	adds	r7, #56	@ 0x38
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40004c00 	.word	0x40004c00
 8001694:	40023800 	.word	0x40023800
 8001698:	40020000 	.word	0x40020000
 800169c:	40004400 	.word	0x40004400
 80016a0:	40004800 	.word	0x40004800
 80016a4:	40020800 	.word	0x40020800
 80016a8:	40020400 	.word	0x40020400

080016ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016b0:	bf00      	nop
 80016b2:	e7fd      	b.n	80016b0 <NMI_Handler+0x4>

080016b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b8:	bf00      	nop
 80016ba:	e7fd      	b.n	80016b8 <HardFault_Handler+0x4>

080016bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016c0:	bf00      	nop
 80016c2:	e7fd      	b.n	80016c0 <MemManage_Handler+0x4>

080016c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c8:	bf00      	nop
 80016ca:	e7fd      	b.n	80016c8 <BusFault_Handler+0x4>

080016cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d0:	bf00      	nop
 80016d2:	e7fd      	b.n	80016d0 <UsageFault_Handler+0x4>

080016d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001702:	f000 f8af 	bl	8001864 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001710:	4802      	ldr	r0, [pc, #8]	@ (800171c <USART2_IRQHandler+0x10>)
 8001712:	f003 fd67 	bl	80051e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000274 	.word	0x20000274

08001720 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001724:	4802      	ldr	r0, [pc, #8]	@ (8001730 <USART3_IRQHandler+0x10>)
 8001726:	f003 fd5d 	bl	80051e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	200002b8 	.word	0x200002b8

08001734 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001738:	4802      	ldr	r0, [pc, #8]	@ (8001744 <OTG_FS_IRQHandler+0x10>)
 800173a:	f001 f936 	bl	80029aa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200011b0 	.word	0x200011b0

08001748 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800174c:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <SystemInit+0x20>)
 800174e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001752:	4a05      	ldr	r2, [pc, #20]	@ (8001768 <SystemInit+0x20>)
 8001754:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001758:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800176c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001770:	480d      	ldr	r0, [pc, #52]	@ (80017a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001772:	490e      	ldr	r1, [pc, #56]	@ (80017ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001774:	4a0e      	ldr	r2, [pc, #56]	@ (80017b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001778:	e002      	b.n	8001780 <LoopCopyDataInit>

0800177a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800177a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800177c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800177e:	3304      	adds	r3, #4

08001780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001784:	d3f9      	bcc.n	800177a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001786:	4a0b      	ldr	r2, [pc, #44]	@ (80017b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001788:	4c0b      	ldr	r4, [pc, #44]	@ (80017b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800178a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800178c:	e001      	b.n	8001792 <LoopFillZerobss>

0800178e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800178e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001790:	3204      	adds	r2, #4

08001792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001794:	d3fb      	bcc.n	800178e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001796:	f7ff ffd7 	bl	8001748 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800179a:	f008 feb5 	bl	800a508 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800179e:	f7fe feeb 	bl	8000578 <main>
  bx  lr    
 80017a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017ac:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 80017b0:	0800a5d8 	.word	0x0800a5d8
  ldr r2, =_sbss
 80017b4:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 80017b8:	200018dc 	.word	0x200018dc

080017bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017bc:	e7fe      	b.n	80017bc <ADC_IRQHandler>
	...

080017c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001800 <HAL_Init+0x40>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001800 <HAL_Init+0x40>)
 80017ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001800 <HAL_Init+0x40>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001800 <HAL_Init+0x40>)
 80017d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017dc:	4b08      	ldr	r3, [pc, #32]	@ (8001800 <HAL_Init+0x40>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a07      	ldr	r2, [pc, #28]	@ (8001800 <HAL_Init+0x40>)
 80017e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017e8:	2003      	movs	r0, #3
 80017ea:	f000 fbc1 	bl	8001f70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ee:	200f      	movs	r0, #15
 80017f0:	f000 f808 	bl	8001804 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017f4:	f7ff fd7c 	bl	80012f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40023c00 	.word	0x40023c00

08001804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800180c:	4b12      	ldr	r3, [pc, #72]	@ (8001858 <HAL_InitTick+0x54>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	4b12      	ldr	r3, [pc, #72]	@ (800185c <HAL_InitTick+0x58>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	4619      	mov	r1, r3
 8001816:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800181a:	fbb3 f3f1 	udiv	r3, r3, r1
 800181e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001822:	4618      	mov	r0, r3
 8001824:	f000 fbd9 	bl	8001fda <HAL_SYSTICK_Config>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e00e      	b.n	8001850 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b0f      	cmp	r3, #15
 8001836:	d80a      	bhi.n	800184e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001838:	2200      	movs	r2, #0
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	f04f 30ff 	mov.w	r0, #4294967295
 8001840:	f000 fba1 	bl	8001f86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001844:	4a06      	ldr	r2, [pc, #24]	@ (8001860 <HAL_InitTick+0x5c>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800184a:	2300      	movs	r3, #0
 800184c:	e000      	b.n	8001850 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
}
 8001850:	4618      	mov	r0, r3
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000000 	.word	0x20000000
 800185c:	20000008 	.word	0x20000008
 8001860:	20000004 	.word	0x20000004

08001864 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001868:	4b06      	ldr	r3, [pc, #24]	@ (8001884 <HAL_IncTick+0x20>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	461a      	mov	r2, r3
 800186e:	4b06      	ldr	r3, [pc, #24]	@ (8001888 <HAL_IncTick+0x24>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4413      	add	r3, r2
 8001874:	4a04      	ldr	r2, [pc, #16]	@ (8001888 <HAL_IncTick+0x24>)
 8001876:	6013      	str	r3, [r2, #0]
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	20000008 	.word	0x20000008
 8001888:	200004b8 	.word	0x200004b8

0800188c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  return uwTick;
 8001890:	4b03      	ldr	r3, [pc, #12]	@ (80018a0 <HAL_GetTick+0x14>)
 8001892:	681b      	ldr	r3, [r3, #0]
}
 8001894:	4618      	mov	r0, r3
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	200004b8 	.word	0x200004b8

080018a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018ac:	f7ff ffee 	bl	800188c <HAL_GetTick>
 80018b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018bc:	d005      	beq.n	80018ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018be:	4b0a      	ldr	r3, [pc, #40]	@ (80018e8 <HAL_Delay+0x44>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	461a      	mov	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4413      	add	r3, r2
 80018c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018ca:	bf00      	nop
 80018cc:	f7ff ffde 	bl	800188c <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d8f7      	bhi.n	80018cc <HAL_Delay+0x28>
  {
  }
}
 80018dc:	bf00      	nop
 80018de:	bf00      	nop
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000008 	.word	0x20000008

080018ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018f4:	2300      	movs	r3, #0
 80018f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e033      	b.n	800196a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001906:	2b00      	cmp	r3, #0
 8001908:	d109      	bne.n	800191e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff fd18 	bl	8001340 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001922:	f003 0310 	and.w	r3, r3, #16
 8001926:	2b00      	cmp	r3, #0
 8001928:	d118      	bne.n	800195c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001932:	f023 0302 	bic.w	r3, r3, #2
 8001936:	f043 0202 	orr.w	r2, r3, #2
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f000 f94a 	bl	8001bd8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194e:	f023 0303 	bic.w	r3, r3, #3
 8001952:	f043 0201 	orr.w	r2, r3, #1
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	641a      	str	r2, [r3, #64]	@ 0x40
 800195a:	e001      	b.n	8001960 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001968:	7bfb      	ldrb	r3, [r7, #15]
}
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800197e:	2300      	movs	r3, #0
 8001980:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001988:	2b01      	cmp	r3, #1
 800198a:	d101      	bne.n	8001990 <HAL_ADC_ConfigChannel+0x1c>
 800198c:	2302      	movs	r3, #2
 800198e:	e113      	b.n	8001bb8 <HAL_ADC_ConfigChannel+0x244>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b09      	cmp	r3, #9
 800199e:	d925      	bls.n	80019ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	68d9      	ldr	r1, [r3, #12]
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	461a      	mov	r2, r3
 80019ae:	4613      	mov	r3, r2
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	4413      	add	r3, r2
 80019b4:	3b1e      	subs	r3, #30
 80019b6:	2207      	movs	r2, #7
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43da      	mvns	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	400a      	ands	r2, r1
 80019c4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	68d9      	ldr	r1, [r3, #12]
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	4618      	mov	r0, r3
 80019d8:	4603      	mov	r3, r0
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	4403      	add	r3, r0
 80019de:	3b1e      	subs	r3, #30
 80019e0:	409a      	lsls	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	430a      	orrs	r2, r1
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	e022      	b.n	8001a32 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6919      	ldr	r1, [r3, #16]
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	461a      	mov	r2, r3
 80019fa:	4613      	mov	r3, r2
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	4413      	add	r3, r2
 8001a00:	2207      	movs	r2, #7
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43da      	mvns	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	400a      	ands	r2, r1
 8001a0e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6919      	ldr	r1, [r3, #16]
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	689a      	ldr	r2, [r3, #8]
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	4618      	mov	r0, r3
 8001a22:	4603      	mov	r3, r0
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	4403      	add	r3, r0
 8001a28:	409a      	lsls	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b06      	cmp	r3, #6
 8001a38:	d824      	bhi.n	8001a84 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	4613      	mov	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4413      	add	r3, r2
 8001a4a:	3b05      	subs	r3, #5
 8001a4c:	221f      	movs	r2, #31
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43da      	mvns	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	400a      	ands	r2, r1
 8001a5a:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	4618      	mov	r0, r3
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4413      	add	r3, r2
 8001a74:	3b05      	subs	r3, #5
 8001a76:	fa00 f203 	lsl.w	r2, r0, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a82:	e04c      	b.n	8001b1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b0c      	cmp	r3, #12
 8001a8a:	d824      	bhi.n	8001ad6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	4613      	mov	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	3b23      	subs	r3, #35	@ 0x23
 8001a9e:	221f      	movs	r2, #31
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43da      	mvns	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	400a      	ands	r2, r1
 8001aac:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	4618      	mov	r0, r3
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685a      	ldr	r2, [r3, #4]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	3b23      	subs	r3, #35	@ 0x23
 8001ac8:	fa00 f203 	lsl.w	r2, r0, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ad4:	e023      	b.n	8001b1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	3b41      	subs	r3, #65	@ 0x41
 8001ae8:	221f      	movs	r2, #31
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43da      	mvns	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	400a      	ands	r2, r1
 8001af6:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	4618      	mov	r0, r3
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4413      	add	r3, r2
 8001b10:	3b41      	subs	r3, #65	@ 0x41
 8001b12:	fa00 f203 	lsl.w	r2, r0, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b1e:	4b29      	ldr	r3, [pc, #164]	@ (8001bc4 <HAL_ADC_ConfigChannel+0x250>)
 8001b20:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a28      	ldr	r2, [pc, #160]	@ (8001bc8 <HAL_ADC_ConfigChannel+0x254>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d10f      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x1d8>
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2b12      	cmp	r3, #18
 8001b32:	d10b      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a1d      	ldr	r2, [pc, #116]	@ (8001bc8 <HAL_ADC_ConfigChannel+0x254>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d12b      	bne.n	8001bae <HAL_ADC_ConfigChannel+0x23a>
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a1c      	ldr	r2, [pc, #112]	@ (8001bcc <HAL_ADC_ConfigChannel+0x258>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d003      	beq.n	8001b68 <HAL_ADC_ConfigChannel+0x1f4>
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b11      	cmp	r3, #17
 8001b66:	d122      	bne.n	8001bae <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a11      	ldr	r2, [pc, #68]	@ (8001bcc <HAL_ADC_ConfigChannel+0x258>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d111      	bne.n	8001bae <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b8a:	4b11      	ldr	r3, [pc, #68]	@ (8001bd0 <HAL_ADC_ConfigChannel+0x25c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a11      	ldr	r2, [pc, #68]	@ (8001bd4 <HAL_ADC_ConfigChannel+0x260>)
 8001b90:	fba2 2303 	umull	r2, r3, r2, r3
 8001b94:	0c9a      	lsrs	r2, r3, #18
 8001b96:	4613      	mov	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ba0:	e002      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1f9      	bne.n	8001ba2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	40012300 	.word	0x40012300
 8001bc8:	40012000 	.word	0x40012000
 8001bcc:	10000012 	.word	0x10000012
 8001bd0:	20000000 	.word	0x20000000
 8001bd4:	431bde83 	.word	0x431bde83

08001bd8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001be0:	4b79      	ldr	r3, [pc, #484]	@ (8001dc8 <ADC_Init+0x1f0>)
 8001be2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6859      	ldr	r1, [r3, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	021a      	lsls	r2, r3, #8
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001c30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6859      	ldr	r1, [r3, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	430a      	orrs	r2, r1
 8001c42:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6899      	ldr	r1, [r3, #8]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	430a      	orrs	r2, r1
 8001c64:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c6a:	4a58      	ldr	r2, [pc, #352]	@ (8001dcc <ADC_Init+0x1f4>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d022      	beq.n	8001cb6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c7e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6899      	ldr	r1, [r3, #8]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ca0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6899      	ldr	r1, [r3, #8]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	e00f      	b.n	8001cd6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001cc4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001cd4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	689a      	ldr	r2, [r3, #8]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 0202 	bic.w	r2, r2, #2
 8001ce4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6899      	ldr	r1, [r3, #8]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	7e1b      	ldrb	r3, [r3, #24]
 8001cf0:	005a      	lsls	r2, r3, #1
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d01b      	beq.n	8001d3c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d12:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001d22:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6859      	ldr	r1, [r3, #4]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	035a      	lsls	r2, r3, #13
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	430a      	orrs	r2, r1
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	e007      	b.n	8001d4c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d4a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001d5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	051a      	lsls	r2, r3, #20
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	689a      	ldr	r2, [r3, #8]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001d80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	6899      	ldr	r1, [r3, #8]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d8e:	025a      	lsls	r2, r3, #9
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689a      	ldr	r2, [r3, #8]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001da6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6899      	ldr	r1, [r3, #8]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	029a      	lsls	r2, r3, #10
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	609a      	str	r2, [r3, #8]
}
 8001dbc:	bf00      	nop
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	40012300 	.word	0x40012300
 8001dcc:	0f000001 	.word	0x0f000001

08001dd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e14 <__NVIC_SetPriorityGrouping+0x44>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001dec:	4013      	ands	r3, r2
 8001dee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001df8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e02:	4a04      	ldr	r2, [pc, #16]	@ (8001e14 <__NVIC_SetPriorityGrouping+0x44>)
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	60d3      	str	r3, [r2, #12]
}
 8001e08:	bf00      	nop
 8001e0a:	3714      	adds	r7, #20
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e1c:	4b04      	ldr	r3, [pc, #16]	@ (8001e30 <__NVIC_GetPriorityGrouping+0x18>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	0a1b      	lsrs	r3, r3, #8
 8001e22:	f003 0307 	and.w	r3, r3, #7
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	db0b      	blt.n	8001e5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e46:	79fb      	ldrb	r3, [r7, #7]
 8001e48:	f003 021f 	and.w	r2, r3, #31
 8001e4c:	4907      	ldr	r1, [pc, #28]	@ (8001e6c <__NVIC_EnableIRQ+0x38>)
 8001e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e52:	095b      	lsrs	r3, r3, #5
 8001e54:	2001      	movs	r0, #1
 8001e56:	fa00 f202 	lsl.w	r2, r0, r2
 8001e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	e000e100 	.word	0xe000e100

08001e70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	6039      	str	r1, [r7, #0]
 8001e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	db0a      	blt.n	8001e9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	490c      	ldr	r1, [pc, #48]	@ (8001ebc <__NVIC_SetPriority+0x4c>)
 8001e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8e:	0112      	lsls	r2, r2, #4
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	440b      	add	r3, r1
 8001e94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e98:	e00a      	b.n	8001eb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	4908      	ldr	r1, [pc, #32]	@ (8001ec0 <__NVIC_SetPriority+0x50>)
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	3b04      	subs	r3, #4
 8001ea8:	0112      	lsls	r2, r2, #4
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	440b      	add	r3, r1
 8001eae:	761a      	strb	r2, [r3, #24]
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	e000e100 	.word	0xe000e100
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b089      	sub	sp, #36	@ 0x24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	f1c3 0307 	rsb	r3, r3, #7
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	bf28      	it	cs
 8001ee2:	2304      	movcs	r3, #4
 8001ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3304      	adds	r3, #4
 8001eea:	2b06      	cmp	r3, #6
 8001eec:	d902      	bls.n	8001ef4 <NVIC_EncodePriority+0x30>
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	3b03      	subs	r3, #3
 8001ef2:	e000      	b.n	8001ef6 <NVIC_EncodePriority+0x32>
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43da      	mvns	r2, r3
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	401a      	ands	r2, r3
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	fa01 f303 	lsl.w	r3, r1, r3
 8001f16:	43d9      	mvns	r1, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f1c:	4313      	orrs	r3, r2
         );
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3724      	adds	r7, #36	@ 0x24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
	...

08001f2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f3c:	d301      	bcc.n	8001f42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e00f      	b.n	8001f62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f42:	4a0a      	ldr	r2, [pc, #40]	@ (8001f6c <SysTick_Config+0x40>)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f4a:	210f      	movs	r1, #15
 8001f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f50:	f7ff ff8e 	bl	8001e70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f54:	4b05      	ldr	r3, [pc, #20]	@ (8001f6c <SysTick_Config+0x40>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f5a:	4b04      	ldr	r3, [pc, #16]	@ (8001f6c <SysTick_Config+0x40>)
 8001f5c:	2207      	movs	r2, #7
 8001f5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	e000e010 	.word	0xe000e010

08001f70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7ff ff29 	bl	8001dd0 <__NVIC_SetPriorityGrouping>
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b086      	sub	sp, #24
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	60b9      	str	r1, [r7, #8]
 8001f90:	607a      	str	r2, [r7, #4]
 8001f92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f98:	f7ff ff3e 	bl	8001e18 <__NVIC_GetPriorityGrouping>
 8001f9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	68b9      	ldr	r1, [r7, #8]
 8001fa2:	6978      	ldr	r0, [r7, #20]
 8001fa4:	f7ff ff8e 	bl	8001ec4 <NVIC_EncodePriority>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fae:	4611      	mov	r1, r2
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff ff5d 	bl	8001e70 <__NVIC_SetPriority>
}
 8001fb6:	bf00      	nop
 8001fb8:	3718      	adds	r7, #24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b082      	sub	sp, #8
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff ff31 	bl	8001e34 <__NVIC_EnableIRQ>
}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b082      	sub	sp, #8
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff ffa2 	bl	8001f2c <SysTick_Config>
 8001fe8:	4603      	mov	r3, r0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b084      	sub	sp, #16
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ffe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002000:	f7ff fc44 	bl	800188c <HAL_GetTick>
 8002004:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d008      	beq.n	8002024 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2280      	movs	r2, #128	@ 0x80
 8002016:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e052      	b.n	80020ca <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 0216 	bic.w	r2, r2, #22
 8002032:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	695a      	ldr	r2, [r3, #20]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002042:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002048:	2b00      	cmp	r3, #0
 800204a:	d103      	bne.n	8002054 <HAL_DMA_Abort+0x62>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002050:	2b00      	cmp	r3, #0
 8002052:	d007      	beq.n	8002064 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0208 	bic.w	r2, r2, #8
 8002062:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 0201 	bic.w	r2, r2, #1
 8002072:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002074:	e013      	b.n	800209e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002076:	f7ff fc09 	bl	800188c <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b05      	cmp	r3, #5
 8002082:	d90c      	bls.n	800209e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2220      	movs	r2, #32
 8002088:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2203      	movs	r2, #3
 800208e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e015      	b.n	80020ca <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1e4      	bne.n	8002076 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b0:	223f      	movs	r2, #63	@ 0x3f
 80020b2:	409a      	lsls	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d004      	beq.n	80020f0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2280      	movs	r2, #128	@ 0x80
 80020ea:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e00c      	b.n	800210a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2205      	movs	r2, #5
 80020f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0201 	bic.w	r2, r2, #1
 8002106:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
	...

08002118 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002118:	b480      	push	{r7}
 800211a:	b089      	sub	sp, #36	@ 0x24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002122:	2300      	movs	r3, #0
 8002124:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002126:	2300      	movs	r3, #0
 8002128:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800212a:	2300      	movs	r3, #0
 800212c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800212e:	2300      	movs	r3, #0
 8002130:	61fb      	str	r3, [r7, #28]
 8002132:	e165      	b.n	8002400 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002134:	2201      	movs	r2, #1
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	4013      	ands	r3, r2
 8002146:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	429a      	cmp	r2, r3
 800214e:	f040 8154 	bne.w	80023fa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	2b01      	cmp	r3, #1
 800215c:	d005      	beq.n	800216a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002166:	2b02      	cmp	r3, #2
 8002168:	d130      	bne.n	80021cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	2203      	movs	r2, #3
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43db      	mvns	r3, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4013      	ands	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	68da      	ldr	r2, [r3, #12]
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4313      	orrs	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021a0:	2201      	movs	r2, #1
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4013      	ands	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	091b      	lsrs	r3, r3, #4
 80021b6:	f003 0201 	and.w	r2, r3, #1
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f003 0303 	and.w	r3, r3, #3
 80021d4:	2b03      	cmp	r3, #3
 80021d6:	d017      	beq.n	8002208 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	2203      	movs	r2, #3
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 0303 	and.w	r3, r3, #3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d123      	bne.n	800225c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	08da      	lsrs	r2, r3, #3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3208      	adds	r2, #8
 800221c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002220:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	220f      	movs	r2, #15
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4013      	ands	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	691a      	ldr	r2, [r3, #16]
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	08da      	lsrs	r2, r3, #3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3208      	adds	r2, #8
 8002256:	69b9      	ldr	r1, [r7, #24]
 8002258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	2203      	movs	r2, #3
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 0203 	and.w	r2, r3, #3
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4313      	orrs	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 80ae 	beq.w	80023fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	4b5d      	ldr	r3, [pc, #372]	@ (8002418 <HAL_GPIO_Init+0x300>)
 80022a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a6:	4a5c      	ldr	r2, [pc, #368]	@ (8002418 <HAL_GPIO_Init+0x300>)
 80022a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80022ae:	4b5a      	ldr	r3, [pc, #360]	@ (8002418 <HAL_GPIO_Init+0x300>)
 80022b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022ba:	4a58      	ldr	r2, [pc, #352]	@ (800241c <HAL_GPIO_Init+0x304>)
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	089b      	lsrs	r3, r3, #2
 80022c0:	3302      	adds	r3, #2
 80022c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	f003 0303 	and.w	r3, r3, #3
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	220f      	movs	r2, #15
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43db      	mvns	r3, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4013      	ands	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a4f      	ldr	r2, [pc, #316]	@ (8002420 <HAL_GPIO_Init+0x308>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d025      	beq.n	8002332 <HAL_GPIO_Init+0x21a>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a4e      	ldr	r2, [pc, #312]	@ (8002424 <HAL_GPIO_Init+0x30c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d01f      	beq.n	800232e <HAL_GPIO_Init+0x216>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a4d      	ldr	r2, [pc, #308]	@ (8002428 <HAL_GPIO_Init+0x310>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d019      	beq.n	800232a <HAL_GPIO_Init+0x212>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a4c      	ldr	r2, [pc, #304]	@ (800242c <HAL_GPIO_Init+0x314>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d013      	beq.n	8002326 <HAL_GPIO_Init+0x20e>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a4b      	ldr	r2, [pc, #300]	@ (8002430 <HAL_GPIO_Init+0x318>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d00d      	beq.n	8002322 <HAL_GPIO_Init+0x20a>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a4a      	ldr	r2, [pc, #296]	@ (8002434 <HAL_GPIO_Init+0x31c>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d007      	beq.n	800231e <HAL_GPIO_Init+0x206>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a49      	ldr	r2, [pc, #292]	@ (8002438 <HAL_GPIO_Init+0x320>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d101      	bne.n	800231a <HAL_GPIO_Init+0x202>
 8002316:	2306      	movs	r3, #6
 8002318:	e00c      	b.n	8002334 <HAL_GPIO_Init+0x21c>
 800231a:	2307      	movs	r3, #7
 800231c:	e00a      	b.n	8002334 <HAL_GPIO_Init+0x21c>
 800231e:	2305      	movs	r3, #5
 8002320:	e008      	b.n	8002334 <HAL_GPIO_Init+0x21c>
 8002322:	2304      	movs	r3, #4
 8002324:	e006      	b.n	8002334 <HAL_GPIO_Init+0x21c>
 8002326:	2303      	movs	r3, #3
 8002328:	e004      	b.n	8002334 <HAL_GPIO_Init+0x21c>
 800232a:	2302      	movs	r3, #2
 800232c:	e002      	b.n	8002334 <HAL_GPIO_Init+0x21c>
 800232e:	2301      	movs	r3, #1
 8002330:	e000      	b.n	8002334 <HAL_GPIO_Init+0x21c>
 8002332:	2300      	movs	r3, #0
 8002334:	69fa      	ldr	r2, [r7, #28]
 8002336:	f002 0203 	and.w	r2, r2, #3
 800233a:	0092      	lsls	r2, r2, #2
 800233c:	4093      	lsls	r3, r2
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4313      	orrs	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002344:	4935      	ldr	r1, [pc, #212]	@ (800241c <HAL_GPIO_Init+0x304>)
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	089b      	lsrs	r3, r3, #2
 800234a:	3302      	adds	r3, #2
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002352:	4b3a      	ldr	r3, [pc, #232]	@ (800243c <HAL_GPIO_Init+0x324>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	4313      	orrs	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002376:	4a31      	ldr	r2, [pc, #196]	@ (800243c <HAL_GPIO_Init+0x324>)
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800237c:	4b2f      	ldr	r3, [pc, #188]	@ (800243c <HAL_GPIO_Init+0x324>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	43db      	mvns	r3, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4013      	ands	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	4313      	orrs	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023a0:	4a26      	ldr	r2, [pc, #152]	@ (800243c <HAL_GPIO_Init+0x324>)
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023a6:	4b25      	ldr	r3, [pc, #148]	@ (800243c <HAL_GPIO_Init+0x324>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	43db      	mvns	r3, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4013      	ands	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023ca:	4a1c      	ldr	r2, [pc, #112]	@ (800243c <HAL_GPIO_Init+0x324>)
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023d0:	4b1a      	ldr	r3, [pc, #104]	@ (800243c <HAL_GPIO_Init+0x324>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	43db      	mvns	r3, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4013      	ands	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d003      	beq.n	80023f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023f4:	4a11      	ldr	r2, [pc, #68]	@ (800243c <HAL_GPIO_Init+0x324>)
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	3301      	adds	r3, #1
 80023fe:	61fb      	str	r3, [r7, #28]
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	2b0f      	cmp	r3, #15
 8002404:	f67f ae96 	bls.w	8002134 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002408:	bf00      	nop
 800240a:	bf00      	nop
 800240c:	3724      	adds	r7, #36	@ 0x24
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	40023800 	.word	0x40023800
 800241c:	40013800 	.word	0x40013800
 8002420:	40020000 	.word	0x40020000
 8002424:	40020400 	.word	0x40020400
 8002428:	40020800 	.word	0x40020800
 800242c:	40020c00 	.word	0x40020c00
 8002430:	40021000 	.word	0x40021000
 8002434:	40021400 	.word	0x40021400
 8002438:	40021800 	.word	0x40021800
 800243c:	40013c00 	.word	0x40013c00

08002440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	807b      	strh	r3, [r7, #2]
 800244c:	4613      	mov	r3, r2
 800244e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002450:	787b      	ldrb	r3, [r7, #1]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002456:	887a      	ldrh	r2, [r7, #2]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800245c:	e003      	b.n	8002466 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800245e:	887b      	ldrh	r3, [r7, #2]
 8002460:	041a      	lsls	r2, r3, #16
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	619a      	str	r2, [r3, #24]
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
	...

08002474 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e12b      	b.n	80026de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d106      	bne.n	80024a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7fe ff94 	bl	80013c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2224      	movs	r2, #36	@ 0x24
 80024a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 0201 	bic.w	r2, r2, #1
 80024b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024d8:	f001 fccc 	bl	8003e74 <HAL_RCC_GetPCLK1Freq>
 80024dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	4a81      	ldr	r2, [pc, #516]	@ (80026e8 <HAL_I2C_Init+0x274>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d807      	bhi.n	80024f8 <HAL_I2C_Init+0x84>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	4a80      	ldr	r2, [pc, #512]	@ (80026ec <HAL_I2C_Init+0x278>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	bf94      	ite	ls
 80024f0:	2301      	movls	r3, #1
 80024f2:	2300      	movhi	r3, #0
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	e006      	b.n	8002506 <HAL_I2C_Init+0x92>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4a7d      	ldr	r2, [pc, #500]	@ (80026f0 <HAL_I2C_Init+0x27c>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	bf94      	ite	ls
 8002500:	2301      	movls	r3, #1
 8002502:	2300      	movhi	r3, #0
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e0e7      	b.n	80026de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	4a78      	ldr	r2, [pc, #480]	@ (80026f4 <HAL_I2C_Init+0x280>)
 8002512:	fba2 2303 	umull	r2, r3, r2, r3
 8002516:	0c9b      	lsrs	r3, r3, #18
 8002518:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	430a      	orrs	r2, r1
 800252c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	4a6a      	ldr	r2, [pc, #424]	@ (80026e8 <HAL_I2C_Init+0x274>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d802      	bhi.n	8002548 <HAL_I2C_Init+0xd4>
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	3301      	adds	r3, #1
 8002546:	e009      	b.n	800255c <HAL_I2C_Init+0xe8>
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800254e:	fb02 f303 	mul.w	r3, r2, r3
 8002552:	4a69      	ldr	r2, [pc, #420]	@ (80026f8 <HAL_I2C_Init+0x284>)
 8002554:	fba2 2303 	umull	r2, r3, r2, r3
 8002558:	099b      	lsrs	r3, r3, #6
 800255a:	3301      	adds	r3, #1
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6812      	ldr	r2, [r2, #0]
 8002560:	430b      	orrs	r3, r1
 8002562:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800256e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	495c      	ldr	r1, [pc, #368]	@ (80026e8 <HAL_I2C_Init+0x274>)
 8002578:	428b      	cmp	r3, r1
 800257a:	d819      	bhi.n	80025b0 <HAL_I2C_Init+0x13c>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	1e59      	subs	r1, r3, #1
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	fbb1 f3f3 	udiv	r3, r1, r3
 800258a:	1c59      	adds	r1, r3, #1
 800258c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002590:	400b      	ands	r3, r1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <HAL_I2C_Init+0x138>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	1e59      	subs	r1, r3, #1
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80025a4:	3301      	adds	r3, #1
 80025a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025aa:	e051      	b.n	8002650 <HAL_I2C_Init+0x1dc>
 80025ac:	2304      	movs	r3, #4
 80025ae:	e04f      	b.n	8002650 <HAL_I2C_Init+0x1dc>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d111      	bne.n	80025dc <HAL_I2C_Init+0x168>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	1e58      	subs	r0, r3, #1
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6859      	ldr	r1, [r3, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	440b      	add	r3, r1
 80025c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ca:	3301      	adds	r3, #1
 80025cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	bf0c      	ite	eq
 80025d4:	2301      	moveq	r3, #1
 80025d6:	2300      	movne	r3, #0
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	e012      	b.n	8002602 <HAL_I2C_Init+0x18e>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	1e58      	subs	r0, r3, #1
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6859      	ldr	r1, [r3, #4]
 80025e4:	460b      	mov	r3, r1
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	440b      	add	r3, r1
 80025ea:	0099      	lsls	r1, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80025f2:	3301      	adds	r3, #1
 80025f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	bf0c      	ite	eq
 80025fc:	2301      	moveq	r3, #1
 80025fe:	2300      	movne	r3, #0
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_I2C_Init+0x196>
 8002606:	2301      	movs	r3, #1
 8002608:	e022      	b.n	8002650 <HAL_I2C_Init+0x1dc>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10e      	bne.n	8002630 <HAL_I2C_Init+0x1bc>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	1e58      	subs	r0, r3, #1
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6859      	ldr	r1, [r3, #4]
 800261a:	460b      	mov	r3, r1
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	440b      	add	r3, r1
 8002620:	fbb0 f3f3 	udiv	r3, r0, r3
 8002624:	3301      	adds	r3, #1
 8002626:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800262a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800262e:	e00f      	b.n	8002650 <HAL_I2C_Init+0x1dc>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	1e58      	subs	r0, r3, #1
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6859      	ldr	r1, [r3, #4]
 8002638:	460b      	mov	r3, r1
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	0099      	lsls	r1, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	fbb0 f3f3 	udiv	r3, r0, r3
 8002646:	3301      	adds	r3, #1
 8002648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800264c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002650:	6879      	ldr	r1, [r7, #4]
 8002652:	6809      	ldr	r1, [r1, #0]
 8002654:	4313      	orrs	r3, r2
 8002656:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69da      	ldr	r2, [r3, #28]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	431a      	orrs	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	430a      	orrs	r2, r1
 8002672:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800267e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6911      	ldr	r1, [r2, #16]
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	68d2      	ldr	r2, [r2, #12]
 800268a:	4311      	orrs	r1, r2
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6812      	ldr	r2, [r2, #0]
 8002690:	430b      	orrs	r3, r1
 8002692:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	695a      	ldr	r2, [r3, #20]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	431a      	orrs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0201 	orr.w	r2, r2, #1
 80026be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2220      	movs	r2, #32
 80026ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	000186a0 	.word	0x000186a0
 80026ec:	001e847f 	.word	0x001e847f
 80026f0:	003d08ff 	.word	0x003d08ff
 80026f4:	431bde83 	.word	0x431bde83
 80026f8:	10624dd3 	.word	0x10624dd3

080026fc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80026fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026fe:	b08f      	sub	sp, #60	@ 0x3c
 8002700:	af0a      	add	r7, sp, #40	@ 0x28
 8002702:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e116      	b.n	800293c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 800271a:	b2db      	uxtb	r3, r3
 800271c:	2b00      	cmp	r3, #0
 800271e:	d106      	bne.n	800272e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f007 fb6d 	bl	8009e08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2203      	movs	r2, #3
 8002732:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800273a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800273e:	2b00      	cmp	r3, #0
 8002740:	d102      	bne.n	8002748 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f003 fdc6 	bl	80062de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	603b      	str	r3, [r7, #0]
 8002758:	687e      	ldr	r6, [r7, #4]
 800275a:	466d      	mov	r5, sp
 800275c:	f106 0410 	add.w	r4, r6, #16
 8002760:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002762:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002764:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002766:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002768:	e894 0003 	ldmia.w	r4, {r0, r1}
 800276c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002770:	1d33      	adds	r3, r6, #4
 8002772:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002774:	6838      	ldr	r0, [r7, #0]
 8002776:	f003 fc9d 	bl	80060b4 <USB_CoreInit>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d005      	beq.n	800278c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2202      	movs	r2, #2
 8002784:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e0d7      	b.n	800293c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2100      	movs	r1, #0
 8002792:	4618      	mov	r0, r3
 8002794:	f003 fdb4 	bl	8006300 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002798:	2300      	movs	r3, #0
 800279a:	73fb      	strb	r3, [r7, #15]
 800279c:	e04a      	b.n	8002834 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800279e:	7bfa      	ldrb	r2, [r7, #15]
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	4613      	mov	r3, r2
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	4413      	add	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	440b      	add	r3, r1
 80027ac:	333d      	adds	r3, #61	@ 0x3d
 80027ae:	2201      	movs	r2, #1
 80027b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80027b2:	7bfa      	ldrb	r2, [r7, #15]
 80027b4:	6879      	ldr	r1, [r7, #4]
 80027b6:	4613      	mov	r3, r2
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	4413      	add	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	440b      	add	r3, r1
 80027c0:	333c      	adds	r3, #60	@ 0x3c
 80027c2:	7bfa      	ldrb	r2, [r7, #15]
 80027c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80027c6:	7bfa      	ldrb	r2, [r7, #15]
 80027c8:	7bfb      	ldrb	r3, [r7, #15]
 80027ca:	b298      	uxth	r0, r3
 80027cc:	6879      	ldr	r1, [r7, #4]
 80027ce:	4613      	mov	r3, r2
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	4413      	add	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	440b      	add	r3, r1
 80027d8:	3344      	adds	r3, #68	@ 0x44
 80027da:	4602      	mov	r2, r0
 80027dc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027de:	7bfa      	ldrb	r2, [r7, #15]
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	4613      	mov	r3, r2
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	4413      	add	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	440b      	add	r3, r1
 80027ec:	3340      	adds	r3, #64	@ 0x40
 80027ee:	2200      	movs	r2, #0
 80027f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80027f2:	7bfa      	ldrb	r2, [r7, #15]
 80027f4:	6879      	ldr	r1, [r7, #4]
 80027f6:	4613      	mov	r3, r2
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	4413      	add	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	440b      	add	r3, r1
 8002800:	3348      	adds	r3, #72	@ 0x48
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002806:	7bfa      	ldrb	r2, [r7, #15]
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	4613      	mov	r3, r2
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	4413      	add	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	440b      	add	r3, r1
 8002814:	334c      	adds	r3, #76	@ 0x4c
 8002816:	2200      	movs	r2, #0
 8002818:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800281a:	7bfa      	ldrb	r2, [r7, #15]
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	4613      	mov	r3, r2
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	4413      	add	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	440b      	add	r3, r1
 8002828:	3354      	adds	r3, #84	@ 0x54
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800282e:	7bfb      	ldrb	r3, [r7, #15]
 8002830:	3301      	adds	r3, #1
 8002832:	73fb      	strb	r3, [r7, #15]
 8002834:	7bfa      	ldrb	r2, [r7, #15]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	429a      	cmp	r2, r3
 800283c:	d3af      	bcc.n	800279e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800283e:	2300      	movs	r3, #0
 8002840:	73fb      	strb	r3, [r7, #15]
 8002842:	e044      	b.n	80028ce <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002844:	7bfa      	ldrb	r2, [r7, #15]
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	4613      	mov	r3, r2
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	4413      	add	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8002856:	2200      	movs	r2, #0
 8002858:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800285a:	7bfa      	ldrb	r2, [r7, #15]
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	4613      	mov	r3, r2
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	4413      	add	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	440b      	add	r3, r1
 8002868:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 800286c:	7bfa      	ldrb	r2, [r7, #15]
 800286e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002870:	7bfa      	ldrb	r2, [r7, #15]
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	4613      	mov	r3, r2
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	4413      	add	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	440b      	add	r3, r1
 800287e:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8002882:	2200      	movs	r2, #0
 8002884:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002886:	7bfa      	ldrb	r2, [r7, #15]
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	4613      	mov	r3, r2
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	4413      	add	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	440b      	add	r3, r1
 8002894:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800289c:	7bfa      	ldrb	r2, [r7, #15]
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	4613      	mov	r3, r2
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	4413      	add	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028b2:	7bfa      	ldrb	r2, [r7, #15]
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	4613      	mov	r3, r2
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	4413      	add	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	440b      	add	r3, r1
 80028c0:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028c8:	7bfb      	ldrb	r3, [r7, #15]
 80028ca:	3301      	adds	r3, #1
 80028cc:	73fb      	strb	r3, [r7, #15]
 80028ce:	7bfa      	ldrb	r2, [r7, #15]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d3b5      	bcc.n	8002844 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	603b      	str	r3, [r7, #0]
 80028de:	687e      	ldr	r6, [r7, #4]
 80028e0:	466d      	mov	r5, sp
 80028e2:	f106 0410 	add.w	r4, r6, #16
 80028e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80028f6:	1d33      	adds	r3, r6, #4
 80028f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028fa:	6838      	ldr	r0, [r7, #0]
 80028fc:	f003 fd4c 	bl	8006398 <USB_DevInit>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d005      	beq.n	8002912 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2202      	movs	r2, #2
 800290a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e014      	b.n	800293c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002926:	2b01      	cmp	r3, #1
 8002928:	d102      	bne.n	8002930 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f001 f98c 	bl	8003c48 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	f004 fe8e 	bl	8007656 <USB_DevDisconnect>

  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002944 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8002958:	2b01      	cmp	r3, #1
 800295a:	d101      	bne.n	8002960 <HAL_PCD_Start+0x1c>
 800295c:	2302      	movs	r3, #2
 800295e:	e020      	b.n	80029a2 <HAL_PCD_Start+0x5e>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800296c:	2b01      	cmp	r3, #1
 800296e:	d109      	bne.n	8002984 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002974:	2b01      	cmp	r3, #1
 8002976:	d005      	beq.n	8002984 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800297c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f003 fc97 	bl	80062bc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f004 fe3e 	bl	8007614 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80029aa:	b590      	push	{r4, r7, lr}
 80029ac:	b08d      	sub	sp, #52	@ 0x34
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029b8:	6a3b      	ldr	r3, [r7, #32]
 80029ba:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f004 fefc 	bl	80077be <USB_GetMode>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f040 84b7 	bne.w	800333c <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f004 fe60 	bl	8007698 <USB_ReadInterrupts>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f000 84ad 	beq.w	800333a <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	0a1b      	lsrs	r3, r3, #8
 80029ea:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f004 fe4d 	bl	8007698 <USB_ReadInterrupts>
 80029fe:	4603      	mov	r3, r0
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d107      	bne.n	8002a18 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695a      	ldr	r2, [r3, #20]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f002 0202 	and.w	r2, r2, #2
 8002a16:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f004 fe3b 	bl	8007698 <USB_ReadInterrupts>
 8002a22:	4603      	mov	r3, r0
 8002a24:	f003 0310 	and.w	r3, r3, #16
 8002a28:	2b10      	cmp	r3, #16
 8002a2a:	d161      	bne.n	8002af0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	699a      	ldr	r2, [r3, #24]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 0210 	bic.w	r2, r2, #16
 8002a3a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002a3c:	6a3b      	ldr	r3, [r7, #32]
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	f003 020f 	and.w	r2, r3, #15
 8002a48:	4613      	mov	r3, r2
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	4413      	add	r3, r2
 8002a58:	3304      	adds	r3, #4
 8002a5a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	0c5b      	lsrs	r3, r3, #17
 8002a60:	f003 030f 	and.w	r3, r3, #15
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d124      	bne.n	8002ab2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002a6e:	4013      	ands	r3, r2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d035      	beq.n	8002ae0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	091b      	lsrs	r3, r3, #4
 8002a7c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	461a      	mov	r2, r3
 8002a86:	6a38      	ldr	r0, [r7, #32]
 8002a88:	f004 fc72 	bl	8007370 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	691a      	ldr	r2, [r3, #16]
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	091b      	lsrs	r3, r3, #4
 8002a94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a98:	441a      	add	r2, r3
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	6a1a      	ldr	r2, [r3, #32]
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	091b      	lsrs	r3, r3, #4
 8002aa6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002aaa:	441a      	add	r2, r3
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	621a      	str	r2, [r3, #32]
 8002ab0:	e016      	b.n	8002ae0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	0c5b      	lsrs	r3, r3, #17
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	2b06      	cmp	r3, #6
 8002abc:	d110      	bne.n	8002ae0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8002ac4:	2208      	movs	r2, #8
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	6a38      	ldr	r0, [r7, #32]
 8002aca:	f004 fc51 	bl	8007370 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	6a1a      	ldr	r2, [r3, #32]
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	091b      	lsrs	r3, r3, #4
 8002ad6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ada:	441a      	add	r2, r3
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	699a      	ldr	r2, [r3, #24]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 0210 	orr.w	r2, r2, #16
 8002aee:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f004 fdcf 	bl	8007698 <USB_ReadInterrupts>
 8002afa:	4603      	mov	r3, r0
 8002afc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b00:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002b04:	f040 80a7 	bne.w	8002c56 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f004 fdd4 	bl	80076be <USB_ReadDevAllOutEpInterrupt>
 8002b16:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002b18:	e099      	b.n	8002c4e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 808e 	beq.w	8002c42 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b2c:	b2d2      	uxtb	r2, r2
 8002b2e:	4611      	mov	r1, r2
 8002b30:	4618      	mov	r0, r3
 8002b32:	f004 fdf8 	bl	8007726 <USB_ReadDevOutEPInterrupt>
 8002b36:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00c      	beq.n	8002b5c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b44:	015a      	lsls	r2, r3, #5
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	4413      	add	r3, r2
 8002b4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b4e:	461a      	mov	r2, r3
 8002b50:	2301      	movs	r3, #1
 8002b52:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002b54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 fef0 	bl	800393c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00c      	beq.n	8002b80 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b68:	015a      	lsls	r2, r3, #5
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b72:	461a      	mov	r2, r3
 8002b74:	2308      	movs	r3, #8
 8002b76:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002b78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 ffc6 	bl	8003b0c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	f003 0310 	and.w	r3, r3, #16
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d008      	beq.n	8002b9c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8c:	015a      	lsls	r2, r3, #5
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	4413      	add	r3, r2
 8002b92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b96:	461a      	mov	r2, r3
 8002b98:	2310      	movs	r3, #16
 8002b9a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d030      	beq.n	8002c08 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002ba6:	6a3b      	ldr	r3, [r7, #32]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bae:	2b80      	cmp	r3, #128	@ 0x80
 8002bb0:	d109      	bne.n	8002bc6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	69fa      	ldr	r2, [r7, #28]
 8002bbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bc0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002bc4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002bc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bc8:	4613      	mov	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	4413      	add	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	3304      	adds	r3, #4
 8002bda:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	78db      	ldrb	r3, [r3, #3]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d108      	bne.n	8002bf6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	2200      	movs	r2, #0
 8002be8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	4619      	mov	r1, r3
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f007 fa25 	bl	800a040 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf8:	015a      	lsls	r2, r3, #5
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c02:	461a      	mov	r2, r3
 8002c04:	2302      	movs	r3, #2
 8002c06:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	f003 0320 	and.w	r3, r3, #32
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d008      	beq.n	8002c24 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c14:	015a      	lsls	r2, r3, #5
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	4413      	add	r3, r2
 8002c1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c1e:	461a      	mov	r2, r3
 8002c20:	2320      	movs	r3, #32
 8002c22:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d009      	beq.n	8002c42 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c30:	015a      	lsls	r2, r3, #5
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	4413      	add	r3, r2
 8002c36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c40:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c44:	3301      	adds	r3, #1
 8002c46:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c4a:	085b      	lsrs	r3, r3, #1
 8002c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f47f af62 	bne.w	8002b1a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f004 fd1c 	bl	8007698 <USB_ReadInterrupts>
 8002c60:	4603      	mov	r3, r0
 8002c62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c66:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002c6a:	f040 80db 	bne.w	8002e24 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f004 fd3d 	bl	80076f2 <USB_ReadDevAllInEpInterrupt>
 8002c78:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002c7e:	e0cd      	b.n	8002e1c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f000 80c2 	beq.w	8002e10 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	4611      	mov	r1, r2
 8002c96:	4618      	mov	r0, r3
 8002c98:	f004 fd63 	bl	8007762 <USB_ReadDevInEPInterrupt>
 8002c9c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d057      	beq.n	8002d58 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002caa:	f003 030f 	and.w	r3, r3, #15
 8002cae:	2201      	movs	r2, #1
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	69f9      	ldr	r1, [r7, #28]
 8002cc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002cc8:	4013      	ands	r3, r2
 8002cca:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cce:	015a      	lsls	r2, r3, #5
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cd8:	461a      	mov	r2, r3
 8002cda:	2301      	movs	r3, #1
 8002cdc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d132      	bne.n	8002d4c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cea:	4613      	mov	r3, r2
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	4413      	add	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	440b      	add	r3, r1
 8002cf4:	334c      	adds	r3, #76	@ 0x4c
 8002cf6:	6819      	ldr	r1, [r3, #0]
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	4413      	add	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4403      	add	r3, r0
 8002d06:	3348      	adds	r3, #72	@ 0x48
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4419      	add	r1, r3
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d10:	4613      	mov	r3, r2
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	4413      	add	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4403      	add	r3, r0
 8002d1a:	334c      	adds	r3, #76	@ 0x4c
 8002d1c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d113      	bne.n	8002d4c <HAL_PCD_IRQHandler+0x3a2>
 8002d24:	6879      	ldr	r1, [r7, #4]
 8002d26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d28:	4613      	mov	r3, r2
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	440b      	add	r3, r1
 8002d32:	3354      	adds	r3, #84	@ 0x54
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d108      	bne.n	8002d4c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6818      	ldr	r0, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8002d44:	461a      	mov	r2, r3
 8002d46:	2101      	movs	r1, #1
 8002d48:	f004 fd6a 	bl	8007820 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	4619      	mov	r1, r3
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f007 f8ef 	bl	8009f36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	f003 0308 	and.w	r3, r3, #8
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d008      	beq.n	8002d74 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d64:	015a      	lsls	r2, r3, #5
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	4413      	add	r3, r2
 8002d6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d6e:	461a      	mov	r2, r3
 8002d70:	2308      	movs	r3, #8
 8002d72:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	f003 0310 	and.w	r3, r3, #16
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d008      	beq.n	8002d90 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d80:	015a      	lsls	r2, r3, #5
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	4413      	add	r3, r2
 8002d86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	2310      	movs	r3, #16
 8002d8e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d008      	beq.n	8002dac <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9c:	015a      	lsls	r2, r3, #5
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	4413      	add	r3, r2
 8002da2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002da6:	461a      	mov	r2, r3
 8002da8:	2340      	movs	r3, #64	@ 0x40
 8002daa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d023      	beq.n	8002dfe <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002db6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002db8:	6a38      	ldr	r0, [r7, #32]
 8002dba:	f003 fc4b 	bl	8006654 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	3338      	adds	r3, #56	@ 0x38
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	4413      	add	r3, r2
 8002dce:	3304      	adds	r3, #4
 8002dd0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	78db      	ldrb	r3, [r3, #3]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d108      	bne.n	8002dec <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	4619      	mov	r1, r3
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f007 f93c 	bl	800a064 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dee:	015a      	lsls	r2, r3, #5
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	4413      	add	r3, r2
 8002df4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002df8:	461a      	mov	r2, r3
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d003      	beq.n	8002e10 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002e08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 fd08 	bl	8003820 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e12:	3301      	adds	r3, #1
 8002e14:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e18:	085b      	lsrs	r3, r3, #1
 8002e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f47f af2e 	bne.w	8002c80 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f004 fc35 	bl	8007698 <USB_ReadInterrupts>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002e34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002e38:	d122      	bne.n	8002e80 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	69fa      	ldr	r2, [r7, #28]
 8002e44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e48:	f023 0301 	bic.w	r3, r3, #1
 8002e4c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d108      	bne.n	8002e6a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002e60:	2100      	movs	r1, #0
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f007 fab6 	bl	800a3d4 <HAL_PCDEx_LPM_Callback>
 8002e68:	e002      	b.n	8002e70 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f007 f8da 	bl	800a024 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	695a      	ldr	r2, [r3, #20]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002e7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f004 fc07 	bl	8007698 <USB_ReadInterrupts>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e94:	d112      	bne.n	8002ebc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d102      	bne.n	8002eac <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f007 f896 	bl	8009fd8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	695a      	ldr	r2, [r3, #20]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002eba:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f004 fbe9 	bl	8007698 <USB_ReadInterrupts>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ecc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ed0:	d121      	bne.n	8002f16 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	695a      	ldr	r2, [r3, #20]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002ee0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d111      	bne.n	8002f10 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002efa:	089b      	lsrs	r3, r3, #2
 8002efc:	f003 020f 	and.w	r2, r3, #15
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002f06:	2101      	movs	r1, #1
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f007 fa63 	bl	800a3d4 <HAL_PCDEx_LPM_Callback>
 8002f0e:	e002      	b.n	8002f16 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f007 f861 	bl	8009fd8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f004 fbbc 	bl	8007698 <USB_ReadInterrupts>
 8002f20:	4603      	mov	r3, r0
 8002f22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f2a:	f040 80b7 	bne.w	800309c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	69fa      	ldr	r2, [r7, #28]
 8002f38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f3c:	f023 0301 	bic.w	r3, r3, #1
 8002f40:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2110      	movs	r1, #16
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f003 fb83 	bl	8006654 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f4e:	2300      	movs	r3, #0
 8002f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f52:	e046      	b.n	8002fe2 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f56:	015a      	lsls	r2, r3, #5
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f60:	461a      	mov	r2, r3
 8002f62:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002f66:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f6a:	015a      	lsls	r2, r3, #5
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	4413      	add	r3, r2
 8002f70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f78:	0151      	lsls	r1, r2, #5
 8002f7a:	69fa      	ldr	r2, [r7, #28]
 8002f7c:	440a      	add	r2, r1
 8002f7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002f82:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002f86:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f8a:	015a      	lsls	r2, r3, #5
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	4413      	add	r3, r2
 8002f90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f94:	461a      	mov	r2, r3
 8002f96:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002f9a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f9e:	015a      	lsls	r2, r3, #5
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fac:	0151      	lsls	r1, r2, #5
 8002fae:	69fa      	ldr	r2, [r7, #28]
 8002fb0:	440a      	add	r2, r1
 8002fb2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002fb6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002fba:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fbe:	015a      	lsls	r2, r3, #5
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fcc:	0151      	lsls	r1, r2, #5
 8002fce:	69fa      	ldr	r2, [r7, #28]
 8002fd0:	440a      	add	r2, r1
 8002fd2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002fd6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002fda:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fde:	3301      	adds	r3, #1
 8002fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d3b3      	bcc.n	8002f54 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ff2:	69db      	ldr	r3, [r3, #28]
 8002ff4:	69fa      	ldr	r2, [r7, #28]
 8002ff6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ffa:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002ffe:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003004:	2b00      	cmp	r3, #0
 8003006:	d016      	beq.n	8003036 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800300e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003012:	69fa      	ldr	r2, [r7, #28]
 8003014:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003018:	f043 030b 	orr.w	r3, r3, #11
 800301c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003028:	69fa      	ldr	r2, [r7, #28]
 800302a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800302e:	f043 030b 	orr.w	r3, r3, #11
 8003032:	6453      	str	r3, [r2, #68]	@ 0x44
 8003034:	e015      	b.n	8003062 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	69fa      	ldr	r2, [r7, #28]
 8003040:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003044:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003048:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800304c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	69fa      	ldr	r2, [r7, #28]
 8003058:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800305c:	f043 030b 	orr.w	r3, r3, #11
 8003060:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	69fa      	ldr	r2, [r7, #28]
 800306c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003070:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003074:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6818      	ldr	r0, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003086:	461a      	mov	r2, r3
 8003088:	f004 fbca 	bl	8007820 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	695a      	ldr	r2, [r3, #20]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800309a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f004 faf9 	bl	8007698 <USB_ReadInterrupts>
 80030a6:	4603      	mov	r3, r0
 80030a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030b0:	d124      	bne.n	80030fc <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f004 fb8f 	bl	80077da <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f003 fb44 	bl	800674e <USB_GetDevSpeed>
 80030c6:	4603      	mov	r3, r0
 80030c8:	461a      	mov	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681c      	ldr	r4, [r3, #0]
 80030d2:	f000 fec3 	bl	8003e5c <HAL_RCC_GetHCLKFreq>
 80030d6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	461a      	mov	r2, r3
 80030e0:	4620      	mov	r0, r4
 80030e2:	f003 f849 	bl	8006178 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f006 ff4d 	bl	8009f86 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	695a      	ldr	r2, [r3, #20]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80030fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4618      	mov	r0, r3
 8003102:	f004 fac9 	bl	8007698 <USB_ReadInterrupts>
 8003106:	4603      	mov	r3, r0
 8003108:	f003 0308 	and.w	r3, r3, #8
 800310c:	2b08      	cmp	r3, #8
 800310e:	d10a      	bne.n	8003126 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f006 ff2a 	bl	8009f6a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	695a      	ldr	r2, [r3, #20]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f002 0208 	and.w	r2, r2, #8
 8003124:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4618      	mov	r0, r3
 800312c:	f004 fab4 	bl	8007698 <USB_ReadInterrupts>
 8003130:	4603      	mov	r3, r0
 8003132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003136:	2b80      	cmp	r3, #128	@ 0x80
 8003138:	d122      	bne.n	8003180 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003142:	6a3b      	ldr	r3, [r7, #32]
 8003144:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003146:	2301      	movs	r3, #1
 8003148:	627b      	str	r3, [r7, #36]	@ 0x24
 800314a:	e014      	b.n	8003176 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003150:	4613      	mov	r3, r2
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	4413      	add	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d105      	bne.n	8003170 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003166:	b2db      	uxtb	r3, r3
 8003168:	4619      	mov	r1, r3
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 fb27 	bl	80037be <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003172:	3301      	adds	r3, #1
 8003174:	627b      	str	r3, [r7, #36]	@ 0x24
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800317c:	429a      	cmp	r2, r3
 800317e:	d3e5      	bcc.n	800314c <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4618      	mov	r0, r3
 8003186:	f004 fa87 	bl	8007698 <USB_ReadInterrupts>
 800318a:	4603      	mov	r3, r0
 800318c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003190:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003194:	d13b      	bne.n	800320e <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003196:	2301      	movs	r3, #1
 8003198:	627b      	str	r3, [r7, #36]	@ 0x24
 800319a:	e02b      	b.n	80031f4 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800319c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319e:	015a      	lsls	r2, r3, #5
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	4413      	add	r3, r2
 80031a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031b0:	4613      	mov	r3, r2
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	4413      	add	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	3340      	adds	r3, #64	@ 0x40
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d115      	bne.n	80031ee <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80031c2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	da12      	bge.n	80031ee <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031cc:	4613      	mov	r3, r2
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	4413      	add	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	333f      	adds	r3, #63	@ 0x3f
 80031d8:	2201      	movs	r2, #1
 80031da:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80031dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	4619      	mov	r1, r3
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 fae8 	bl	80037be <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f0:	3301      	adds	r3, #1
 80031f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d3ce      	bcc.n	800319c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	695a      	ldr	r2, [r3, #20]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800320c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4618      	mov	r0, r3
 8003214:	f004 fa40 	bl	8007698 <USB_ReadInterrupts>
 8003218:	4603      	mov	r3, r0
 800321a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800321e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003222:	d155      	bne.n	80032d0 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003224:	2301      	movs	r3, #1
 8003226:	627b      	str	r3, [r7, #36]	@ 0x24
 8003228:	e045      	b.n	80032b6 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800322a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322c:	015a      	lsls	r2, r3, #5
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	4413      	add	r3, r2
 8003232:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800323e:	4613      	mov	r3, r2
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	4413      	add	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	440b      	add	r3, r1
 8003248:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d12e      	bne.n	80032b0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003252:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003254:	2b00      	cmp	r3, #0
 8003256:	da2b      	bge.n	80032b0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8003264:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003268:	429a      	cmp	r2, r3
 800326a:	d121      	bne.n	80032b0 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800326c:	6879      	ldr	r1, [r7, #4]
 800326e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003270:	4613      	mov	r3, r2
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	4413      	add	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 800327e:	2201      	movs	r2, #1
 8003280:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003282:	6a3b      	ldr	r3, [r7, #32]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800328a:	6a3b      	ldr	r3, [r7, #32]
 800328c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800328e:	6a3b      	ldr	r3, [r7, #32]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10a      	bne.n	80032b0 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	69fa      	ldr	r2, [r7, #28]
 80032a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80032a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032ac:	6053      	str	r3, [r2, #4]
            break;
 80032ae:	e007      	b.n	80032c0 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b2:	3301      	adds	r3, #1
 80032b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032bc:	429a      	cmp	r2, r3
 80032be:	d3b4      	bcc.n	800322a <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	695a      	ldr	r2, [r3, #20]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80032ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f004 f9df 	bl	8007698 <USB_ReadInterrupts>
 80032da:	4603      	mov	r3, r0
 80032dc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80032e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032e4:	d10a      	bne.n	80032fc <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f006 fece 	bl	800a088 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	695a      	ldr	r2, [r3, #20]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80032fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f004 f9c9 	bl	8007698 <USB_ReadInterrupts>
 8003306:	4603      	mov	r3, r0
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b04      	cmp	r3, #4
 800330e:	d115      	bne.n	800333c <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	f003 0304 	and.w	r3, r3, #4
 800331e:	2b00      	cmp	r3, #0
 8003320:	d002      	beq.n	8003328 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f006 febe 	bl	800a0a4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6859      	ldr	r1, [r3, #4]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	430a      	orrs	r2, r1
 8003336:	605a      	str	r2, [r3, #4]
 8003338:	e000      	b.n	800333c <HAL_PCD_IRQHandler+0x992>
      return;
 800333a:	bf00      	nop
    }
  }
}
 800333c:	3734      	adds	r7, #52	@ 0x34
 800333e:	46bd      	mov	sp, r7
 8003340:	bd90      	pop	{r4, r7, pc}

08003342 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b082      	sub	sp, #8
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
 800334a:	460b      	mov	r3, r1
 800334c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003354:	2b01      	cmp	r3, #1
 8003356:	d101      	bne.n	800335c <HAL_PCD_SetAddress+0x1a>
 8003358:	2302      	movs	r3, #2
 800335a:	e013      	b.n	8003384 <HAL_PCD_SetAddress+0x42>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	78fa      	ldrb	r2, [r7, #3]
 8003368:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	78fa      	ldrb	r2, [r7, #3]
 8003372:	4611      	mov	r1, r2
 8003374:	4618      	mov	r0, r3
 8003376:	f004 f927 	bl	80075c8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	4608      	mov	r0, r1
 8003396:	4611      	mov	r1, r2
 8003398:	461a      	mov	r2, r3
 800339a:	4603      	mov	r3, r0
 800339c:	70fb      	strb	r3, [r7, #3]
 800339e:	460b      	mov	r3, r1
 80033a0:	803b      	strh	r3, [r7, #0]
 80033a2:	4613      	mov	r3, r2
 80033a4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80033a6:	2300      	movs	r3, #0
 80033a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80033aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	da0f      	bge.n	80033d2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033b2:	78fb      	ldrb	r3, [r7, #3]
 80033b4:	f003 020f 	and.w	r2, r3, #15
 80033b8:	4613      	mov	r3, r2
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	4413      	add	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	3338      	adds	r3, #56	@ 0x38
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	4413      	add	r3, r2
 80033c6:	3304      	adds	r3, #4
 80033c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2201      	movs	r2, #1
 80033ce:	705a      	strb	r2, [r3, #1]
 80033d0:	e00f      	b.n	80033f2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033d2:	78fb      	ldrb	r3, [r7, #3]
 80033d4:	f003 020f 	and.w	r2, r3, #15
 80033d8:	4613      	mov	r3, r2
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	4413      	add	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	4413      	add	r3, r2
 80033e8:	3304      	adds	r3, #4
 80033ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80033f2:	78fb      	ldrb	r3, [r7, #3]
 80033f4:	f003 030f 	and.w	r3, r3, #15
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80033fe:	883a      	ldrh	r2, [r7, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	78ba      	ldrb	r2, [r7, #2]
 8003408:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	785b      	ldrb	r3, [r3, #1]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d004      	beq.n	800341c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	461a      	mov	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800341c:	78bb      	ldrb	r3, [r7, #2]
 800341e:	2b02      	cmp	r3, #2
 8003420:	d102      	bne.n	8003428 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800342e:	2b01      	cmp	r3, #1
 8003430:	d101      	bne.n	8003436 <HAL_PCD_EP_Open+0xaa>
 8003432:	2302      	movs	r3, #2
 8003434:	e00e      	b.n	8003454 <HAL_PCD_EP_Open+0xc8>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68f9      	ldr	r1, [r7, #12]
 8003444:	4618      	mov	r0, r3
 8003446:	f003 f9a7 	bl	8006798 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8003452:	7afb      	ldrb	r3, [r7, #11]
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	460b      	mov	r3, r1
 8003466:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003468:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800346c:	2b00      	cmp	r3, #0
 800346e:	da0f      	bge.n	8003490 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003470:	78fb      	ldrb	r3, [r7, #3]
 8003472:	f003 020f 	and.w	r2, r3, #15
 8003476:	4613      	mov	r3, r2
 8003478:	00db      	lsls	r3, r3, #3
 800347a:	4413      	add	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	3338      	adds	r3, #56	@ 0x38
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	4413      	add	r3, r2
 8003484:	3304      	adds	r3, #4
 8003486:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2201      	movs	r2, #1
 800348c:	705a      	strb	r2, [r3, #1]
 800348e:	e00f      	b.n	80034b0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003490:	78fb      	ldrb	r3, [r7, #3]
 8003492:	f003 020f 	and.w	r2, r3, #15
 8003496:	4613      	mov	r3, r2
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	4413      	add	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	4413      	add	r3, r2
 80034a6:	3304      	adds	r3, #4
 80034a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80034b0:	78fb      	ldrb	r3, [r7, #3]
 80034b2:	f003 030f 	and.w	r3, r3, #15
 80034b6:	b2da      	uxtb	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d101      	bne.n	80034ca <HAL_PCD_EP_Close+0x6e>
 80034c6:	2302      	movs	r3, #2
 80034c8:	e00e      	b.n	80034e8 <HAL_PCD_EP_Close+0x8c>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68f9      	ldr	r1, [r7, #12]
 80034d8:	4618      	mov	r0, r3
 80034da:	f003 f9e5 	bl	80068a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	607a      	str	r2, [r7, #4]
 80034fa:	603b      	str	r3, [r7, #0]
 80034fc:	460b      	mov	r3, r1
 80034fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003500:	7afb      	ldrb	r3, [r7, #11]
 8003502:	f003 020f 	and.w	r2, r3, #15
 8003506:	4613      	mov	r3, r2
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	4413      	add	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	4413      	add	r3, r2
 8003516:	3304      	adds	r3, #4
 8003518:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2200      	movs	r2, #0
 800352a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	2200      	movs	r2, #0
 8003530:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003532:	7afb      	ldrb	r3, [r7, #11]
 8003534:	f003 030f 	and.w	r3, r3, #15
 8003538:	b2da      	uxtb	r2, r3
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d102      	bne.n	800354c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800354c:	7afb      	ldrb	r3, [r7, #11]
 800354e:	f003 030f 	and.w	r3, r3, #15
 8003552:	2b00      	cmp	r3, #0
 8003554:	d109      	bne.n	800356a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6818      	ldr	r0, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	b2db      	uxtb	r3, r3
 8003560:	461a      	mov	r2, r3
 8003562:	6979      	ldr	r1, [r7, #20]
 8003564:	f003 fcc4 	bl	8006ef0 <USB_EP0StartXfer>
 8003568:	e008      	b.n	800357c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6818      	ldr	r0, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	b2db      	uxtb	r3, r3
 8003574:	461a      	mov	r2, r3
 8003576:	6979      	ldr	r1, [r7, #20]
 8003578:	f003 fa72 	bl	8006a60 <USB_EPStartXfer>
  }

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
 800358e:	460b      	mov	r3, r1
 8003590:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003592:	78fb      	ldrb	r3, [r7, #3]
 8003594:	f003 020f 	and.w	r2, r3, #15
 8003598:	6879      	ldr	r1, [r7, #4]
 800359a:	4613      	mov	r3, r2
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	4413      	add	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	440b      	add	r3, r1
 80035a4:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 80035a8:	681b      	ldr	r3, [r3, #0]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b086      	sub	sp, #24
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	60f8      	str	r0, [r7, #12]
 80035be:	607a      	str	r2, [r7, #4]
 80035c0:	603b      	str	r3, [r7, #0]
 80035c2:	460b      	mov	r3, r1
 80035c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035c6:	7afb      	ldrb	r3, [r7, #11]
 80035c8:	f003 020f 	and.w	r2, r3, #15
 80035cc:	4613      	mov	r3, r2
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	4413      	add	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	3338      	adds	r3, #56	@ 0x38
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	4413      	add	r3, r2
 80035da:	3304      	adds	r3, #4
 80035dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	2200      	movs	r2, #0
 80035ee:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	2201      	movs	r2, #1
 80035f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035f6:	7afb      	ldrb	r3, [r7, #11]
 80035f8:	f003 030f 	and.w	r3, r3, #15
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d102      	bne.n	8003610 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003610:	7afb      	ldrb	r3, [r7, #11]
 8003612:	f003 030f 	and.w	r3, r3, #15
 8003616:	2b00      	cmp	r3, #0
 8003618:	d109      	bne.n	800362e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6818      	ldr	r0, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	b2db      	uxtb	r3, r3
 8003624:	461a      	mov	r2, r3
 8003626:	6979      	ldr	r1, [r7, #20]
 8003628:	f003 fc62 	bl	8006ef0 <USB_EP0StartXfer>
 800362c:	e008      	b.n	8003640 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6818      	ldr	r0, [r3, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	b2db      	uxtb	r3, r3
 8003638:	461a      	mov	r2, r3
 800363a:	6979      	ldr	r1, [r7, #20]
 800363c:	f003 fa10 	bl	8006a60 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3718      	adds	r7, #24
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b084      	sub	sp, #16
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
 8003652:	460b      	mov	r3, r1
 8003654:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003656:	78fb      	ldrb	r3, [r7, #3]
 8003658:	f003 020f 	and.w	r2, r3, #15
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	429a      	cmp	r2, r3
 8003662:	d901      	bls.n	8003668 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e050      	b.n	800370a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003668:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800366c:	2b00      	cmp	r3, #0
 800366e:	da0f      	bge.n	8003690 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003670:	78fb      	ldrb	r3, [r7, #3]
 8003672:	f003 020f 	and.w	r2, r3, #15
 8003676:	4613      	mov	r3, r2
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	4413      	add	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	3338      	adds	r3, #56	@ 0x38
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	4413      	add	r3, r2
 8003684:	3304      	adds	r3, #4
 8003686:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2201      	movs	r2, #1
 800368c:	705a      	strb	r2, [r3, #1]
 800368e:	e00d      	b.n	80036ac <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003690:	78fa      	ldrb	r2, [r7, #3]
 8003692:	4613      	mov	r3, r2
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	4413      	add	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	4413      	add	r3, r2
 80036a2:	3304      	adds	r3, #4
 80036a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2201      	movs	r2, #1
 80036b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036b2:	78fb      	ldrb	r3, [r7, #3]
 80036b4:	f003 030f 	and.w	r3, r3, #15
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d101      	bne.n	80036cc <HAL_PCD_EP_SetStall+0x82>
 80036c8:	2302      	movs	r3, #2
 80036ca:	e01e      	b.n	800370a <HAL_PCD_EP_SetStall+0xc0>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68f9      	ldr	r1, [r7, #12]
 80036da:	4618      	mov	r0, r3
 80036dc:	f003 fea0 	bl	8007420 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036e0:	78fb      	ldrb	r3, [r7, #3]
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10a      	bne.n	8003700 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6818      	ldr	r0, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	b2d9      	uxtb	r1, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80036fa:	461a      	mov	r2, r3
 80036fc:	f004 f890 	bl	8007820 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b084      	sub	sp, #16
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
 800371a:	460b      	mov	r3, r1
 800371c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800371e:	78fb      	ldrb	r3, [r7, #3]
 8003720:	f003 020f 	and.w	r2, r3, #15
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	429a      	cmp	r2, r3
 800372a:	d901      	bls.n	8003730 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e042      	b.n	80037b6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003730:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003734:	2b00      	cmp	r3, #0
 8003736:	da0f      	bge.n	8003758 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003738:	78fb      	ldrb	r3, [r7, #3]
 800373a:	f003 020f 	and.w	r2, r3, #15
 800373e:	4613      	mov	r3, r2
 8003740:	00db      	lsls	r3, r3, #3
 8003742:	4413      	add	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	3338      	adds	r3, #56	@ 0x38
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	4413      	add	r3, r2
 800374c:	3304      	adds	r3, #4
 800374e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2201      	movs	r2, #1
 8003754:	705a      	strb	r2, [r3, #1]
 8003756:	e00f      	b.n	8003778 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003758:	78fb      	ldrb	r3, [r7, #3]
 800375a:	f003 020f 	and.w	r2, r3, #15
 800375e:	4613      	mov	r3, r2
 8003760:	00db      	lsls	r3, r3, #3
 8003762:	4413      	add	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	4413      	add	r3, r2
 800376e:	3304      	adds	r3, #4
 8003770:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800377e:	78fb      	ldrb	r3, [r7, #3]
 8003780:	f003 030f 	and.w	r3, r3, #15
 8003784:	b2da      	uxtb	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003790:	2b01      	cmp	r3, #1
 8003792:	d101      	bne.n	8003798 <HAL_PCD_EP_ClrStall+0x86>
 8003794:	2302      	movs	r3, #2
 8003796:	e00e      	b.n	80037b6 <HAL_PCD_EP_ClrStall+0xa4>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68f9      	ldr	r1, [r7, #12]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f003 fea8 	bl	80074fc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b084      	sub	sp, #16
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
 80037c6:	460b      	mov	r3, r1
 80037c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80037ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	da0c      	bge.n	80037ec <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037d2:	78fb      	ldrb	r3, [r7, #3]
 80037d4:	f003 020f 	and.w	r2, r3, #15
 80037d8:	4613      	mov	r3, r2
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	4413      	add	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	3338      	adds	r3, #56	@ 0x38
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	4413      	add	r3, r2
 80037e6:	3304      	adds	r3, #4
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	e00c      	b.n	8003806 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037ec:	78fb      	ldrb	r3, [r7, #3]
 80037ee:	f003 020f 	and.w	r2, r3, #15
 80037f2:	4613      	mov	r3, r2
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	4413      	add	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	4413      	add	r3, r2
 8003802:	3304      	adds	r3, #4
 8003804:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68f9      	ldr	r1, [r7, #12]
 800380c:	4618      	mov	r0, r3
 800380e:	f003 fcc7 	bl	80071a0 <USB_EPStopXfer>
 8003812:	4603      	mov	r3, r0
 8003814:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003816:	7afb      	ldrb	r3, [r7, #11]
}
 8003818:	4618      	mov	r0, r3
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b08a      	sub	sp, #40	@ 0x28
 8003824:	af02      	add	r7, sp, #8
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	4613      	mov	r3, r2
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	4413      	add	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	3338      	adds	r3, #56	@ 0x38
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	4413      	add	r3, r2
 8003844:	3304      	adds	r3, #4
 8003846:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6a1a      	ldr	r2, [r3, #32]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	429a      	cmp	r2, r3
 8003852:	d901      	bls.n	8003858 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e06c      	b.n	8003932 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	699a      	ldr	r2, [r3, #24]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	69fa      	ldr	r2, [r7, #28]
 800386a:	429a      	cmp	r2, r3
 800386c:	d902      	bls.n	8003874 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	3303      	adds	r3, #3
 8003878:	089b      	lsrs	r3, r3, #2
 800387a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800387c:	e02b      	b.n	80038d6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	699a      	ldr	r2, [r3, #24]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	69fa      	ldr	r2, [r7, #28]
 8003890:	429a      	cmp	r2, r3
 8003892:	d902      	bls.n	800389a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	3303      	adds	r3, #3
 800389e:	089b      	lsrs	r3, r3, #2
 80038a0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6919      	ldr	r1, [r3, #16]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	b2da      	uxtb	r2, r3
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	9300      	str	r3, [sp, #0]
 80038b6:	4603      	mov	r3, r0
 80038b8:	6978      	ldr	r0, [r7, #20]
 80038ba:	f003 fd1b 	bl	80072f4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	691a      	ldr	r2, [r3, #16]
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	441a      	add	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6a1a      	ldr	r2, [r3, #32]
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	441a      	add	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	015a      	lsls	r2, r3, #5
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	4413      	add	r3, r2
 80038de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d809      	bhi.n	8003900 <PCD_WriteEmptyTxFifo+0xe0>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6a1a      	ldr	r2, [r3, #32]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d203      	bcs.n	8003900 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1be      	bne.n	800387e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	699a      	ldr	r2, [r3, #24]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	429a      	cmp	r2, r3
 800390a:	d811      	bhi.n	8003930 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	f003 030f 	and.w	r3, r3, #15
 8003912:	2201      	movs	r2, #1
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003920:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	43db      	mvns	r3, r3
 8003926:	6939      	ldr	r1, [r7, #16]
 8003928:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800392c:	4013      	ands	r3, r2
 800392e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3720      	adds	r7, #32
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
	...

0800393c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b088      	sub	sp, #32
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	333c      	adds	r3, #60	@ 0x3c
 8003954:	3304      	adds	r3, #4
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	015a      	lsls	r2, r3, #5
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	4413      	add	r3, r2
 8003962:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d17b      	bne.n	8003a6a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	f003 0308 	and.w	r3, r3, #8
 8003978:	2b00      	cmp	r3, #0
 800397a:	d015      	beq.n	80039a8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	4a61      	ldr	r2, [pc, #388]	@ (8003b04 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003980:	4293      	cmp	r3, r2
 8003982:	f240 80b9 	bls.w	8003af8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800398c:	2b00      	cmp	r3, #0
 800398e:	f000 80b3 	beq.w	8003af8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	015a      	lsls	r2, r3, #5
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	4413      	add	r3, r2
 800399a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800399e:	461a      	mov	r2, r3
 80039a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039a4:	6093      	str	r3, [r2, #8]
 80039a6:	e0a7      	b.n	8003af8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	f003 0320 	and.w	r3, r3, #32
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d009      	beq.n	80039c6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	015a      	lsls	r2, r3, #5
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	4413      	add	r3, r2
 80039ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039be:	461a      	mov	r2, r3
 80039c0:	2320      	movs	r3, #32
 80039c2:	6093      	str	r3, [r2, #8]
 80039c4:	e098      	b.n	8003af8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f040 8093 	bne.w	8003af8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	4a4b      	ldr	r2, [pc, #300]	@ (8003b04 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d90f      	bls.n	80039fa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00a      	beq.n	80039fa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	015a      	lsls	r2, r3, #5
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	4413      	add	r3, r2
 80039ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039f0:	461a      	mov	r2, r3
 80039f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039f6:	6093      	str	r3, [r2, #8]
 80039f8:	e07e      	b.n	8003af8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	4613      	mov	r3, r2
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	4413      	add	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	69da      	ldr	r2, [r3, #28]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	0159      	lsls	r1, r3, #5
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	440b      	add	r3, r1
 8003a1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a26:	1ad2      	subs	r2, r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d114      	bne.n	8003a5c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d109      	bne.n	8003a4e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6818      	ldr	r0, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003a44:	461a      	mov	r2, r3
 8003a46:	2101      	movs	r1, #1
 8003a48:	f003 feea 	bl	8007820 <USB_EP0_OutStart>
 8003a4c:	e006      	b.n	8003a5c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	691a      	ldr	r2, [r3, #16]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	441a      	add	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	4619      	mov	r1, r3
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f006 fa4c 	bl	8009f00 <HAL_PCD_DataOutStageCallback>
 8003a68:	e046      	b.n	8003af8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	4a26      	ldr	r2, [pc, #152]	@ (8003b08 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d124      	bne.n	8003abc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00a      	beq.n	8003a92 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a88:	461a      	mov	r2, r3
 8003a8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a8e:	6093      	str	r3, [r2, #8]
 8003a90:	e032      	b.n	8003af8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	f003 0320 	and.w	r3, r3, #32
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d008      	beq.n	8003aae <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	015a      	lsls	r2, r3, #5
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	2320      	movs	r3, #32
 8003aac:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f006 fa23 	bl	8009f00 <HAL_PCD_DataOutStageCallback>
 8003aba:	e01d      	b.n	8003af8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d114      	bne.n	8003aec <PCD_EP_OutXfrComplete_int+0x1b0>
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	4413      	add	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	440b      	add	r3, r1
 8003ad0:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d108      	bne.n	8003aec <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6818      	ldr	r0, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	f003 fe9a 	bl	8007820 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	4619      	mov	r1, r3
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f006 fa04 	bl	8009f00 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3720      	adds	r7, #32
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	4f54300a 	.word	0x4f54300a
 8003b08:	4f54310a 	.word	0x4f54310a

08003b0c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	333c      	adds	r3, #60	@ 0x3c
 8003b24:	3304      	adds	r3, #4
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	015a      	lsls	r2, r3, #5
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	4413      	add	r3, r2
 8003b32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	4a15      	ldr	r2, [pc, #84]	@ (8003b94 <PCD_EP_OutSetupPacket_int+0x88>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d90e      	bls.n	8003b60 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d009      	beq.n	8003b60 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	015a      	lsls	r2, r3, #5
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	4413      	add	r3, r2
 8003b54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b58:	461a      	mov	r2, r3
 8003b5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b5e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f006 f9bb 	bl	8009edc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	4a0a      	ldr	r2, [pc, #40]	@ (8003b94 <PCD_EP_OutSetupPacket_int+0x88>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d90c      	bls.n	8003b88 <PCD_EP_OutSetupPacket_int+0x7c>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d108      	bne.n	8003b88 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6818      	ldr	r0, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003b80:	461a      	mov	r2, r3
 8003b82:	2101      	movs	r1, #1
 8003b84:	f003 fe4c 	bl	8007820 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3718      	adds	r7, #24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	4f54300a 	.word	0x4f54300a

08003b98 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	70fb      	strb	r3, [r7, #3]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bae:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003bb0:	78fb      	ldrb	r3, [r7, #3]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d107      	bne.n	8003bc6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003bb6:	883b      	ldrh	r3, [r7, #0]
 8003bb8:	0419      	lsls	r1, r3, #16
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	629a      	str	r2, [r3, #40]	@ 0x28
 8003bc4:	e028      	b.n	8003c18 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bcc:	0c1b      	lsrs	r3, r3, #16
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	73fb      	strb	r3, [r7, #15]
 8003bd8:	e00d      	b.n	8003bf6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	7bfb      	ldrb	r3, [r7, #15]
 8003be0:	3340      	adds	r3, #64	@ 0x40
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4413      	add	r3, r2
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	0c1b      	lsrs	r3, r3, #16
 8003bea:	68ba      	ldr	r2, [r7, #8]
 8003bec:	4413      	add	r3, r2
 8003bee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003bf0:	7bfb      	ldrb	r3, [r7, #15]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	73fb      	strb	r3, [r7, #15]
 8003bf6:	7bfa      	ldrb	r2, [r7, #15]
 8003bf8:	78fb      	ldrb	r3, [r7, #3]
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d3ec      	bcc.n	8003bda <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003c00:	883b      	ldrh	r3, [r7, #0]
 8003c02:	0418      	lsls	r0, r3, #16
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6819      	ldr	r1, [r3, #0]
 8003c08:	78fb      	ldrb	r3, [r7, #3]
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	4302      	orrs	r2, r0
 8003c10:	3340      	adds	r3, #64	@ 0x40
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	440b      	add	r3, r1
 8003c16:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b083      	sub	sp, #12
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
 8003c2e:	460b      	mov	r3, r1
 8003c30:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	887a      	ldrh	r2, [r7, #2]
 8003c38:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c7a:	f043 0303 	orr.w	r3, r3, #3
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3714      	adds	r7, #20
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d101      	bne.n	8003ca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e0cc      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ca4:	4b68      	ldr	r3, [pc, #416]	@ (8003e48 <HAL_RCC_ClockConfig+0x1b8>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 030f 	and.w	r3, r3, #15
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d90c      	bls.n	8003ccc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cb2:	4b65      	ldr	r3, [pc, #404]	@ (8003e48 <HAL_RCC_ClockConfig+0x1b8>)
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	b2d2      	uxtb	r2, r2
 8003cb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cba:	4b63      	ldr	r3, [pc, #396]	@ (8003e48 <HAL_RCC_ClockConfig+0x1b8>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d001      	beq.n	8003ccc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e0b8      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d020      	beq.n	8003d1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d005      	beq.n	8003cf0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ce4:	4b59      	ldr	r3, [pc, #356]	@ (8003e4c <HAL_RCC_ClockConfig+0x1bc>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	4a58      	ldr	r2, [pc, #352]	@ (8003e4c <HAL_RCC_ClockConfig+0x1bc>)
 8003cea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003cee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0308 	and.w	r3, r3, #8
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d005      	beq.n	8003d08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cfc:	4b53      	ldr	r3, [pc, #332]	@ (8003e4c <HAL_RCC_ClockConfig+0x1bc>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	4a52      	ldr	r2, [pc, #328]	@ (8003e4c <HAL_RCC_ClockConfig+0x1bc>)
 8003d02:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d08:	4b50      	ldr	r3, [pc, #320]	@ (8003e4c <HAL_RCC_ClockConfig+0x1bc>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	494d      	ldr	r1, [pc, #308]	@ (8003e4c <HAL_RCC_ClockConfig+0x1bc>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d044      	beq.n	8003db0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d107      	bne.n	8003d3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d2e:	4b47      	ldr	r3, [pc, #284]	@ (8003e4c <HAL_RCC_ClockConfig+0x1bc>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d119      	bne.n	8003d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e07f      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d003      	beq.n	8003d4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d4a:	2b03      	cmp	r3, #3
 8003d4c:	d107      	bne.n	8003d5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d4e:	4b3f      	ldr	r3, [pc, #252]	@ (8003e4c <HAL_RCC_ClockConfig+0x1bc>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d109      	bne.n	8003d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e06f      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d5e:	4b3b      	ldr	r3, [pc, #236]	@ (8003e4c <HAL_RCC_ClockConfig+0x1bc>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d101      	bne.n	8003d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e067      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d6e:	4b37      	ldr	r3, [pc, #220]	@ (8003e4c <HAL_RCC_ClockConfig+0x1bc>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f023 0203 	bic.w	r2, r3, #3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	4934      	ldr	r1, [pc, #208]	@ (8003e4c <HAL_RCC_ClockConfig+0x1bc>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d80:	f7fd fd84 	bl	800188c <HAL_GetTick>
 8003d84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d86:	e00a      	b.n	8003d9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d88:	f7fd fd80 	bl	800188c <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e04f      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d9e:	4b2b      	ldr	r3, [pc, #172]	@ (8003e4c <HAL_RCC_ClockConfig+0x1bc>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f003 020c 	and.w	r2, r3, #12
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d1eb      	bne.n	8003d88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003db0:	4b25      	ldr	r3, [pc, #148]	@ (8003e48 <HAL_RCC_ClockConfig+0x1b8>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 030f 	and.w	r3, r3, #15
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d20c      	bcs.n	8003dd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dbe:	4b22      	ldr	r3, [pc, #136]	@ (8003e48 <HAL_RCC_ClockConfig+0x1b8>)
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	b2d2      	uxtb	r2, r2
 8003dc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dc6:	4b20      	ldr	r3, [pc, #128]	@ (8003e48 <HAL_RCC_ClockConfig+0x1b8>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d001      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e032      	b.n	8003e3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d008      	beq.n	8003df6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003de4:	4b19      	ldr	r3, [pc, #100]	@ (8003e4c <HAL_RCC_ClockConfig+0x1bc>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	4916      	ldr	r1, [pc, #88]	@ (8003e4c <HAL_RCC_ClockConfig+0x1bc>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0308 	and.w	r3, r3, #8
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d009      	beq.n	8003e16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e02:	4b12      	ldr	r3, [pc, #72]	@ (8003e4c <HAL_RCC_ClockConfig+0x1bc>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	490e      	ldr	r1, [pc, #56]	@ (8003e4c <HAL_RCC_ClockConfig+0x1bc>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e16:	f000 fb7f 	bl	8004518 <HAL_RCC_GetSysClockFreq>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e4c <HAL_RCC_ClockConfig+0x1bc>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	091b      	lsrs	r3, r3, #4
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	490a      	ldr	r1, [pc, #40]	@ (8003e50 <HAL_RCC_ClockConfig+0x1c0>)
 8003e28:	5ccb      	ldrb	r3, [r1, r3]
 8003e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e2e:	4a09      	ldr	r2, [pc, #36]	@ (8003e54 <HAL_RCC_ClockConfig+0x1c4>)
 8003e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e32:	4b09      	ldr	r3, [pc, #36]	@ (8003e58 <HAL_RCC_ClockConfig+0x1c8>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fd fce4 	bl	8001804 <HAL_InitTick>

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	40023c00 	.word	0x40023c00
 8003e4c:	40023800 	.word	0x40023800
 8003e50:	0800a5b0 	.word	0x0800a5b0
 8003e54:	20000000 	.word	0x20000000
 8003e58:	20000004 	.word	0x20000004

08003e5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e60:	4b03      	ldr	r3, [pc, #12]	@ (8003e70 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e62:	681b      	ldr	r3, [r3, #0]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	20000000 	.word	0x20000000

08003e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e78:	f7ff fff0 	bl	8003e5c <HAL_RCC_GetHCLKFreq>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	4b05      	ldr	r3, [pc, #20]	@ (8003e94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	0a9b      	lsrs	r3, r3, #10
 8003e84:	f003 0307 	and.w	r3, r3, #7
 8003e88:	4903      	ldr	r1, [pc, #12]	@ (8003e98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e8a:	5ccb      	ldrb	r3, [r1, r3]
 8003e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	40023800 	.word	0x40023800
 8003e98:	0800a5c0 	.word	0x0800a5c0

08003e9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ea0:	f7ff ffdc 	bl	8003e5c <HAL_RCC_GetHCLKFreq>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	4b05      	ldr	r3, [pc, #20]	@ (8003ebc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	0b5b      	lsrs	r3, r3, #13
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	4903      	ldr	r1, [pc, #12]	@ (8003ec0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eb2:	5ccb      	ldrb	r3, [r1, r3]
 8003eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	40023800 	.word	0x40023800
 8003ec0:	0800a5c0 	.word	0x0800a5c0

08003ec4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b08c      	sub	sp, #48	@ 0x30
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003edc:	2300      	movs	r3, #0
 8003ede:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8003eec:	2300      	movs	r3, #0
 8003eee:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d010      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003efc:	4b6f      	ldr	r3, [pc, #444]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003efe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f02:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f0a:	496c      	ldr	r1, [pc, #432]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d010      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003f2a:	4b64      	ldr	r3, [pc, #400]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f30:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f38:	4960      	ldr	r1, [pc, #384]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d101      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d017      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f58:	4b58      	ldr	r3, [pc, #352]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f5e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f66:	4955      	ldr	r1, [pc, #340]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f76:	d101      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d101      	bne.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003f84:	2301      	movs	r3, #1
 8003f86:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0308 	and.w	r3, r3, #8
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d017      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f94:	4b49      	ldr	r3, [pc, #292]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f9a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fa2:	4946      	ldr	r1, [pc, #280]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fb2:	d101      	bne.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0320 	and.w	r3, r3, #32
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f000 808a 	beq.w	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	60bb      	str	r3, [r7, #8]
 8003fd6:	4b39      	ldr	r3, [pc, #228]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fda:	4a38      	ldr	r2, [pc, #224]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fe0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fe2:	4b36      	ldr	r3, [pc, #216]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fea:	60bb      	str	r3, [r7, #8]
 8003fec:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003fee:	4b34      	ldr	r3, [pc, #208]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a33      	ldr	r2, [pc, #204]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003ff4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ff8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ffa:	f7fd fc47 	bl	800188c <HAL_GetTick>
 8003ffe:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004000:	e008      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004002:	f7fd fc43 	bl	800188c <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d901      	bls.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e278      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004014:	4b2a      	ldr	r3, [pc, #168]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800401c:	2b00      	cmp	r3, #0
 800401e:	d0f0      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004020:	4b26      	ldr	r3, [pc, #152]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004022:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004024:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004028:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800402a:	6a3b      	ldr	r3, [r7, #32]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d02f      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004034:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004038:	6a3a      	ldr	r2, [r7, #32]
 800403a:	429a      	cmp	r2, r3
 800403c:	d028      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800403e:	4b1f      	ldr	r3, [pc, #124]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004042:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004046:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004048:	4b1e      	ldr	r3, [pc, #120]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800404a:	2201      	movs	r2, #1
 800404c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800404e:	4b1d      	ldr	r3, [pc, #116]	@ (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004050:	2200      	movs	r2, #0
 8004052:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004054:	4a19      	ldr	r2, [pc, #100]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004056:	6a3b      	ldr	r3, [r7, #32]
 8004058:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800405a:	4b18      	ldr	r3, [pc, #96]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800405c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b01      	cmp	r3, #1
 8004064:	d114      	bne.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004066:	f7fd fc11 	bl	800188c <HAL_GetTick>
 800406a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800406c:	e00a      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800406e:	f7fd fc0d 	bl	800188c <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	f241 3288 	movw	r2, #5000	@ 0x1388
 800407c:	4293      	cmp	r3, r2
 800407e:	d901      	bls.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e240      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004084:	4b0d      	ldr	r3, [pc, #52]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004086:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d0ee      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004094:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004098:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800409c:	d114      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800409e:	4b07      	ldr	r3, [pc, #28]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040aa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80040ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040b2:	4902      	ldr	r1, [pc, #8]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	608b      	str	r3, [r1, #8]
 80040b8:	e00c      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80040ba:	bf00      	nop
 80040bc:	40023800 	.word	0x40023800
 80040c0:	40007000 	.word	0x40007000
 80040c4:	42470e40 	.word	0x42470e40
 80040c8:	4b4a      	ldr	r3, [pc, #296]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	4a49      	ldr	r2, [pc, #292]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80040ce:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80040d2:	6093      	str	r3, [r2, #8]
 80040d4:	4b47      	ldr	r3, [pc, #284]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80040d6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040e0:	4944      	ldr	r1, [pc, #272]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0310 	and.w	r3, r3, #16
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d004      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80040f8:	4b3f      	ldr	r3, [pc, #252]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80040fa:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00a      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004108:	4b3a      	ldr	r3, [pc, #232]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800410a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800410e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004116:	4937      	ldr	r1, [pc, #220]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004118:	4313      	orrs	r3, r2
 800411a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00a      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800412a:	4b32      	ldr	r3, [pc, #200]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800412c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004130:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004138:	492e      	ldr	r1, [pc, #184]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800413a:	4313      	orrs	r3, r2
 800413c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004148:	2b00      	cmp	r3, #0
 800414a:	d011      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800414c:	4b29      	ldr	r3, [pc, #164]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800414e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004152:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800415a:	4926      	ldr	r1, [pc, #152]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800415c:	4313      	orrs	r3, r2
 800415e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004166:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800416a:	d101      	bne.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800416c:	2301      	movs	r3, #1
 800416e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00a      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800417c:	4b1d      	ldr	r3, [pc, #116]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800417e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004182:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800418a:	491a      	ldr	r1, [pc, #104]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800419a:	2b00      	cmp	r3, #0
 800419c:	d011      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800419e:	4b15      	ldr	r3, [pc, #84]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041a4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041ac:	4911      	ldr	r1, [pc, #68]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041bc:	d101      	bne.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80041be:	2301      	movs	r3, #1
 80041c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80041c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d005      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041d0:	f040 80ff 	bne.w	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80041d4:	4b09      	ldr	r3, [pc, #36]	@ (80041fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041da:	f7fd fb57 	bl	800188c <HAL_GetTick>
 80041de:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041e0:	e00e      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80041e2:	f7fd fb53 	bl	800188c <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d907      	bls.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e188      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80041f4:	40023800 	.word	0x40023800
 80041f8:	424711e0 	.word	0x424711e0
 80041fc:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004200:	4b7e      	ldr	r3, [pc, #504]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1ea      	bne.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	2b00      	cmp	r3, #0
 8004216:	d003      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800421c:	2b00      	cmp	r3, #0
 800421e:	d009      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004228:	2b00      	cmp	r3, #0
 800422a:	d028      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004230:	2b00      	cmp	r3, #0
 8004232:	d124      	bne.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004234:	4b71      	ldr	r3, [pc, #452]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004236:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800423a:	0c1b      	lsrs	r3, r3, #16
 800423c:	f003 0303 	and.w	r3, r3, #3
 8004240:	3301      	adds	r3, #1
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004246:	4b6d      	ldr	r3, [pc, #436]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004248:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800424c:	0e1b      	lsrs	r3, r3, #24
 800424e:	f003 030f 	and.w	r3, r3, #15
 8004252:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	019b      	lsls	r3, r3, #6
 800425e:	431a      	orrs	r2, r3
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	085b      	lsrs	r3, r3, #1
 8004264:	3b01      	subs	r3, #1
 8004266:	041b      	lsls	r3, r3, #16
 8004268:	431a      	orrs	r2, r3
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	061b      	lsls	r3, r3, #24
 800426e:	431a      	orrs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	071b      	lsls	r3, r3, #28
 8004276:	4961      	ldr	r1, [pc, #388]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004278:	4313      	orrs	r3, r2
 800427a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0304 	and.w	r3, r3, #4
 8004286:	2b00      	cmp	r3, #0
 8004288:	d004      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800428e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004292:	d00a      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800429c:	2b00      	cmp	r3, #0
 800429e:	d035      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042a8:	d130      	bne.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80042aa:	4b54      	ldr	r3, [pc, #336]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80042ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042b0:	0c1b      	lsrs	r3, r3, #16
 80042b2:	f003 0303 	and.w	r3, r3, #3
 80042b6:	3301      	adds	r3, #1
 80042b8:	005b      	lsls	r3, r3, #1
 80042ba:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042bc:	4b4f      	ldr	r3, [pc, #316]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80042be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042c2:	0f1b      	lsrs	r3, r3, #28
 80042c4:	f003 0307 	and.w	r3, r3, #7
 80042c8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	019b      	lsls	r3, r3, #6
 80042d4:	431a      	orrs	r2, r3
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	085b      	lsrs	r3, r3, #1
 80042da:	3b01      	subs	r3, #1
 80042dc:	041b      	lsls	r3, r3, #16
 80042de:	431a      	orrs	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	061b      	lsls	r3, r3, #24
 80042e6:	431a      	orrs	r2, r3
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	071b      	lsls	r3, r3, #28
 80042ec:	4943      	ldr	r1, [pc, #268]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80042f4:	4b41      	ldr	r3, [pc, #260]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80042f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042fa:	f023 021f 	bic.w	r2, r3, #31
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004302:	3b01      	subs	r3, #1
 8004304:	493d      	ldr	r1, [pc, #244]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004306:	4313      	orrs	r3, r2
 8004308:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004314:	2b00      	cmp	r3, #0
 8004316:	d029      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800431c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004320:	d124      	bne.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004322:	4b36      	ldr	r3, [pc, #216]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004324:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004328:	0c1b      	lsrs	r3, r3, #16
 800432a:	f003 0303 	and.w	r3, r3, #3
 800432e:	3301      	adds	r3, #1
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004334:	4b31      	ldr	r3, [pc, #196]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004336:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800433a:	0f1b      	lsrs	r3, r3, #28
 800433c:	f003 0307 	and.w	r3, r3, #7
 8004340:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	019b      	lsls	r3, r3, #6
 800434c:	431a      	orrs	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	085b      	lsrs	r3, r3, #1
 8004354:	3b01      	subs	r3, #1
 8004356:	041b      	lsls	r3, r3, #16
 8004358:	431a      	orrs	r2, r3
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	061b      	lsls	r3, r3, #24
 800435e:	431a      	orrs	r2, r3
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	071b      	lsls	r3, r3, #28
 8004364:	4925      	ldr	r1, [pc, #148]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004366:	4313      	orrs	r3, r2
 8004368:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004374:	2b00      	cmp	r3, #0
 8004376:	d016      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	019b      	lsls	r3, r3, #6
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	085b      	lsrs	r3, r3, #1
 800438a:	3b01      	subs	r3, #1
 800438c:	041b      	lsls	r3, r3, #16
 800438e:	431a      	orrs	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	061b      	lsls	r3, r3, #24
 8004396:	431a      	orrs	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	071b      	lsls	r3, r3, #28
 800439e:	4917      	ldr	r1, [pc, #92]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80043a6:	4b16      	ldr	r3, [pc, #88]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80043a8:	2201      	movs	r2, #1
 80043aa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043ac:	f7fd fa6e 	bl	800188c <HAL_GetTick>
 80043b0:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043b2:	e008      	b.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80043b4:	f7fd fa6a 	bl	800188c <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e09f      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043c6:	4b0d      	ldr	r3, [pc, #52]	@ (80043fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d0f0      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80043d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	f040 8095 	bne.w	8004504 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80043da:	4b0a      	ldr	r3, [pc, #40]	@ (8004404 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80043dc:	2200      	movs	r2, #0
 80043de:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043e0:	f7fd fa54 	bl	800188c <HAL_GetTick>
 80043e4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043e6:	e00f      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80043e8:	f7fd fa50 	bl	800188c <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d908      	bls.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e085      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80043fa:	bf00      	nop
 80043fc:	40023800 	.word	0x40023800
 8004400:	42470068 	.word	0x42470068
 8004404:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004408:	4b41      	ldr	r3, [pc, #260]	@ (8004510 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004410:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004414:	d0e8      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0304 	and.w	r3, r3, #4
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004426:	2b00      	cmp	r3, #0
 8004428:	d009      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004432:	2b00      	cmp	r3, #0
 8004434:	d02b      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800443a:	2b00      	cmp	r3, #0
 800443c:	d127      	bne.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800443e:	4b34      	ldr	r3, [pc, #208]	@ (8004510 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004444:	0c1b      	lsrs	r3, r3, #16
 8004446:	f003 0303 	and.w	r3, r3, #3
 800444a:	3301      	adds	r3, #1
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	699a      	ldr	r2, [r3, #24]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	69db      	ldr	r3, [r3, #28]
 8004458:	019b      	lsls	r3, r3, #6
 800445a:	431a      	orrs	r2, r3
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	085b      	lsrs	r3, r3, #1
 8004460:	3b01      	subs	r3, #1
 8004462:	041b      	lsls	r3, r3, #16
 8004464:	431a      	orrs	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446a:	061b      	lsls	r3, r3, #24
 800446c:	4928      	ldr	r1, [pc, #160]	@ (8004510 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800446e:	4313      	orrs	r3, r2
 8004470:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004474:	4b26      	ldr	r3, [pc, #152]	@ (8004510 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004476:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800447a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004482:	3b01      	subs	r3, #1
 8004484:	021b      	lsls	r3, r3, #8
 8004486:	4922      	ldr	r1, [pc, #136]	@ (8004510 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004488:	4313      	orrs	r3, r2
 800448a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004496:	2b00      	cmp	r3, #0
 8004498:	d01d      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800449e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044a2:	d118      	bne.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80044a4:	4b1a      	ldr	r3, [pc, #104]	@ (8004510 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80044a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044aa:	0e1b      	lsrs	r3, r3, #24
 80044ac:	f003 030f 	and.w	r3, r3, #15
 80044b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	699a      	ldr	r2, [r3, #24]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	019b      	lsls	r3, r3, #6
 80044bc:	431a      	orrs	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	085b      	lsrs	r3, r3, #1
 80044c4:	3b01      	subs	r3, #1
 80044c6:	041b      	lsls	r3, r3, #16
 80044c8:	431a      	orrs	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	061b      	lsls	r3, r3, #24
 80044ce:	4910      	ldr	r1, [pc, #64]	@ (8004510 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80044d6:	4b0f      	ldr	r3, [pc, #60]	@ (8004514 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80044d8:	2201      	movs	r2, #1
 80044da:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044dc:	f7fd f9d6 	bl	800188c <HAL_GetTick>
 80044e0:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044e2:	e008      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80044e4:	f7fd f9d2 	bl	800188c <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e007      	b.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044f6:	4b06      	ldr	r3, [pc, #24]	@ (8004510 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004502:	d1ef      	bne.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3730      	adds	r7, #48	@ 0x30
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	40023800 	.word	0x40023800
 8004514:	42470070 	.word	0x42470070

08004518 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004518:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800451c:	b0ae      	sub	sp, #184	@ 0xb8
 800451e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004520:	2300      	movs	r3, #0
 8004522:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004526:	2300      	movs	r3, #0
 8004528:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800452c:	2300      	movs	r3, #0
 800452e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004532:	2300      	movs	r3, #0
 8004534:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004538:	2300      	movs	r3, #0
 800453a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800453e:	4bcb      	ldr	r3, [pc, #812]	@ (800486c <HAL_RCC_GetSysClockFreq+0x354>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f003 030c 	and.w	r3, r3, #12
 8004546:	2b0c      	cmp	r3, #12
 8004548:	f200 8206 	bhi.w	8004958 <HAL_RCC_GetSysClockFreq+0x440>
 800454c:	a201      	add	r2, pc, #4	@ (adr r2, 8004554 <HAL_RCC_GetSysClockFreq+0x3c>)
 800454e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004552:	bf00      	nop
 8004554:	08004589 	.word	0x08004589
 8004558:	08004959 	.word	0x08004959
 800455c:	08004959 	.word	0x08004959
 8004560:	08004959 	.word	0x08004959
 8004564:	08004591 	.word	0x08004591
 8004568:	08004959 	.word	0x08004959
 800456c:	08004959 	.word	0x08004959
 8004570:	08004959 	.word	0x08004959
 8004574:	08004599 	.word	0x08004599
 8004578:	08004959 	.word	0x08004959
 800457c:	08004959 	.word	0x08004959
 8004580:	08004959 	.word	0x08004959
 8004584:	08004789 	.word	0x08004789
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004588:	4bb9      	ldr	r3, [pc, #740]	@ (8004870 <HAL_RCC_GetSysClockFreq+0x358>)
 800458a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800458e:	e1e7      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004590:	4bb8      	ldr	r3, [pc, #736]	@ (8004874 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004592:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004596:	e1e3      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004598:	4bb4      	ldr	r3, [pc, #720]	@ (800486c <HAL_RCC_GetSysClockFreq+0x354>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80045a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045a4:	4bb1      	ldr	r3, [pc, #708]	@ (800486c <HAL_RCC_GetSysClockFreq+0x354>)
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d071      	beq.n	8004694 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045b0:	4bae      	ldr	r3, [pc, #696]	@ (800486c <HAL_RCC_GetSysClockFreq+0x354>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	099b      	lsrs	r3, r3, #6
 80045b6:	2200      	movs	r2, #0
 80045b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80045bc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80045c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80045c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80045cc:	2300      	movs	r3, #0
 80045ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80045d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80045d6:	4622      	mov	r2, r4
 80045d8:	462b      	mov	r3, r5
 80045da:	f04f 0000 	mov.w	r0, #0
 80045de:	f04f 0100 	mov.w	r1, #0
 80045e2:	0159      	lsls	r1, r3, #5
 80045e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045e8:	0150      	lsls	r0, r2, #5
 80045ea:	4602      	mov	r2, r0
 80045ec:	460b      	mov	r3, r1
 80045ee:	4621      	mov	r1, r4
 80045f0:	1a51      	subs	r1, r2, r1
 80045f2:	6439      	str	r1, [r7, #64]	@ 0x40
 80045f4:	4629      	mov	r1, r5
 80045f6:	eb63 0301 	sbc.w	r3, r3, r1
 80045fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80045fc:	f04f 0200 	mov.w	r2, #0
 8004600:	f04f 0300 	mov.w	r3, #0
 8004604:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004608:	4649      	mov	r1, r9
 800460a:	018b      	lsls	r3, r1, #6
 800460c:	4641      	mov	r1, r8
 800460e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004612:	4641      	mov	r1, r8
 8004614:	018a      	lsls	r2, r1, #6
 8004616:	4641      	mov	r1, r8
 8004618:	1a51      	subs	r1, r2, r1
 800461a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800461c:	4649      	mov	r1, r9
 800461e:	eb63 0301 	sbc.w	r3, r3, r1
 8004622:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004624:	f04f 0200 	mov.w	r2, #0
 8004628:	f04f 0300 	mov.w	r3, #0
 800462c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004630:	4649      	mov	r1, r9
 8004632:	00cb      	lsls	r3, r1, #3
 8004634:	4641      	mov	r1, r8
 8004636:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800463a:	4641      	mov	r1, r8
 800463c:	00ca      	lsls	r2, r1, #3
 800463e:	4610      	mov	r0, r2
 8004640:	4619      	mov	r1, r3
 8004642:	4603      	mov	r3, r0
 8004644:	4622      	mov	r2, r4
 8004646:	189b      	adds	r3, r3, r2
 8004648:	633b      	str	r3, [r7, #48]	@ 0x30
 800464a:	462b      	mov	r3, r5
 800464c:	460a      	mov	r2, r1
 800464e:	eb42 0303 	adc.w	r3, r2, r3
 8004652:	637b      	str	r3, [r7, #52]	@ 0x34
 8004654:	f04f 0200 	mov.w	r2, #0
 8004658:	f04f 0300 	mov.w	r3, #0
 800465c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004660:	4629      	mov	r1, r5
 8004662:	024b      	lsls	r3, r1, #9
 8004664:	4621      	mov	r1, r4
 8004666:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800466a:	4621      	mov	r1, r4
 800466c:	024a      	lsls	r2, r1, #9
 800466e:	4610      	mov	r0, r2
 8004670:	4619      	mov	r1, r3
 8004672:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004676:	2200      	movs	r2, #0
 8004678:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800467c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004680:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004684:	f7fb fdbe 	bl	8000204 <__aeabi_uldivmod>
 8004688:	4602      	mov	r2, r0
 800468a:	460b      	mov	r3, r1
 800468c:	4613      	mov	r3, r2
 800468e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004692:	e067      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004694:	4b75      	ldr	r3, [pc, #468]	@ (800486c <HAL_RCC_GetSysClockFreq+0x354>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	099b      	lsrs	r3, r3, #6
 800469a:	2200      	movs	r2, #0
 800469c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80046a0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80046a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80046a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80046ae:	2300      	movs	r3, #0
 80046b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80046b2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80046b6:	4622      	mov	r2, r4
 80046b8:	462b      	mov	r3, r5
 80046ba:	f04f 0000 	mov.w	r0, #0
 80046be:	f04f 0100 	mov.w	r1, #0
 80046c2:	0159      	lsls	r1, r3, #5
 80046c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046c8:	0150      	lsls	r0, r2, #5
 80046ca:	4602      	mov	r2, r0
 80046cc:	460b      	mov	r3, r1
 80046ce:	4621      	mov	r1, r4
 80046d0:	1a51      	subs	r1, r2, r1
 80046d2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80046d4:	4629      	mov	r1, r5
 80046d6:	eb63 0301 	sbc.w	r3, r3, r1
 80046da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046dc:	f04f 0200 	mov.w	r2, #0
 80046e0:	f04f 0300 	mov.w	r3, #0
 80046e4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80046e8:	4649      	mov	r1, r9
 80046ea:	018b      	lsls	r3, r1, #6
 80046ec:	4641      	mov	r1, r8
 80046ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046f2:	4641      	mov	r1, r8
 80046f4:	018a      	lsls	r2, r1, #6
 80046f6:	4641      	mov	r1, r8
 80046f8:	ebb2 0a01 	subs.w	sl, r2, r1
 80046fc:	4649      	mov	r1, r9
 80046fe:	eb63 0b01 	sbc.w	fp, r3, r1
 8004702:	f04f 0200 	mov.w	r2, #0
 8004706:	f04f 0300 	mov.w	r3, #0
 800470a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800470e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004712:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004716:	4692      	mov	sl, r2
 8004718:	469b      	mov	fp, r3
 800471a:	4623      	mov	r3, r4
 800471c:	eb1a 0303 	adds.w	r3, sl, r3
 8004720:	623b      	str	r3, [r7, #32]
 8004722:	462b      	mov	r3, r5
 8004724:	eb4b 0303 	adc.w	r3, fp, r3
 8004728:	627b      	str	r3, [r7, #36]	@ 0x24
 800472a:	f04f 0200 	mov.w	r2, #0
 800472e:	f04f 0300 	mov.w	r3, #0
 8004732:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004736:	4629      	mov	r1, r5
 8004738:	028b      	lsls	r3, r1, #10
 800473a:	4621      	mov	r1, r4
 800473c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004740:	4621      	mov	r1, r4
 8004742:	028a      	lsls	r2, r1, #10
 8004744:	4610      	mov	r0, r2
 8004746:	4619      	mov	r1, r3
 8004748:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800474c:	2200      	movs	r2, #0
 800474e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004750:	677a      	str	r2, [r7, #116]	@ 0x74
 8004752:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004756:	f7fb fd55 	bl	8000204 <__aeabi_uldivmod>
 800475a:	4602      	mov	r2, r0
 800475c:	460b      	mov	r3, r1
 800475e:	4613      	mov	r3, r2
 8004760:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004764:	4b41      	ldr	r3, [pc, #260]	@ (800486c <HAL_RCC_GetSysClockFreq+0x354>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	0c1b      	lsrs	r3, r3, #16
 800476a:	f003 0303 	and.w	r3, r3, #3
 800476e:	3301      	adds	r3, #1
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8004776:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800477a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800477e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004782:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004786:	e0eb      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004788:	4b38      	ldr	r3, [pc, #224]	@ (800486c <HAL_RCC_GetSysClockFreq+0x354>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004790:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004794:	4b35      	ldr	r3, [pc, #212]	@ (800486c <HAL_RCC_GetSysClockFreq+0x354>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d06b      	beq.n	8004878 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047a0:	4b32      	ldr	r3, [pc, #200]	@ (800486c <HAL_RCC_GetSysClockFreq+0x354>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	099b      	lsrs	r3, r3, #6
 80047a6:	2200      	movs	r2, #0
 80047a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80047ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80047ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80047b4:	2300      	movs	r3, #0
 80047b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80047b8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80047bc:	4622      	mov	r2, r4
 80047be:	462b      	mov	r3, r5
 80047c0:	f04f 0000 	mov.w	r0, #0
 80047c4:	f04f 0100 	mov.w	r1, #0
 80047c8:	0159      	lsls	r1, r3, #5
 80047ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047ce:	0150      	lsls	r0, r2, #5
 80047d0:	4602      	mov	r2, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	4621      	mov	r1, r4
 80047d6:	1a51      	subs	r1, r2, r1
 80047d8:	61b9      	str	r1, [r7, #24]
 80047da:	4629      	mov	r1, r5
 80047dc:	eb63 0301 	sbc.w	r3, r3, r1
 80047e0:	61fb      	str	r3, [r7, #28]
 80047e2:	f04f 0200 	mov.w	r2, #0
 80047e6:	f04f 0300 	mov.w	r3, #0
 80047ea:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80047ee:	4659      	mov	r1, fp
 80047f0:	018b      	lsls	r3, r1, #6
 80047f2:	4651      	mov	r1, sl
 80047f4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047f8:	4651      	mov	r1, sl
 80047fa:	018a      	lsls	r2, r1, #6
 80047fc:	4651      	mov	r1, sl
 80047fe:	ebb2 0801 	subs.w	r8, r2, r1
 8004802:	4659      	mov	r1, fp
 8004804:	eb63 0901 	sbc.w	r9, r3, r1
 8004808:	f04f 0200 	mov.w	r2, #0
 800480c:	f04f 0300 	mov.w	r3, #0
 8004810:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004814:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004818:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800481c:	4690      	mov	r8, r2
 800481e:	4699      	mov	r9, r3
 8004820:	4623      	mov	r3, r4
 8004822:	eb18 0303 	adds.w	r3, r8, r3
 8004826:	613b      	str	r3, [r7, #16]
 8004828:	462b      	mov	r3, r5
 800482a:	eb49 0303 	adc.w	r3, r9, r3
 800482e:	617b      	str	r3, [r7, #20]
 8004830:	f04f 0200 	mov.w	r2, #0
 8004834:	f04f 0300 	mov.w	r3, #0
 8004838:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800483c:	4629      	mov	r1, r5
 800483e:	024b      	lsls	r3, r1, #9
 8004840:	4621      	mov	r1, r4
 8004842:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004846:	4621      	mov	r1, r4
 8004848:	024a      	lsls	r2, r1, #9
 800484a:	4610      	mov	r0, r2
 800484c:	4619      	mov	r1, r3
 800484e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004852:	2200      	movs	r2, #0
 8004854:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004856:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004858:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800485c:	f7fb fcd2 	bl	8000204 <__aeabi_uldivmod>
 8004860:	4602      	mov	r2, r0
 8004862:	460b      	mov	r3, r1
 8004864:	4613      	mov	r3, r2
 8004866:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800486a:	e065      	b.n	8004938 <HAL_RCC_GetSysClockFreq+0x420>
 800486c:	40023800 	.word	0x40023800
 8004870:	00f42400 	.word	0x00f42400
 8004874:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004878:	4b3d      	ldr	r3, [pc, #244]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x458>)
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	099b      	lsrs	r3, r3, #6
 800487e:	2200      	movs	r2, #0
 8004880:	4618      	mov	r0, r3
 8004882:	4611      	mov	r1, r2
 8004884:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004888:	653b      	str	r3, [r7, #80]	@ 0x50
 800488a:	2300      	movs	r3, #0
 800488c:	657b      	str	r3, [r7, #84]	@ 0x54
 800488e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004892:	4642      	mov	r2, r8
 8004894:	464b      	mov	r3, r9
 8004896:	f04f 0000 	mov.w	r0, #0
 800489a:	f04f 0100 	mov.w	r1, #0
 800489e:	0159      	lsls	r1, r3, #5
 80048a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048a4:	0150      	lsls	r0, r2, #5
 80048a6:	4602      	mov	r2, r0
 80048a8:	460b      	mov	r3, r1
 80048aa:	4641      	mov	r1, r8
 80048ac:	1a51      	subs	r1, r2, r1
 80048ae:	60b9      	str	r1, [r7, #8]
 80048b0:	4649      	mov	r1, r9
 80048b2:	eb63 0301 	sbc.w	r3, r3, r1
 80048b6:	60fb      	str	r3, [r7, #12]
 80048b8:	f04f 0200 	mov.w	r2, #0
 80048bc:	f04f 0300 	mov.w	r3, #0
 80048c0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80048c4:	4659      	mov	r1, fp
 80048c6:	018b      	lsls	r3, r1, #6
 80048c8:	4651      	mov	r1, sl
 80048ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048ce:	4651      	mov	r1, sl
 80048d0:	018a      	lsls	r2, r1, #6
 80048d2:	4651      	mov	r1, sl
 80048d4:	1a54      	subs	r4, r2, r1
 80048d6:	4659      	mov	r1, fp
 80048d8:	eb63 0501 	sbc.w	r5, r3, r1
 80048dc:	f04f 0200 	mov.w	r2, #0
 80048e0:	f04f 0300 	mov.w	r3, #0
 80048e4:	00eb      	lsls	r3, r5, #3
 80048e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048ea:	00e2      	lsls	r2, r4, #3
 80048ec:	4614      	mov	r4, r2
 80048ee:	461d      	mov	r5, r3
 80048f0:	4643      	mov	r3, r8
 80048f2:	18e3      	adds	r3, r4, r3
 80048f4:	603b      	str	r3, [r7, #0]
 80048f6:	464b      	mov	r3, r9
 80048f8:	eb45 0303 	adc.w	r3, r5, r3
 80048fc:	607b      	str	r3, [r7, #4]
 80048fe:	f04f 0200 	mov.w	r2, #0
 8004902:	f04f 0300 	mov.w	r3, #0
 8004906:	e9d7 4500 	ldrd	r4, r5, [r7]
 800490a:	4629      	mov	r1, r5
 800490c:	028b      	lsls	r3, r1, #10
 800490e:	4621      	mov	r1, r4
 8004910:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004914:	4621      	mov	r1, r4
 8004916:	028a      	lsls	r2, r1, #10
 8004918:	4610      	mov	r0, r2
 800491a:	4619      	mov	r1, r3
 800491c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004920:	2200      	movs	r2, #0
 8004922:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004924:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004926:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800492a:	f7fb fc6b 	bl	8000204 <__aeabi_uldivmod>
 800492e:	4602      	mov	r2, r0
 8004930:	460b      	mov	r3, r1
 8004932:	4613      	mov	r3, r2
 8004934:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004938:	4b0d      	ldr	r3, [pc, #52]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x458>)
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	0f1b      	lsrs	r3, r3, #28
 800493e:	f003 0307 	and.w	r3, r3, #7
 8004942:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8004946:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800494a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800494e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004952:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004956:	e003      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004958:	4b06      	ldr	r3, [pc, #24]	@ (8004974 <HAL_RCC_GetSysClockFreq+0x45c>)
 800495a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800495e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004960:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004964:	4618      	mov	r0, r3
 8004966:	37b8      	adds	r7, #184	@ 0xb8
 8004968:	46bd      	mov	sp, r7
 800496a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800496e:	bf00      	nop
 8004970:	40023800 	.word	0x40023800
 8004974:	00f42400 	.word	0x00f42400

08004978 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e28d      	b.n	8004ea6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	f000 8083 	beq.w	8004a9e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004998:	4b94      	ldr	r3, [pc, #592]	@ (8004bec <HAL_RCC_OscConfig+0x274>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f003 030c 	and.w	r3, r3, #12
 80049a0:	2b04      	cmp	r3, #4
 80049a2:	d019      	beq.n	80049d8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80049a4:	4b91      	ldr	r3, [pc, #580]	@ (8004bec <HAL_RCC_OscConfig+0x274>)
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80049ac:	2b08      	cmp	r3, #8
 80049ae:	d106      	bne.n	80049be <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80049b0:	4b8e      	ldr	r3, [pc, #568]	@ (8004bec <HAL_RCC_OscConfig+0x274>)
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049bc:	d00c      	beq.n	80049d8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049be:	4b8b      	ldr	r3, [pc, #556]	@ (8004bec <HAL_RCC_OscConfig+0x274>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80049c6:	2b0c      	cmp	r3, #12
 80049c8:	d112      	bne.n	80049f0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049ca:	4b88      	ldr	r3, [pc, #544]	@ (8004bec <HAL_RCC_OscConfig+0x274>)
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049d6:	d10b      	bne.n	80049f0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049d8:	4b84      	ldr	r3, [pc, #528]	@ (8004bec <HAL_RCC_OscConfig+0x274>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d05b      	beq.n	8004a9c <HAL_RCC_OscConfig+0x124>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d157      	bne.n	8004a9c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e25a      	b.n	8004ea6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049f8:	d106      	bne.n	8004a08 <HAL_RCC_OscConfig+0x90>
 80049fa:	4b7c      	ldr	r3, [pc, #496]	@ (8004bec <HAL_RCC_OscConfig+0x274>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a7b      	ldr	r2, [pc, #492]	@ (8004bec <HAL_RCC_OscConfig+0x274>)
 8004a00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a04:	6013      	str	r3, [r2, #0]
 8004a06:	e01d      	b.n	8004a44 <HAL_RCC_OscConfig+0xcc>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a10:	d10c      	bne.n	8004a2c <HAL_RCC_OscConfig+0xb4>
 8004a12:	4b76      	ldr	r3, [pc, #472]	@ (8004bec <HAL_RCC_OscConfig+0x274>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a75      	ldr	r2, [pc, #468]	@ (8004bec <HAL_RCC_OscConfig+0x274>)
 8004a18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a1c:	6013      	str	r3, [r2, #0]
 8004a1e:	4b73      	ldr	r3, [pc, #460]	@ (8004bec <HAL_RCC_OscConfig+0x274>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a72      	ldr	r2, [pc, #456]	@ (8004bec <HAL_RCC_OscConfig+0x274>)
 8004a24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a28:	6013      	str	r3, [r2, #0]
 8004a2a:	e00b      	b.n	8004a44 <HAL_RCC_OscConfig+0xcc>
 8004a2c:	4b6f      	ldr	r3, [pc, #444]	@ (8004bec <HAL_RCC_OscConfig+0x274>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a6e      	ldr	r2, [pc, #440]	@ (8004bec <HAL_RCC_OscConfig+0x274>)
 8004a32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a36:	6013      	str	r3, [r2, #0]
 8004a38:	4b6c      	ldr	r3, [pc, #432]	@ (8004bec <HAL_RCC_OscConfig+0x274>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a6b      	ldr	r2, [pc, #428]	@ (8004bec <HAL_RCC_OscConfig+0x274>)
 8004a3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d013      	beq.n	8004a74 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a4c:	f7fc ff1e 	bl	800188c <HAL_GetTick>
 8004a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a52:	e008      	b.n	8004a66 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a54:	f7fc ff1a 	bl	800188c <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b64      	cmp	r3, #100	@ 0x64
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e21f      	b.n	8004ea6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a66:	4b61      	ldr	r3, [pc, #388]	@ (8004bec <HAL_RCC_OscConfig+0x274>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d0f0      	beq.n	8004a54 <HAL_RCC_OscConfig+0xdc>
 8004a72:	e014      	b.n	8004a9e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a74:	f7fc ff0a 	bl	800188c <HAL_GetTick>
 8004a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a7a:	e008      	b.n	8004a8e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a7c:	f7fc ff06 	bl	800188c <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b64      	cmp	r3, #100	@ 0x64
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e20b      	b.n	8004ea6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a8e:	4b57      	ldr	r3, [pc, #348]	@ (8004bec <HAL_RCC_OscConfig+0x274>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1f0      	bne.n	8004a7c <HAL_RCC_OscConfig+0x104>
 8004a9a:	e000      	b.n	8004a9e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d06f      	beq.n	8004b8a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004aaa:	4b50      	ldr	r3, [pc, #320]	@ (8004bec <HAL_RCC_OscConfig+0x274>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f003 030c 	and.w	r3, r3, #12
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d017      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004ab6:	4b4d      	ldr	r3, [pc, #308]	@ (8004bec <HAL_RCC_OscConfig+0x274>)
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004abe:	2b08      	cmp	r3, #8
 8004ac0:	d105      	bne.n	8004ace <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004ac2:	4b4a      	ldr	r3, [pc, #296]	@ (8004bec <HAL_RCC_OscConfig+0x274>)
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00b      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ace:	4b47      	ldr	r3, [pc, #284]	@ (8004bec <HAL_RCC_OscConfig+0x274>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004ad6:	2b0c      	cmp	r3, #12
 8004ad8:	d11c      	bne.n	8004b14 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ada:	4b44      	ldr	r3, [pc, #272]	@ (8004bec <HAL_RCC_OscConfig+0x274>)
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d116      	bne.n	8004b14 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ae6:	4b41      	ldr	r3, [pc, #260]	@ (8004bec <HAL_RCC_OscConfig+0x274>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d005      	beq.n	8004afe <HAL_RCC_OscConfig+0x186>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d001      	beq.n	8004afe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e1d3      	b.n	8004ea6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004afe:	4b3b      	ldr	r3, [pc, #236]	@ (8004bec <HAL_RCC_OscConfig+0x274>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	00db      	lsls	r3, r3, #3
 8004b0c:	4937      	ldr	r1, [pc, #220]	@ (8004bec <HAL_RCC_OscConfig+0x274>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b12:	e03a      	b.n	8004b8a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d020      	beq.n	8004b5e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b1c:	4b34      	ldr	r3, [pc, #208]	@ (8004bf0 <HAL_RCC_OscConfig+0x278>)
 8004b1e:	2201      	movs	r2, #1
 8004b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b22:	f7fc feb3 	bl	800188c <HAL_GetTick>
 8004b26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b28:	e008      	b.n	8004b3c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b2a:	f7fc feaf 	bl	800188c <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d901      	bls.n	8004b3c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e1b4      	b.n	8004ea6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b3c:	4b2b      	ldr	r3, [pc, #172]	@ (8004bec <HAL_RCC_OscConfig+0x274>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d0f0      	beq.n	8004b2a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b48:	4b28      	ldr	r3, [pc, #160]	@ (8004bec <HAL_RCC_OscConfig+0x274>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	00db      	lsls	r3, r3, #3
 8004b56:	4925      	ldr	r1, [pc, #148]	@ (8004bec <HAL_RCC_OscConfig+0x274>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	600b      	str	r3, [r1, #0]
 8004b5c:	e015      	b.n	8004b8a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b5e:	4b24      	ldr	r3, [pc, #144]	@ (8004bf0 <HAL_RCC_OscConfig+0x278>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b64:	f7fc fe92 	bl	800188c <HAL_GetTick>
 8004b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b6a:	e008      	b.n	8004b7e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b6c:	f7fc fe8e 	bl	800188c <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e193      	b.n	8004ea6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b7e:	4b1b      	ldr	r3, [pc, #108]	@ (8004bec <HAL_RCC_OscConfig+0x274>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1f0      	bne.n	8004b6c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0308 	and.w	r3, r3, #8
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d036      	beq.n	8004c04 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d016      	beq.n	8004bcc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b9e:	4b15      	ldr	r3, [pc, #84]	@ (8004bf4 <HAL_RCC_OscConfig+0x27c>)
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ba4:	f7fc fe72 	bl	800188c <HAL_GetTick>
 8004ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004baa:	e008      	b.n	8004bbe <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bac:	f7fc fe6e 	bl	800188c <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e173      	b.n	8004ea6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8004bec <HAL_RCC_OscConfig+0x274>)
 8004bc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d0f0      	beq.n	8004bac <HAL_RCC_OscConfig+0x234>
 8004bca:	e01b      	b.n	8004c04 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bcc:	4b09      	ldr	r3, [pc, #36]	@ (8004bf4 <HAL_RCC_OscConfig+0x27c>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd2:	f7fc fe5b 	bl	800188c <HAL_GetTick>
 8004bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bd8:	e00e      	b.n	8004bf8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bda:	f7fc fe57 	bl	800188c <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d907      	bls.n	8004bf8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e15c      	b.n	8004ea6 <HAL_RCC_OscConfig+0x52e>
 8004bec:	40023800 	.word	0x40023800
 8004bf0:	42470000 	.word	0x42470000
 8004bf4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bf8:	4b8a      	ldr	r3, [pc, #552]	@ (8004e24 <HAL_RCC_OscConfig+0x4ac>)
 8004bfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1ea      	bne.n	8004bda <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0304 	and.w	r3, r3, #4
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f000 8097 	beq.w	8004d40 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c12:	2300      	movs	r3, #0
 8004c14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c16:	4b83      	ldr	r3, [pc, #524]	@ (8004e24 <HAL_RCC_OscConfig+0x4ac>)
 8004c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10f      	bne.n	8004c42 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c22:	2300      	movs	r3, #0
 8004c24:	60bb      	str	r3, [r7, #8]
 8004c26:	4b7f      	ldr	r3, [pc, #508]	@ (8004e24 <HAL_RCC_OscConfig+0x4ac>)
 8004c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2a:	4a7e      	ldr	r2, [pc, #504]	@ (8004e24 <HAL_RCC_OscConfig+0x4ac>)
 8004c2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c30:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c32:	4b7c      	ldr	r3, [pc, #496]	@ (8004e24 <HAL_RCC_OscConfig+0x4ac>)
 8004c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c3a:	60bb      	str	r3, [r7, #8]
 8004c3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c42:	4b79      	ldr	r3, [pc, #484]	@ (8004e28 <HAL_RCC_OscConfig+0x4b0>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d118      	bne.n	8004c80 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c4e:	4b76      	ldr	r3, [pc, #472]	@ (8004e28 <HAL_RCC_OscConfig+0x4b0>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a75      	ldr	r2, [pc, #468]	@ (8004e28 <HAL_RCC_OscConfig+0x4b0>)
 8004c54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c5a:	f7fc fe17 	bl	800188c <HAL_GetTick>
 8004c5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c60:	e008      	b.n	8004c74 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c62:	f7fc fe13 	bl	800188c <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d901      	bls.n	8004c74 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e118      	b.n	8004ea6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c74:	4b6c      	ldr	r3, [pc, #432]	@ (8004e28 <HAL_RCC_OscConfig+0x4b0>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d0f0      	beq.n	8004c62 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d106      	bne.n	8004c96 <HAL_RCC_OscConfig+0x31e>
 8004c88:	4b66      	ldr	r3, [pc, #408]	@ (8004e24 <HAL_RCC_OscConfig+0x4ac>)
 8004c8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c8c:	4a65      	ldr	r2, [pc, #404]	@ (8004e24 <HAL_RCC_OscConfig+0x4ac>)
 8004c8e:	f043 0301 	orr.w	r3, r3, #1
 8004c92:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c94:	e01c      	b.n	8004cd0 <HAL_RCC_OscConfig+0x358>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	2b05      	cmp	r3, #5
 8004c9c:	d10c      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x340>
 8004c9e:	4b61      	ldr	r3, [pc, #388]	@ (8004e24 <HAL_RCC_OscConfig+0x4ac>)
 8004ca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ca2:	4a60      	ldr	r2, [pc, #384]	@ (8004e24 <HAL_RCC_OscConfig+0x4ac>)
 8004ca4:	f043 0304 	orr.w	r3, r3, #4
 8004ca8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004caa:	4b5e      	ldr	r3, [pc, #376]	@ (8004e24 <HAL_RCC_OscConfig+0x4ac>)
 8004cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cae:	4a5d      	ldr	r2, [pc, #372]	@ (8004e24 <HAL_RCC_OscConfig+0x4ac>)
 8004cb0:	f043 0301 	orr.w	r3, r3, #1
 8004cb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cb6:	e00b      	b.n	8004cd0 <HAL_RCC_OscConfig+0x358>
 8004cb8:	4b5a      	ldr	r3, [pc, #360]	@ (8004e24 <HAL_RCC_OscConfig+0x4ac>)
 8004cba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cbc:	4a59      	ldr	r2, [pc, #356]	@ (8004e24 <HAL_RCC_OscConfig+0x4ac>)
 8004cbe:	f023 0301 	bic.w	r3, r3, #1
 8004cc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cc4:	4b57      	ldr	r3, [pc, #348]	@ (8004e24 <HAL_RCC_OscConfig+0x4ac>)
 8004cc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cc8:	4a56      	ldr	r2, [pc, #344]	@ (8004e24 <HAL_RCC_OscConfig+0x4ac>)
 8004cca:	f023 0304 	bic.w	r3, r3, #4
 8004cce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d015      	beq.n	8004d04 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd8:	f7fc fdd8 	bl	800188c <HAL_GetTick>
 8004cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cde:	e00a      	b.n	8004cf6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ce0:	f7fc fdd4 	bl	800188c <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e0d7      	b.n	8004ea6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cf6:	4b4b      	ldr	r3, [pc, #300]	@ (8004e24 <HAL_RCC_OscConfig+0x4ac>)
 8004cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d0ee      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x368>
 8004d02:	e014      	b.n	8004d2e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d04:	f7fc fdc2 	bl	800188c <HAL_GetTick>
 8004d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d0a:	e00a      	b.n	8004d22 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d0c:	f7fc fdbe 	bl	800188c <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e0c1      	b.n	8004ea6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d22:	4b40      	ldr	r3, [pc, #256]	@ (8004e24 <HAL_RCC_OscConfig+0x4ac>)
 8004d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1ee      	bne.n	8004d0c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d2e:	7dfb      	ldrb	r3, [r7, #23]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d105      	bne.n	8004d40 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d34:	4b3b      	ldr	r3, [pc, #236]	@ (8004e24 <HAL_RCC_OscConfig+0x4ac>)
 8004d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d38:	4a3a      	ldr	r2, [pc, #232]	@ (8004e24 <HAL_RCC_OscConfig+0x4ac>)
 8004d3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d3e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 80ad 	beq.w	8004ea4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d4a:	4b36      	ldr	r3, [pc, #216]	@ (8004e24 <HAL_RCC_OscConfig+0x4ac>)
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f003 030c 	and.w	r3, r3, #12
 8004d52:	2b08      	cmp	r3, #8
 8004d54:	d060      	beq.n	8004e18 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d145      	bne.n	8004dea <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d5e:	4b33      	ldr	r3, [pc, #204]	@ (8004e2c <HAL_RCC_OscConfig+0x4b4>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d64:	f7fc fd92 	bl	800188c <HAL_GetTick>
 8004d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d6a:	e008      	b.n	8004d7e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d6c:	f7fc fd8e 	bl	800188c <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e093      	b.n	8004ea6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d7e:	4b29      	ldr	r3, [pc, #164]	@ (8004e24 <HAL_RCC_OscConfig+0x4ac>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1f0      	bne.n	8004d6c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	69da      	ldr	r2, [r3, #28]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	431a      	orrs	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d98:	019b      	lsls	r3, r3, #6
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da0:	085b      	lsrs	r3, r3, #1
 8004da2:	3b01      	subs	r3, #1
 8004da4:	041b      	lsls	r3, r3, #16
 8004da6:	431a      	orrs	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dac:	061b      	lsls	r3, r3, #24
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004db4:	071b      	lsls	r3, r3, #28
 8004db6:	491b      	ldr	r1, [pc, #108]	@ (8004e24 <HAL_RCC_OscConfig+0x4ac>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8004e2c <HAL_RCC_OscConfig+0x4b4>)
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc2:	f7fc fd63 	bl	800188c <HAL_GetTick>
 8004dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dc8:	e008      	b.n	8004ddc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dca:	f7fc fd5f 	bl	800188c <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d901      	bls.n	8004ddc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e064      	b.n	8004ea6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ddc:	4b11      	ldr	r3, [pc, #68]	@ (8004e24 <HAL_RCC_OscConfig+0x4ac>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d0f0      	beq.n	8004dca <HAL_RCC_OscConfig+0x452>
 8004de8:	e05c      	b.n	8004ea4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dea:	4b10      	ldr	r3, [pc, #64]	@ (8004e2c <HAL_RCC_OscConfig+0x4b4>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df0:	f7fc fd4c 	bl	800188c <HAL_GetTick>
 8004df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004df6:	e008      	b.n	8004e0a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004df8:	f7fc fd48 	bl	800188c <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e04d      	b.n	8004ea6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e0a:	4b06      	ldr	r3, [pc, #24]	@ (8004e24 <HAL_RCC_OscConfig+0x4ac>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1f0      	bne.n	8004df8 <HAL_RCC_OscConfig+0x480>
 8004e16:	e045      	b.n	8004ea4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d107      	bne.n	8004e30 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e040      	b.n	8004ea6 <HAL_RCC_OscConfig+0x52e>
 8004e24:	40023800 	.word	0x40023800
 8004e28:	40007000 	.word	0x40007000
 8004e2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e30:	4b1f      	ldr	r3, [pc, #124]	@ (8004eb0 <HAL_RCC_OscConfig+0x538>)
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d030      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d129      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d122      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004e60:	4013      	ands	r3, r2
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d119      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e76:	085b      	lsrs	r3, r3, #1
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d10f      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d107      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e9a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d001      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e000      	b.n	8004ea6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3718      	adds	r7, #24
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	40023800 	.word	0x40023800

08004eb4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e07b      	b.n	8004fbe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d108      	bne.n	8004ee0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ed6:	d009      	beq.n	8004eec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	61da      	str	r2, [r3, #28]
 8004ede:	e005      	b.n	8004eec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d106      	bne.n	8004f0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f7fc faa6 	bl	8001458 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2202      	movs	r2, #2
 8004f10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f22:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004f34:	431a      	orrs	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f3e:	431a      	orrs	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	f003 0302 	and.w	r3, r3, #2
 8004f48:	431a      	orrs	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	431a      	orrs	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f66:	431a      	orrs	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f70:	ea42 0103 	orr.w	r1, r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f78:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	430a      	orrs	r2, r1
 8004f82:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	0c1b      	lsrs	r3, r3, #16
 8004f8a:	f003 0104 	and.w	r1, r3, #4
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f92:	f003 0210 	and.w	r2, r3, #16
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	69da      	ldr	r2, [r3, #28]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004fac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b082      	sub	sp, #8
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d101      	bne.n	8004fd8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e03f      	b.n	8005058 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d106      	bne.n	8004ff2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f7fc fa7b 	bl	80014e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2224      	movs	r2, #36	@ 0x24
 8004ff6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68da      	ldr	r2, [r3, #12]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005008:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 fdde 	bl	8005bcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	691a      	ldr	r2, [r3, #16]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800501e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	695a      	ldr	r2, [r3, #20]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800502e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68da      	ldr	r2, [r3, #12]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800503e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2220      	movs	r2, #32
 800504a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2220      	movs	r2, #32
 8005052:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3708      	adds	r7, #8
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b08a      	sub	sp, #40	@ 0x28
 8005064:	af02      	add	r7, sp, #8
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	603b      	str	r3, [r7, #0]
 800506c:	4613      	mov	r3, r2
 800506e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005070:	2300      	movs	r3, #0
 8005072:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b20      	cmp	r3, #32
 800507e:	d17c      	bne.n	800517a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d002      	beq.n	800508c <HAL_UART_Transmit+0x2c>
 8005086:	88fb      	ldrh	r3, [r7, #6]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d101      	bne.n	8005090 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e075      	b.n	800517c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005096:	2b01      	cmp	r3, #1
 8005098:	d101      	bne.n	800509e <HAL_UART_Transmit+0x3e>
 800509a:	2302      	movs	r3, #2
 800509c:	e06e      	b.n	800517c <HAL_UART_Transmit+0x11c>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2221      	movs	r2, #33	@ 0x21
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050b4:	f7fc fbea 	bl	800188c <HAL_GetTick>
 80050b8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	88fa      	ldrh	r2, [r7, #6]
 80050be:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	88fa      	ldrh	r2, [r7, #6]
 80050c4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050ce:	d108      	bne.n	80050e2 <HAL_UART_Transmit+0x82>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d104      	bne.n	80050e2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80050d8:	2300      	movs	r3, #0
 80050da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	61bb      	str	r3, [r7, #24]
 80050e0:	e003      	b.n	80050ea <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050e6:	2300      	movs	r3, #0
 80050e8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80050f2:	e02a      	b.n	800514a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	2200      	movs	r2, #0
 80050fc:	2180      	movs	r1, #128	@ 0x80
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f000 fb1e 	bl	8005740 <UART_WaitOnFlagUntilTimeout>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d001      	beq.n	800510e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e036      	b.n	800517c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d10b      	bne.n	800512c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	881b      	ldrh	r3, [r3, #0]
 8005118:	461a      	mov	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005122:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	3302      	adds	r3, #2
 8005128:	61bb      	str	r3, [r7, #24]
 800512a:	e007      	b.n	800513c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	781a      	ldrb	r2, [r3, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	3301      	adds	r3, #1
 800513a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005140:	b29b      	uxth	r3, r3
 8005142:	3b01      	subs	r3, #1
 8005144:	b29a      	uxth	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800514e:	b29b      	uxth	r3, r3
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1cf      	bne.n	80050f4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	9300      	str	r3, [sp, #0]
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	2200      	movs	r2, #0
 800515c:	2140      	movs	r1, #64	@ 0x40
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f000 faee 	bl	8005740 <UART_WaitOnFlagUntilTimeout>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e006      	b.n	800517c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2220      	movs	r2, #32
 8005172:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005176:	2300      	movs	r3, #0
 8005178:	e000      	b.n	800517c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800517a:	2302      	movs	r3, #2
  }
}
 800517c:	4618      	mov	r0, r3
 800517e:	3720      	adds	r7, #32
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	4613      	mov	r3, r2
 8005190:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b20      	cmp	r3, #32
 800519c:	d11d      	bne.n	80051da <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d002      	beq.n	80051aa <HAL_UART_Receive_IT+0x26>
 80051a4:	88fb      	ldrh	r3, [r7, #6]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d101      	bne.n	80051ae <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e016      	b.n	80051dc <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d101      	bne.n	80051bc <HAL_UART_Receive_IT+0x38>
 80051b8:	2302      	movs	r3, #2
 80051ba:	e00f      	b.n	80051dc <HAL_UART_Receive_IT+0x58>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80051ca:	88fb      	ldrh	r3, [r7, #6]
 80051cc:	461a      	mov	r2, r3
 80051ce:	68b9      	ldr	r1, [r7, #8]
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f000 fb23 	bl	800581c <UART_Start_Receive_IT>
 80051d6:	4603      	mov	r3, r0
 80051d8:	e000      	b.n	80051dc <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80051da:	2302      	movs	r3, #2
  }
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b0ba      	sub	sp, #232	@ 0xe8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800520a:	2300      	movs	r3, #0
 800520c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005210:	2300      	movs	r3, #0
 8005212:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800521a:	f003 030f 	and.w	r3, r3, #15
 800521e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005222:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10f      	bne.n	800524a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800522a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800522e:	f003 0320 	and.w	r3, r3, #32
 8005232:	2b00      	cmp	r3, #0
 8005234:	d009      	beq.n	800524a <HAL_UART_IRQHandler+0x66>
 8005236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800523a:	f003 0320 	and.w	r3, r3, #32
 800523e:	2b00      	cmp	r3, #0
 8005240:	d003      	beq.n	800524a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 fc07 	bl	8005a56 <UART_Receive_IT>
      return;
 8005248:	e256      	b.n	80056f8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800524a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800524e:	2b00      	cmp	r3, #0
 8005250:	f000 80de 	beq.w	8005410 <HAL_UART_IRQHandler+0x22c>
 8005254:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005258:	f003 0301 	and.w	r3, r3, #1
 800525c:	2b00      	cmp	r3, #0
 800525e:	d106      	bne.n	800526e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005264:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005268:	2b00      	cmp	r3, #0
 800526a:	f000 80d1 	beq.w	8005410 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800526e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00b      	beq.n	8005292 <HAL_UART_IRQHandler+0xae>
 800527a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800527e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005282:	2b00      	cmp	r3, #0
 8005284:	d005      	beq.n	8005292 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800528a:	f043 0201 	orr.w	r2, r3, #1
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005296:	f003 0304 	and.w	r3, r3, #4
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00b      	beq.n	80052b6 <HAL_UART_IRQHandler+0xd2>
 800529e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d005      	beq.n	80052b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ae:	f043 0202 	orr.w	r2, r3, #2
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80052b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052ba:	f003 0302 	and.w	r3, r3, #2
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00b      	beq.n	80052da <HAL_UART_IRQHandler+0xf6>
 80052c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d005      	beq.n	80052da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d2:	f043 0204 	orr.w	r2, r3, #4
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80052da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052de:	f003 0308 	and.w	r3, r3, #8
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d011      	beq.n	800530a <HAL_UART_IRQHandler+0x126>
 80052e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052ea:	f003 0320 	and.w	r3, r3, #32
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d105      	bne.n	80052fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80052f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d005      	beq.n	800530a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005302:	f043 0208 	orr.w	r2, r3, #8
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800530e:	2b00      	cmp	r3, #0
 8005310:	f000 81ed 	beq.w	80056ee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005318:	f003 0320 	and.w	r3, r3, #32
 800531c:	2b00      	cmp	r3, #0
 800531e:	d008      	beq.n	8005332 <HAL_UART_IRQHandler+0x14e>
 8005320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005324:	f003 0320 	and.w	r3, r3, #32
 8005328:	2b00      	cmp	r3, #0
 800532a:	d002      	beq.n	8005332 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 fb92 	bl	8005a56 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800533c:	2b40      	cmp	r3, #64	@ 0x40
 800533e:	bf0c      	ite	eq
 8005340:	2301      	moveq	r3, #1
 8005342:	2300      	movne	r3, #0
 8005344:	b2db      	uxtb	r3, r3
 8005346:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800534e:	f003 0308 	and.w	r3, r3, #8
 8005352:	2b00      	cmp	r3, #0
 8005354:	d103      	bne.n	800535e <HAL_UART_IRQHandler+0x17a>
 8005356:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800535a:	2b00      	cmp	r3, #0
 800535c:	d04f      	beq.n	80053fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 fa9a 	bl	8005898 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800536e:	2b40      	cmp	r3, #64	@ 0x40
 8005370:	d141      	bne.n	80053f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	3314      	adds	r3, #20
 8005378:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005380:	e853 3f00 	ldrex	r3, [r3]
 8005384:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005388:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800538c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005390:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	3314      	adds	r3, #20
 800539a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800539e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80053a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80053aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80053ae:	e841 2300 	strex	r3, r2, [r1]
 80053b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80053b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1d9      	bne.n	8005372 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d013      	beq.n	80053ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ca:	4a7d      	ldr	r2, [pc, #500]	@ (80055c0 <HAL_UART_IRQHandler+0x3dc>)
 80053cc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7fc fe7d 	bl	80020d2 <HAL_DMA_Abort_IT>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d016      	beq.n	800540c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80053e8:	4610      	mov	r0, r2
 80053ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053ec:	e00e      	b.n	800540c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f990 	bl	8005714 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053f4:	e00a      	b.n	800540c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f98c 	bl	8005714 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053fc:	e006      	b.n	800540c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f988 	bl	8005714 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 800540a:	e170      	b.n	80056ee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800540c:	bf00      	nop
    return;
 800540e:	e16e      	b.n	80056ee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005414:	2b01      	cmp	r3, #1
 8005416:	f040 814a 	bne.w	80056ae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800541a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800541e:	f003 0310 	and.w	r3, r3, #16
 8005422:	2b00      	cmp	r3, #0
 8005424:	f000 8143 	beq.w	80056ae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800542c:	f003 0310 	and.w	r3, r3, #16
 8005430:	2b00      	cmp	r3, #0
 8005432:	f000 813c 	beq.w	80056ae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005436:	2300      	movs	r3, #0
 8005438:	60bb      	str	r3, [r7, #8]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	60bb      	str	r3, [r7, #8]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	60bb      	str	r3, [r7, #8]
 800544a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005456:	2b40      	cmp	r3, #64	@ 0x40
 8005458:	f040 80b4 	bne.w	80055c4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005468:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800546c:	2b00      	cmp	r3, #0
 800546e:	f000 8140 	beq.w	80056f2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005476:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800547a:	429a      	cmp	r2, r3
 800547c:	f080 8139 	bcs.w	80056f2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005486:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005492:	f000 8088 	beq.w	80055a6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	330c      	adds	r3, #12
 800549c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80054a4:	e853 3f00 	ldrex	r3, [r3]
 80054a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80054ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80054b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	330c      	adds	r3, #12
 80054be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80054c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80054c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80054ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80054d2:	e841 2300 	strex	r3, r2, [r1]
 80054d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80054da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1d9      	bne.n	8005496 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	3314      	adds	r3, #20
 80054e8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80054ec:	e853 3f00 	ldrex	r3, [r3]
 80054f0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80054f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80054f4:	f023 0301 	bic.w	r3, r3, #1
 80054f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	3314      	adds	r3, #20
 8005502:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005506:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800550a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800550e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005512:	e841 2300 	strex	r3, r2, [r1]
 8005516:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005518:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1e1      	bne.n	80054e2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	3314      	adds	r3, #20
 8005524:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005526:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005528:	e853 3f00 	ldrex	r3, [r3]
 800552c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800552e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005530:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005534:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	3314      	adds	r3, #20
 800553e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005542:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005544:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005546:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005548:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800554a:	e841 2300 	strex	r3, r2, [r1]
 800554e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005550:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1e3      	bne.n	800551e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2220      	movs	r2, #32
 800555a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	330c      	adds	r3, #12
 800556a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800556e:	e853 3f00 	ldrex	r3, [r3]
 8005572:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005574:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005576:	f023 0310 	bic.w	r3, r3, #16
 800557a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	330c      	adds	r3, #12
 8005584:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005588:	65ba      	str	r2, [r7, #88]	@ 0x58
 800558a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800558e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005590:	e841 2300 	strex	r3, r2, [r1]
 8005594:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005596:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1e3      	bne.n	8005564 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055a0:	4618      	mov	r0, r3
 80055a2:	f7fc fd26 	bl	8001ff2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	4619      	mov	r1, r3
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f8b6 	bl	8005728 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80055bc:	e099      	b.n	80056f2 <HAL_UART_IRQHandler+0x50e>
 80055be:	bf00      	nop
 80055c0:	0800595f 	.word	0x0800595f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80055d8:	b29b      	uxth	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f000 808b 	beq.w	80056f6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80055e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f000 8086 	beq.w	80056f6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	330c      	adds	r3, #12
 80055f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055f4:	e853 3f00 	ldrex	r3, [r3]
 80055f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80055fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005600:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	330c      	adds	r3, #12
 800560a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800560e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005610:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005612:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005614:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005616:	e841 2300 	strex	r3, r2, [r1]
 800561a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800561c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1e3      	bne.n	80055ea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	3314      	adds	r3, #20
 8005628:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562c:	e853 3f00 	ldrex	r3, [r3]
 8005630:	623b      	str	r3, [r7, #32]
   return(result);
 8005632:	6a3b      	ldr	r3, [r7, #32]
 8005634:	f023 0301 	bic.w	r3, r3, #1
 8005638:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	3314      	adds	r3, #20
 8005642:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005646:	633a      	str	r2, [r7, #48]	@ 0x30
 8005648:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800564c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800564e:	e841 2300 	strex	r3, r2, [r1]
 8005652:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1e3      	bne.n	8005622 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2220      	movs	r2, #32
 800565e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	330c      	adds	r3, #12
 800566e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	e853 3f00 	ldrex	r3, [r3]
 8005676:	60fb      	str	r3, [r7, #12]
   return(result);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f023 0310 	bic.w	r3, r3, #16
 800567e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	330c      	adds	r3, #12
 8005688:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800568c:	61fa      	str	r2, [r7, #28]
 800568e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005690:	69b9      	ldr	r1, [r7, #24]
 8005692:	69fa      	ldr	r2, [r7, #28]
 8005694:	e841 2300 	strex	r3, r2, [r1]
 8005698:	617b      	str	r3, [r7, #20]
   return(result);
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d1e3      	bne.n	8005668 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80056a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80056a4:	4619      	mov	r1, r3
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f83e 	bl	8005728 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80056ac:	e023      	b.n	80056f6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80056ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d009      	beq.n	80056ce <HAL_UART_IRQHandler+0x4ea>
 80056ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d003      	beq.n	80056ce <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f95d 	bl	8005986 <UART_Transmit_IT>
    return;
 80056cc:	e014      	b.n	80056f8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80056ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00e      	beq.n	80056f8 <HAL_UART_IRQHandler+0x514>
 80056da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d008      	beq.n	80056f8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 f99d 	bl	8005a26 <UART_EndTransmit_IT>
    return;
 80056ec:	e004      	b.n	80056f8 <HAL_UART_IRQHandler+0x514>
    return;
 80056ee:	bf00      	nop
 80056f0:	e002      	b.n	80056f8 <HAL_UART_IRQHandler+0x514>
      return;
 80056f2:	bf00      	nop
 80056f4:	e000      	b.n	80056f8 <HAL_UART_IRQHandler+0x514>
      return;
 80056f6:	bf00      	nop
  }
}
 80056f8:	37e8      	adds	r7, #232	@ 0xe8
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop

08005700 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	460b      	mov	r3, r1
 8005732:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b090      	sub	sp, #64	@ 0x40
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	603b      	str	r3, [r7, #0]
 800574c:	4613      	mov	r3, r2
 800574e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005750:	e050      	b.n	80057f4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005752:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005758:	d04c      	beq.n	80057f4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800575a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800575c:	2b00      	cmp	r3, #0
 800575e:	d007      	beq.n	8005770 <UART_WaitOnFlagUntilTimeout+0x30>
 8005760:	f7fc f894 	bl	800188c <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800576c:	429a      	cmp	r2, r3
 800576e:	d241      	bcs.n	80057f4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	330c      	adds	r3, #12
 8005776:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800577a:	e853 3f00 	ldrex	r3, [r3]
 800577e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005782:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005786:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	330c      	adds	r3, #12
 800578e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005790:	637a      	str	r2, [r7, #52]	@ 0x34
 8005792:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005794:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005796:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005798:	e841 2300 	strex	r3, r2, [r1]
 800579c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800579e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1e5      	bne.n	8005770 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	3314      	adds	r3, #20
 80057aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	e853 3f00 	ldrex	r3, [r3]
 80057b2:	613b      	str	r3, [r7, #16]
   return(result);
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	f023 0301 	bic.w	r3, r3, #1
 80057ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	3314      	adds	r3, #20
 80057c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80057c4:	623a      	str	r2, [r7, #32]
 80057c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c8:	69f9      	ldr	r1, [r7, #28]
 80057ca:	6a3a      	ldr	r2, [r7, #32]
 80057cc:	e841 2300 	strex	r3, r2, [r1]
 80057d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1e5      	bne.n	80057a4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2220      	movs	r2, #32
 80057dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2220      	movs	r2, #32
 80057e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e00f      	b.n	8005814 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	4013      	ands	r3, r2
 80057fe:	68ba      	ldr	r2, [r7, #8]
 8005800:	429a      	cmp	r2, r3
 8005802:	bf0c      	ite	eq
 8005804:	2301      	moveq	r3, #1
 8005806:	2300      	movne	r3, #0
 8005808:	b2db      	uxtb	r3, r3
 800580a:	461a      	mov	r2, r3
 800580c:	79fb      	ldrb	r3, [r7, #7]
 800580e:	429a      	cmp	r2, r3
 8005810:	d09f      	beq.n	8005752 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	3740      	adds	r7, #64	@ 0x40
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	4613      	mov	r3, r2
 8005828:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	68ba      	ldr	r2, [r7, #8]
 800582e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	88fa      	ldrh	r2, [r7, #6]
 8005834:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	88fa      	ldrh	r2, [r7, #6]
 800583a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2222      	movs	r2, #34	@ 0x22
 8005846:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d007      	beq.n	800586a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68da      	ldr	r2, [r3, #12]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005868:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	695a      	ldr	r2, [r3, #20]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f042 0201 	orr.w	r2, r2, #1
 8005878:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68da      	ldr	r2, [r3, #12]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f042 0220 	orr.w	r2, r2, #32
 8005888:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3714      	adds	r7, #20
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005898:	b480      	push	{r7}
 800589a:	b095      	sub	sp, #84	@ 0x54
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	330c      	adds	r3, #12
 80058a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058aa:	e853 3f00 	ldrex	r3, [r3]
 80058ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80058b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	330c      	adds	r3, #12
 80058be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80058c0:	643a      	str	r2, [r7, #64]	@ 0x40
 80058c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80058c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80058c8:	e841 2300 	strex	r3, r2, [r1]
 80058cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80058ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d1e5      	bne.n	80058a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	3314      	adds	r3, #20
 80058da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058dc:	6a3b      	ldr	r3, [r7, #32]
 80058de:	e853 3f00 	ldrex	r3, [r3]
 80058e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	f023 0301 	bic.w	r3, r3, #1
 80058ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	3314      	adds	r3, #20
 80058f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058fc:	e841 2300 	strex	r3, r2, [r1]
 8005900:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1e5      	bne.n	80058d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800590c:	2b01      	cmp	r3, #1
 800590e:	d119      	bne.n	8005944 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	330c      	adds	r3, #12
 8005916:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	e853 3f00 	ldrex	r3, [r3]
 800591e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	f023 0310 	bic.w	r3, r3, #16
 8005926:	647b      	str	r3, [r7, #68]	@ 0x44
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	330c      	adds	r3, #12
 800592e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005930:	61ba      	str	r2, [r7, #24]
 8005932:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005934:	6979      	ldr	r1, [r7, #20]
 8005936:	69ba      	ldr	r2, [r7, #24]
 8005938:	e841 2300 	strex	r3, r2, [r1]
 800593c:	613b      	str	r3, [r7, #16]
   return(result);
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d1e5      	bne.n	8005910 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2220      	movs	r2, #32
 8005948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005952:	bf00      	nop
 8005954:	3754      	adds	r7, #84	@ 0x54
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr

0800595e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b084      	sub	sp, #16
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800596a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f7ff fecb 	bl	8005714 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800597e:	bf00      	nop
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005986:	b480      	push	{r7}
 8005988:	b085      	sub	sp, #20
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b21      	cmp	r3, #33	@ 0x21
 8005998:	d13e      	bne.n	8005a18 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059a2:	d114      	bne.n	80059ce <UART_Transmit_IT+0x48>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d110      	bne.n	80059ce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	881b      	ldrh	r3, [r3, #0]
 80059b6:	461a      	mov	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	1c9a      	adds	r2, r3, #2
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	621a      	str	r2, [r3, #32]
 80059cc:	e008      	b.n	80059e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	1c59      	adds	r1, r3, #1
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	6211      	str	r1, [r2, #32]
 80059d8:	781a      	ldrb	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	3b01      	subs	r3, #1
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	4619      	mov	r1, r3
 80059ee:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d10f      	bne.n	8005a14 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68da      	ldr	r2, [r3, #12]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a02:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68da      	ldr	r2, [r3, #12]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a12:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a14:	2300      	movs	r3, #0
 8005a16:	e000      	b.n	8005a1a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a18:	2302      	movs	r3, #2
  }
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3714      	adds	r7, #20
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b082      	sub	sp, #8
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68da      	ldr	r2, [r3, #12]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a3c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2220      	movs	r2, #32
 8005a42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f7ff fe5a 	bl	8005700 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3708      	adds	r7, #8
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b08c      	sub	sp, #48	@ 0x30
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b22      	cmp	r3, #34	@ 0x22
 8005a68:	f040 80ab 	bne.w	8005bc2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a74:	d117      	bne.n	8005aa6 <UART_Receive_IT+0x50>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	691b      	ldr	r3, [r3, #16]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d113      	bne.n	8005aa6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a86:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a98:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a9e:	1c9a      	adds	r2, r3, #2
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	629a      	str	r2, [r3, #40]	@ 0x28
 8005aa4:	e026      	b.n	8005af4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005aac:	2300      	movs	r3, #0
 8005aae:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ab8:	d007      	beq.n	8005aca <UART_Receive_IT+0x74>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10a      	bne.n	8005ad8 <UART_Receive_IT+0x82>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d106      	bne.n	8005ad8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	b2da      	uxtb	r2, r3
 8005ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ad4:	701a      	strb	r2, [r3, #0]
 8005ad6:	e008      	b.n	8005aea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ae4:	b2da      	uxtb	r2, r3
 8005ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ae8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aee:	1c5a      	adds	r2, r3, #1
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	3b01      	subs	r3, #1
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	4619      	mov	r1, r3
 8005b02:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d15a      	bne.n	8005bbe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68da      	ldr	r2, [r3, #12]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f022 0220 	bic.w	r2, r2, #32
 8005b16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68da      	ldr	r2, [r3, #12]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	695a      	ldr	r2, [r3, #20]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f022 0201 	bic.w	r2, r2, #1
 8005b36:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d135      	bne.n	8005bb4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	330c      	adds	r3, #12
 8005b54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	e853 3f00 	ldrex	r3, [r3]
 8005b5c:	613b      	str	r3, [r7, #16]
   return(result);
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	f023 0310 	bic.w	r3, r3, #16
 8005b64:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	330c      	adds	r3, #12
 8005b6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b6e:	623a      	str	r2, [r7, #32]
 8005b70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b72:	69f9      	ldr	r1, [r7, #28]
 8005b74:	6a3a      	ldr	r2, [r7, #32]
 8005b76:	e841 2300 	strex	r3, r2, [r1]
 8005b7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1e5      	bne.n	8005b4e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0310 	and.w	r3, r3, #16
 8005b8c:	2b10      	cmp	r3, #16
 8005b8e:	d10a      	bne.n	8005ba6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b90:	2300      	movs	r3, #0
 8005b92:	60fb      	str	r3, [r7, #12]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	60fb      	str	r3, [r7, #12]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	60fb      	str	r3, [r7, #12]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005baa:	4619      	mov	r1, r3
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f7ff fdbb 	bl	8005728 <HAL_UARTEx_RxEventCallback>
 8005bb2:	e002      	b.n	8005bba <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f7fa fcab 	bl	8000510 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	e002      	b.n	8005bc4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	e000      	b.n	8005bc4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005bc2:	2302      	movs	r3, #2
  }
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3730      	adds	r7, #48	@ 0x30
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bd0:	b0c0      	sub	sp, #256	@ 0x100
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005be8:	68d9      	ldr	r1, [r3, #12]
 8005bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	ea40 0301 	orr.w	r3, r0, r1
 8005bf4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bfa:	689a      	ldr	r2, [r3, #8]
 8005bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	431a      	orrs	r2, r3
 8005c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	431a      	orrs	r2, r3
 8005c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c10:	69db      	ldr	r3, [r3, #28]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005c24:	f021 010c 	bic.w	r1, r1, #12
 8005c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005c32:	430b      	orrs	r3, r1
 8005c34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	695b      	ldr	r3, [r3, #20]
 8005c3e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c46:	6999      	ldr	r1, [r3, #24]
 8005c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	ea40 0301 	orr.w	r3, r0, r1
 8005c52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	4b8f      	ldr	r3, [pc, #572]	@ (8005e98 <UART_SetConfig+0x2cc>)
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d005      	beq.n	8005c6c <UART_SetConfig+0xa0>
 8005c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	4b8d      	ldr	r3, [pc, #564]	@ (8005e9c <UART_SetConfig+0x2d0>)
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d104      	bne.n	8005c76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c6c:	f7fe f916 	bl	8003e9c <HAL_RCC_GetPCLK2Freq>
 8005c70:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005c74:	e003      	b.n	8005c7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c76:	f7fe f8fd 	bl	8003e74 <HAL_RCC_GetPCLK1Freq>
 8005c7a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c82:	69db      	ldr	r3, [r3, #28]
 8005c84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c88:	f040 810c 	bne.w	8005ea4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c90:	2200      	movs	r2, #0
 8005c92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c96:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005c9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005c9e:	4622      	mov	r2, r4
 8005ca0:	462b      	mov	r3, r5
 8005ca2:	1891      	adds	r1, r2, r2
 8005ca4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005ca6:	415b      	adcs	r3, r3
 8005ca8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005caa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005cae:	4621      	mov	r1, r4
 8005cb0:	eb12 0801 	adds.w	r8, r2, r1
 8005cb4:	4629      	mov	r1, r5
 8005cb6:	eb43 0901 	adc.w	r9, r3, r1
 8005cba:	f04f 0200 	mov.w	r2, #0
 8005cbe:	f04f 0300 	mov.w	r3, #0
 8005cc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005cc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005cca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005cce:	4690      	mov	r8, r2
 8005cd0:	4699      	mov	r9, r3
 8005cd2:	4623      	mov	r3, r4
 8005cd4:	eb18 0303 	adds.w	r3, r8, r3
 8005cd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005cdc:	462b      	mov	r3, r5
 8005cde:	eb49 0303 	adc.w	r3, r9, r3
 8005ce2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005cf2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005cf6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	18db      	adds	r3, r3, r3
 8005cfe:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d00:	4613      	mov	r3, r2
 8005d02:	eb42 0303 	adc.w	r3, r2, r3
 8005d06:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005d0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005d10:	f7fa fa78 	bl	8000204 <__aeabi_uldivmod>
 8005d14:	4602      	mov	r2, r0
 8005d16:	460b      	mov	r3, r1
 8005d18:	4b61      	ldr	r3, [pc, #388]	@ (8005ea0 <UART_SetConfig+0x2d4>)
 8005d1a:	fba3 2302 	umull	r2, r3, r3, r2
 8005d1e:	095b      	lsrs	r3, r3, #5
 8005d20:	011c      	lsls	r4, r3, #4
 8005d22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d26:	2200      	movs	r2, #0
 8005d28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d2c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005d30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005d34:	4642      	mov	r2, r8
 8005d36:	464b      	mov	r3, r9
 8005d38:	1891      	adds	r1, r2, r2
 8005d3a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005d3c:	415b      	adcs	r3, r3
 8005d3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005d44:	4641      	mov	r1, r8
 8005d46:	eb12 0a01 	adds.w	sl, r2, r1
 8005d4a:	4649      	mov	r1, r9
 8005d4c:	eb43 0b01 	adc.w	fp, r3, r1
 8005d50:	f04f 0200 	mov.w	r2, #0
 8005d54:	f04f 0300 	mov.w	r3, #0
 8005d58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d64:	4692      	mov	sl, r2
 8005d66:	469b      	mov	fp, r3
 8005d68:	4643      	mov	r3, r8
 8005d6a:	eb1a 0303 	adds.w	r3, sl, r3
 8005d6e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d72:	464b      	mov	r3, r9
 8005d74:	eb4b 0303 	adc.w	r3, fp, r3
 8005d78:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d88:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005d8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005d90:	460b      	mov	r3, r1
 8005d92:	18db      	adds	r3, r3, r3
 8005d94:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d96:	4613      	mov	r3, r2
 8005d98:	eb42 0303 	adc.w	r3, r2, r3
 8005d9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005da2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005da6:	f7fa fa2d 	bl	8000204 <__aeabi_uldivmod>
 8005daa:	4602      	mov	r2, r0
 8005dac:	460b      	mov	r3, r1
 8005dae:	4611      	mov	r1, r2
 8005db0:	4b3b      	ldr	r3, [pc, #236]	@ (8005ea0 <UART_SetConfig+0x2d4>)
 8005db2:	fba3 2301 	umull	r2, r3, r3, r1
 8005db6:	095b      	lsrs	r3, r3, #5
 8005db8:	2264      	movs	r2, #100	@ 0x64
 8005dba:	fb02 f303 	mul.w	r3, r2, r3
 8005dbe:	1acb      	subs	r3, r1, r3
 8005dc0:	00db      	lsls	r3, r3, #3
 8005dc2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005dc6:	4b36      	ldr	r3, [pc, #216]	@ (8005ea0 <UART_SetConfig+0x2d4>)
 8005dc8:	fba3 2302 	umull	r2, r3, r3, r2
 8005dcc:	095b      	lsrs	r3, r3, #5
 8005dce:	005b      	lsls	r3, r3, #1
 8005dd0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005dd4:	441c      	add	r4, r3
 8005dd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005de0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005de4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005de8:	4642      	mov	r2, r8
 8005dea:	464b      	mov	r3, r9
 8005dec:	1891      	adds	r1, r2, r2
 8005dee:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005df0:	415b      	adcs	r3, r3
 8005df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005df4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005df8:	4641      	mov	r1, r8
 8005dfa:	1851      	adds	r1, r2, r1
 8005dfc:	6339      	str	r1, [r7, #48]	@ 0x30
 8005dfe:	4649      	mov	r1, r9
 8005e00:	414b      	adcs	r3, r1
 8005e02:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e04:	f04f 0200 	mov.w	r2, #0
 8005e08:	f04f 0300 	mov.w	r3, #0
 8005e0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005e10:	4659      	mov	r1, fp
 8005e12:	00cb      	lsls	r3, r1, #3
 8005e14:	4651      	mov	r1, sl
 8005e16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e1a:	4651      	mov	r1, sl
 8005e1c:	00ca      	lsls	r2, r1, #3
 8005e1e:	4610      	mov	r0, r2
 8005e20:	4619      	mov	r1, r3
 8005e22:	4603      	mov	r3, r0
 8005e24:	4642      	mov	r2, r8
 8005e26:	189b      	adds	r3, r3, r2
 8005e28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e2c:	464b      	mov	r3, r9
 8005e2e:	460a      	mov	r2, r1
 8005e30:	eb42 0303 	adc.w	r3, r2, r3
 8005e34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005e44:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005e48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	18db      	adds	r3, r3, r3
 8005e50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e52:	4613      	mov	r3, r2
 8005e54:	eb42 0303 	adc.w	r3, r2, r3
 8005e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005e5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005e62:	f7fa f9cf 	bl	8000204 <__aeabi_uldivmod>
 8005e66:	4602      	mov	r2, r0
 8005e68:	460b      	mov	r3, r1
 8005e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ea0 <UART_SetConfig+0x2d4>)
 8005e6c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e70:	095b      	lsrs	r3, r3, #5
 8005e72:	2164      	movs	r1, #100	@ 0x64
 8005e74:	fb01 f303 	mul.w	r3, r1, r3
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	00db      	lsls	r3, r3, #3
 8005e7c:	3332      	adds	r3, #50	@ 0x32
 8005e7e:	4a08      	ldr	r2, [pc, #32]	@ (8005ea0 <UART_SetConfig+0x2d4>)
 8005e80:	fba2 2303 	umull	r2, r3, r2, r3
 8005e84:	095b      	lsrs	r3, r3, #5
 8005e86:	f003 0207 	and.w	r2, r3, #7
 8005e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4422      	add	r2, r4
 8005e92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e94:	e106      	b.n	80060a4 <UART_SetConfig+0x4d8>
 8005e96:	bf00      	nop
 8005e98:	40011000 	.word	0x40011000
 8005e9c:	40011400 	.word	0x40011400
 8005ea0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ea4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005eae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005eb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005eb6:	4642      	mov	r2, r8
 8005eb8:	464b      	mov	r3, r9
 8005eba:	1891      	adds	r1, r2, r2
 8005ebc:	6239      	str	r1, [r7, #32]
 8005ebe:	415b      	adcs	r3, r3
 8005ec0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ec2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ec6:	4641      	mov	r1, r8
 8005ec8:	1854      	adds	r4, r2, r1
 8005eca:	4649      	mov	r1, r9
 8005ecc:	eb43 0501 	adc.w	r5, r3, r1
 8005ed0:	f04f 0200 	mov.w	r2, #0
 8005ed4:	f04f 0300 	mov.w	r3, #0
 8005ed8:	00eb      	lsls	r3, r5, #3
 8005eda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ede:	00e2      	lsls	r2, r4, #3
 8005ee0:	4614      	mov	r4, r2
 8005ee2:	461d      	mov	r5, r3
 8005ee4:	4643      	mov	r3, r8
 8005ee6:	18e3      	adds	r3, r4, r3
 8005ee8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005eec:	464b      	mov	r3, r9
 8005eee:	eb45 0303 	adc.w	r3, r5, r3
 8005ef2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005f02:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005f06:	f04f 0200 	mov.w	r2, #0
 8005f0a:	f04f 0300 	mov.w	r3, #0
 8005f0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005f12:	4629      	mov	r1, r5
 8005f14:	008b      	lsls	r3, r1, #2
 8005f16:	4621      	mov	r1, r4
 8005f18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f1c:	4621      	mov	r1, r4
 8005f1e:	008a      	lsls	r2, r1, #2
 8005f20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005f24:	f7fa f96e 	bl	8000204 <__aeabi_uldivmod>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	4b60      	ldr	r3, [pc, #384]	@ (80060b0 <UART_SetConfig+0x4e4>)
 8005f2e:	fba3 2302 	umull	r2, r3, r3, r2
 8005f32:	095b      	lsrs	r3, r3, #5
 8005f34:	011c      	lsls	r4, r3, #4
 8005f36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005f40:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005f44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005f48:	4642      	mov	r2, r8
 8005f4a:	464b      	mov	r3, r9
 8005f4c:	1891      	adds	r1, r2, r2
 8005f4e:	61b9      	str	r1, [r7, #24]
 8005f50:	415b      	adcs	r3, r3
 8005f52:	61fb      	str	r3, [r7, #28]
 8005f54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f58:	4641      	mov	r1, r8
 8005f5a:	1851      	adds	r1, r2, r1
 8005f5c:	6139      	str	r1, [r7, #16]
 8005f5e:	4649      	mov	r1, r9
 8005f60:	414b      	adcs	r3, r1
 8005f62:	617b      	str	r3, [r7, #20]
 8005f64:	f04f 0200 	mov.w	r2, #0
 8005f68:	f04f 0300 	mov.w	r3, #0
 8005f6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f70:	4659      	mov	r1, fp
 8005f72:	00cb      	lsls	r3, r1, #3
 8005f74:	4651      	mov	r1, sl
 8005f76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f7a:	4651      	mov	r1, sl
 8005f7c:	00ca      	lsls	r2, r1, #3
 8005f7e:	4610      	mov	r0, r2
 8005f80:	4619      	mov	r1, r3
 8005f82:	4603      	mov	r3, r0
 8005f84:	4642      	mov	r2, r8
 8005f86:	189b      	adds	r3, r3, r2
 8005f88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f8c:	464b      	mov	r3, r9
 8005f8e:	460a      	mov	r2, r1
 8005f90:	eb42 0303 	adc.w	r3, r2, r3
 8005f94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005fa2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005fa4:	f04f 0200 	mov.w	r2, #0
 8005fa8:	f04f 0300 	mov.w	r3, #0
 8005fac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005fb0:	4649      	mov	r1, r9
 8005fb2:	008b      	lsls	r3, r1, #2
 8005fb4:	4641      	mov	r1, r8
 8005fb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fba:	4641      	mov	r1, r8
 8005fbc:	008a      	lsls	r2, r1, #2
 8005fbe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005fc2:	f7fa f91f 	bl	8000204 <__aeabi_uldivmod>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	460b      	mov	r3, r1
 8005fca:	4611      	mov	r1, r2
 8005fcc:	4b38      	ldr	r3, [pc, #224]	@ (80060b0 <UART_SetConfig+0x4e4>)
 8005fce:	fba3 2301 	umull	r2, r3, r3, r1
 8005fd2:	095b      	lsrs	r3, r3, #5
 8005fd4:	2264      	movs	r2, #100	@ 0x64
 8005fd6:	fb02 f303 	mul.w	r3, r2, r3
 8005fda:	1acb      	subs	r3, r1, r3
 8005fdc:	011b      	lsls	r3, r3, #4
 8005fde:	3332      	adds	r3, #50	@ 0x32
 8005fe0:	4a33      	ldr	r2, [pc, #204]	@ (80060b0 <UART_SetConfig+0x4e4>)
 8005fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fe6:	095b      	lsrs	r3, r3, #5
 8005fe8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005fec:	441c      	add	r4, r3
 8005fee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	673b      	str	r3, [r7, #112]	@ 0x70
 8005ff6:	677a      	str	r2, [r7, #116]	@ 0x74
 8005ff8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005ffc:	4642      	mov	r2, r8
 8005ffe:	464b      	mov	r3, r9
 8006000:	1891      	adds	r1, r2, r2
 8006002:	60b9      	str	r1, [r7, #8]
 8006004:	415b      	adcs	r3, r3
 8006006:	60fb      	str	r3, [r7, #12]
 8006008:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800600c:	4641      	mov	r1, r8
 800600e:	1851      	adds	r1, r2, r1
 8006010:	6039      	str	r1, [r7, #0]
 8006012:	4649      	mov	r1, r9
 8006014:	414b      	adcs	r3, r1
 8006016:	607b      	str	r3, [r7, #4]
 8006018:	f04f 0200 	mov.w	r2, #0
 800601c:	f04f 0300 	mov.w	r3, #0
 8006020:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006024:	4659      	mov	r1, fp
 8006026:	00cb      	lsls	r3, r1, #3
 8006028:	4651      	mov	r1, sl
 800602a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800602e:	4651      	mov	r1, sl
 8006030:	00ca      	lsls	r2, r1, #3
 8006032:	4610      	mov	r0, r2
 8006034:	4619      	mov	r1, r3
 8006036:	4603      	mov	r3, r0
 8006038:	4642      	mov	r2, r8
 800603a:	189b      	adds	r3, r3, r2
 800603c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800603e:	464b      	mov	r3, r9
 8006040:	460a      	mov	r2, r1
 8006042:	eb42 0303 	adc.w	r3, r2, r3
 8006046:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	663b      	str	r3, [r7, #96]	@ 0x60
 8006052:	667a      	str	r2, [r7, #100]	@ 0x64
 8006054:	f04f 0200 	mov.w	r2, #0
 8006058:	f04f 0300 	mov.w	r3, #0
 800605c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006060:	4649      	mov	r1, r9
 8006062:	008b      	lsls	r3, r1, #2
 8006064:	4641      	mov	r1, r8
 8006066:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800606a:	4641      	mov	r1, r8
 800606c:	008a      	lsls	r2, r1, #2
 800606e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006072:	f7fa f8c7 	bl	8000204 <__aeabi_uldivmod>
 8006076:	4602      	mov	r2, r0
 8006078:	460b      	mov	r3, r1
 800607a:	4b0d      	ldr	r3, [pc, #52]	@ (80060b0 <UART_SetConfig+0x4e4>)
 800607c:	fba3 1302 	umull	r1, r3, r3, r2
 8006080:	095b      	lsrs	r3, r3, #5
 8006082:	2164      	movs	r1, #100	@ 0x64
 8006084:	fb01 f303 	mul.w	r3, r1, r3
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	011b      	lsls	r3, r3, #4
 800608c:	3332      	adds	r3, #50	@ 0x32
 800608e:	4a08      	ldr	r2, [pc, #32]	@ (80060b0 <UART_SetConfig+0x4e4>)
 8006090:	fba2 2303 	umull	r2, r3, r2, r3
 8006094:	095b      	lsrs	r3, r3, #5
 8006096:	f003 020f 	and.w	r2, r3, #15
 800609a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4422      	add	r2, r4
 80060a2:	609a      	str	r2, [r3, #8]
}
 80060a4:	bf00      	nop
 80060a6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80060aa:	46bd      	mov	sp, r7
 80060ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060b0:	51eb851f 	.word	0x51eb851f

080060b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060b4:	b084      	sub	sp, #16
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b084      	sub	sp, #16
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
 80060be:	f107 001c 	add.w	r0, r7, #28
 80060c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d122      	bne.n	8006112 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060d0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80060e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80060f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d105      	bne.n	8006106 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f001 fbe8 	bl	80078dc <USB_CoreReset>
 800610c:	4603      	mov	r3, r0
 800610e:	73fb      	strb	r3, [r7, #15]
 8006110:	e01a      	b.n	8006148 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f001 fbdc 	bl	80078dc <USB_CoreReset>
 8006124:	4603      	mov	r3, r0
 8006126:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006128:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800612a:	2b00      	cmp	r3, #0
 800612c:	d106      	bne.n	800613c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006132:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	639a      	str	r2, [r3, #56]	@ 0x38
 800613a:	e005      	b.n	8006148 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006140:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800614a:	2b01      	cmp	r3, #1
 800614c:	d10b      	bne.n	8006166 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	f043 0206 	orr.w	r2, r3, #6
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	f043 0220 	orr.w	r2, r3, #32
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006166:	7bfb      	ldrb	r3, [r7, #15]
}
 8006168:	4618      	mov	r0, r3
 800616a:	3710      	adds	r7, #16
 800616c:	46bd      	mov	sp, r7
 800616e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006172:	b004      	add	sp, #16
 8006174:	4770      	bx	lr
	...

08006178 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006178:	b480      	push	{r7}
 800617a:	b087      	sub	sp, #28
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	4613      	mov	r3, r2
 8006184:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006186:	79fb      	ldrb	r3, [r7, #7]
 8006188:	2b02      	cmp	r3, #2
 800618a:	d165      	bne.n	8006258 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	4a41      	ldr	r2, [pc, #260]	@ (8006294 <USB_SetTurnaroundTime+0x11c>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d906      	bls.n	80061a2 <USB_SetTurnaroundTime+0x2a>
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	4a40      	ldr	r2, [pc, #256]	@ (8006298 <USB_SetTurnaroundTime+0x120>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d202      	bcs.n	80061a2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800619c:	230f      	movs	r3, #15
 800619e:	617b      	str	r3, [r7, #20]
 80061a0:	e062      	b.n	8006268 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	4a3c      	ldr	r2, [pc, #240]	@ (8006298 <USB_SetTurnaroundTime+0x120>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d306      	bcc.n	80061b8 <USB_SetTurnaroundTime+0x40>
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	4a3b      	ldr	r2, [pc, #236]	@ (800629c <USB_SetTurnaroundTime+0x124>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d202      	bcs.n	80061b8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80061b2:	230e      	movs	r3, #14
 80061b4:	617b      	str	r3, [r7, #20]
 80061b6:	e057      	b.n	8006268 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	4a38      	ldr	r2, [pc, #224]	@ (800629c <USB_SetTurnaroundTime+0x124>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d306      	bcc.n	80061ce <USB_SetTurnaroundTime+0x56>
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	4a37      	ldr	r2, [pc, #220]	@ (80062a0 <USB_SetTurnaroundTime+0x128>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d202      	bcs.n	80061ce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80061c8:	230d      	movs	r3, #13
 80061ca:	617b      	str	r3, [r7, #20]
 80061cc:	e04c      	b.n	8006268 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	4a33      	ldr	r2, [pc, #204]	@ (80062a0 <USB_SetTurnaroundTime+0x128>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d306      	bcc.n	80061e4 <USB_SetTurnaroundTime+0x6c>
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	4a32      	ldr	r2, [pc, #200]	@ (80062a4 <USB_SetTurnaroundTime+0x12c>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d802      	bhi.n	80061e4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80061de:	230c      	movs	r3, #12
 80061e0:	617b      	str	r3, [r7, #20]
 80061e2:	e041      	b.n	8006268 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	4a2f      	ldr	r2, [pc, #188]	@ (80062a4 <USB_SetTurnaroundTime+0x12c>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d906      	bls.n	80061fa <USB_SetTurnaroundTime+0x82>
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	4a2e      	ldr	r2, [pc, #184]	@ (80062a8 <USB_SetTurnaroundTime+0x130>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d802      	bhi.n	80061fa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80061f4:	230b      	movs	r3, #11
 80061f6:	617b      	str	r3, [r7, #20]
 80061f8:	e036      	b.n	8006268 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	4a2a      	ldr	r2, [pc, #168]	@ (80062a8 <USB_SetTurnaroundTime+0x130>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d906      	bls.n	8006210 <USB_SetTurnaroundTime+0x98>
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	4a29      	ldr	r2, [pc, #164]	@ (80062ac <USB_SetTurnaroundTime+0x134>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d802      	bhi.n	8006210 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800620a:	230a      	movs	r3, #10
 800620c:	617b      	str	r3, [r7, #20]
 800620e:	e02b      	b.n	8006268 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	4a26      	ldr	r2, [pc, #152]	@ (80062ac <USB_SetTurnaroundTime+0x134>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d906      	bls.n	8006226 <USB_SetTurnaroundTime+0xae>
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	4a25      	ldr	r2, [pc, #148]	@ (80062b0 <USB_SetTurnaroundTime+0x138>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d202      	bcs.n	8006226 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006220:	2309      	movs	r3, #9
 8006222:	617b      	str	r3, [r7, #20]
 8006224:	e020      	b.n	8006268 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	4a21      	ldr	r2, [pc, #132]	@ (80062b0 <USB_SetTurnaroundTime+0x138>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d306      	bcc.n	800623c <USB_SetTurnaroundTime+0xc4>
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	4a20      	ldr	r2, [pc, #128]	@ (80062b4 <USB_SetTurnaroundTime+0x13c>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d802      	bhi.n	800623c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006236:	2308      	movs	r3, #8
 8006238:	617b      	str	r3, [r7, #20]
 800623a:	e015      	b.n	8006268 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	4a1d      	ldr	r2, [pc, #116]	@ (80062b4 <USB_SetTurnaroundTime+0x13c>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d906      	bls.n	8006252 <USB_SetTurnaroundTime+0xda>
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	4a1c      	ldr	r2, [pc, #112]	@ (80062b8 <USB_SetTurnaroundTime+0x140>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d202      	bcs.n	8006252 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800624c:	2307      	movs	r3, #7
 800624e:	617b      	str	r3, [r7, #20]
 8006250:	e00a      	b.n	8006268 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006252:	2306      	movs	r3, #6
 8006254:	617b      	str	r3, [r7, #20]
 8006256:	e007      	b.n	8006268 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006258:	79fb      	ldrb	r3, [r7, #7]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d102      	bne.n	8006264 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800625e:	2309      	movs	r3, #9
 8006260:	617b      	str	r3, [r7, #20]
 8006262:	e001      	b.n	8006268 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006264:	2309      	movs	r3, #9
 8006266:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	68da      	ldr	r2, [r3, #12]
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	029b      	lsls	r3, r3, #10
 800627c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006280:	431a      	orrs	r2, r3
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	371c      	adds	r7, #28
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr
 8006294:	00d8acbf 	.word	0x00d8acbf
 8006298:	00e4e1c0 	.word	0x00e4e1c0
 800629c:	00f42400 	.word	0x00f42400
 80062a0:	01067380 	.word	0x01067380
 80062a4:	011a499f 	.word	0x011a499f
 80062a8:	01312cff 	.word	0x01312cff
 80062ac:	014ca43f 	.word	0x014ca43f
 80062b0:	016e3600 	.word	0x016e3600
 80062b4:	01a6ab1f 	.word	0x01a6ab1f
 80062b8:	01e84800 	.word	0x01e84800

080062bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	f043 0201 	orr.w	r2, r3, #1
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	370c      	adds	r7, #12
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr

080062de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062de:	b480      	push	{r7}
 80062e0:	b083      	sub	sp, #12
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	f023 0201 	bic.w	r2, r3, #1
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	460b      	mov	r3, r1
 800630a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800630c:	2300      	movs	r3, #0
 800630e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800631c:	78fb      	ldrb	r3, [r7, #3]
 800631e:	2b01      	cmp	r3, #1
 8006320:	d115      	bne.n	800634e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800632e:	2001      	movs	r0, #1
 8006330:	f7fb fab8 	bl	80018a4 <HAL_Delay>
      ms++;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	3301      	adds	r3, #1
 8006338:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f001 fa3f 	bl	80077be <USB_GetMode>
 8006340:	4603      	mov	r3, r0
 8006342:	2b01      	cmp	r3, #1
 8006344:	d01e      	beq.n	8006384 <USB_SetCurrentMode+0x84>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2b31      	cmp	r3, #49	@ 0x31
 800634a:	d9f0      	bls.n	800632e <USB_SetCurrentMode+0x2e>
 800634c:	e01a      	b.n	8006384 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800634e:	78fb      	ldrb	r3, [r7, #3]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d115      	bne.n	8006380 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006360:	2001      	movs	r0, #1
 8006362:	f7fb fa9f 	bl	80018a4 <HAL_Delay>
      ms++;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	3301      	adds	r3, #1
 800636a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f001 fa26 	bl	80077be <USB_GetMode>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d005      	beq.n	8006384 <USB_SetCurrentMode+0x84>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2b31      	cmp	r3, #49	@ 0x31
 800637c:	d9f0      	bls.n	8006360 <USB_SetCurrentMode+0x60>
 800637e:	e001      	b.n	8006384 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e005      	b.n	8006390 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2b32      	cmp	r3, #50	@ 0x32
 8006388:	d101      	bne.n	800638e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e000      	b.n	8006390 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3710      	adds	r7, #16
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006398:	b084      	sub	sp, #16
 800639a:	b580      	push	{r7, lr}
 800639c:	b086      	sub	sp, #24
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
 80063a2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80063a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80063aa:	2300      	movs	r3, #0
 80063ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80063b2:	2300      	movs	r3, #0
 80063b4:	613b      	str	r3, [r7, #16]
 80063b6:	e009      	b.n	80063cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	3340      	adds	r3, #64	@ 0x40
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4413      	add	r3, r2
 80063c2:	2200      	movs	r2, #0
 80063c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	3301      	adds	r3, #1
 80063ca:	613b      	str	r3, [r7, #16]
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	2b0e      	cmp	r3, #14
 80063d0:	d9f2      	bls.n	80063b8 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80063d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d11c      	bne.n	8006412 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063e6:	f043 0302 	orr.w	r3, r3, #2
 80063ea:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063f0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	601a      	str	r2, [r3, #0]
 8006410:	e005      	b.n	800641e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006416:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006424:	461a      	mov	r2, r3
 8006426:	2300      	movs	r3, #0
 8006428:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006430:	4619      	mov	r1, r3
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006438:	461a      	mov	r2, r3
 800643a:	680b      	ldr	r3, [r1, #0]
 800643c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800643e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006440:	2b01      	cmp	r3, #1
 8006442:	d10c      	bne.n	800645e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006446:	2b00      	cmp	r3, #0
 8006448:	d104      	bne.n	8006454 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800644a:	2100      	movs	r1, #0
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 f965 	bl	800671c <USB_SetDevSpeed>
 8006452:	e008      	b.n	8006466 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006454:	2101      	movs	r1, #1
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 f960 	bl	800671c <USB_SetDevSpeed>
 800645c:	e003      	b.n	8006466 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800645e:	2103      	movs	r1, #3
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 f95b 	bl	800671c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006466:	2110      	movs	r1, #16
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 f8f3 	bl	8006654 <USB_FlushTxFifo>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d001      	beq.n	8006478 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 f91f 	bl	80066bc <USB_FlushRxFifo>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d001      	beq.n	8006488 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800648e:	461a      	mov	r2, r3
 8006490:	2300      	movs	r3, #0
 8006492:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800649a:	461a      	mov	r2, r3
 800649c:	2300      	movs	r3, #0
 800649e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064a6:	461a      	mov	r2, r3
 80064a8:	2300      	movs	r3, #0
 80064aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064ac:	2300      	movs	r3, #0
 80064ae:	613b      	str	r3, [r7, #16]
 80064b0:	e043      	b.n	800653a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	015a      	lsls	r2, r3, #5
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	4413      	add	r3, r2
 80064ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80064c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064c8:	d118      	bne.n	80064fc <USB_DevInit+0x164>
    {
      if (i == 0U)
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d10a      	bne.n	80064e6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	015a      	lsls	r2, r3, #5
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	4413      	add	r3, r2
 80064d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064dc:	461a      	mov	r2, r3
 80064de:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80064e2:	6013      	str	r3, [r2, #0]
 80064e4:	e013      	b.n	800650e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	015a      	lsls	r2, r3, #5
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064f2:	461a      	mov	r2, r3
 80064f4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80064f8:	6013      	str	r3, [r2, #0]
 80064fa:	e008      	b.n	800650e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	4413      	add	r3, r2
 8006504:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006508:	461a      	mov	r2, r3
 800650a:	2300      	movs	r3, #0
 800650c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	015a      	lsls	r2, r3, #5
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	4413      	add	r3, r2
 8006516:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800651a:	461a      	mov	r2, r3
 800651c:	2300      	movs	r3, #0
 800651e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	015a      	lsls	r2, r3, #5
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	4413      	add	r3, r2
 8006528:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800652c:	461a      	mov	r2, r3
 800652e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006532:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	3301      	adds	r3, #1
 8006538:	613b      	str	r3, [r7, #16]
 800653a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800653c:	693a      	ldr	r2, [r7, #16]
 800653e:	429a      	cmp	r2, r3
 8006540:	d3b7      	bcc.n	80064b2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006542:	2300      	movs	r3, #0
 8006544:	613b      	str	r3, [r7, #16]
 8006546:	e043      	b.n	80065d0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	015a      	lsls	r2, r3, #5
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	4413      	add	r3, r2
 8006550:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800655a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800655e:	d118      	bne.n	8006592 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d10a      	bne.n	800657c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	015a      	lsls	r2, r3, #5
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	4413      	add	r3, r2
 800656e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006572:	461a      	mov	r2, r3
 8006574:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006578:	6013      	str	r3, [r2, #0]
 800657a:	e013      	b.n	80065a4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	015a      	lsls	r2, r3, #5
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	4413      	add	r3, r2
 8006584:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006588:	461a      	mov	r2, r3
 800658a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800658e:	6013      	str	r3, [r2, #0]
 8006590:	e008      	b.n	80065a4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	015a      	lsls	r2, r3, #5
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	4413      	add	r3, r2
 800659a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800659e:	461a      	mov	r2, r3
 80065a0:	2300      	movs	r3, #0
 80065a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	015a      	lsls	r2, r3, #5
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	4413      	add	r3, r2
 80065ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065b0:	461a      	mov	r2, r3
 80065b2:	2300      	movs	r3, #0
 80065b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	015a      	lsls	r2, r3, #5
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	4413      	add	r3, r2
 80065be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065c2:	461a      	mov	r2, r3
 80065c4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80065c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	3301      	adds	r3, #1
 80065ce:	613b      	str	r3, [r7, #16]
 80065d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d2:	693a      	ldr	r2, [r7, #16]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d3b7      	bcc.n	8006548 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065e6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80065f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80065fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d105      	bne.n	800660c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	699b      	ldr	r3, [r3, #24]
 8006604:	f043 0210 	orr.w	r2, r3, #16
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	699a      	ldr	r2, [r3, #24]
 8006610:	4b0f      	ldr	r3, [pc, #60]	@ (8006650 <USB_DevInit+0x2b8>)
 8006612:	4313      	orrs	r3, r2
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006618:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800661a:	2b00      	cmp	r3, #0
 800661c:	d005      	beq.n	800662a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	f043 0208 	orr.w	r2, r3, #8
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800662a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800662c:	2b01      	cmp	r3, #1
 800662e:	d107      	bne.n	8006640 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	699b      	ldr	r3, [r3, #24]
 8006634:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006638:	f043 0304 	orr.w	r3, r3, #4
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006640:	7dfb      	ldrb	r3, [r7, #23]
}
 8006642:	4618      	mov	r0, r3
 8006644:	3718      	adds	r7, #24
 8006646:	46bd      	mov	sp, r7
 8006648:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800664c:	b004      	add	sp, #16
 800664e:	4770      	bx	lr
 8006650:	803c3800 	.word	0x803c3800

08006654 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006654:	b480      	push	{r7}
 8006656:	b085      	sub	sp, #20
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800665e:	2300      	movs	r3, #0
 8006660:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	3301      	adds	r3, #1
 8006666:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	4a13      	ldr	r2, [pc, #76]	@ (80066b8 <USB_FlushTxFifo+0x64>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d901      	bls.n	8006674 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006670:	2303      	movs	r3, #3
 8006672:	e01b      	b.n	80066ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	2b00      	cmp	r3, #0
 800667a:	daf2      	bge.n	8006662 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800667c:	2300      	movs	r3, #0
 800667e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	019b      	lsls	r3, r3, #6
 8006684:	f043 0220 	orr.w	r2, r3, #32
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	3301      	adds	r3, #1
 8006690:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	4a08      	ldr	r2, [pc, #32]	@ (80066b8 <USB_FlushTxFifo+0x64>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d901      	bls.n	800669e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800669a:	2303      	movs	r3, #3
 800669c:	e006      	b.n	80066ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	f003 0320 	and.w	r3, r3, #32
 80066a6:	2b20      	cmp	r3, #32
 80066a8:	d0f0      	beq.n	800668c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3714      	adds	r7, #20
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr
 80066b8:	00030d40 	.word	0x00030d40

080066bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066c4:	2300      	movs	r3, #0
 80066c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	3301      	adds	r3, #1
 80066cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	4a11      	ldr	r2, [pc, #68]	@ (8006718 <USB_FlushRxFifo+0x5c>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d901      	bls.n	80066da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80066d6:	2303      	movs	r3, #3
 80066d8:	e018      	b.n	800670c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	daf2      	bge.n	80066c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80066e2:	2300      	movs	r3, #0
 80066e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2210      	movs	r2, #16
 80066ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	3301      	adds	r3, #1
 80066f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	4a08      	ldr	r2, [pc, #32]	@ (8006718 <USB_FlushRxFifo+0x5c>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d901      	bls.n	80066fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e006      	b.n	800670c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	f003 0310 	and.w	r3, r3, #16
 8006706:	2b10      	cmp	r3, #16
 8006708:	d0f0      	beq.n	80066ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3714      	adds	r7, #20
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr
 8006718:	00030d40 	.word	0x00030d40

0800671c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	460b      	mov	r3, r1
 8006726:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	78fb      	ldrb	r3, [r7, #3]
 8006736:	68f9      	ldr	r1, [r7, #12]
 8006738:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800673c:	4313      	orrs	r3, r2
 800673e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	3714      	adds	r7, #20
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr

0800674e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800674e:	b480      	push	{r7}
 8006750:	b087      	sub	sp, #28
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	f003 0306 	and.w	r3, r3, #6
 8006766:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d102      	bne.n	8006774 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800676e:	2300      	movs	r3, #0
 8006770:	75fb      	strb	r3, [r7, #23]
 8006772:	e00a      	b.n	800678a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2b02      	cmp	r3, #2
 8006778:	d002      	beq.n	8006780 <USB_GetDevSpeed+0x32>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2b06      	cmp	r3, #6
 800677e:	d102      	bne.n	8006786 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006780:	2302      	movs	r3, #2
 8006782:	75fb      	strb	r3, [r7, #23]
 8006784:	e001      	b.n	800678a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006786:	230f      	movs	r3, #15
 8006788:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800678a:	7dfb      	ldrb	r3, [r7, #23]
}
 800678c:	4618      	mov	r0, r3
 800678e:	371c      	adds	r7, #28
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006798:	b480      	push	{r7}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	785b      	ldrb	r3, [r3, #1]
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d13a      	bne.n	800682a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067ba:	69da      	ldr	r2, [r3, #28]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	f003 030f 	and.w	r3, r3, #15
 80067c4:	2101      	movs	r1, #1
 80067c6:	fa01 f303 	lsl.w	r3, r1, r3
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	68f9      	ldr	r1, [r7, #12]
 80067ce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80067d2:	4313      	orrs	r3, r2
 80067d4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	015a      	lsls	r2, r3, #5
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	4413      	add	r3, r2
 80067de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d155      	bne.n	8006898 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	015a      	lsls	r2, r3, #5
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	4413      	add	r3, r2
 80067f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	791b      	ldrb	r3, [r3, #4]
 8006806:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006808:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	059b      	lsls	r3, r3, #22
 800680e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006810:	4313      	orrs	r3, r2
 8006812:	68ba      	ldr	r2, [r7, #8]
 8006814:	0151      	lsls	r1, r2, #5
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	440a      	add	r2, r1
 800681a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800681e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006822:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006826:	6013      	str	r3, [r2, #0]
 8006828:	e036      	b.n	8006898 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006830:	69da      	ldr	r2, [r3, #28]
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	f003 030f 	and.w	r3, r3, #15
 800683a:	2101      	movs	r1, #1
 800683c:	fa01 f303 	lsl.w	r3, r1, r3
 8006840:	041b      	lsls	r3, r3, #16
 8006842:	68f9      	ldr	r1, [r7, #12]
 8006844:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006848:	4313      	orrs	r3, r2
 800684a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	015a      	lsls	r2, r3, #5
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	4413      	add	r3, r2
 8006854:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d11a      	bne.n	8006898 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	015a      	lsls	r2, r3, #5
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	4413      	add	r3, r2
 800686a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	791b      	ldrb	r3, [r3, #4]
 800687c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800687e:	430b      	orrs	r3, r1
 8006880:	4313      	orrs	r3, r2
 8006882:	68ba      	ldr	r2, [r7, #8]
 8006884:	0151      	lsls	r1, r2, #5
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	440a      	add	r2, r1
 800688a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800688e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006892:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006896:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3714      	adds	r7, #20
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
	...

080068a8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	785b      	ldrb	r3, [r3, #1]
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d161      	bne.n	8006988 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	015a      	lsls	r2, r3, #5
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	4413      	add	r3, r2
 80068cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068da:	d11f      	bne.n	800691c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	015a      	lsls	r2, r3, #5
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	4413      	add	r3, r2
 80068e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68ba      	ldr	r2, [r7, #8]
 80068ec:	0151      	lsls	r1, r2, #5
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	440a      	add	r2, r1
 80068f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068f6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80068fa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	015a      	lsls	r2, r3, #5
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	4413      	add	r3, r2
 8006904:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68ba      	ldr	r2, [r7, #8]
 800690c:	0151      	lsls	r1, r2, #5
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	440a      	add	r2, r1
 8006912:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006916:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800691a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006922:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	f003 030f 	and.w	r3, r3, #15
 800692c:	2101      	movs	r1, #1
 800692e:	fa01 f303 	lsl.w	r3, r1, r3
 8006932:	b29b      	uxth	r3, r3
 8006934:	43db      	mvns	r3, r3
 8006936:	68f9      	ldr	r1, [r7, #12]
 8006938:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800693c:	4013      	ands	r3, r2
 800693e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006946:	69da      	ldr	r2, [r3, #28]
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	f003 030f 	and.w	r3, r3, #15
 8006950:	2101      	movs	r1, #1
 8006952:	fa01 f303 	lsl.w	r3, r1, r3
 8006956:	b29b      	uxth	r3, r3
 8006958:	43db      	mvns	r3, r3
 800695a:	68f9      	ldr	r1, [r7, #12]
 800695c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006960:	4013      	ands	r3, r2
 8006962:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	015a      	lsls	r2, r3, #5
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	4413      	add	r3, r2
 800696c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	0159      	lsls	r1, r3, #5
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	440b      	add	r3, r1
 800697a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800697e:	4619      	mov	r1, r3
 8006980:	4b35      	ldr	r3, [pc, #212]	@ (8006a58 <USB_DeactivateEndpoint+0x1b0>)
 8006982:	4013      	ands	r3, r2
 8006984:	600b      	str	r3, [r1, #0]
 8006986:	e060      	b.n	8006a4a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	015a      	lsls	r2, r3, #5
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	4413      	add	r3, r2
 8006990:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800699a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800699e:	d11f      	bne.n	80069e0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	015a      	lsls	r2, r3, #5
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	4413      	add	r3, r2
 80069a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68ba      	ldr	r2, [r7, #8]
 80069b0:	0151      	lsls	r1, r2, #5
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	440a      	add	r2, r1
 80069b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069ba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80069be:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	015a      	lsls	r2, r3, #5
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	4413      	add	r3, r2
 80069c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	68ba      	ldr	r2, [r7, #8]
 80069d0:	0151      	lsls	r1, r2, #5
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	440a      	add	r2, r1
 80069d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80069de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	f003 030f 	and.w	r3, r3, #15
 80069f0:	2101      	movs	r1, #1
 80069f2:	fa01 f303 	lsl.w	r3, r1, r3
 80069f6:	041b      	lsls	r3, r3, #16
 80069f8:	43db      	mvns	r3, r3
 80069fa:	68f9      	ldr	r1, [r7, #12]
 80069fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a00:	4013      	ands	r3, r2
 8006a02:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a0a:	69da      	ldr	r2, [r3, #28]
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	f003 030f 	and.w	r3, r3, #15
 8006a14:	2101      	movs	r1, #1
 8006a16:	fa01 f303 	lsl.w	r3, r1, r3
 8006a1a:	041b      	lsls	r3, r3, #16
 8006a1c:	43db      	mvns	r3, r3
 8006a1e:	68f9      	ldr	r1, [r7, #12]
 8006a20:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a24:	4013      	ands	r3, r2
 8006a26:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	015a      	lsls	r2, r3, #5
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	4413      	add	r3, r2
 8006a30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	0159      	lsls	r1, r3, #5
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	440b      	add	r3, r1
 8006a3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a42:	4619      	mov	r1, r3
 8006a44:	4b05      	ldr	r3, [pc, #20]	@ (8006a5c <USB_DeactivateEndpoint+0x1b4>)
 8006a46:	4013      	ands	r3, r2
 8006a48:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3714      	adds	r7, #20
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr
 8006a58:	ec337800 	.word	0xec337800
 8006a5c:	eff37800 	.word	0xeff37800

08006a60 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b08a      	sub	sp, #40	@ 0x28
 8006a64:	af02      	add	r7, sp, #8
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	785b      	ldrb	r3, [r3, #1]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	f040 815c 	bne.w	8006d3a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	699b      	ldr	r3, [r3, #24]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d132      	bne.n	8006af0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	015a      	lsls	r2, r3, #5
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	4413      	add	r3, r2
 8006a92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a96:	691b      	ldr	r3, [r3, #16]
 8006a98:	69ba      	ldr	r2, [r7, #24]
 8006a9a:	0151      	lsls	r1, r2, #5
 8006a9c:	69fa      	ldr	r2, [r7, #28]
 8006a9e:	440a      	add	r2, r1
 8006aa0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006aa4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006aa8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006aac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	015a      	lsls	r2, r3, #5
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	69ba      	ldr	r2, [r7, #24]
 8006abe:	0151      	lsls	r1, r2, #5
 8006ac0:	69fa      	ldr	r2, [r7, #28]
 8006ac2:	440a      	add	r2, r1
 8006ac4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ac8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006acc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	015a      	lsls	r2, r3, #5
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	69ba      	ldr	r2, [r7, #24]
 8006ade:	0151      	lsls	r1, r2, #5
 8006ae0:	69fa      	ldr	r2, [r7, #28]
 8006ae2:	440a      	add	r2, r1
 8006ae4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ae8:	0cdb      	lsrs	r3, r3, #19
 8006aea:	04db      	lsls	r3, r3, #19
 8006aec:	6113      	str	r3, [r2, #16]
 8006aee:	e074      	b.n	8006bda <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	015a      	lsls	r2, r3, #5
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	4413      	add	r3, r2
 8006af8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	69ba      	ldr	r2, [r7, #24]
 8006b00:	0151      	lsls	r1, r2, #5
 8006b02:	69fa      	ldr	r2, [r7, #28]
 8006b04:	440a      	add	r2, r1
 8006b06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b0a:	0cdb      	lsrs	r3, r3, #19
 8006b0c:	04db      	lsls	r3, r3, #19
 8006b0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	015a      	lsls	r2, r3, #5
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	4413      	add	r3, r2
 8006b18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	69ba      	ldr	r2, [r7, #24]
 8006b20:	0151      	lsls	r1, r2, #5
 8006b22:	69fa      	ldr	r2, [r7, #28]
 8006b24:	440a      	add	r2, r1
 8006b26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b2a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006b2e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006b32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	015a      	lsls	r2, r3, #5
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b40:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	6999      	ldr	r1, [r3, #24]
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	440b      	add	r3, r1
 8006b4c:	1e59      	subs	r1, r3, #1
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b56:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006b58:	4b9d      	ldr	r3, [pc, #628]	@ (8006dd0 <USB_EPStartXfer+0x370>)
 8006b5a:	400b      	ands	r3, r1
 8006b5c:	69b9      	ldr	r1, [r7, #24]
 8006b5e:	0148      	lsls	r0, r1, #5
 8006b60:	69f9      	ldr	r1, [r7, #28]
 8006b62:	4401      	add	r1, r0
 8006b64:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	015a      	lsls	r2, r3, #5
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	4413      	add	r3, r2
 8006b74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b78:	691a      	ldr	r2, [r3, #16]
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b82:	69b9      	ldr	r1, [r7, #24]
 8006b84:	0148      	lsls	r0, r1, #5
 8006b86:	69f9      	ldr	r1, [r7, #28]
 8006b88:	4401      	add	r1, r0
 8006b8a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	791b      	ldrb	r3, [r3, #4]
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d11f      	bne.n	8006bda <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	015a      	lsls	r2, r3, #5
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	69ba      	ldr	r2, [r7, #24]
 8006baa:	0151      	lsls	r1, r2, #5
 8006bac:	69fa      	ldr	r2, [r7, #28]
 8006bae:	440a      	add	r2, r1
 8006bb0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bb4:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006bb8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	015a      	lsls	r2, r3, #5
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	69ba      	ldr	r2, [r7, #24]
 8006bca:	0151      	lsls	r1, r2, #5
 8006bcc:	69fa      	ldr	r2, [r7, #28]
 8006bce:	440a      	add	r2, r1
 8006bd0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bd4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006bd8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006bda:	79fb      	ldrb	r3, [r7, #7]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d14b      	bne.n	8006c78 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	695b      	ldr	r3, [r3, #20]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d009      	beq.n	8006bfc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	015a      	lsls	r2, r3, #5
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	4413      	add	r3, r2
 8006bf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	791b      	ldrb	r3, [r3, #4]
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d128      	bne.n	8006c56 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d110      	bne.n	8006c36 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	015a      	lsls	r2, r3, #5
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	69ba      	ldr	r2, [r7, #24]
 8006c24:	0151      	lsls	r1, r2, #5
 8006c26:	69fa      	ldr	r2, [r7, #28]
 8006c28:	440a      	add	r2, r1
 8006c2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c2e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006c32:	6013      	str	r3, [r2, #0]
 8006c34:	e00f      	b.n	8006c56 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	015a      	lsls	r2, r3, #5
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	69ba      	ldr	r2, [r7, #24]
 8006c46:	0151      	lsls	r1, r2, #5
 8006c48:	69fa      	ldr	r2, [r7, #28]
 8006c4a:	440a      	add	r2, r1
 8006c4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c54:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	015a      	lsls	r2, r3, #5
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	69ba      	ldr	r2, [r7, #24]
 8006c66:	0151      	lsls	r1, r2, #5
 8006c68:	69fa      	ldr	r2, [r7, #28]
 8006c6a:	440a      	add	r2, r1
 8006c6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c70:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006c74:	6013      	str	r3, [r2, #0]
 8006c76:	e133      	b.n	8006ee0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	015a      	lsls	r2, r3, #5
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	4413      	add	r3, r2
 8006c80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	69ba      	ldr	r2, [r7, #24]
 8006c88:	0151      	lsls	r1, r2, #5
 8006c8a:	69fa      	ldr	r2, [r7, #28]
 8006c8c:	440a      	add	r2, r1
 8006c8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c92:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006c96:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	791b      	ldrb	r3, [r3, #4]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d015      	beq.n	8006ccc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	699b      	ldr	r3, [r3, #24]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f000 811b 	beq.w	8006ee0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	f003 030f 	and.w	r3, r3, #15
 8006cba:	2101      	movs	r1, #1
 8006cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8006cc0:	69f9      	ldr	r1, [r7, #28]
 8006cc2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	634b      	str	r3, [r1, #52]	@ 0x34
 8006cca:	e109      	b.n	8006ee0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d110      	bne.n	8006cfe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	015a      	lsls	r2, r3, #5
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	69ba      	ldr	r2, [r7, #24]
 8006cec:	0151      	lsls	r1, r2, #5
 8006cee:	69fa      	ldr	r2, [r7, #28]
 8006cf0:	440a      	add	r2, r1
 8006cf2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cf6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006cfa:	6013      	str	r3, [r2, #0]
 8006cfc:	e00f      	b.n	8006d1e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	015a      	lsls	r2, r3, #5
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	4413      	add	r3, r2
 8006d06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	69ba      	ldr	r2, [r7, #24]
 8006d0e:	0151      	lsls	r1, r2, #5
 8006d10:	69fa      	ldr	r2, [r7, #28]
 8006d12:	440a      	add	r2, r1
 8006d14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d1c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	6919      	ldr	r1, [r3, #16]
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	781a      	ldrb	r2, [r3, #0]
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	b298      	uxth	r0, r3
 8006d2c:	79fb      	ldrb	r3, [r7, #7]
 8006d2e:	9300      	str	r3, [sp, #0]
 8006d30:	4603      	mov	r3, r0
 8006d32:	68f8      	ldr	r0, [r7, #12]
 8006d34:	f000 fade 	bl	80072f4 <USB_WritePacket>
 8006d38:	e0d2      	b.n	8006ee0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	015a      	lsls	r2, r3, #5
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	4413      	add	r3, r2
 8006d42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	69ba      	ldr	r2, [r7, #24]
 8006d4a:	0151      	lsls	r1, r2, #5
 8006d4c:	69fa      	ldr	r2, [r7, #28]
 8006d4e:	440a      	add	r2, r1
 8006d50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d54:	0cdb      	lsrs	r3, r3, #19
 8006d56:	04db      	lsls	r3, r3, #19
 8006d58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	015a      	lsls	r2, r3, #5
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	4413      	add	r3, r2
 8006d62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	69ba      	ldr	r2, [r7, #24]
 8006d6a:	0151      	lsls	r1, r2, #5
 8006d6c:	69fa      	ldr	r2, [r7, #28]
 8006d6e:	440a      	add	r2, r1
 8006d70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d74:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006d78:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006d7c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	699b      	ldr	r3, [r3, #24]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d126      	bne.n	8006dd4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	015a      	lsls	r2, r3, #5
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d92:	691a      	ldr	r2, [r3, #16]
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d9c:	69b9      	ldr	r1, [r7, #24]
 8006d9e:	0148      	lsls	r0, r1, #5
 8006da0:	69f9      	ldr	r1, [r7, #28]
 8006da2:	4401      	add	r1, r0
 8006da4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006da8:	4313      	orrs	r3, r2
 8006daa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	015a      	lsls	r2, r3, #5
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	4413      	add	r3, r2
 8006db4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	69ba      	ldr	r2, [r7, #24]
 8006dbc:	0151      	lsls	r1, r2, #5
 8006dbe:	69fa      	ldr	r2, [r7, #28]
 8006dc0:	440a      	add	r2, r1
 8006dc2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006dc6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006dca:	6113      	str	r3, [r2, #16]
 8006dcc:	e03a      	b.n	8006e44 <USB_EPStartXfer+0x3e4>
 8006dce:	bf00      	nop
 8006dd0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	699a      	ldr	r2, [r3, #24]
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	4413      	add	r3, r2
 8006dde:	1e5a      	subs	r2, r3, #1
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006de8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	8afa      	ldrh	r2, [r7, #22]
 8006df0:	fb03 f202 	mul.w	r2, r3, r2
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	015a      	lsls	r2, r3, #5
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	4413      	add	r3, r2
 8006e00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e04:	691a      	ldr	r2, [r3, #16]
 8006e06:	8afb      	ldrh	r3, [r7, #22]
 8006e08:	04d9      	lsls	r1, r3, #19
 8006e0a:	4b38      	ldr	r3, [pc, #224]	@ (8006eec <USB_EPStartXfer+0x48c>)
 8006e0c:	400b      	ands	r3, r1
 8006e0e:	69b9      	ldr	r1, [r7, #24]
 8006e10:	0148      	lsls	r0, r1, #5
 8006e12:	69f9      	ldr	r1, [r7, #28]
 8006e14:	4401      	add	r1, r0
 8006e16:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	015a      	lsls	r2, r3, #5
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	4413      	add	r3, r2
 8006e26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e2a:	691a      	ldr	r2, [r3, #16]
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	69db      	ldr	r3, [r3, #28]
 8006e30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e34:	69b9      	ldr	r1, [r7, #24]
 8006e36:	0148      	lsls	r0, r1, #5
 8006e38:	69f9      	ldr	r1, [r7, #28]
 8006e3a:	4401      	add	r1, r0
 8006e3c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006e40:	4313      	orrs	r3, r2
 8006e42:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006e44:	79fb      	ldrb	r3, [r7, #7]
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d10d      	bne.n	8006e66 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d009      	beq.n	8006e66 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	6919      	ldr	r1, [r3, #16]
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	015a      	lsls	r2, r3, #5
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e62:	460a      	mov	r2, r1
 8006e64:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	791b      	ldrb	r3, [r3, #4]
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d128      	bne.n	8006ec0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d110      	bne.n	8006ea0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	015a      	lsls	r2, r3, #5
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	4413      	add	r3, r2
 8006e86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	69ba      	ldr	r2, [r7, #24]
 8006e8e:	0151      	lsls	r1, r2, #5
 8006e90:	69fa      	ldr	r2, [r7, #28]
 8006e92:	440a      	add	r2, r1
 8006e94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e98:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006e9c:	6013      	str	r3, [r2, #0]
 8006e9e:	e00f      	b.n	8006ec0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	015a      	lsls	r2, r3, #5
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	69ba      	ldr	r2, [r7, #24]
 8006eb0:	0151      	lsls	r1, r2, #5
 8006eb2:	69fa      	ldr	r2, [r7, #28]
 8006eb4:	440a      	add	r2, r1
 8006eb6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006eba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ebe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	015a      	lsls	r2, r3, #5
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	69ba      	ldr	r2, [r7, #24]
 8006ed0:	0151      	lsls	r1, r2, #5
 8006ed2:	69fa      	ldr	r2, [r7, #28]
 8006ed4:	440a      	add	r2, r1
 8006ed6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006eda:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006ede:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3720      	adds	r7, #32
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	1ff80000 	.word	0x1ff80000

08006ef0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b087      	sub	sp, #28
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	4613      	mov	r3, r2
 8006efc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	785b      	ldrb	r3, [r3, #1]
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	f040 80ce 	bne.w	80070ae <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d132      	bne.n	8006f80 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	015a      	lsls	r2, r3, #5
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	4413      	add	r3, r2
 8006f22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	693a      	ldr	r2, [r7, #16]
 8006f2a:	0151      	lsls	r1, r2, #5
 8006f2c:	697a      	ldr	r2, [r7, #20]
 8006f2e:	440a      	add	r2, r1
 8006f30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f34:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006f38:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006f3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	015a      	lsls	r2, r3, #5
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	4413      	add	r3, r2
 8006f46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f4a:	691b      	ldr	r3, [r3, #16]
 8006f4c:	693a      	ldr	r2, [r7, #16]
 8006f4e:	0151      	lsls	r1, r2, #5
 8006f50:	697a      	ldr	r2, [r7, #20]
 8006f52:	440a      	add	r2, r1
 8006f54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f58:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006f5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	015a      	lsls	r2, r3, #5
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	4413      	add	r3, r2
 8006f66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	693a      	ldr	r2, [r7, #16]
 8006f6e:	0151      	lsls	r1, r2, #5
 8006f70:	697a      	ldr	r2, [r7, #20]
 8006f72:	440a      	add	r2, r1
 8006f74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f78:	0cdb      	lsrs	r3, r3, #19
 8006f7a:	04db      	lsls	r3, r3, #19
 8006f7c:	6113      	str	r3, [r2, #16]
 8006f7e:	e04e      	b.n	800701e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	015a      	lsls	r2, r3, #5
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	4413      	add	r3, r2
 8006f88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f8c:	691b      	ldr	r3, [r3, #16]
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	0151      	lsls	r1, r2, #5
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	440a      	add	r2, r1
 8006f96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f9a:	0cdb      	lsrs	r3, r3, #19
 8006f9c:	04db      	lsls	r3, r3, #19
 8006f9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	015a      	lsls	r2, r3, #5
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	693a      	ldr	r2, [r7, #16]
 8006fb0:	0151      	lsls	r1, r2, #5
 8006fb2:	697a      	ldr	r2, [r7, #20]
 8006fb4:	440a      	add	r2, r1
 8006fb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fba:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006fbe:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006fc2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	699a      	ldr	r2, [r3, #24]
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d903      	bls.n	8006fd8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	68da      	ldr	r2, [r3, #12]
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	015a      	lsls	r2, r3, #5
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	4413      	add	r3, r2
 8006fe0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	693a      	ldr	r2, [r7, #16]
 8006fe8:	0151      	lsls	r1, r2, #5
 8006fea:	697a      	ldr	r2, [r7, #20]
 8006fec:	440a      	add	r2, r1
 8006fee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ff2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006ff6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	015a      	lsls	r2, r3, #5
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	4413      	add	r3, r2
 8007000:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007004:	691a      	ldr	r2, [r3, #16]
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	699b      	ldr	r3, [r3, #24]
 800700a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800700e:	6939      	ldr	r1, [r7, #16]
 8007010:	0148      	lsls	r0, r1, #5
 8007012:	6979      	ldr	r1, [r7, #20]
 8007014:	4401      	add	r1, r0
 8007016:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800701a:	4313      	orrs	r3, r2
 800701c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800701e:	79fb      	ldrb	r3, [r7, #7]
 8007020:	2b01      	cmp	r3, #1
 8007022:	d11e      	bne.n	8007062 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	695b      	ldr	r3, [r3, #20]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d009      	beq.n	8007040 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	015a      	lsls	r2, r3, #5
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	4413      	add	r3, r2
 8007034:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007038:	461a      	mov	r2, r3
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	695b      	ldr	r3, [r3, #20]
 800703e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	015a      	lsls	r2, r3, #5
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	4413      	add	r3, r2
 8007048:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	693a      	ldr	r2, [r7, #16]
 8007050:	0151      	lsls	r1, r2, #5
 8007052:	697a      	ldr	r2, [r7, #20]
 8007054:	440a      	add	r2, r1
 8007056:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800705a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800705e:	6013      	str	r3, [r2, #0]
 8007060:	e097      	b.n	8007192 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	015a      	lsls	r2, r3, #5
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	4413      	add	r3, r2
 800706a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	693a      	ldr	r2, [r7, #16]
 8007072:	0151      	lsls	r1, r2, #5
 8007074:	697a      	ldr	r2, [r7, #20]
 8007076:	440a      	add	r2, r1
 8007078:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800707c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007080:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	699b      	ldr	r3, [r3, #24]
 8007086:	2b00      	cmp	r3, #0
 8007088:	f000 8083 	beq.w	8007192 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007092:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	f003 030f 	and.w	r3, r3, #15
 800709c:	2101      	movs	r1, #1
 800709e:	fa01 f303 	lsl.w	r3, r1, r3
 80070a2:	6979      	ldr	r1, [r7, #20]
 80070a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80070a8:	4313      	orrs	r3, r2
 80070aa:	634b      	str	r3, [r1, #52]	@ 0x34
 80070ac:	e071      	b.n	8007192 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	015a      	lsls	r2, r3, #5
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	4413      	add	r3, r2
 80070b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	0151      	lsls	r1, r2, #5
 80070c0:	697a      	ldr	r2, [r7, #20]
 80070c2:	440a      	add	r2, r1
 80070c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070c8:	0cdb      	lsrs	r3, r3, #19
 80070ca:	04db      	lsls	r3, r3, #19
 80070cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	015a      	lsls	r2, r3, #5
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	4413      	add	r3, r2
 80070d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	693a      	ldr	r2, [r7, #16]
 80070de:	0151      	lsls	r1, r2, #5
 80070e0:	697a      	ldr	r2, [r7, #20]
 80070e2:	440a      	add	r2, r1
 80070e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070e8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80070ec:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80070f0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	699b      	ldr	r3, [r3, #24]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d003      	beq.n	8007102 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	68da      	ldr	r2, [r3, #12]
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	68da      	ldr	r2, [r3, #12]
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	015a      	lsls	r2, r3, #5
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	4413      	add	r3, r2
 8007112:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	693a      	ldr	r2, [r7, #16]
 800711a:	0151      	lsls	r1, r2, #5
 800711c:	697a      	ldr	r2, [r7, #20]
 800711e:	440a      	add	r2, r1
 8007120:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007124:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007128:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	015a      	lsls	r2, r3, #5
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	4413      	add	r3, r2
 8007132:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007136:	691a      	ldr	r2, [r3, #16]
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	69db      	ldr	r3, [r3, #28]
 800713c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007140:	6939      	ldr	r1, [r7, #16]
 8007142:	0148      	lsls	r0, r1, #5
 8007144:	6979      	ldr	r1, [r7, #20]
 8007146:	4401      	add	r1, r0
 8007148:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800714c:	4313      	orrs	r3, r2
 800714e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007150:	79fb      	ldrb	r3, [r7, #7]
 8007152:	2b01      	cmp	r3, #1
 8007154:	d10d      	bne.n	8007172 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d009      	beq.n	8007172 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	6919      	ldr	r1, [r3, #16]
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	015a      	lsls	r2, r3, #5
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	4413      	add	r3, r2
 800716a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800716e:	460a      	mov	r2, r1
 8007170:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	015a      	lsls	r2, r3, #5
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	4413      	add	r3, r2
 800717a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	693a      	ldr	r2, [r7, #16]
 8007182:	0151      	lsls	r1, r2, #5
 8007184:	697a      	ldr	r2, [r7, #20]
 8007186:	440a      	add	r2, r1
 8007188:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800718c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007190:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	371c      	adds	r7, #28
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b087      	sub	sp, #28
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80071aa:	2300      	movs	r3, #0
 80071ac:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80071ae:	2300      	movs	r3, #0
 80071b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	785b      	ldrb	r3, [r3, #1]
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d14a      	bne.n	8007254 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	015a      	lsls	r2, r3, #5
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	4413      	add	r3, r2
 80071c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80071d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80071d6:	f040 8086 	bne.w	80072e6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	015a      	lsls	r2, r3, #5
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	4413      	add	r3, r2
 80071e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	683a      	ldr	r2, [r7, #0]
 80071ec:	7812      	ldrb	r2, [r2, #0]
 80071ee:	0151      	lsls	r1, r2, #5
 80071f0:	693a      	ldr	r2, [r7, #16]
 80071f2:	440a      	add	r2, r1
 80071f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071f8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80071fc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	015a      	lsls	r2, r3, #5
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	4413      	add	r3, r2
 8007208:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	683a      	ldr	r2, [r7, #0]
 8007210:	7812      	ldrb	r2, [r2, #0]
 8007212:	0151      	lsls	r1, r2, #5
 8007214:	693a      	ldr	r2, [r7, #16]
 8007216:	440a      	add	r2, r1
 8007218:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800721c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007220:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	3301      	adds	r3, #1
 8007226:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800722e:	4293      	cmp	r3, r2
 8007230:	d902      	bls.n	8007238 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	75fb      	strb	r3, [r7, #23]
          break;
 8007236:	e056      	b.n	80072e6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	015a      	lsls	r2, r3, #5
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	4413      	add	r3, r2
 8007242:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800724c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007250:	d0e7      	beq.n	8007222 <USB_EPStopXfer+0x82>
 8007252:	e048      	b.n	80072e6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	015a      	lsls	r2, r3, #5
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	4413      	add	r3, r2
 800725e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007268:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800726c:	d13b      	bne.n	80072e6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	015a      	lsls	r2, r3, #5
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	4413      	add	r3, r2
 8007278:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	683a      	ldr	r2, [r7, #0]
 8007280:	7812      	ldrb	r2, [r2, #0]
 8007282:	0151      	lsls	r1, r2, #5
 8007284:	693a      	ldr	r2, [r7, #16]
 8007286:	440a      	add	r2, r1
 8007288:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800728c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007290:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	015a      	lsls	r2, r3, #5
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	4413      	add	r3, r2
 800729c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	683a      	ldr	r2, [r7, #0]
 80072a4:	7812      	ldrb	r2, [r2, #0]
 80072a6:	0151      	lsls	r1, r2, #5
 80072a8:	693a      	ldr	r2, [r7, #16]
 80072aa:	440a      	add	r2, r1
 80072ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80072b4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	3301      	adds	r3, #1
 80072ba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f242 7210 	movw	r2, #10000	@ 0x2710
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d902      	bls.n	80072cc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	75fb      	strb	r3, [r7, #23]
          break;
 80072ca:	e00c      	b.n	80072e6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	015a      	lsls	r2, r3, #5
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	4413      	add	r3, r2
 80072d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80072e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072e4:	d0e7      	beq.n	80072b6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80072e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	371c      	adds	r7, #28
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b089      	sub	sp, #36	@ 0x24
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	4611      	mov	r1, r2
 8007300:	461a      	mov	r2, r3
 8007302:	460b      	mov	r3, r1
 8007304:	71fb      	strb	r3, [r7, #7]
 8007306:	4613      	mov	r3, r2
 8007308:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007312:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007316:	2b00      	cmp	r3, #0
 8007318:	d123      	bne.n	8007362 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800731a:	88bb      	ldrh	r3, [r7, #4]
 800731c:	3303      	adds	r3, #3
 800731e:	089b      	lsrs	r3, r3, #2
 8007320:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007322:	2300      	movs	r3, #0
 8007324:	61bb      	str	r3, [r7, #24]
 8007326:	e018      	b.n	800735a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007328:	79fb      	ldrb	r3, [r7, #7]
 800732a:	031a      	lsls	r2, r3, #12
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	4413      	add	r3, r2
 8007330:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007334:	461a      	mov	r2, r3
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	3301      	adds	r3, #1
 8007340:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	3301      	adds	r3, #1
 8007346:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007348:	69fb      	ldr	r3, [r7, #28]
 800734a:	3301      	adds	r3, #1
 800734c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	3301      	adds	r3, #1
 8007352:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007354:	69bb      	ldr	r3, [r7, #24]
 8007356:	3301      	adds	r3, #1
 8007358:	61bb      	str	r3, [r7, #24]
 800735a:	69ba      	ldr	r2, [r7, #24]
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	429a      	cmp	r2, r3
 8007360:	d3e2      	bcc.n	8007328 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	3724      	adds	r7, #36	@ 0x24
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007370:	b480      	push	{r7}
 8007372:	b08b      	sub	sp, #44	@ 0x2c
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	4613      	mov	r3, r2
 800737c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007386:	88fb      	ldrh	r3, [r7, #6]
 8007388:	089b      	lsrs	r3, r3, #2
 800738a:	b29b      	uxth	r3, r3
 800738c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800738e:	88fb      	ldrh	r3, [r7, #6]
 8007390:	f003 0303 	and.w	r3, r3, #3
 8007394:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007396:	2300      	movs	r3, #0
 8007398:	623b      	str	r3, [r7, #32]
 800739a:	e014      	b.n	80073c6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a6:	601a      	str	r2, [r3, #0]
    pDest++;
 80073a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073aa:	3301      	adds	r3, #1
 80073ac:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80073ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b0:	3301      	adds	r3, #1
 80073b2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80073b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b6:	3301      	adds	r3, #1
 80073b8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80073ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073bc:	3301      	adds	r3, #1
 80073be:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80073c0:	6a3b      	ldr	r3, [r7, #32]
 80073c2:	3301      	adds	r3, #1
 80073c4:	623b      	str	r3, [r7, #32]
 80073c6:	6a3a      	ldr	r2, [r7, #32]
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d3e6      	bcc.n	800739c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80073ce:	8bfb      	ldrh	r3, [r7, #30]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d01e      	beq.n	8007412 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80073d4:	2300      	movs	r3, #0
 80073d6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073de:	461a      	mov	r2, r3
 80073e0:	f107 0310 	add.w	r3, r7, #16
 80073e4:	6812      	ldr	r2, [r2, #0]
 80073e6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80073e8:	693a      	ldr	r2, [r7, #16]
 80073ea:	6a3b      	ldr	r3, [r7, #32]
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	00db      	lsls	r3, r3, #3
 80073f0:	fa22 f303 	lsr.w	r3, r2, r3
 80073f4:	b2da      	uxtb	r2, r3
 80073f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f8:	701a      	strb	r2, [r3, #0]
      i++;
 80073fa:	6a3b      	ldr	r3, [r7, #32]
 80073fc:	3301      	adds	r3, #1
 80073fe:	623b      	str	r3, [r7, #32]
      pDest++;
 8007400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007402:	3301      	adds	r3, #1
 8007404:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007406:	8bfb      	ldrh	r3, [r7, #30]
 8007408:	3b01      	subs	r3, #1
 800740a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800740c:	8bfb      	ldrh	r3, [r7, #30]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1ea      	bne.n	80073e8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007414:	4618      	mov	r0, r3
 8007416:	372c      	adds	r7, #44	@ 0x2c
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	785b      	ldrb	r3, [r3, #1]
 8007438:	2b01      	cmp	r3, #1
 800743a:	d12c      	bne.n	8007496 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	015a      	lsls	r2, r3, #5
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	4413      	add	r3, r2
 8007444:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	db12      	blt.n	8007474 <USB_EPSetStall+0x54>
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d00f      	beq.n	8007474 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	015a      	lsls	r2, r3, #5
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	4413      	add	r3, r2
 800745c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	68ba      	ldr	r2, [r7, #8]
 8007464:	0151      	lsls	r1, r2, #5
 8007466:	68fa      	ldr	r2, [r7, #12]
 8007468:	440a      	add	r2, r1
 800746a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800746e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007472:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	015a      	lsls	r2, r3, #5
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	4413      	add	r3, r2
 800747c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68ba      	ldr	r2, [r7, #8]
 8007484:	0151      	lsls	r1, r2, #5
 8007486:	68fa      	ldr	r2, [r7, #12]
 8007488:	440a      	add	r2, r1
 800748a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800748e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007492:	6013      	str	r3, [r2, #0]
 8007494:	e02b      	b.n	80074ee <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	015a      	lsls	r2, r3, #5
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	4413      	add	r3, r2
 800749e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	db12      	blt.n	80074ce <USB_EPSetStall+0xae>
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00f      	beq.n	80074ce <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	015a      	lsls	r2, r3, #5
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	4413      	add	r3, r2
 80074b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	68ba      	ldr	r2, [r7, #8]
 80074be:	0151      	lsls	r1, r2, #5
 80074c0:	68fa      	ldr	r2, [r7, #12]
 80074c2:	440a      	add	r2, r1
 80074c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074c8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80074cc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	015a      	lsls	r2, r3, #5
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	4413      	add	r3, r2
 80074d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	68ba      	ldr	r2, [r7, #8]
 80074de:	0151      	lsls	r1, r2, #5
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	440a      	add	r2, r1
 80074e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80074ec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3714      	adds	r7, #20
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b085      	sub	sp, #20
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	785b      	ldrb	r3, [r3, #1]
 8007514:	2b01      	cmp	r3, #1
 8007516:	d128      	bne.n	800756a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	015a      	lsls	r2, r3, #5
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	4413      	add	r3, r2
 8007520:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	68ba      	ldr	r2, [r7, #8]
 8007528:	0151      	lsls	r1, r2, #5
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	440a      	add	r2, r1
 800752e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007532:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007536:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	791b      	ldrb	r3, [r3, #4]
 800753c:	2b03      	cmp	r3, #3
 800753e:	d003      	beq.n	8007548 <USB_EPClearStall+0x4c>
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	791b      	ldrb	r3, [r3, #4]
 8007544:	2b02      	cmp	r3, #2
 8007546:	d138      	bne.n	80075ba <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	015a      	lsls	r2, r3, #5
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	4413      	add	r3, r2
 8007550:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68ba      	ldr	r2, [r7, #8]
 8007558:	0151      	lsls	r1, r2, #5
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	440a      	add	r2, r1
 800755e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007562:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007566:	6013      	str	r3, [r2, #0]
 8007568:	e027      	b.n	80075ba <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	015a      	lsls	r2, r3, #5
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	4413      	add	r3, r2
 8007572:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68ba      	ldr	r2, [r7, #8]
 800757a:	0151      	lsls	r1, r2, #5
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	440a      	add	r2, r1
 8007580:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007584:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007588:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	791b      	ldrb	r3, [r3, #4]
 800758e:	2b03      	cmp	r3, #3
 8007590:	d003      	beq.n	800759a <USB_EPClearStall+0x9e>
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	791b      	ldrb	r3, [r3, #4]
 8007596:	2b02      	cmp	r3, #2
 8007598:	d10f      	bne.n	80075ba <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	015a      	lsls	r2, r3, #5
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	4413      	add	r3, r2
 80075a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	68ba      	ldr	r2, [r7, #8]
 80075aa:	0151      	lsls	r1, r2, #5
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	440a      	add	r2, r1
 80075b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075b8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3714      	adds	r7, #20
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	460b      	mov	r3, r1
 80075d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	68fa      	ldr	r2, [r7, #12]
 80075e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80075e6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80075ea:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	78fb      	ldrb	r3, [r7, #3]
 80075f6:	011b      	lsls	r3, r3, #4
 80075f8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80075fc:	68f9      	ldr	r1, [r7, #12]
 80075fe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007602:	4313      	orrs	r3, r2
 8007604:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007606:	2300      	movs	r3, #0
}
 8007608:	4618      	mov	r0, r3
 800760a:	3714      	adds	r7, #20
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007614:	b480      	push	{r7}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68fa      	ldr	r2, [r7, #12]
 800762a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800762e:	f023 0303 	bic.w	r3, r3, #3
 8007632:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	68fa      	ldr	r2, [r7, #12]
 800763e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007642:	f023 0302 	bic.w	r3, r3, #2
 8007646:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	3714      	adds	r7, #20
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr

08007656 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007656:	b480      	push	{r7}
 8007658:	b085      	sub	sp, #20
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007670:	f023 0303 	bic.w	r3, r3, #3
 8007674:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007684:	f043 0302 	orr.w	r3, r3, #2
 8007688:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	3714      	adds	r7, #20
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	695b      	ldr	r3, [r3, #20]
 80076a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	4013      	ands	r3, r2
 80076ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80076b0:	68fb      	ldr	r3, [r7, #12]
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3714      	adds	r7, #20
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr

080076be <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80076be:	b480      	push	{r7}
 80076c0:	b085      	sub	sp, #20
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076d0:	699b      	ldr	r3, [r3, #24]
 80076d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076da:	69db      	ldr	r3, [r3, #28]
 80076dc:	68ba      	ldr	r2, [r7, #8]
 80076de:	4013      	ands	r3, r2
 80076e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	0c1b      	lsrs	r3, r3, #16
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3714      	adds	r7, #20
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr

080076f2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80076f2:	b480      	push	{r7}
 80076f4:	b085      	sub	sp, #20
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800770e:	69db      	ldr	r3, [r3, #28]
 8007710:	68ba      	ldr	r2, [r7, #8]
 8007712:	4013      	ands	r3, r2
 8007714:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	b29b      	uxth	r3, r3
}
 800771a:	4618      	mov	r0, r3
 800771c:	3714      	adds	r7, #20
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr

08007726 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007726:	b480      	push	{r7}
 8007728:	b085      	sub	sp, #20
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
 800772e:	460b      	mov	r3, r1
 8007730:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007736:	78fb      	ldrb	r3, [r7, #3]
 8007738:	015a      	lsls	r2, r3, #5
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	4413      	add	r3, r2
 800773e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800774c:	695b      	ldr	r3, [r3, #20]
 800774e:	68ba      	ldr	r2, [r7, #8]
 8007750:	4013      	ands	r3, r2
 8007752:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007754:	68bb      	ldr	r3, [r7, #8]
}
 8007756:	4618      	mov	r0, r3
 8007758:	3714      	adds	r7, #20
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr

08007762 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007762:	b480      	push	{r7}
 8007764:	b087      	sub	sp, #28
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
 800776a:	460b      	mov	r3, r1
 800776c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007784:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007786:	78fb      	ldrb	r3, [r7, #3]
 8007788:	f003 030f 	and.w	r3, r3, #15
 800778c:	68fa      	ldr	r2, [r7, #12]
 800778e:	fa22 f303 	lsr.w	r3, r2, r3
 8007792:	01db      	lsls	r3, r3, #7
 8007794:	b2db      	uxtb	r3, r3
 8007796:	693a      	ldr	r2, [r7, #16]
 8007798:	4313      	orrs	r3, r2
 800779a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800779c:	78fb      	ldrb	r3, [r7, #3]
 800779e:	015a      	lsls	r2, r3, #5
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	4413      	add	r3, r2
 80077a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	693a      	ldr	r2, [r7, #16]
 80077ac:	4013      	ands	r3, r2
 80077ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80077b0:	68bb      	ldr	r3, [r7, #8]
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	371c      	adds	r7, #28
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr

080077be <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80077be:	b480      	push	{r7}
 80077c0:	b083      	sub	sp, #12
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	695b      	ldr	r3, [r3, #20]
 80077ca:	f003 0301 	and.w	r3, r3, #1
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	370c      	adds	r7, #12
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr

080077da <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80077da:	b480      	push	{r7}
 80077dc:	b085      	sub	sp, #20
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	68fa      	ldr	r2, [r7, #12]
 80077f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077f4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80077f8:	f023 0307 	bic.w	r3, r3, #7
 80077fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	68fa      	ldr	r2, [r7, #12]
 8007808:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800780c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007810:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3714      	adds	r7, #20
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007820:	b480      	push	{r7}
 8007822:	b087      	sub	sp, #28
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	460b      	mov	r3, r1
 800782a:	607a      	str	r2, [r7, #4]
 800782c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	333c      	adds	r3, #60	@ 0x3c
 8007836:	3304      	adds	r3, #4
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	4a26      	ldr	r2, [pc, #152]	@ (80078d8 <USB_EP0_OutStart+0xb8>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d90a      	bls.n	800785a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007850:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007854:	d101      	bne.n	800785a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007856:	2300      	movs	r3, #0
 8007858:	e037      	b.n	80078ca <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007860:	461a      	mov	r2, r3
 8007862:	2300      	movs	r3, #0
 8007864:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	697a      	ldr	r2, [r7, #20]
 8007870:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007874:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007878:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007880:	691b      	ldr	r3, [r3, #16]
 8007882:	697a      	ldr	r2, [r7, #20]
 8007884:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007888:	f043 0318 	orr.w	r3, r3, #24
 800788c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007894:	691b      	ldr	r3, [r3, #16]
 8007896:	697a      	ldr	r2, [r7, #20]
 8007898:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800789c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80078a0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80078a2:	7afb      	ldrb	r3, [r7, #11]
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d10f      	bne.n	80078c8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078ae:	461a      	mov	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	697a      	ldr	r2, [r7, #20]
 80078be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078c2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80078c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	371c      	adds	r7, #28
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop
 80078d8:	4f54300a 	.word	0x4f54300a

080078dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80078dc:	b480      	push	{r7}
 80078de:	b085      	sub	sp, #20
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80078e4:	2300      	movs	r3, #0
 80078e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	3301      	adds	r3, #1
 80078ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	4a13      	ldr	r2, [pc, #76]	@ (8007940 <USB_CoreReset+0x64>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d901      	bls.n	80078fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80078f6:	2303      	movs	r3, #3
 80078f8:	e01b      	b.n	8007932 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	daf2      	bge.n	80078e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007902:	2300      	movs	r3, #0
 8007904:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	f043 0201 	orr.w	r2, r3, #1
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	3301      	adds	r3, #1
 8007916:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	4a09      	ldr	r2, [pc, #36]	@ (8007940 <USB_CoreReset+0x64>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d901      	bls.n	8007924 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007920:	2303      	movs	r3, #3
 8007922:	e006      	b.n	8007932 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	691b      	ldr	r3, [r3, #16]
 8007928:	f003 0301 	and.w	r3, r3, #1
 800792c:	2b01      	cmp	r3, #1
 800792e:	d0f0      	beq.n	8007912 <USB_CoreReset+0x36>

  return HAL_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	3714      	adds	r7, #20
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	00030d40 	.word	0x00030d40

08007944 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007948:	4904      	ldr	r1, [pc, #16]	@ (800795c <MX_FATFS_Init+0x18>)
 800794a:	4805      	ldr	r0, [pc, #20]	@ (8007960 <MX_FATFS_Init+0x1c>)
 800794c:	f002 f85a 	bl	8009a04 <FATFS_LinkDriver>
 8007950:	4603      	mov	r3, r0
 8007952:	461a      	mov	r2, r3
 8007954:	4b03      	ldr	r3, [pc, #12]	@ (8007964 <MX_FATFS_Init+0x20>)
 8007956:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007958:	bf00      	nop
 800795a:	bd80      	pop	{r7, pc}
 800795c:	200004c0 	.word	0x200004c0
 8007960:	2000000c 	.word	0x2000000c
 8007964:	200004bc 	.word	0x200004bc

08007968 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	4603      	mov	r3, r0
 8007970:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8007972:	4b06      	ldr	r3, [pc, #24]	@ (800798c <USER_initialize+0x24>)
 8007974:	2201      	movs	r2, #1
 8007976:	701a      	strb	r2, [r3, #0]
    return Stat;
 8007978:	4b04      	ldr	r3, [pc, #16]	@ (800798c <USER_initialize+0x24>)
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800797e:	4618      	mov	r0, r3
 8007980:	370c      	adds	r7, #12
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop
 800798c:	20000009 	.word	0x20000009

08007990 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	4603      	mov	r3, r0
 8007998:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800799a:	4b06      	ldr	r3, [pc, #24]	@ (80079b4 <USER_status+0x24>)
 800799c:	2201      	movs	r2, #1
 800799e:	701a      	strb	r2, [r3, #0]
    return Stat;
 80079a0:	4b04      	ldr	r3, [pc, #16]	@ (80079b4 <USER_status+0x24>)
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	370c      	adds	r7, #12
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr
 80079b2:	bf00      	nop
 80079b4:	20000009 	.word	0x20000009

080079b8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b085      	sub	sp, #20
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60b9      	str	r1, [r7, #8]
 80079c0:	607a      	str	r2, [r7, #4]
 80079c2:	603b      	str	r3, [r7, #0]
 80079c4:	4603      	mov	r3, r0
 80079c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 80079c8:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3714      	adds	r7, #20
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr

080079d6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80079d6:	b480      	push	{r7}
 80079d8:	b085      	sub	sp, #20
 80079da:	af00      	add	r7, sp, #0
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	607a      	str	r2, [r7, #4]
 80079e0:	603b      	str	r3, [r7, #0]
 80079e2:	4603      	mov	r3, r0
 80079e4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 80079e6:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3714      	adds	r7, #20
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	4603      	mov	r3, r0
 80079fc:	603a      	str	r2, [r7, #0]
 80079fe:	71fb      	strb	r3, [r7, #7]
 8007a00:	460b      	mov	r3, r1
 8007a02:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	73fb      	strb	r3, [r7, #15]
    return res;
 8007a08:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3714      	adds	r7, #20
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr
	...

08007a18 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	460b      	mov	r3, r1
 8007a22:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007a24:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007a28:	f002 fd22 	bl	800a470 <USBD_static_malloc>
 8007a2c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d109      	bne.n	8007a48 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	32b0      	adds	r2, #176	@ 0xb0
 8007a3e:	2100      	movs	r1, #0
 8007a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007a44:	2302      	movs	r3, #2
 8007a46:	e0d4      	b.n	8007bf2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007a48:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	f002 fd52 	bl	800a4f8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	32b0      	adds	r2, #176	@ 0xb0
 8007a5e:	68f9      	ldr	r1, [r7, #12]
 8007a60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	32b0      	adds	r2, #176	@ 0xb0
 8007a6e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	7c1b      	ldrb	r3, [r3, #16]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d138      	bne.n	8007af2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007a80:	4b5e      	ldr	r3, [pc, #376]	@ (8007bfc <USBD_CDC_Init+0x1e4>)
 8007a82:	7819      	ldrb	r1, [r3, #0]
 8007a84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007a88:	2202      	movs	r2, #2
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f002 fb7f 	bl	800a18e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007a90:	4b5a      	ldr	r3, [pc, #360]	@ (8007bfc <USBD_CDC_Init+0x1e4>)
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	f003 020f 	and.w	r2, r3, #15
 8007a98:	6879      	ldr	r1, [r7, #4]
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	4413      	add	r3, r2
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	440b      	add	r3, r1
 8007aa4:	3324      	adds	r3, #36	@ 0x24
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007aaa:	4b55      	ldr	r3, [pc, #340]	@ (8007c00 <USBD_CDC_Init+0x1e8>)
 8007aac:	7819      	ldrb	r1, [r3, #0]
 8007aae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007ab2:	2202      	movs	r2, #2
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f002 fb6a 	bl	800a18e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007aba:	4b51      	ldr	r3, [pc, #324]	@ (8007c00 <USBD_CDC_Init+0x1e8>)
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	f003 020f 	and.w	r2, r3, #15
 8007ac2:	6879      	ldr	r1, [r7, #4]
 8007ac4:	4613      	mov	r3, r2
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	4413      	add	r3, r2
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	440b      	add	r3, r1
 8007ace:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007ad6:	4b4b      	ldr	r3, [pc, #300]	@ (8007c04 <USBD_CDC_Init+0x1ec>)
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	f003 020f 	and.w	r2, r3, #15
 8007ade:	6879      	ldr	r1, [r7, #4]
 8007ae0:	4613      	mov	r3, r2
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	4413      	add	r3, r2
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	440b      	add	r3, r1
 8007aea:	3326      	adds	r3, #38	@ 0x26
 8007aec:	2210      	movs	r2, #16
 8007aee:	801a      	strh	r2, [r3, #0]
 8007af0:	e035      	b.n	8007b5e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007af2:	4b42      	ldr	r3, [pc, #264]	@ (8007bfc <USBD_CDC_Init+0x1e4>)
 8007af4:	7819      	ldrb	r1, [r3, #0]
 8007af6:	2340      	movs	r3, #64	@ 0x40
 8007af8:	2202      	movs	r2, #2
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f002 fb47 	bl	800a18e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007b00:	4b3e      	ldr	r3, [pc, #248]	@ (8007bfc <USBD_CDC_Init+0x1e4>)
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	f003 020f 	and.w	r2, r3, #15
 8007b08:	6879      	ldr	r1, [r7, #4]
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	4413      	add	r3, r2
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	440b      	add	r3, r1
 8007b14:	3324      	adds	r3, #36	@ 0x24
 8007b16:	2201      	movs	r2, #1
 8007b18:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007b1a:	4b39      	ldr	r3, [pc, #228]	@ (8007c00 <USBD_CDC_Init+0x1e8>)
 8007b1c:	7819      	ldrb	r1, [r3, #0]
 8007b1e:	2340      	movs	r3, #64	@ 0x40
 8007b20:	2202      	movs	r2, #2
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f002 fb33 	bl	800a18e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007b28:	4b35      	ldr	r3, [pc, #212]	@ (8007c00 <USBD_CDC_Init+0x1e8>)
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	f003 020f 	and.w	r2, r3, #15
 8007b30:	6879      	ldr	r1, [r7, #4]
 8007b32:	4613      	mov	r3, r2
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	4413      	add	r3, r2
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	440b      	add	r3, r1
 8007b3c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007b40:	2201      	movs	r2, #1
 8007b42:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007b44:	4b2f      	ldr	r3, [pc, #188]	@ (8007c04 <USBD_CDC_Init+0x1ec>)
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	f003 020f 	and.w	r2, r3, #15
 8007b4c:	6879      	ldr	r1, [r7, #4]
 8007b4e:	4613      	mov	r3, r2
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	4413      	add	r3, r2
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	440b      	add	r3, r1
 8007b58:	3326      	adds	r3, #38	@ 0x26
 8007b5a:	2210      	movs	r2, #16
 8007b5c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007b5e:	4b29      	ldr	r3, [pc, #164]	@ (8007c04 <USBD_CDC_Init+0x1ec>)
 8007b60:	7819      	ldrb	r1, [r3, #0]
 8007b62:	2308      	movs	r3, #8
 8007b64:	2203      	movs	r2, #3
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f002 fb11 	bl	800a18e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007b6c:	4b25      	ldr	r3, [pc, #148]	@ (8007c04 <USBD_CDC_Init+0x1ec>)
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	f003 020f 	and.w	r2, r3, #15
 8007b74:	6879      	ldr	r1, [r7, #4]
 8007b76:	4613      	mov	r3, r2
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	4413      	add	r3, r2
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	440b      	add	r3, r1
 8007b80:	3324      	adds	r3, #36	@ 0x24
 8007b82:	2201      	movs	r2, #1
 8007b84:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	33b0      	adds	r3, #176	@ 0xb0
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	4413      	add	r3, r2
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d101      	bne.n	8007bc0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007bbc:	2302      	movs	r3, #2
 8007bbe:	e018      	b.n	8007bf2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	7c1b      	ldrb	r3, [r3, #16]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d10a      	bne.n	8007bde <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007bc8:	4b0d      	ldr	r3, [pc, #52]	@ (8007c00 <USBD_CDC_Init+0x1e8>)
 8007bca:	7819      	ldrb	r1, [r3, #0]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007bd2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f002 fbc8 	bl	800a36c <USBD_LL_PrepareReceive>
 8007bdc:	e008      	b.n	8007bf0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007bde:	4b08      	ldr	r3, [pc, #32]	@ (8007c00 <USBD_CDC_Init+0x1e8>)
 8007be0:	7819      	ldrb	r1, [r3, #0]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007be8:	2340      	movs	r3, #64	@ 0x40
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f002 fbbe 	bl	800a36c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007bf0:	2300      	movs	r3, #0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3710      	adds	r7, #16
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	200000a7 	.word	0x200000a7
 8007c00:	200000a8 	.word	0x200000a8
 8007c04:	200000a9 	.word	0x200000a9

08007c08 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	460b      	mov	r3, r1
 8007c12:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007c14:	4b3a      	ldr	r3, [pc, #232]	@ (8007d00 <USBD_CDC_DeInit+0xf8>)
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	4619      	mov	r1, r3
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f002 fadd 	bl	800a1da <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007c20:	4b37      	ldr	r3, [pc, #220]	@ (8007d00 <USBD_CDC_DeInit+0xf8>)
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	f003 020f 	and.w	r2, r3, #15
 8007c28:	6879      	ldr	r1, [r7, #4]
 8007c2a:	4613      	mov	r3, r2
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	4413      	add	r3, r2
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	440b      	add	r3, r1
 8007c34:	3324      	adds	r3, #36	@ 0x24
 8007c36:	2200      	movs	r2, #0
 8007c38:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007c3a:	4b32      	ldr	r3, [pc, #200]	@ (8007d04 <USBD_CDC_DeInit+0xfc>)
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	4619      	mov	r1, r3
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f002 faca 	bl	800a1da <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007c46:	4b2f      	ldr	r3, [pc, #188]	@ (8007d04 <USBD_CDC_DeInit+0xfc>)
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	f003 020f 	and.w	r2, r3, #15
 8007c4e:	6879      	ldr	r1, [r7, #4]
 8007c50:	4613      	mov	r3, r2
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	4413      	add	r3, r2
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	440b      	add	r3, r1
 8007c5a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007c5e:	2200      	movs	r2, #0
 8007c60:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007c62:	4b29      	ldr	r3, [pc, #164]	@ (8007d08 <USBD_CDC_DeInit+0x100>)
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	4619      	mov	r1, r3
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f002 fab6 	bl	800a1da <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007c6e:	4b26      	ldr	r3, [pc, #152]	@ (8007d08 <USBD_CDC_DeInit+0x100>)
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	f003 020f 	and.w	r2, r3, #15
 8007c76:	6879      	ldr	r1, [r7, #4]
 8007c78:	4613      	mov	r3, r2
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	4413      	add	r3, r2
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	440b      	add	r3, r1
 8007c82:	3324      	adds	r3, #36	@ 0x24
 8007c84:	2200      	movs	r2, #0
 8007c86:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007c88:	4b1f      	ldr	r3, [pc, #124]	@ (8007d08 <USBD_CDC_DeInit+0x100>)
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	f003 020f 	and.w	r2, r3, #15
 8007c90:	6879      	ldr	r1, [r7, #4]
 8007c92:	4613      	mov	r3, r2
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	4413      	add	r3, r2
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	440b      	add	r3, r1
 8007c9c:	3326      	adds	r3, #38	@ 0x26
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	32b0      	adds	r2, #176	@ 0xb0
 8007cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d01f      	beq.n	8007cf4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	33b0      	adds	r3, #176	@ 0xb0
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	4413      	add	r3, r2
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	32b0      	adds	r2, #176	@ 0xb0
 8007cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f002 fbd8 	bl	800a48c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	32b0      	adds	r2, #176	@ 0xb0
 8007ce6:	2100      	movs	r1, #0
 8007ce8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3708      	adds	r7, #8
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	200000a7 	.word	0x200000a7
 8007d04:	200000a8 	.word	0x200000a8
 8007d08:	200000a9 	.word	0x200000a9

08007d0c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b086      	sub	sp, #24
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	32b0      	adds	r2, #176	@ 0xb0
 8007d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d24:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007d26:	2300      	movs	r3, #0
 8007d28:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d101      	bne.n	8007d3c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007d38:	2303      	movs	r3, #3
 8007d3a:	e0bf      	b.n	8007ebc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d050      	beq.n	8007dea <USBD_CDC_Setup+0xde>
 8007d48:	2b20      	cmp	r3, #32
 8007d4a:	f040 80af 	bne.w	8007eac <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	88db      	ldrh	r3, [r3, #6]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d03a      	beq.n	8007dcc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	b25b      	sxtb	r3, r3
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	da1b      	bge.n	8007d98 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	33b0      	adds	r3, #176	@ 0xb0
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	4413      	add	r3, r2
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	683a      	ldr	r2, [r7, #0]
 8007d74:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007d76:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007d78:	683a      	ldr	r2, [r7, #0]
 8007d7a:	88d2      	ldrh	r2, [r2, #6]
 8007d7c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	88db      	ldrh	r3, [r3, #6]
 8007d82:	2b07      	cmp	r3, #7
 8007d84:	bf28      	it	cs
 8007d86:	2307      	movcs	r3, #7
 8007d88:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	89fa      	ldrh	r2, [r7, #14]
 8007d8e:	4619      	mov	r1, r3
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f001 fd6b 	bl	800986c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007d96:	e090      	b.n	8007eba <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	785a      	ldrb	r2, [r3, #1]
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	88db      	ldrh	r3, [r3, #6]
 8007da6:	2b3f      	cmp	r3, #63	@ 0x3f
 8007da8:	d803      	bhi.n	8007db2 <USBD_CDC_Setup+0xa6>
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	88db      	ldrh	r3, [r3, #6]
 8007dae:	b2da      	uxtb	r2, r3
 8007db0:	e000      	b.n	8007db4 <USBD_CDC_Setup+0xa8>
 8007db2:	2240      	movs	r2, #64	@ 0x40
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007dba:	6939      	ldr	r1, [r7, #16]
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f001 fd7d 	bl	80098c4 <USBD_CtlPrepareRx>
      break;
 8007dca:	e076      	b.n	8007eba <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	33b0      	adds	r3, #176	@ 0xb0
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	4413      	add	r3, r2
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	683a      	ldr	r2, [r7, #0]
 8007de0:	7850      	ldrb	r0, [r2, #1]
 8007de2:	2200      	movs	r2, #0
 8007de4:	6839      	ldr	r1, [r7, #0]
 8007de6:	4798      	blx	r3
      break;
 8007de8:	e067      	b.n	8007eba <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	785b      	ldrb	r3, [r3, #1]
 8007dee:	2b0b      	cmp	r3, #11
 8007df0:	d851      	bhi.n	8007e96 <USBD_CDC_Setup+0x18a>
 8007df2:	a201      	add	r2, pc, #4	@ (adr r2, 8007df8 <USBD_CDC_Setup+0xec>)
 8007df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df8:	08007e29 	.word	0x08007e29
 8007dfc:	08007ea5 	.word	0x08007ea5
 8007e00:	08007e97 	.word	0x08007e97
 8007e04:	08007e97 	.word	0x08007e97
 8007e08:	08007e97 	.word	0x08007e97
 8007e0c:	08007e97 	.word	0x08007e97
 8007e10:	08007e97 	.word	0x08007e97
 8007e14:	08007e97 	.word	0x08007e97
 8007e18:	08007e97 	.word	0x08007e97
 8007e1c:	08007e97 	.word	0x08007e97
 8007e20:	08007e53 	.word	0x08007e53
 8007e24:	08007e7d 	.word	0x08007e7d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	2b03      	cmp	r3, #3
 8007e32:	d107      	bne.n	8007e44 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007e34:	f107 030a 	add.w	r3, r7, #10
 8007e38:	2202      	movs	r2, #2
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f001 fd15 	bl	800986c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e42:	e032      	b.n	8007eaa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007e44:	6839      	ldr	r1, [r7, #0]
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f001 fc9f 	bl	800978a <USBD_CtlError>
            ret = USBD_FAIL;
 8007e4c:	2303      	movs	r3, #3
 8007e4e:	75fb      	strb	r3, [r7, #23]
          break;
 8007e50:	e02b      	b.n	8007eaa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	2b03      	cmp	r3, #3
 8007e5c:	d107      	bne.n	8007e6e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007e5e:	f107 030d 	add.w	r3, r7, #13
 8007e62:	2201      	movs	r2, #1
 8007e64:	4619      	mov	r1, r3
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f001 fd00 	bl	800986c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e6c:	e01d      	b.n	8007eaa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007e6e:	6839      	ldr	r1, [r7, #0]
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f001 fc8a 	bl	800978a <USBD_CtlError>
            ret = USBD_FAIL;
 8007e76:	2303      	movs	r3, #3
 8007e78:	75fb      	strb	r3, [r7, #23]
          break;
 8007e7a:	e016      	b.n	8007eaa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	2b03      	cmp	r3, #3
 8007e86:	d00f      	beq.n	8007ea8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007e88:	6839      	ldr	r1, [r7, #0]
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f001 fc7d 	bl	800978a <USBD_CtlError>
            ret = USBD_FAIL;
 8007e90:	2303      	movs	r3, #3
 8007e92:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007e94:	e008      	b.n	8007ea8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007e96:	6839      	ldr	r1, [r7, #0]
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f001 fc76 	bl	800978a <USBD_CtlError>
          ret = USBD_FAIL;
 8007e9e:	2303      	movs	r3, #3
 8007ea0:	75fb      	strb	r3, [r7, #23]
          break;
 8007ea2:	e002      	b.n	8007eaa <USBD_CDC_Setup+0x19e>
          break;
 8007ea4:	bf00      	nop
 8007ea6:	e008      	b.n	8007eba <USBD_CDC_Setup+0x1ae>
          break;
 8007ea8:	bf00      	nop
      }
      break;
 8007eaa:	e006      	b.n	8007eba <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007eac:	6839      	ldr	r1, [r7, #0]
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f001 fc6b 	bl	800978a <USBD_CtlError>
      ret = USBD_FAIL;
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	75fb      	strb	r3, [r7, #23]
      break;
 8007eb8:	bf00      	nop
  }

  return (uint8_t)ret;
 8007eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3718      	adds	r7, #24
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	460b      	mov	r3, r1
 8007ece:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007ed6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	32b0      	adds	r2, #176	@ 0xb0
 8007ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d101      	bne.n	8007eee <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007eea:	2303      	movs	r3, #3
 8007eec:	e065      	b.n	8007fba <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	32b0      	adds	r2, #176	@ 0xb0
 8007ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007efc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007efe:	78fb      	ldrb	r3, [r7, #3]
 8007f00:	f003 020f 	and.w	r2, r3, #15
 8007f04:	6879      	ldr	r1, [r7, #4]
 8007f06:	4613      	mov	r3, r2
 8007f08:	009b      	lsls	r3, r3, #2
 8007f0a:	4413      	add	r3, r2
 8007f0c:	009b      	lsls	r3, r3, #2
 8007f0e:	440b      	add	r3, r1
 8007f10:	3318      	adds	r3, #24
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d02f      	beq.n	8007f78 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007f18:	78fb      	ldrb	r3, [r7, #3]
 8007f1a:	f003 020f 	and.w	r2, r3, #15
 8007f1e:	6879      	ldr	r1, [r7, #4]
 8007f20:	4613      	mov	r3, r2
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	4413      	add	r3, r2
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	440b      	add	r3, r1
 8007f2a:	3318      	adds	r3, #24
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	78fb      	ldrb	r3, [r7, #3]
 8007f30:	f003 010f 	and.w	r1, r3, #15
 8007f34:	68f8      	ldr	r0, [r7, #12]
 8007f36:	460b      	mov	r3, r1
 8007f38:	00db      	lsls	r3, r3, #3
 8007f3a:	440b      	add	r3, r1
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	4403      	add	r3, r0
 8007f40:	3348      	adds	r3, #72	@ 0x48
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	fbb2 f1f3 	udiv	r1, r2, r3
 8007f48:	fb01 f303 	mul.w	r3, r1, r3
 8007f4c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d112      	bne.n	8007f78 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007f52:	78fb      	ldrb	r3, [r7, #3]
 8007f54:	f003 020f 	and.w	r2, r3, #15
 8007f58:	6879      	ldr	r1, [r7, #4]
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	4413      	add	r3, r2
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	440b      	add	r3, r1
 8007f64:	3318      	adds	r3, #24
 8007f66:	2200      	movs	r2, #0
 8007f68:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007f6a:	78f9      	ldrb	r1, [r7, #3]
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	2200      	movs	r2, #0
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f002 f9da 	bl	800a32a <USBD_LL_Transmit>
 8007f76:	e01f      	b.n	8007fb8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	33b0      	adds	r3, #176	@ 0xb0
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	4413      	add	r3, r2
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	691b      	ldr	r3, [r3, #16]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d010      	beq.n	8007fb8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	33b0      	adds	r3, #176	@ 0xb0
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	4413      	add	r3, r2
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	691b      	ldr	r3, [r3, #16]
 8007fa8:	68ba      	ldr	r2, [r7, #8]
 8007faa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007fae:	68ba      	ldr	r2, [r7, #8]
 8007fb0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007fb4:	78fa      	ldrb	r2, [r7, #3]
 8007fb6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3710      	adds	r7, #16
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b084      	sub	sp, #16
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
 8007fca:	460b      	mov	r3, r1
 8007fcc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	32b0      	adds	r2, #176	@ 0xb0
 8007fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fdc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	32b0      	adds	r2, #176	@ 0xb0
 8007fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d101      	bne.n	8007ff4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007ff0:	2303      	movs	r3, #3
 8007ff2:	e01a      	b.n	800802a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007ff4:	78fb      	ldrb	r3, [r7, #3]
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f002 f9d8 	bl	800a3ae <USBD_LL_GetRxDataSize>
 8007ffe:	4602      	mov	r2, r0
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	33b0      	adds	r3, #176	@ 0xb0
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	4413      	add	r3, r2
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	68fa      	ldr	r2, [r7, #12]
 800801a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800801e:	68fa      	ldr	r2, [r7, #12]
 8008020:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008024:	4611      	mov	r1, r2
 8008026:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	3710      	adds	r7, #16
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}

08008032 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008032:	b580      	push	{r7, lr}
 8008034:	b084      	sub	sp, #16
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	32b0      	adds	r2, #176	@ 0xb0
 8008044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008048:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d101      	bne.n	8008054 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008050:	2303      	movs	r3, #3
 8008052:	e024      	b.n	800809e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	33b0      	adds	r3, #176	@ 0xb0
 800805e:	009b      	lsls	r3, r3, #2
 8008060:	4413      	add	r3, r2
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d019      	beq.n	800809c <USBD_CDC_EP0_RxReady+0x6a>
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800806e:	2bff      	cmp	r3, #255	@ 0xff
 8008070:	d014      	beq.n	800809c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	33b0      	adds	r3, #176	@ 0xb0
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	4413      	add	r3, r2
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	68fa      	ldr	r2, [r7, #12]
 8008086:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800808a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800808c:	68fa      	ldr	r2, [r7, #12]
 800808e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008092:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	22ff      	movs	r2, #255	@ 0xff
 8008098:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3710      	adds	r7, #16
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
	...

080080a8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b086      	sub	sp, #24
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80080b0:	2182      	movs	r1, #130	@ 0x82
 80080b2:	4818      	ldr	r0, [pc, #96]	@ (8008114 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80080b4:	f000 fd09 	bl	8008aca <USBD_GetEpDesc>
 80080b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80080ba:	2101      	movs	r1, #1
 80080bc:	4815      	ldr	r0, [pc, #84]	@ (8008114 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80080be:	f000 fd04 	bl	8008aca <USBD_GetEpDesc>
 80080c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80080c4:	2181      	movs	r1, #129	@ 0x81
 80080c6:	4813      	ldr	r0, [pc, #76]	@ (8008114 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80080c8:	f000 fcff 	bl	8008aca <USBD_GetEpDesc>
 80080cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d002      	beq.n	80080da <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	2210      	movs	r2, #16
 80080d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d006      	beq.n	80080ee <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80080e8:	711a      	strb	r2, [r3, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d006      	beq.n	8008102 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2200      	movs	r2, #0
 80080f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80080fc:	711a      	strb	r2, [r3, #4]
 80080fe:	2200      	movs	r2, #0
 8008100:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2243      	movs	r2, #67	@ 0x43
 8008106:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008108:	4b02      	ldr	r3, [pc, #8]	@ (8008114 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800810a:	4618      	mov	r0, r3
 800810c:	3718      	adds	r7, #24
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop
 8008114:	20000064 	.word	0x20000064

08008118 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b086      	sub	sp, #24
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008120:	2182      	movs	r1, #130	@ 0x82
 8008122:	4818      	ldr	r0, [pc, #96]	@ (8008184 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008124:	f000 fcd1 	bl	8008aca <USBD_GetEpDesc>
 8008128:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800812a:	2101      	movs	r1, #1
 800812c:	4815      	ldr	r0, [pc, #84]	@ (8008184 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800812e:	f000 fccc 	bl	8008aca <USBD_GetEpDesc>
 8008132:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008134:	2181      	movs	r1, #129	@ 0x81
 8008136:	4813      	ldr	r0, [pc, #76]	@ (8008184 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008138:	f000 fcc7 	bl	8008aca <USBD_GetEpDesc>
 800813c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d002      	beq.n	800814a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	2210      	movs	r2, #16
 8008148:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d006      	beq.n	800815e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	2200      	movs	r2, #0
 8008154:	711a      	strb	r2, [r3, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	f042 0202 	orr.w	r2, r2, #2
 800815c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d006      	beq.n	8008172 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2200      	movs	r2, #0
 8008168:	711a      	strb	r2, [r3, #4]
 800816a:	2200      	movs	r2, #0
 800816c:	f042 0202 	orr.w	r2, r2, #2
 8008170:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2243      	movs	r2, #67	@ 0x43
 8008176:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008178:	4b02      	ldr	r3, [pc, #8]	@ (8008184 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800817a:	4618      	mov	r0, r3
 800817c:	3718      	adds	r7, #24
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	20000064 	.word	0x20000064

08008188 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b086      	sub	sp, #24
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008190:	2182      	movs	r1, #130	@ 0x82
 8008192:	4818      	ldr	r0, [pc, #96]	@ (80081f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008194:	f000 fc99 	bl	8008aca <USBD_GetEpDesc>
 8008198:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800819a:	2101      	movs	r1, #1
 800819c:	4815      	ldr	r0, [pc, #84]	@ (80081f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800819e:	f000 fc94 	bl	8008aca <USBD_GetEpDesc>
 80081a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80081a4:	2181      	movs	r1, #129	@ 0x81
 80081a6:	4813      	ldr	r0, [pc, #76]	@ (80081f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80081a8:	f000 fc8f 	bl	8008aca <USBD_GetEpDesc>
 80081ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d002      	beq.n	80081ba <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	2210      	movs	r2, #16
 80081b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d006      	beq.n	80081ce <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	2200      	movs	r2, #0
 80081c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80081c8:	711a      	strb	r2, [r3, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d006      	beq.n	80081e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80081dc:	711a      	strb	r2, [r3, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2243      	movs	r2, #67	@ 0x43
 80081e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80081e8:	4b02      	ldr	r3, [pc, #8]	@ (80081f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3718      	adds	r7, #24
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	20000064 	.word	0x20000064

080081f8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	220a      	movs	r2, #10
 8008204:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008206:	4b03      	ldr	r3, [pc, #12]	@ (8008214 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008208:	4618      	mov	r0, r3
 800820a:	370c      	adds	r7, #12
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr
 8008214:	20000020 	.word	0x20000020

08008218 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008218:	b480      	push	{r7}
 800821a:	b083      	sub	sp, #12
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d101      	bne.n	800822c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008228:	2303      	movs	r3, #3
 800822a:	e009      	b.n	8008240 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	33b0      	adds	r3, #176	@ 0xb0
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	4413      	add	r3, r2
 800823a:	683a      	ldr	r2, [r7, #0]
 800823c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800823e:	2300      	movs	r3, #0
}
 8008240:	4618      	mov	r0, r3
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800824c:	b480      	push	{r7}
 800824e:	b087      	sub	sp, #28
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	32b0      	adds	r2, #176	@ 0xb0
 8008262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008266:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d101      	bne.n	8008272 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800826e:	2303      	movs	r3, #3
 8008270:	e008      	b.n	8008284 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	68ba      	ldr	r2, [r7, #8]
 8008276:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008282:	2300      	movs	r3, #0
}
 8008284:	4618      	mov	r0, r3
 8008286:	371c      	adds	r7, #28
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008290:	b480      	push	{r7}
 8008292:	b085      	sub	sp, #20
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	32b0      	adds	r2, #176	@ 0xb0
 80082a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082a8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d101      	bne.n	80082b4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80082b0:	2303      	movs	r3, #3
 80082b2:	e004      	b.n	80082be <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	683a      	ldr	r2, [r7, #0]
 80082b8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3714      	adds	r7, #20
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr
	...

080082cc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b084      	sub	sp, #16
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	32b0      	adds	r2, #176	@ 0xb0
 80082de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082e2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	32b0      	adds	r2, #176	@ 0xb0
 80082ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d101      	bne.n	80082fa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80082f6:	2303      	movs	r3, #3
 80082f8:	e018      	b.n	800832c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	7c1b      	ldrb	r3, [r3, #16]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d10a      	bne.n	8008318 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008302:	4b0c      	ldr	r3, [pc, #48]	@ (8008334 <USBD_CDC_ReceivePacket+0x68>)
 8008304:	7819      	ldrb	r1, [r3, #0]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800830c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f002 f82b 	bl	800a36c <USBD_LL_PrepareReceive>
 8008316:	e008      	b.n	800832a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008318:	4b06      	ldr	r3, [pc, #24]	@ (8008334 <USBD_CDC_ReceivePacket+0x68>)
 800831a:	7819      	ldrb	r1, [r3, #0]
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008322:	2340      	movs	r3, #64	@ 0x40
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f002 f821 	bl	800a36c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800832a:	2300      	movs	r3, #0
}
 800832c:	4618      	mov	r0, r3
 800832e:	3710      	adds	r7, #16
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}
 8008334:	200000a8 	.word	0x200000a8

08008338 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b086      	sub	sp, #24
 800833c:	af00      	add	r7, sp, #0
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	4613      	mov	r3, r2
 8008344:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d101      	bne.n	8008350 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800834c:	2303      	movs	r3, #3
 800834e:	e01f      	b.n	8008390 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2200      	movs	r2, #0
 8008354:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2200      	movs	r2, #0
 800835c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2200      	movs	r2, #0
 8008364:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d003      	beq.n	8008376 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	68ba      	ldr	r2, [r7, #8]
 8008372:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2201      	movs	r2, #1
 800837a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	79fa      	ldrb	r2, [r7, #7]
 8008382:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008384:	68f8      	ldr	r0, [r7, #12]
 8008386:	f001 fe9b 	bl	800a0c0 <USBD_LL_Init>
 800838a:	4603      	mov	r3, r0
 800838c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800838e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008390:	4618      	mov	r0, r3
 8008392:	3718      	adds	r7, #24
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80083a2:	2300      	movs	r3, #0
 80083a4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d101      	bne.n	80083b0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80083ac:	2303      	movs	r3, #3
 80083ae:	e025      	b.n	80083fc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	683a      	ldr	r2, [r7, #0]
 80083b4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	32ae      	adds	r2, #174	@ 0xae
 80083c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d00f      	beq.n	80083ec <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	32ae      	adds	r2, #174	@ 0xae
 80083d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083dc:	f107 020e 	add.w	r2, r7, #14
 80083e0:	4610      	mov	r0, r2
 80083e2:	4798      	blx	r3
 80083e4:	4602      	mov	r2, r0
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80083f2:	1c5a      	adds	r2, r3, #1
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80083fa:	2300      	movs	r3, #0
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3710      	adds	r7, #16
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f001 fea3 	bl	800a158 <USBD_LL_Start>
 8008412:	4603      	mov	r3, r0
}
 8008414:	4618      	mov	r0, r3
 8008416:	3708      	adds	r7, #8
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800841c:	b480      	push	{r7}
 800841e:	b083      	sub	sp, #12
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008424:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008426:	4618      	mov	r0, r3
 8008428:	370c      	adds	r7, #12
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr

08008432 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008432:	b580      	push	{r7, lr}
 8008434:	b084      	sub	sp, #16
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
 800843a:	460b      	mov	r3, r1
 800843c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800843e:	2300      	movs	r3, #0
 8008440:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008448:	2b00      	cmp	r3, #0
 800844a:	d009      	beq.n	8008460 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	78fa      	ldrb	r2, [r7, #3]
 8008456:	4611      	mov	r1, r2
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	4798      	blx	r3
 800845c:	4603      	mov	r3, r0
 800845e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008460:	7bfb      	ldrb	r3, [r7, #15]
}
 8008462:	4618      	mov	r0, r3
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b084      	sub	sp, #16
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
 8008472:	460b      	mov	r3, r1
 8008474:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008476:	2300      	movs	r3, #0
 8008478:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	78fa      	ldrb	r2, [r7, #3]
 8008484:	4611      	mov	r1, r2
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	4798      	blx	r3
 800848a:	4603      	mov	r3, r0
 800848c:	2b00      	cmp	r3, #0
 800848e:	d001      	beq.n	8008494 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008490:	2303      	movs	r3, #3
 8008492:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008494:	7bfb      	ldrb	r3, [r7, #15]
}
 8008496:	4618      	mov	r0, r3
 8008498:	3710      	adds	r7, #16
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}

0800849e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800849e:	b580      	push	{r7, lr}
 80084a0:	b084      	sub	sp, #16
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	6078      	str	r0, [r7, #4]
 80084a6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80084ae:	6839      	ldr	r1, [r7, #0]
 80084b0:	4618      	mov	r0, r3
 80084b2:	f001 f930 	bl	8009716 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2201      	movs	r2, #1
 80084ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80084c4:	461a      	mov	r2, r3
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80084d2:	f003 031f 	and.w	r3, r3, #31
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	d01a      	beq.n	8008510 <USBD_LL_SetupStage+0x72>
 80084da:	2b02      	cmp	r3, #2
 80084dc:	d822      	bhi.n	8008524 <USBD_LL_SetupStage+0x86>
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d002      	beq.n	80084e8 <USBD_LL_SetupStage+0x4a>
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d00a      	beq.n	80084fc <USBD_LL_SetupStage+0x5e>
 80084e6:	e01d      	b.n	8008524 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80084ee:	4619      	mov	r1, r3
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 fb5d 	bl	8008bb0 <USBD_StdDevReq>
 80084f6:	4603      	mov	r3, r0
 80084f8:	73fb      	strb	r3, [r7, #15]
      break;
 80084fa:	e020      	b.n	800853e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008502:	4619      	mov	r1, r3
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 fbc5 	bl	8008c94 <USBD_StdItfReq>
 800850a:	4603      	mov	r3, r0
 800850c:	73fb      	strb	r3, [r7, #15]
      break;
 800850e:	e016      	b.n	800853e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008516:	4619      	mov	r1, r3
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 fc27 	bl	8008d6c <USBD_StdEPReq>
 800851e:	4603      	mov	r3, r0
 8008520:	73fb      	strb	r3, [r7, #15]
      break;
 8008522:	e00c      	b.n	800853e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800852a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800852e:	b2db      	uxtb	r3, r3
 8008530:	4619      	mov	r1, r3
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f001 fe70 	bl	800a218 <USBD_LL_StallEP>
 8008538:	4603      	mov	r3, r0
 800853a:	73fb      	strb	r3, [r7, #15]
      break;
 800853c:	bf00      	nop
  }

  return ret;
 800853e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008540:	4618      	mov	r0, r3
 8008542:	3710      	adds	r7, #16
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b086      	sub	sp, #24
 800854c:	af00      	add	r7, sp, #0
 800854e:	60f8      	str	r0, [r7, #12]
 8008550:	460b      	mov	r3, r1
 8008552:	607a      	str	r2, [r7, #4]
 8008554:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008556:	2300      	movs	r3, #0
 8008558:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800855a:	7afb      	ldrb	r3, [r7, #11]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d16e      	bne.n	800863e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008566:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800856e:	2b03      	cmp	r3, #3
 8008570:	f040 8098 	bne.w	80086a4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	689a      	ldr	r2, [r3, #8]
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	429a      	cmp	r2, r3
 800857e:	d913      	bls.n	80085a8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	689a      	ldr	r2, [r3, #8]
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	68db      	ldr	r3, [r3, #12]
 8008588:	1ad2      	subs	r2, r2, r3
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	68da      	ldr	r2, [r3, #12]
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	4293      	cmp	r3, r2
 8008598:	bf28      	it	cs
 800859a:	4613      	movcs	r3, r2
 800859c:	461a      	mov	r2, r3
 800859e:	6879      	ldr	r1, [r7, #4]
 80085a0:	68f8      	ldr	r0, [r7, #12]
 80085a2:	f001 f9ac 	bl	80098fe <USBD_CtlContinueRx>
 80085a6:	e07d      	b.n	80086a4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80085ae:	f003 031f 	and.w	r3, r3, #31
 80085b2:	2b02      	cmp	r3, #2
 80085b4:	d014      	beq.n	80085e0 <USBD_LL_DataOutStage+0x98>
 80085b6:	2b02      	cmp	r3, #2
 80085b8:	d81d      	bhi.n	80085f6 <USBD_LL_DataOutStage+0xae>
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d002      	beq.n	80085c4 <USBD_LL_DataOutStage+0x7c>
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d003      	beq.n	80085ca <USBD_LL_DataOutStage+0x82>
 80085c2:	e018      	b.n	80085f6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80085c4:	2300      	movs	r3, #0
 80085c6:	75bb      	strb	r3, [r7, #22]
            break;
 80085c8:	e018      	b.n	80085fc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	4619      	mov	r1, r3
 80085d4:	68f8      	ldr	r0, [r7, #12]
 80085d6:	f000 fa5e 	bl	8008a96 <USBD_CoreFindIF>
 80085da:	4603      	mov	r3, r0
 80085dc:	75bb      	strb	r3, [r7, #22]
            break;
 80085de:	e00d      	b.n	80085fc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	4619      	mov	r1, r3
 80085ea:	68f8      	ldr	r0, [r7, #12]
 80085ec:	f000 fa60 	bl	8008ab0 <USBD_CoreFindEP>
 80085f0:	4603      	mov	r3, r0
 80085f2:	75bb      	strb	r3, [r7, #22]
            break;
 80085f4:	e002      	b.n	80085fc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80085f6:	2300      	movs	r3, #0
 80085f8:	75bb      	strb	r3, [r7, #22]
            break;
 80085fa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80085fc:	7dbb      	ldrb	r3, [r7, #22]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d119      	bne.n	8008636 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008608:	b2db      	uxtb	r3, r3
 800860a:	2b03      	cmp	r3, #3
 800860c:	d113      	bne.n	8008636 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800860e:	7dba      	ldrb	r2, [r7, #22]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	32ae      	adds	r2, #174	@ 0xae
 8008614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008618:	691b      	ldr	r3, [r3, #16]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d00b      	beq.n	8008636 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800861e:	7dba      	ldrb	r2, [r7, #22]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008626:	7dba      	ldrb	r2, [r7, #22]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	32ae      	adds	r2, #174	@ 0xae
 800862c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008630:	691b      	ldr	r3, [r3, #16]
 8008632:	68f8      	ldr	r0, [r7, #12]
 8008634:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008636:	68f8      	ldr	r0, [r7, #12]
 8008638:	f001 f972 	bl	8009920 <USBD_CtlSendStatus>
 800863c:	e032      	b.n	80086a4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800863e:	7afb      	ldrb	r3, [r7, #11]
 8008640:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008644:	b2db      	uxtb	r3, r3
 8008646:	4619      	mov	r1, r3
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f000 fa31 	bl	8008ab0 <USBD_CoreFindEP>
 800864e:	4603      	mov	r3, r0
 8008650:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008652:	7dbb      	ldrb	r3, [r7, #22]
 8008654:	2bff      	cmp	r3, #255	@ 0xff
 8008656:	d025      	beq.n	80086a4 <USBD_LL_DataOutStage+0x15c>
 8008658:	7dbb      	ldrb	r3, [r7, #22]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d122      	bne.n	80086a4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008664:	b2db      	uxtb	r3, r3
 8008666:	2b03      	cmp	r3, #3
 8008668:	d117      	bne.n	800869a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800866a:	7dba      	ldrb	r2, [r7, #22]
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	32ae      	adds	r2, #174	@ 0xae
 8008670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008674:	699b      	ldr	r3, [r3, #24]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d00f      	beq.n	800869a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800867a:	7dba      	ldrb	r2, [r7, #22]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008682:	7dba      	ldrb	r2, [r7, #22]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	32ae      	adds	r2, #174	@ 0xae
 8008688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800868c:	699b      	ldr	r3, [r3, #24]
 800868e:	7afa      	ldrb	r2, [r7, #11]
 8008690:	4611      	mov	r1, r2
 8008692:	68f8      	ldr	r0, [r7, #12]
 8008694:	4798      	blx	r3
 8008696:	4603      	mov	r3, r0
 8008698:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800869a:	7dfb      	ldrb	r3, [r7, #23]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d001      	beq.n	80086a4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80086a0:	7dfb      	ldrb	r3, [r7, #23]
 80086a2:	e000      	b.n	80086a6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3718      	adds	r7, #24
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b086      	sub	sp, #24
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	60f8      	str	r0, [r7, #12]
 80086b6:	460b      	mov	r3, r1
 80086b8:	607a      	str	r2, [r7, #4]
 80086ba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80086bc:	7afb      	ldrb	r3, [r7, #11]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d16f      	bne.n	80087a2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	3314      	adds	r3, #20
 80086c6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80086ce:	2b02      	cmp	r3, #2
 80086d0:	d15a      	bne.n	8008788 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	689a      	ldr	r2, [r3, #8]
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	68db      	ldr	r3, [r3, #12]
 80086da:	429a      	cmp	r2, r3
 80086dc:	d914      	bls.n	8008708 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	689a      	ldr	r2, [r3, #8]
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	68db      	ldr	r3, [r3, #12]
 80086e6:	1ad2      	subs	r2, r2, r3
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	689b      	ldr	r3, [r3, #8]
 80086f0:	461a      	mov	r2, r3
 80086f2:	6879      	ldr	r1, [r7, #4]
 80086f4:	68f8      	ldr	r0, [r7, #12]
 80086f6:	f001 f8d4 	bl	80098a2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086fa:	2300      	movs	r3, #0
 80086fc:	2200      	movs	r2, #0
 80086fe:	2100      	movs	r1, #0
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	f001 fe33 	bl	800a36c <USBD_LL_PrepareReceive>
 8008706:	e03f      	b.n	8008788 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	68da      	ldr	r2, [r3, #12]
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	429a      	cmp	r2, r3
 8008712:	d11c      	bne.n	800874e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	685a      	ldr	r2, [r3, #4]
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800871c:	429a      	cmp	r2, r3
 800871e:	d316      	bcc.n	800874e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	685a      	ldr	r2, [r3, #4]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800872a:	429a      	cmp	r2, r3
 800872c:	d20f      	bcs.n	800874e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800872e:	2200      	movs	r2, #0
 8008730:	2100      	movs	r1, #0
 8008732:	68f8      	ldr	r0, [r7, #12]
 8008734:	f001 f8b5 	bl	80098a2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2200      	movs	r2, #0
 800873c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008740:	2300      	movs	r3, #0
 8008742:	2200      	movs	r2, #0
 8008744:	2100      	movs	r1, #0
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	f001 fe10 	bl	800a36c <USBD_LL_PrepareReceive>
 800874c:	e01c      	b.n	8008788 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008754:	b2db      	uxtb	r3, r3
 8008756:	2b03      	cmp	r3, #3
 8008758:	d10f      	bne.n	800877a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d009      	beq.n	800877a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2200      	movs	r2, #0
 800876a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	68f8      	ldr	r0, [r7, #12]
 8008778:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800877a:	2180      	movs	r1, #128	@ 0x80
 800877c:	68f8      	ldr	r0, [r7, #12]
 800877e:	f001 fd4b 	bl	800a218 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008782:	68f8      	ldr	r0, [r7, #12]
 8008784:	f001 f8df 	bl	8009946 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800878e:	2b00      	cmp	r3, #0
 8008790:	d03a      	beq.n	8008808 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008792:	68f8      	ldr	r0, [r7, #12]
 8008794:	f7ff fe42 	bl	800841c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2200      	movs	r2, #0
 800879c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80087a0:	e032      	b.n	8008808 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80087a2:	7afb      	ldrb	r3, [r7, #11]
 80087a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	4619      	mov	r1, r3
 80087ac:	68f8      	ldr	r0, [r7, #12]
 80087ae:	f000 f97f 	bl	8008ab0 <USBD_CoreFindEP>
 80087b2:	4603      	mov	r3, r0
 80087b4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80087b6:	7dfb      	ldrb	r3, [r7, #23]
 80087b8:	2bff      	cmp	r3, #255	@ 0xff
 80087ba:	d025      	beq.n	8008808 <USBD_LL_DataInStage+0x15a>
 80087bc:	7dfb      	ldrb	r3, [r7, #23]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d122      	bne.n	8008808 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	2b03      	cmp	r3, #3
 80087cc:	d11c      	bne.n	8008808 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80087ce:	7dfa      	ldrb	r2, [r7, #23]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	32ae      	adds	r2, #174	@ 0xae
 80087d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087d8:	695b      	ldr	r3, [r3, #20]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d014      	beq.n	8008808 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80087de:	7dfa      	ldrb	r2, [r7, #23]
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80087e6:	7dfa      	ldrb	r2, [r7, #23]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	32ae      	adds	r2, #174	@ 0xae
 80087ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087f0:	695b      	ldr	r3, [r3, #20]
 80087f2:	7afa      	ldrb	r2, [r7, #11]
 80087f4:	4611      	mov	r1, r2
 80087f6:	68f8      	ldr	r0, [r7, #12]
 80087f8:	4798      	blx	r3
 80087fa:	4603      	mov	r3, r0
 80087fc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80087fe:	7dbb      	ldrb	r3, [r7, #22]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d001      	beq.n	8008808 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008804:	7dbb      	ldrb	r3, [r7, #22]
 8008806:	e000      	b.n	800880a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	3718      	adds	r7, #24
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008812:	b580      	push	{r7, lr}
 8008814:	b084      	sub	sp, #16
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800881a:	2300      	movs	r3, #0
 800881c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2201      	movs	r2, #1
 8008822:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2200      	movs	r2, #0
 8008832:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800884a:	2b00      	cmp	r3, #0
 800884c:	d014      	beq.n	8008878 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d00e      	beq.n	8008878 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	6852      	ldr	r2, [r2, #4]
 8008866:	b2d2      	uxtb	r2, r2
 8008868:	4611      	mov	r1, r2
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	4798      	blx	r3
 800886e:	4603      	mov	r3, r0
 8008870:	2b00      	cmp	r3, #0
 8008872:	d001      	beq.n	8008878 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008874:	2303      	movs	r3, #3
 8008876:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008878:	2340      	movs	r3, #64	@ 0x40
 800887a:	2200      	movs	r2, #0
 800887c:	2100      	movs	r1, #0
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f001 fc85 	bl	800a18e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2240      	movs	r2, #64	@ 0x40
 8008890:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008894:	2340      	movs	r3, #64	@ 0x40
 8008896:	2200      	movs	r2, #0
 8008898:	2180      	movs	r1, #128	@ 0x80
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f001 fc77 	bl	800a18e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2201      	movs	r2, #1
 80088a4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2240      	movs	r2, #64	@ 0x40
 80088aa:	621a      	str	r2, [r3, #32]

  return ret;
 80088ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3710      	adds	r7, #16
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80088b6:	b480      	push	{r7}
 80088b8:	b083      	sub	sp, #12
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
 80088be:	460b      	mov	r3, r1
 80088c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	78fa      	ldrb	r2, [r7, #3]
 80088c6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80088c8:	2300      	movs	r3, #0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	370c      	adds	r7, #12
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr

080088d6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80088d6:	b480      	push	{r7}
 80088d8:	b083      	sub	sp, #12
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088e4:	b2da      	uxtb	r2, r3
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2204      	movs	r2, #4
 80088f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	370c      	adds	r7, #12
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr

08008902 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008902:	b480      	push	{r7}
 8008904:	b083      	sub	sp, #12
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008910:	b2db      	uxtb	r3, r3
 8008912:	2b04      	cmp	r3, #4
 8008914:	d106      	bne.n	8008924 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800891c:	b2da      	uxtb	r2, r3
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008924:	2300      	movs	r3, #0
}
 8008926:	4618      	mov	r0, r3
 8008928:	370c      	adds	r7, #12
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr

08008932 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008932:	b580      	push	{r7, lr}
 8008934:	b082      	sub	sp, #8
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008940:	b2db      	uxtb	r3, r3
 8008942:	2b03      	cmp	r3, #3
 8008944:	d110      	bne.n	8008968 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800894c:	2b00      	cmp	r3, #0
 800894e:	d00b      	beq.n	8008968 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008956:	69db      	ldr	r3, [r3, #28]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d005      	beq.n	8008968 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008962:	69db      	ldr	r3, [r3, #28]
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008968:	2300      	movs	r3, #0
}
 800896a:	4618      	mov	r0, r3
 800896c:	3708      	adds	r7, #8
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}

08008972 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008972:	b580      	push	{r7, lr}
 8008974:	b082      	sub	sp, #8
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
 800897a:	460b      	mov	r3, r1
 800897c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	32ae      	adds	r2, #174	@ 0xae
 8008988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d101      	bne.n	8008994 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008990:	2303      	movs	r3, #3
 8008992:	e01c      	b.n	80089ce <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800899a:	b2db      	uxtb	r3, r3
 800899c:	2b03      	cmp	r3, #3
 800899e:	d115      	bne.n	80089cc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	32ae      	adds	r2, #174	@ 0xae
 80089aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089ae:	6a1b      	ldr	r3, [r3, #32]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d00b      	beq.n	80089cc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	32ae      	adds	r2, #174	@ 0xae
 80089be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089c2:	6a1b      	ldr	r3, [r3, #32]
 80089c4:	78fa      	ldrb	r2, [r7, #3]
 80089c6:	4611      	mov	r1, r2
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80089cc:	2300      	movs	r3, #0
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3708      	adds	r7, #8
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80089d6:	b580      	push	{r7, lr}
 80089d8:	b082      	sub	sp, #8
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
 80089de:	460b      	mov	r3, r1
 80089e0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	32ae      	adds	r2, #174	@ 0xae
 80089ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d101      	bne.n	80089f8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80089f4:	2303      	movs	r3, #3
 80089f6:	e01c      	b.n	8008a32 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	2b03      	cmp	r3, #3
 8008a02:	d115      	bne.n	8008a30 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	32ae      	adds	r2, #174	@ 0xae
 8008a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d00b      	beq.n	8008a30 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	32ae      	adds	r2, #174	@ 0xae
 8008a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a28:	78fa      	ldrb	r2, [r7, #3]
 8008a2a:	4611      	mov	r1, r2
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008a30:	2300      	movs	r3, #0
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3708      	adds	r7, #8
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}

08008a3a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008a3a:	b480      	push	{r7}
 8008a3c:	b083      	sub	sp, #12
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008a42:	2300      	movs	r3, #0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	370c      	adds	r7, #12
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr

08008a50 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d00e      	beq.n	8008a8c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	6852      	ldr	r2, [r2, #4]
 8008a7a:	b2d2      	uxtb	r2, r2
 8008a7c:	4611      	mov	r1, r2
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	4798      	blx	r3
 8008a82:	4603      	mov	r3, r0
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d001      	beq.n	8008a8c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008a88:	2303      	movs	r3, #3
 8008a8a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3710      	adds	r7, #16
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}

08008a96 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008a96:	b480      	push	{r7}
 8008a98:	b083      	sub	sp, #12
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008aa2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	370c      	adds	r7, #12
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b083      	sub	sp, #12
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	460b      	mov	r3, r1
 8008aba:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008abc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	370c      	adds	r7, #12
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr

08008aca <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b086      	sub	sp, #24
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	885b      	ldrh	r3, [r3, #2]
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	68fa      	ldr	r2, [r7, #12]
 8008aea:	7812      	ldrb	r2, [r2, #0]
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d91f      	bls.n	8008b30 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008af6:	e013      	b.n	8008b20 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008af8:	f107 030a 	add.w	r3, r7, #10
 8008afc:	4619      	mov	r1, r3
 8008afe:	6978      	ldr	r0, [r7, #20]
 8008b00:	f000 f81b 	bl	8008b3a <USBD_GetNextDesc>
 8008b04:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	785b      	ldrb	r3, [r3, #1]
 8008b0a:	2b05      	cmp	r3, #5
 8008b0c:	d108      	bne.n	8008b20 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	789b      	ldrb	r3, [r3, #2]
 8008b16:	78fa      	ldrb	r2, [r7, #3]
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d008      	beq.n	8008b2e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	885b      	ldrh	r3, [r3, #2]
 8008b24:	b29a      	uxth	r2, r3
 8008b26:	897b      	ldrh	r3, [r7, #10]
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d8e5      	bhi.n	8008af8 <USBD_GetEpDesc+0x2e>
 8008b2c:	e000      	b.n	8008b30 <USBD_GetEpDesc+0x66>
          break;
 8008b2e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008b30:	693b      	ldr	r3, [r7, #16]
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3718      	adds	r7, #24
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}

08008b3a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008b3a:	b480      	push	{r7}
 8008b3c:	b085      	sub	sp, #20
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
 8008b42:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	881b      	ldrh	r3, [r3, #0]
 8008b4c:	68fa      	ldr	r2, [r7, #12]
 8008b4e:	7812      	ldrb	r2, [r2, #0]
 8008b50:	4413      	add	r3, r2
 8008b52:	b29a      	uxth	r2, r3
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	4413      	add	r3, r2
 8008b62:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008b64:	68fb      	ldr	r3, [r7, #12]
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3714      	adds	r7, #20
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr

08008b72 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008b72:	b480      	push	{r7}
 8008b74:	b087      	sub	sp, #28
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	3301      	adds	r3, #1
 8008b88:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008b90:	8a3b      	ldrh	r3, [r7, #16]
 8008b92:	021b      	lsls	r3, r3, #8
 8008b94:	b21a      	sxth	r2, r3
 8008b96:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	b21b      	sxth	r3, r3
 8008b9e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008ba0:	89fb      	ldrh	r3, [r7, #14]
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	371c      	adds	r7, #28
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr
	...

08008bb0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008bc6:	2b40      	cmp	r3, #64	@ 0x40
 8008bc8:	d005      	beq.n	8008bd6 <USBD_StdDevReq+0x26>
 8008bca:	2b40      	cmp	r3, #64	@ 0x40
 8008bcc:	d857      	bhi.n	8008c7e <USBD_StdDevReq+0xce>
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d00f      	beq.n	8008bf2 <USBD_StdDevReq+0x42>
 8008bd2:	2b20      	cmp	r3, #32
 8008bd4:	d153      	bne.n	8008c7e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	32ae      	adds	r2, #174	@ 0xae
 8008be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	6839      	ldr	r1, [r7, #0]
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	4798      	blx	r3
 8008bec:	4603      	mov	r3, r0
 8008bee:	73fb      	strb	r3, [r7, #15]
      break;
 8008bf0:	e04a      	b.n	8008c88 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	785b      	ldrb	r3, [r3, #1]
 8008bf6:	2b09      	cmp	r3, #9
 8008bf8:	d83b      	bhi.n	8008c72 <USBD_StdDevReq+0xc2>
 8008bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8008c00 <USBD_StdDevReq+0x50>)
 8008bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c00:	08008c55 	.word	0x08008c55
 8008c04:	08008c69 	.word	0x08008c69
 8008c08:	08008c73 	.word	0x08008c73
 8008c0c:	08008c5f 	.word	0x08008c5f
 8008c10:	08008c73 	.word	0x08008c73
 8008c14:	08008c33 	.word	0x08008c33
 8008c18:	08008c29 	.word	0x08008c29
 8008c1c:	08008c73 	.word	0x08008c73
 8008c20:	08008c4b 	.word	0x08008c4b
 8008c24:	08008c3d 	.word	0x08008c3d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008c28:	6839      	ldr	r1, [r7, #0]
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 fa3c 	bl	80090a8 <USBD_GetDescriptor>
          break;
 8008c30:	e024      	b.n	8008c7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008c32:	6839      	ldr	r1, [r7, #0]
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 fbcb 	bl	80093d0 <USBD_SetAddress>
          break;
 8008c3a:	e01f      	b.n	8008c7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008c3c:	6839      	ldr	r1, [r7, #0]
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 fc0a 	bl	8009458 <USBD_SetConfig>
 8008c44:	4603      	mov	r3, r0
 8008c46:	73fb      	strb	r3, [r7, #15]
          break;
 8008c48:	e018      	b.n	8008c7c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008c4a:	6839      	ldr	r1, [r7, #0]
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 fcad 	bl	80095ac <USBD_GetConfig>
          break;
 8008c52:	e013      	b.n	8008c7c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008c54:	6839      	ldr	r1, [r7, #0]
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 fcde 	bl	8009618 <USBD_GetStatus>
          break;
 8008c5c:	e00e      	b.n	8008c7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008c5e:	6839      	ldr	r1, [r7, #0]
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 fd0d 	bl	8009680 <USBD_SetFeature>
          break;
 8008c66:	e009      	b.n	8008c7c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008c68:	6839      	ldr	r1, [r7, #0]
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 fd31 	bl	80096d2 <USBD_ClrFeature>
          break;
 8008c70:	e004      	b.n	8008c7c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008c72:	6839      	ldr	r1, [r7, #0]
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 fd88 	bl	800978a <USBD_CtlError>
          break;
 8008c7a:	bf00      	nop
      }
      break;
 8008c7c:	e004      	b.n	8008c88 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008c7e:	6839      	ldr	r1, [r7, #0]
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 fd82 	bl	800978a <USBD_CtlError>
      break;
 8008c86:	bf00      	nop
  }

  return ret;
 8008c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
 8008c92:	bf00      	nop

08008c94 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008caa:	2b40      	cmp	r3, #64	@ 0x40
 8008cac:	d005      	beq.n	8008cba <USBD_StdItfReq+0x26>
 8008cae:	2b40      	cmp	r3, #64	@ 0x40
 8008cb0:	d852      	bhi.n	8008d58 <USBD_StdItfReq+0xc4>
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d001      	beq.n	8008cba <USBD_StdItfReq+0x26>
 8008cb6:	2b20      	cmp	r3, #32
 8008cb8:	d14e      	bne.n	8008d58 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	3b01      	subs	r3, #1
 8008cc4:	2b02      	cmp	r3, #2
 8008cc6:	d840      	bhi.n	8008d4a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	889b      	ldrh	r3, [r3, #4]
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d836      	bhi.n	8008d40 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	889b      	ldrh	r3, [r3, #4]
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	4619      	mov	r1, r3
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f7ff fedb 	bl	8008a96 <USBD_CoreFindIF>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ce4:	7bbb      	ldrb	r3, [r7, #14]
 8008ce6:	2bff      	cmp	r3, #255	@ 0xff
 8008ce8:	d01d      	beq.n	8008d26 <USBD_StdItfReq+0x92>
 8008cea:	7bbb      	ldrb	r3, [r7, #14]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d11a      	bne.n	8008d26 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008cf0:	7bba      	ldrb	r2, [r7, #14]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	32ae      	adds	r2, #174	@ 0xae
 8008cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d00f      	beq.n	8008d20 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008d00:	7bba      	ldrb	r2, [r7, #14]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008d08:	7bba      	ldrb	r2, [r7, #14]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	32ae      	adds	r2, #174	@ 0xae
 8008d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	6839      	ldr	r1, [r7, #0]
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	4798      	blx	r3
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008d1e:	e004      	b.n	8008d2a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008d20:	2303      	movs	r3, #3
 8008d22:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008d24:	e001      	b.n	8008d2a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008d26:	2303      	movs	r3, #3
 8008d28:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	88db      	ldrh	r3, [r3, #6]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d110      	bne.n	8008d54 <USBD_StdItfReq+0xc0>
 8008d32:	7bfb      	ldrb	r3, [r7, #15]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d10d      	bne.n	8008d54 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 fdf1 	bl	8009920 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008d3e:	e009      	b.n	8008d54 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008d40:	6839      	ldr	r1, [r7, #0]
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 fd21 	bl	800978a <USBD_CtlError>
          break;
 8008d48:	e004      	b.n	8008d54 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008d4a:	6839      	ldr	r1, [r7, #0]
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 fd1c 	bl	800978a <USBD_CtlError>
          break;
 8008d52:	e000      	b.n	8008d56 <USBD_StdItfReq+0xc2>
          break;
 8008d54:	bf00      	nop
      }
      break;
 8008d56:	e004      	b.n	8008d62 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008d58:	6839      	ldr	r1, [r7, #0]
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 fd15 	bl	800978a <USBD_CtlError>
      break;
 8008d60:	bf00      	nop
  }

  return ret;
 8008d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3710      	adds	r7, #16
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008d76:	2300      	movs	r3, #0
 8008d78:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	889b      	ldrh	r3, [r3, #4]
 8008d7e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008d88:	2b40      	cmp	r3, #64	@ 0x40
 8008d8a:	d007      	beq.n	8008d9c <USBD_StdEPReq+0x30>
 8008d8c:	2b40      	cmp	r3, #64	@ 0x40
 8008d8e:	f200 817f 	bhi.w	8009090 <USBD_StdEPReq+0x324>
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d02a      	beq.n	8008dec <USBD_StdEPReq+0x80>
 8008d96:	2b20      	cmp	r3, #32
 8008d98:	f040 817a 	bne.w	8009090 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008d9c:	7bbb      	ldrb	r3, [r7, #14]
 8008d9e:	4619      	mov	r1, r3
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f7ff fe85 	bl	8008ab0 <USBD_CoreFindEP>
 8008da6:	4603      	mov	r3, r0
 8008da8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008daa:	7b7b      	ldrb	r3, [r7, #13]
 8008dac:	2bff      	cmp	r3, #255	@ 0xff
 8008dae:	f000 8174 	beq.w	800909a <USBD_StdEPReq+0x32e>
 8008db2:	7b7b      	ldrb	r3, [r7, #13]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	f040 8170 	bne.w	800909a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008dba:	7b7a      	ldrb	r2, [r7, #13]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008dc2:	7b7a      	ldrb	r2, [r7, #13]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	32ae      	adds	r2, #174	@ 0xae
 8008dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	f000 8163 	beq.w	800909a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008dd4:	7b7a      	ldrb	r2, [r7, #13]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	32ae      	adds	r2, #174	@ 0xae
 8008dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	6839      	ldr	r1, [r7, #0]
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	4798      	blx	r3
 8008de6:	4603      	mov	r3, r0
 8008de8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008dea:	e156      	b.n	800909a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	785b      	ldrb	r3, [r3, #1]
 8008df0:	2b03      	cmp	r3, #3
 8008df2:	d008      	beq.n	8008e06 <USBD_StdEPReq+0x9a>
 8008df4:	2b03      	cmp	r3, #3
 8008df6:	f300 8145 	bgt.w	8009084 <USBD_StdEPReq+0x318>
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	f000 809b 	beq.w	8008f36 <USBD_StdEPReq+0x1ca>
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d03c      	beq.n	8008e7e <USBD_StdEPReq+0x112>
 8008e04:	e13e      	b.n	8009084 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e0c:	b2db      	uxtb	r3, r3
 8008e0e:	2b02      	cmp	r3, #2
 8008e10:	d002      	beq.n	8008e18 <USBD_StdEPReq+0xac>
 8008e12:	2b03      	cmp	r3, #3
 8008e14:	d016      	beq.n	8008e44 <USBD_StdEPReq+0xd8>
 8008e16:	e02c      	b.n	8008e72 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e18:	7bbb      	ldrb	r3, [r7, #14]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d00d      	beq.n	8008e3a <USBD_StdEPReq+0xce>
 8008e1e:	7bbb      	ldrb	r3, [r7, #14]
 8008e20:	2b80      	cmp	r3, #128	@ 0x80
 8008e22:	d00a      	beq.n	8008e3a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e24:	7bbb      	ldrb	r3, [r7, #14]
 8008e26:	4619      	mov	r1, r3
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f001 f9f5 	bl	800a218 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e2e:	2180      	movs	r1, #128	@ 0x80
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f001 f9f1 	bl	800a218 <USBD_LL_StallEP>
 8008e36:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008e38:	e020      	b.n	8008e7c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008e3a:	6839      	ldr	r1, [r7, #0]
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 fca4 	bl	800978a <USBD_CtlError>
              break;
 8008e42:	e01b      	b.n	8008e7c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	885b      	ldrh	r3, [r3, #2]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d10e      	bne.n	8008e6a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008e4c:	7bbb      	ldrb	r3, [r7, #14]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d00b      	beq.n	8008e6a <USBD_StdEPReq+0xfe>
 8008e52:	7bbb      	ldrb	r3, [r7, #14]
 8008e54:	2b80      	cmp	r3, #128	@ 0x80
 8008e56:	d008      	beq.n	8008e6a <USBD_StdEPReq+0xfe>
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	88db      	ldrh	r3, [r3, #6]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d104      	bne.n	8008e6a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e60:	7bbb      	ldrb	r3, [r7, #14]
 8008e62:	4619      	mov	r1, r3
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f001 f9d7 	bl	800a218 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 fd58 	bl	8009920 <USBD_CtlSendStatus>

              break;
 8008e70:	e004      	b.n	8008e7c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008e72:	6839      	ldr	r1, [r7, #0]
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 fc88 	bl	800978a <USBD_CtlError>
              break;
 8008e7a:	bf00      	nop
          }
          break;
 8008e7c:	e107      	b.n	800908e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	2b02      	cmp	r3, #2
 8008e88:	d002      	beq.n	8008e90 <USBD_StdEPReq+0x124>
 8008e8a:	2b03      	cmp	r3, #3
 8008e8c:	d016      	beq.n	8008ebc <USBD_StdEPReq+0x150>
 8008e8e:	e04b      	b.n	8008f28 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e90:	7bbb      	ldrb	r3, [r7, #14]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d00d      	beq.n	8008eb2 <USBD_StdEPReq+0x146>
 8008e96:	7bbb      	ldrb	r3, [r7, #14]
 8008e98:	2b80      	cmp	r3, #128	@ 0x80
 8008e9a:	d00a      	beq.n	8008eb2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e9c:	7bbb      	ldrb	r3, [r7, #14]
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f001 f9b9 	bl	800a218 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ea6:	2180      	movs	r1, #128	@ 0x80
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f001 f9b5 	bl	800a218 <USBD_LL_StallEP>
 8008eae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008eb0:	e040      	b.n	8008f34 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008eb2:	6839      	ldr	r1, [r7, #0]
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 fc68 	bl	800978a <USBD_CtlError>
              break;
 8008eba:	e03b      	b.n	8008f34 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	885b      	ldrh	r3, [r3, #2]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d136      	bne.n	8008f32 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008ec4:	7bbb      	ldrb	r3, [r7, #14]
 8008ec6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d004      	beq.n	8008ed8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008ece:	7bbb      	ldrb	r3, [r7, #14]
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f001 f9bf 	bl	800a256 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 fd21 	bl	8009920 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008ede:	7bbb      	ldrb	r3, [r7, #14]
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f7ff fde4 	bl	8008ab0 <USBD_CoreFindEP>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008eec:	7b7b      	ldrb	r3, [r7, #13]
 8008eee:	2bff      	cmp	r3, #255	@ 0xff
 8008ef0:	d01f      	beq.n	8008f32 <USBD_StdEPReq+0x1c6>
 8008ef2:	7b7b      	ldrb	r3, [r7, #13]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d11c      	bne.n	8008f32 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008ef8:	7b7a      	ldrb	r2, [r7, #13]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008f00:	7b7a      	ldrb	r2, [r7, #13]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	32ae      	adds	r2, #174	@ 0xae
 8008f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f0a:	689b      	ldr	r3, [r3, #8]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d010      	beq.n	8008f32 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008f10:	7b7a      	ldrb	r2, [r7, #13]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	32ae      	adds	r2, #174	@ 0xae
 8008f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	6839      	ldr	r1, [r7, #0]
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	4798      	blx	r3
 8008f22:	4603      	mov	r3, r0
 8008f24:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008f26:	e004      	b.n	8008f32 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008f28:	6839      	ldr	r1, [r7, #0]
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f000 fc2d 	bl	800978a <USBD_CtlError>
              break;
 8008f30:	e000      	b.n	8008f34 <USBD_StdEPReq+0x1c8>
              break;
 8008f32:	bf00      	nop
          }
          break;
 8008f34:	e0ab      	b.n	800908e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	2b02      	cmp	r3, #2
 8008f40:	d002      	beq.n	8008f48 <USBD_StdEPReq+0x1dc>
 8008f42:	2b03      	cmp	r3, #3
 8008f44:	d032      	beq.n	8008fac <USBD_StdEPReq+0x240>
 8008f46:	e097      	b.n	8009078 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f48:	7bbb      	ldrb	r3, [r7, #14]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d007      	beq.n	8008f5e <USBD_StdEPReq+0x1f2>
 8008f4e:	7bbb      	ldrb	r3, [r7, #14]
 8008f50:	2b80      	cmp	r3, #128	@ 0x80
 8008f52:	d004      	beq.n	8008f5e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008f54:	6839      	ldr	r1, [r7, #0]
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 fc17 	bl	800978a <USBD_CtlError>
                break;
 8008f5c:	e091      	b.n	8009082 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	da0b      	bge.n	8008f7e <USBD_StdEPReq+0x212>
 8008f66:	7bbb      	ldrb	r3, [r7, #14]
 8008f68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008f6c:	4613      	mov	r3, r2
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	4413      	add	r3, r2
 8008f72:	009b      	lsls	r3, r3, #2
 8008f74:	3310      	adds	r3, #16
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	4413      	add	r3, r2
 8008f7a:	3304      	adds	r3, #4
 8008f7c:	e00b      	b.n	8008f96 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008f7e:	7bbb      	ldrb	r3, [r7, #14]
 8008f80:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f84:	4613      	mov	r3, r2
 8008f86:	009b      	lsls	r3, r3, #2
 8008f88:	4413      	add	r3, r2
 8008f8a:	009b      	lsls	r3, r3, #2
 8008f8c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	4413      	add	r3, r2
 8008f94:	3304      	adds	r3, #4
 8008f96:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	2202      	movs	r2, #2
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 fc61 	bl	800986c <USBD_CtlSendData>
              break;
 8008faa:	e06a      	b.n	8009082 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008fac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	da11      	bge.n	8008fd8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008fb4:	7bbb      	ldrb	r3, [r7, #14]
 8008fb6:	f003 020f 	and.w	r2, r3, #15
 8008fba:	6879      	ldr	r1, [r7, #4]
 8008fbc:	4613      	mov	r3, r2
 8008fbe:	009b      	lsls	r3, r3, #2
 8008fc0:	4413      	add	r3, r2
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	440b      	add	r3, r1
 8008fc6:	3324      	adds	r3, #36	@ 0x24
 8008fc8:	881b      	ldrh	r3, [r3, #0]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d117      	bne.n	8008ffe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008fce:	6839      	ldr	r1, [r7, #0]
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f000 fbda 	bl	800978a <USBD_CtlError>
                  break;
 8008fd6:	e054      	b.n	8009082 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008fd8:	7bbb      	ldrb	r3, [r7, #14]
 8008fda:	f003 020f 	and.w	r2, r3, #15
 8008fde:	6879      	ldr	r1, [r7, #4]
 8008fe0:	4613      	mov	r3, r2
 8008fe2:	009b      	lsls	r3, r3, #2
 8008fe4:	4413      	add	r3, r2
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	440b      	add	r3, r1
 8008fea:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008fee:	881b      	ldrh	r3, [r3, #0]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d104      	bne.n	8008ffe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008ff4:	6839      	ldr	r1, [r7, #0]
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 fbc7 	bl	800978a <USBD_CtlError>
                  break;
 8008ffc:	e041      	b.n	8009082 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ffe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009002:	2b00      	cmp	r3, #0
 8009004:	da0b      	bge.n	800901e <USBD_StdEPReq+0x2b2>
 8009006:	7bbb      	ldrb	r3, [r7, #14]
 8009008:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800900c:	4613      	mov	r3, r2
 800900e:	009b      	lsls	r3, r3, #2
 8009010:	4413      	add	r3, r2
 8009012:	009b      	lsls	r3, r3, #2
 8009014:	3310      	adds	r3, #16
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	4413      	add	r3, r2
 800901a:	3304      	adds	r3, #4
 800901c:	e00b      	b.n	8009036 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800901e:	7bbb      	ldrb	r3, [r7, #14]
 8009020:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009024:	4613      	mov	r3, r2
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	4413      	add	r3, r2
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009030:	687a      	ldr	r2, [r7, #4]
 8009032:	4413      	add	r3, r2
 8009034:	3304      	adds	r3, #4
 8009036:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009038:	7bbb      	ldrb	r3, [r7, #14]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d002      	beq.n	8009044 <USBD_StdEPReq+0x2d8>
 800903e:	7bbb      	ldrb	r3, [r7, #14]
 8009040:	2b80      	cmp	r3, #128	@ 0x80
 8009042:	d103      	bne.n	800904c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	2200      	movs	r2, #0
 8009048:	601a      	str	r2, [r3, #0]
 800904a:	e00e      	b.n	800906a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800904c:	7bbb      	ldrb	r3, [r7, #14]
 800904e:	4619      	mov	r1, r3
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f001 f91f 	bl	800a294 <USBD_LL_IsStallEP>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d003      	beq.n	8009064 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	2201      	movs	r2, #1
 8009060:	601a      	str	r2, [r3, #0]
 8009062:	e002      	b.n	800906a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	2200      	movs	r2, #0
 8009068:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	2202      	movs	r2, #2
 800906e:	4619      	mov	r1, r3
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 fbfb 	bl	800986c <USBD_CtlSendData>
              break;
 8009076:	e004      	b.n	8009082 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009078:	6839      	ldr	r1, [r7, #0]
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 fb85 	bl	800978a <USBD_CtlError>
              break;
 8009080:	bf00      	nop
          }
          break;
 8009082:	e004      	b.n	800908e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009084:	6839      	ldr	r1, [r7, #0]
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 fb7f 	bl	800978a <USBD_CtlError>
          break;
 800908c:	bf00      	nop
      }
      break;
 800908e:	e005      	b.n	800909c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009090:	6839      	ldr	r1, [r7, #0]
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 fb79 	bl	800978a <USBD_CtlError>
      break;
 8009098:	e000      	b.n	800909c <USBD_StdEPReq+0x330>
      break;
 800909a:	bf00      	nop
  }

  return ret;
 800909c:	7bfb      	ldrb	r3, [r7, #15]
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3710      	adds	r7, #16
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
	...

080090a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b084      	sub	sp, #16
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80090b2:	2300      	movs	r3, #0
 80090b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80090b6:	2300      	movs	r3, #0
 80090b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80090ba:	2300      	movs	r3, #0
 80090bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	885b      	ldrh	r3, [r3, #2]
 80090c2:	0a1b      	lsrs	r3, r3, #8
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	3b01      	subs	r3, #1
 80090c8:	2b0e      	cmp	r3, #14
 80090ca:	f200 8152 	bhi.w	8009372 <USBD_GetDescriptor+0x2ca>
 80090ce:	a201      	add	r2, pc, #4	@ (adr r2, 80090d4 <USBD_GetDescriptor+0x2c>)
 80090d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090d4:	08009145 	.word	0x08009145
 80090d8:	0800915d 	.word	0x0800915d
 80090dc:	0800919d 	.word	0x0800919d
 80090e0:	08009373 	.word	0x08009373
 80090e4:	08009373 	.word	0x08009373
 80090e8:	08009313 	.word	0x08009313
 80090ec:	0800933f 	.word	0x0800933f
 80090f0:	08009373 	.word	0x08009373
 80090f4:	08009373 	.word	0x08009373
 80090f8:	08009373 	.word	0x08009373
 80090fc:	08009373 	.word	0x08009373
 8009100:	08009373 	.word	0x08009373
 8009104:	08009373 	.word	0x08009373
 8009108:	08009373 	.word	0x08009373
 800910c:	08009111 	.word	0x08009111
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009116:	69db      	ldr	r3, [r3, #28]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d00b      	beq.n	8009134 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009122:	69db      	ldr	r3, [r3, #28]
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	7c12      	ldrb	r2, [r2, #16]
 8009128:	f107 0108 	add.w	r1, r7, #8
 800912c:	4610      	mov	r0, r2
 800912e:	4798      	blx	r3
 8009130:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009132:	e126      	b.n	8009382 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009134:	6839      	ldr	r1, [r7, #0]
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 fb27 	bl	800978a <USBD_CtlError>
        err++;
 800913c:	7afb      	ldrb	r3, [r7, #11]
 800913e:	3301      	adds	r3, #1
 8009140:	72fb      	strb	r3, [r7, #11]
      break;
 8009142:	e11e      	b.n	8009382 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	7c12      	ldrb	r2, [r2, #16]
 8009150:	f107 0108 	add.w	r1, r7, #8
 8009154:	4610      	mov	r0, r2
 8009156:	4798      	blx	r3
 8009158:	60f8      	str	r0, [r7, #12]
      break;
 800915a:	e112      	b.n	8009382 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	7c1b      	ldrb	r3, [r3, #16]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d10d      	bne.n	8009180 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800916a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800916c:	f107 0208 	add.w	r2, r7, #8
 8009170:	4610      	mov	r0, r2
 8009172:	4798      	blx	r3
 8009174:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	3301      	adds	r3, #1
 800917a:	2202      	movs	r2, #2
 800917c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800917e:	e100      	b.n	8009382 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009188:	f107 0208 	add.w	r2, r7, #8
 800918c:	4610      	mov	r0, r2
 800918e:	4798      	blx	r3
 8009190:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	3301      	adds	r3, #1
 8009196:	2202      	movs	r2, #2
 8009198:	701a      	strb	r2, [r3, #0]
      break;
 800919a:	e0f2      	b.n	8009382 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	885b      	ldrh	r3, [r3, #2]
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	2b05      	cmp	r3, #5
 80091a4:	f200 80ac 	bhi.w	8009300 <USBD_GetDescriptor+0x258>
 80091a8:	a201      	add	r2, pc, #4	@ (adr r2, 80091b0 <USBD_GetDescriptor+0x108>)
 80091aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ae:	bf00      	nop
 80091b0:	080091c9 	.word	0x080091c9
 80091b4:	080091fd 	.word	0x080091fd
 80091b8:	08009231 	.word	0x08009231
 80091bc:	08009265 	.word	0x08009265
 80091c0:	08009299 	.word	0x08009299
 80091c4:	080092cd 	.word	0x080092cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d00b      	beq.n	80091ec <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	7c12      	ldrb	r2, [r2, #16]
 80091e0:	f107 0108 	add.w	r1, r7, #8
 80091e4:	4610      	mov	r0, r2
 80091e6:	4798      	blx	r3
 80091e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091ea:	e091      	b.n	8009310 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80091ec:	6839      	ldr	r1, [r7, #0]
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 facb 	bl	800978a <USBD_CtlError>
            err++;
 80091f4:	7afb      	ldrb	r3, [r7, #11]
 80091f6:	3301      	adds	r3, #1
 80091f8:	72fb      	strb	r3, [r7, #11]
          break;
 80091fa:	e089      	b.n	8009310 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009202:	689b      	ldr	r3, [r3, #8]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d00b      	beq.n	8009220 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	7c12      	ldrb	r2, [r2, #16]
 8009214:	f107 0108 	add.w	r1, r7, #8
 8009218:	4610      	mov	r0, r2
 800921a:	4798      	blx	r3
 800921c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800921e:	e077      	b.n	8009310 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009220:	6839      	ldr	r1, [r7, #0]
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 fab1 	bl	800978a <USBD_CtlError>
            err++;
 8009228:	7afb      	ldrb	r3, [r7, #11]
 800922a:	3301      	adds	r3, #1
 800922c:	72fb      	strb	r3, [r7, #11]
          break;
 800922e:	e06f      	b.n	8009310 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009236:	68db      	ldr	r3, [r3, #12]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d00b      	beq.n	8009254 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009242:	68db      	ldr	r3, [r3, #12]
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	7c12      	ldrb	r2, [r2, #16]
 8009248:	f107 0108 	add.w	r1, r7, #8
 800924c:	4610      	mov	r0, r2
 800924e:	4798      	blx	r3
 8009250:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009252:	e05d      	b.n	8009310 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009254:	6839      	ldr	r1, [r7, #0]
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 fa97 	bl	800978a <USBD_CtlError>
            err++;
 800925c:	7afb      	ldrb	r3, [r7, #11]
 800925e:	3301      	adds	r3, #1
 8009260:	72fb      	strb	r3, [r7, #11]
          break;
 8009262:	e055      	b.n	8009310 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800926a:	691b      	ldr	r3, [r3, #16]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d00b      	beq.n	8009288 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009276:	691b      	ldr	r3, [r3, #16]
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	7c12      	ldrb	r2, [r2, #16]
 800927c:	f107 0108 	add.w	r1, r7, #8
 8009280:	4610      	mov	r0, r2
 8009282:	4798      	blx	r3
 8009284:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009286:	e043      	b.n	8009310 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009288:	6839      	ldr	r1, [r7, #0]
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 fa7d 	bl	800978a <USBD_CtlError>
            err++;
 8009290:	7afb      	ldrb	r3, [r7, #11]
 8009292:	3301      	adds	r3, #1
 8009294:	72fb      	strb	r3, [r7, #11]
          break;
 8009296:	e03b      	b.n	8009310 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800929e:	695b      	ldr	r3, [r3, #20]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d00b      	beq.n	80092bc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092aa:	695b      	ldr	r3, [r3, #20]
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	7c12      	ldrb	r2, [r2, #16]
 80092b0:	f107 0108 	add.w	r1, r7, #8
 80092b4:	4610      	mov	r0, r2
 80092b6:	4798      	blx	r3
 80092b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092ba:	e029      	b.n	8009310 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80092bc:	6839      	ldr	r1, [r7, #0]
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 fa63 	bl	800978a <USBD_CtlError>
            err++;
 80092c4:	7afb      	ldrb	r3, [r7, #11]
 80092c6:	3301      	adds	r3, #1
 80092c8:	72fb      	strb	r3, [r7, #11]
          break;
 80092ca:	e021      	b.n	8009310 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092d2:	699b      	ldr	r3, [r3, #24]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d00b      	beq.n	80092f0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092de:	699b      	ldr	r3, [r3, #24]
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	7c12      	ldrb	r2, [r2, #16]
 80092e4:	f107 0108 	add.w	r1, r7, #8
 80092e8:	4610      	mov	r0, r2
 80092ea:	4798      	blx	r3
 80092ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092ee:	e00f      	b.n	8009310 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80092f0:	6839      	ldr	r1, [r7, #0]
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 fa49 	bl	800978a <USBD_CtlError>
            err++;
 80092f8:	7afb      	ldrb	r3, [r7, #11]
 80092fa:	3301      	adds	r3, #1
 80092fc:	72fb      	strb	r3, [r7, #11]
          break;
 80092fe:	e007      	b.n	8009310 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009300:	6839      	ldr	r1, [r7, #0]
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 fa41 	bl	800978a <USBD_CtlError>
          err++;
 8009308:	7afb      	ldrb	r3, [r7, #11]
 800930a:	3301      	adds	r3, #1
 800930c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800930e:	bf00      	nop
      }
      break;
 8009310:	e037      	b.n	8009382 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	7c1b      	ldrb	r3, [r3, #16]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d109      	bne.n	800932e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009322:	f107 0208 	add.w	r2, r7, #8
 8009326:	4610      	mov	r0, r2
 8009328:	4798      	blx	r3
 800932a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800932c:	e029      	b.n	8009382 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800932e:	6839      	ldr	r1, [r7, #0]
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 fa2a 	bl	800978a <USBD_CtlError>
        err++;
 8009336:	7afb      	ldrb	r3, [r7, #11]
 8009338:	3301      	adds	r3, #1
 800933a:	72fb      	strb	r3, [r7, #11]
      break;
 800933c:	e021      	b.n	8009382 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	7c1b      	ldrb	r3, [r3, #16]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d10d      	bne.n	8009362 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800934c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800934e:	f107 0208 	add.w	r2, r7, #8
 8009352:	4610      	mov	r0, r2
 8009354:	4798      	blx	r3
 8009356:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	3301      	adds	r3, #1
 800935c:	2207      	movs	r2, #7
 800935e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009360:	e00f      	b.n	8009382 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009362:	6839      	ldr	r1, [r7, #0]
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f000 fa10 	bl	800978a <USBD_CtlError>
        err++;
 800936a:	7afb      	ldrb	r3, [r7, #11]
 800936c:	3301      	adds	r3, #1
 800936e:	72fb      	strb	r3, [r7, #11]
      break;
 8009370:	e007      	b.n	8009382 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009372:	6839      	ldr	r1, [r7, #0]
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 fa08 	bl	800978a <USBD_CtlError>
      err++;
 800937a:	7afb      	ldrb	r3, [r7, #11]
 800937c:	3301      	adds	r3, #1
 800937e:	72fb      	strb	r3, [r7, #11]
      break;
 8009380:	bf00      	nop
  }

  if (err != 0U)
 8009382:	7afb      	ldrb	r3, [r7, #11]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d11e      	bne.n	80093c6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	88db      	ldrh	r3, [r3, #6]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d016      	beq.n	80093be <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009390:	893b      	ldrh	r3, [r7, #8]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d00e      	beq.n	80093b4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	88da      	ldrh	r2, [r3, #6]
 800939a:	893b      	ldrh	r3, [r7, #8]
 800939c:	4293      	cmp	r3, r2
 800939e:	bf28      	it	cs
 80093a0:	4613      	movcs	r3, r2
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80093a6:	893b      	ldrh	r3, [r7, #8]
 80093a8:	461a      	mov	r2, r3
 80093aa:	68f9      	ldr	r1, [r7, #12]
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 fa5d 	bl	800986c <USBD_CtlSendData>
 80093b2:	e009      	b.n	80093c8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80093b4:	6839      	ldr	r1, [r7, #0]
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 f9e7 	bl	800978a <USBD_CtlError>
 80093bc:	e004      	b.n	80093c8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 faae 	bl	8009920 <USBD_CtlSendStatus>
 80093c4:	e000      	b.n	80093c8 <USBD_GetDescriptor+0x320>
    return;
 80093c6:	bf00      	nop
  }
}
 80093c8:	3710      	adds	r7, #16
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}
 80093ce:	bf00      	nop

080093d0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b084      	sub	sp, #16
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	889b      	ldrh	r3, [r3, #4]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d131      	bne.n	8009446 <USBD_SetAddress+0x76>
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	88db      	ldrh	r3, [r3, #6]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d12d      	bne.n	8009446 <USBD_SetAddress+0x76>
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	885b      	ldrh	r3, [r3, #2]
 80093ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80093f0:	d829      	bhi.n	8009446 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	885b      	ldrh	r3, [r3, #2]
 80093f6:	b2db      	uxtb	r3, r3
 80093f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009404:	b2db      	uxtb	r3, r3
 8009406:	2b03      	cmp	r3, #3
 8009408:	d104      	bne.n	8009414 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800940a:	6839      	ldr	r1, [r7, #0]
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 f9bc 	bl	800978a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009412:	e01d      	b.n	8009450 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	7bfa      	ldrb	r2, [r7, #15]
 8009418:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800941c:	7bfb      	ldrb	r3, [r7, #15]
 800941e:	4619      	mov	r1, r3
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 ff63 	bl	800a2ec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 fa7a 	bl	8009920 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800942c:	7bfb      	ldrb	r3, [r7, #15]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d004      	beq.n	800943c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2202      	movs	r2, #2
 8009436:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800943a:	e009      	b.n	8009450 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2201      	movs	r2, #1
 8009440:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009444:	e004      	b.n	8009450 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009446:	6839      	ldr	r1, [r7, #0]
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f000 f99e 	bl	800978a <USBD_CtlError>
  }
}
 800944e:	bf00      	nop
 8009450:	bf00      	nop
 8009452:	3710      	adds	r7, #16
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009462:	2300      	movs	r3, #0
 8009464:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	885b      	ldrh	r3, [r3, #2]
 800946a:	b2da      	uxtb	r2, r3
 800946c:	4b4e      	ldr	r3, [pc, #312]	@ (80095a8 <USBD_SetConfig+0x150>)
 800946e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009470:	4b4d      	ldr	r3, [pc, #308]	@ (80095a8 <USBD_SetConfig+0x150>)
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	2b01      	cmp	r3, #1
 8009476:	d905      	bls.n	8009484 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009478:	6839      	ldr	r1, [r7, #0]
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 f985 	bl	800978a <USBD_CtlError>
    return USBD_FAIL;
 8009480:	2303      	movs	r3, #3
 8009482:	e08c      	b.n	800959e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800948a:	b2db      	uxtb	r3, r3
 800948c:	2b02      	cmp	r3, #2
 800948e:	d002      	beq.n	8009496 <USBD_SetConfig+0x3e>
 8009490:	2b03      	cmp	r3, #3
 8009492:	d029      	beq.n	80094e8 <USBD_SetConfig+0x90>
 8009494:	e075      	b.n	8009582 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009496:	4b44      	ldr	r3, [pc, #272]	@ (80095a8 <USBD_SetConfig+0x150>)
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d020      	beq.n	80094e0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800949e:	4b42      	ldr	r3, [pc, #264]	@ (80095a8 <USBD_SetConfig+0x150>)
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	461a      	mov	r2, r3
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80094a8:	4b3f      	ldr	r3, [pc, #252]	@ (80095a8 <USBD_SetConfig+0x150>)
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	4619      	mov	r1, r3
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f7fe ffbf 	bl	8008432 <USBD_SetClassConfig>
 80094b4:	4603      	mov	r3, r0
 80094b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80094b8:	7bfb      	ldrb	r3, [r7, #15]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d008      	beq.n	80094d0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80094be:	6839      	ldr	r1, [r7, #0]
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f000 f962 	bl	800978a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2202      	movs	r2, #2
 80094ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80094ce:	e065      	b.n	800959c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 fa25 	bl	8009920 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2203      	movs	r2, #3
 80094da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80094de:	e05d      	b.n	800959c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 fa1d 	bl	8009920 <USBD_CtlSendStatus>
      break;
 80094e6:	e059      	b.n	800959c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80094e8:	4b2f      	ldr	r3, [pc, #188]	@ (80095a8 <USBD_SetConfig+0x150>)
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d112      	bne.n	8009516 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2202      	movs	r2, #2
 80094f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80094f8:	4b2b      	ldr	r3, [pc, #172]	@ (80095a8 <USBD_SetConfig+0x150>)
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	461a      	mov	r2, r3
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009502:	4b29      	ldr	r3, [pc, #164]	@ (80095a8 <USBD_SetConfig+0x150>)
 8009504:	781b      	ldrb	r3, [r3, #0]
 8009506:	4619      	mov	r1, r3
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f7fe ffae 	bl	800846a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 fa06 	bl	8009920 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009514:	e042      	b.n	800959c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009516:	4b24      	ldr	r3, [pc, #144]	@ (80095a8 <USBD_SetConfig+0x150>)
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	461a      	mov	r2, r3
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	429a      	cmp	r2, r3
 8009522:	d02a      	beq.n	800957a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	b2db      	uxtb	r3, r3
 800952a:	4619      	mov	r1, r3
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f7fe ff9c 	bl	800846a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009532:	4b1d      	ldr	r3, [pc, #116]	@ (80095a8 <USBD_SetConfig+0x150>)
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	461a      	mov	r2, r3
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800953c:	4b1a      	ldr	r3, [pc, #104]	@ (80095a8 <USBD_SetConfig+0x150>)
 800953e:	781b      	ldrb	r3, [r3, #0]
 8009540:	4619      	mov	r1, r3
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f7fe ff75 	bl	8008432 <USBD_SetClassConfig>
 8009548:	4603      	mov	r3, r0
 800954a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800954c:	7bfb      	ldrb	r3, [r7, #15]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d00f      	beq.n	8009572 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009552:	6839      	ldr	r1, [r7, #0]
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 f918 	bl	800978a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	b2db      	uxtb	r3, r3
 8009560:	4619      	mov	r1, r3
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f7fe ff81 	bl	800846a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2202      	movs	r2, #2
 800956c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009570:	e014      	b.n	800959c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 f9d4 	bl	8009920 <USBD_CtlSendStatus>
      break;
 8009578:	e010      	b.n	800959c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 f9d0 	bl	8009920 <USBD_CtlSendStatus>
      break;
 8009580:	e00c      	b.n	800959c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009582:	6839      	ldr	r1, [r7, #0]
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f000 f900 	bl	800978a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800958a:	4b07      	ldr	r3, [pc, #28]	@ (80095a8 <USBD_SetConfig+0x150>)
 800958c:	781b      	ldrb	r3, [r3, #0]
 800958e:	4619      	mov	r1, r3
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f7fe ff6a 	bl	800846a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009596:	2303      	movs	r3, #3
 8009598:	73fb      	strb	r3, [r7, #15]
      break;
 800959a:	bf00      	nop
  }

  return ret;
 800959c:	7bfb      	ldrb	r3, [r7, #15]
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3710      	adds	r7, #16
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	200004c4 	.word	0x200004c4

080095ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b082      	sub	sp, #8
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	88db      	ldrh	r3, [r3, #6]
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d004      	beq.n	80095c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80095be:	6839      	ldr	r1, [r7, #0]
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 f8e2 	bl	800978a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80095c6:	e023      	b.n	8009610 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095ce:	b2db      	uxtb	r3, r3
 80095d0:	2b02      	cmp	r3, #2
 80095d2:	dc02      	bgt.n	80095da <USBD_GetConfig+0x2e>
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	dc03      	bgt.n	80095e0 <USBD_GetConfig+0x34>
 80095d8:	e015      	b.n	8009606 <USBD_GetConfig+0x5a>
 80095da:	2b03      	cmp	r3, #3
 80095dc:	d00b      	beq.n	80095f6 <USBD_GetConfig+0x4a>
 80095de:	e012      	b.n	8009606 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2200      	movs	r2, #0
 80095e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	3308      	adds	r3, #8
 80095ea:	2201      	movs	r2, #1
 80095ec:	4619      	mov	r1, r3
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 f93c 	bl	800986c <USBD_CtlSendData>
        break;
 80095f4:	e00c      	b.n	8009610 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	3304      	adds	r3, #4
 80095fa:	2201      	movs	r2, #1
 80095fc:	4619      	mov	r1, r3
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 f934 	bl	800986c <USBD_CtlSendData>
        break;
 8009604:	e004      	b.n	8009610 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009606:	6839      	ldr	r1, [r7, #0]
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f000 f8be 	bl	800978a <USBD_CtlError>
        break;
 800960e:	bf00      	nop
}
 8009610:	bf00      	nop
 8009612:	3708      	adds	r7, #8
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009628:	b2db      	uxtb	r3, r3
 800962a:	3b01      	subs	r3, #1
 800962c:	2b02      	cmp	r3, #2
 800962e:	d81e      	bhi.n	800966e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	88db      	ldrh	r3, [r3, #6]
 8009634:	2b02      	cmp	r3, #2
 8009636:	d004      	beq.n	8009642 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009638:	6839      	ldr	r1, [r7, #0]
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f000 f8a5 	bl	800978a <USBD_CtlError>
        break;
 8009640:	e01a      	b.n	8009678 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2201      	movs	r2, #1
 8009646:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800964e:	2b00      	cmp	r3, #0
 8009650:	d005      	beq.n	800965e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	68db      	ldr	r3, [r3, #12]
 8009656:	f043 0202 	orr.w	r2, r3, #2
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	330c      	adds	r3, #12
 8009662:	2202      	movs	r2, #2
 8009664:	4619      	mov	r1, r3
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 f900 	bl	800986c <USBD_CtlSendData>
      break;
 800966c:	e004      	b.n	8009678 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800966e:	6839      	ldr	r1, [r7, #0]
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 f88a 	bl	800978a <USBD_CtlError>
      break;
 8009676:	bf00      	nop
  }
}
 8009678:	bf00      	nop
 800967a:	3708      	adds	r7, #8
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	885b      	ldrh	r3, [r3, #2]
 800968e:	2b01      	cmp	r3, #1
 8009690:	d107      	bne.n	80096a2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2201      	movs	r2, #1
 8009696:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 f940 	bl	8009920 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80096a0:	e013      	b.n	80096ca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	885b      	ldrh	r3, [r3, #2]
 80096a6:	2b02      	cmp	r3, #2
 80096a8:	d10b      	bne.n	80096c2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	889b      	ldrh	r3, [r3, #4]
 80096ae:	0a1b      	lsrs	r3, r3, #8
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	b2da      	uxtb	r2, r3
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f000 f930 	bl	8009920 <USBD_CtlSendStatus>
}
 80096c0:	e003      	b.n	80096ca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80096c2:	6839      	ldr	r1, [r7, #0]
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f000 f860 	bl	800978a <USBD_CtlError>
}
 80096ca:	bf00      	nop
 80096cc:	3708      	adds	r7, #8
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}

080096d2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096d2:	b580      	push	{r7, lr}
 80096d4:	b082      	sub	sp, #8
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	6078      	str	r0, [r7, #4]
 80096da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096e2:	b2db      	uxtb	r3, r3
 80096e4:	3b01      	subs	r3, #1
 80096e6:	2b02      	cmp	r3, #2
 80096e8:	d80b      	bhi.n	8009702 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	885b      	ldrh	r3, [r3, #2]
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	d10c      	bne.n	800970c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 f910 	bl	8009920 <USBD_CtlSendStatus>
      }
      break;
 8009700:	e004      	b.n	800970c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009702:	6839      	ldr	r1, [r7, #0]
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 f840 	bl	800978a <USBD_CtlError>
      break;
 800970a:	e000      	b.n	800970e <USBD_ClrFeature+0x3c>
      break;
 800970c:	bf00      	nop
  }
}
 800970e:	bf00      	nop
 8009710:	3708      	adds	r7, #8
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}

08009716 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009716:	b580      	push	{r7, lr}
 8009718:	b084      	sub	sp, #16
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
 800971e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	781a      	ldrb	r2, [r3, #0]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	3301      	adds	r3, #1
 8009730:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	781a      	ldrb	r2, [r3, #0]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	3301      	adds	r3, #1
 800973e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009740:	68f8      	ldr	r0, [r7, #12]
 8009742:	f7ff fa16 	bl	8008b72 <SWAPBYTE>
 8009746:	4603      	mov	r3, r0
 8009748:	461a      	mov	r2, r3
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	3301      	adds	r3, #1
 8009752:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	3301      	adds	r3, #1
 8009758:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800975a:	68f8      	ldr	r0, [r7, #12]
 800975c:	f7ff fa09 	bl	8008b72 <SWAPBYTE>
 8009760:	4603      	mov	r3, r0
 8009762:	461a      	mov	r2, r3
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	3301      	adds	r3, #1
 800976c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	3301      	adds	r3, #1
 8009772:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009774:	68f8      	ldr	r0, [r7, #12]
 8009776:	f7ff f9fc 	bl	8008b72 <SWAPBYTE>
 800977a:	4603      	mov	r3, r0
 800977c:	461a      	mov	r2, r3
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	80da      	strh	r2, [r3, #6]
}
 8009782:	bf00      	nop
 8009784:	3710      	adds	r7, #16
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800978a:	b580      	push	{r7, lr}
 800978c:	b082      	sub	sp, #8
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]
 8009792:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009794:	2180      	movs	r1, #128	@ 0x80
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 fd3e 	bl	800a218 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800979c:	2100      	movs	r1, #0
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 fd3a 	bl	800a218 <USBD_LL_StallEP>
}
 80097a4:	bf00      	nop
 80097a6:	3708      	adds	r7, #8
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b086      	sub	sp, #24
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	60b9      	str	r1, [r7, #8]
 80097b6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80097b8:	2300      	movs	r3, #0
 80097ba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d036      	beq.n	8009830 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80097c6:	6938      	ldr	r0, [r7, #16]
 80097c8:	f000 f836 	bl	8009838 <USBD_GetLen>
 80097cc:	4603      	mov	r3, r0
 80097ce:	3301      	adds	r3, #1
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	005b      	lsls	r3, r3, #1
 80097d4:	b29a      	uxth	r2, r3
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80097da:	7dfb      	ldrb	r3, [r7, #23]
 80097dc:	68ba      	ldr	r2, [r7, #8]
 80097de:	4413      	add	r3, r2
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	7812      	ldrb	r2, [r2, #0]
 80097e4:	701a      	strb	r2, [r3, #0]
  idx++;
 80097e6:	7dfb      	ldrb	r3, [r7, #23]
 80097e8:	3301      	adds	r3, #1
 80097ea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80097ec:	7dfb      	ldrb	r3, [r7, #23]
 80097ee:	68ba      	ldr	r2, [r7, #8]
 80097f0:	4413      	add	r3, r2
 80097f2:	2203      	movs	r2, #3
 80097f4:	701a      	strb	r2, [r3, #0]
  idx++;
 80097f6:	7dfb      	ldrb	r3, [r7, #23]
 80097f8:	3301      	adds	r3, #1
 80097fa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80097fc:	e013      	b.n	8009826 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80097fe:	7dfb      	ldrb	r3, [r7, #23]
 8009800:	68ba      	ldr	r2, [r7, #8]
 8009802:	4413      	add	r3, r2
 8009804:	693a      	ldr	r2, [r7, #16]
 8009806:	7812      	ldrb	r2, [r2, #0]
 8009808:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	3301      	adds	r3, #1
 800980e:	613b      	str	r3, [r7, #16]
    idx++;
 8009810:	7dfb      	ldrb	r3, [r7, #23]
 8009812:	3301      	adds	r3, #1
 8009814:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009816:	7dfb      	ldrb	r3, [r7, #23]
 8009818:	68ba      	ldr	r2, [r7, #8]
 800981a:	4413      	add	r3, r2
 800981c:	2200      	movs	r2, #0
 800981e:	701a      	strb	r2, [r3, #0]
    idx++;
 8009820:	7dfb      	ldrb	r3, [r7, #23]
 8009822:	3301      	adds	r3, #1
 8009824:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	781b      	ldrb	r3, [r3, #0]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d1e7      	bne.n	80097fe <USBD_GetString+0x52>
 800982e:	e000      	b.n	8009832 <USBD_GetString+0x86>
    return;
 8009830:	bf00      	nop
  }
}
 8009832:	3718      	adds	r7, #24
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009838:	b480      	push	{r7}
 800983a:	b085      	sub	sp, #20
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009840:	2300      	movs	r3, #0
 8009842:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009848:	e005      	b.n	8009856 <USBD_GetLen+0x1e>
  {
    len++;
 800984a:	7bfb      	ldrb	r3, [r7, #15]
 800984c:	3301      	adds	r3, #1
 800984e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	3301      	adds	r3, #1
 8009854:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d1f5      	bne.n	800984a <USBD_GetLen+0x12>
  }

  return len;
 800985e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009860:	4618      	mov	r0, r3
 8009862:	3714      	adds	r7, #20
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr

0800986c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b084      	sub	sp, #16
 8009870:	af00      	add	r7, sp, #0
 8009872:	60f8      	str	r0, [r7, #12]
 8009874:	60b9      	str	r1, [r7, #8]
 8009876:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2202      	movs	r2, #2
 800987c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	68ba      	ldr	r2, [r7, #8]
 8009890:	2100      	movs	r1, #0
 8009892:	68f8      	ldr	r0, [r7, #12]
 8009894:	f000 fd49 	bl	800a32a <USBD_LL_Transmit>

  return USBD_OK;
 8009898:	2300      	movs	r3, #0
}
 800989a:	4618      	mov	r0, r3
 800989c:	3710      	adds	r7, #16
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}

080098a2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80098a2:	b580      	push	{r7, lr}
 80098a4:	b084      	sub	sp, #16
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	60f8      	str	r0, [r7, #12]
 80098aa:	60b9      	str	r1, [r7, #8]
 80098ac:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	68ba      	ldr	r2, [r7, #8]
 80098b2:	2100      	movs	r1, #0
 80098b4:	68f8      	ldr	r0, [r7, #12]
 80098b6:	f000 fd38 	bl	800a32a <USBD_LL_Transmit>

  return USBD_OK;
 80098ba:	2300      	movs	r3, #0
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3710      	adds	r7, #16
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	60f8      	str	r0, [r7, #12]
 80098cc:	60b9      	str	r1, [r7, #8]
 80098ce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2203      	movs	r2, #3
 80098d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	687a      	ldr	r2, [r7, #4]
 80098dc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	687a      	ldr	r2, [r7, #4]
 80098e4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	68ba      	ldr	r2, [r7, #8]
 80098ec:	2100      	movs	r1, #0
 80098ee:	68f8      	ldr	r0, [r7, #12]
 80098f0:	f000 fd3c 	bl	800a36c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80098f4:	2300      	movs	r3, #0
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3710      	adds	r7, #16
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}

080098fe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80098fe:	b580      	push	{r7, lr}
 8009900:	b084      	sub	sp, #16
 8009902:	af00      	add	r7, sp, #0
 8009904:	60f8      	str	r0, [r7, #12]
 8009906:	60b9      	str	r1, [r7, #8]
 8009908:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	68ba      	ldr	r2, [r7, #8]
 800990e:	2100      	movs	r1, #0
 8009910:	68f8      	ldr	r0, [r7, #12]
 8009912:	f000 fd2b 	bl	800a36c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009916:	2300      	movs	r3, #0
}
 8009918:	4618      	mov	r0, r3
 800991a:	3710      	adds	r7, #16
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b082      	sub	sp, #8
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2204      	movs	r2, #4
 800992c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009930:	2300      	movs	r3, #0
 8009932:	2200      	movs	r2, #0
 8009934:	2100      	movs	r1, #0
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 fcf7 	bl	800a32a <USBD_LL_Transmit>

  return USBD_OK;
 800993c:	2300      	movs	r3, #0
}
 800993e:	4618      	mov	r0, r3
 8009940:	3708      	adds	r7, #8
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}

08009946 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009946:	b580      	push	{r7, lr}
 8009948:	b082      	sub	sp, #8
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2205      	movs	r2, #5
 8009952:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009956:	2300      	movs	r3, #0
 8009958:	2200      	movs	r2, #0
 800995a:	2100      	movs	r1, #0
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 fd05 	bl	800a36c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009962:	2300      	movs	r3, #0
}
 8009964:	4618      	mov	r0, r3
 8009966:	3708      	adds	r7, #8
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800996c:	b480      	push	{r7}
 800996e:	b087      	sub	sp, #28
 8009970:	af00      	add	r7, sp, #0
 8009972:	60f8      	str	r0, [r7, #12]
 8009974:	60b9      	str	r1, [r7, #8]
 8009976:	4613      	mov	r3, r2
 8009978:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800997a:	2301      	movs	r3, #1
 800997c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800997e:	2300      	movs	r3, #0
 8009980:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009982:	4b1f      	ldr	r3, [pc, #124]	@ (8009a00 <FATFS_LinkDriverEx+0x94>)
 8009984:	7a5b      	ldrb	r3, [r3, #9]
 8009986:	b2db      	uxtb	r3, r3
 8009988:	2b00      	cmp	r3, #0
 800998a:	d131      	bne.n	80099f0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800998c:	4b1c      	ldr	r3, [pc, #112]	@ (8009a00 <FATFS_LinkDriverEx+0x94>)
 800998e:	7a5b      	ldrb	r3, [r3, #9]
 8009990:	b2db      	uxtb	r3, r3
 8009992:	461a      	mov	r2, r3
 8009994:	4b1a      	ldr	r3, [pc, #104]	@ (8009a00 <FATFS_LinkDriverEx+0x94>)
 8009996:	2100      	movs	r1, #0
 8009998:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800999a:	4b19      	ldr	r3, [pc, #100]	@ (8009a00 <FATFS_LinkDriverEx+0x94>)
 800999c:	7a5b      	ldrb	r3, [r3, #9]
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	4a17      	ldr	r2, [pc, #92]	@ (8009a00 <FATFS_LinkDriverEx+0x94>)
 80099a2:	009b      	lsls	r3, r3, #2
 80099a4:	4413      	add	r3, r2
 80099a6:	68fa      	ldr	r2, [r7, #12]
 80099a8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80099aa:	4b15      	ldr	r3, [pc, #84]	@ (8009a00 <FATFS_LinkDriverEx+0x94>)
 80099ac:	7a5b      	ldrb	r3, [r3, #9]
 80099ae:	b2db      	uxtb	r3, r3
 80099b0:	461a      	mov	r2, r3
 80099b2:	4b13      	ldr	r3, [pc, #76]	@ (8009a00 <FATFS_LinkDriverEx+0x94>)
 80099b4:	4413      	add	r3, r2
 80099b6:	79fa      	ldrb	r2, [r7, #7]
 80099b8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80099ba:	4b11      	ldr	r3, [pc, #68]	@ (8009a00 <FATFS_LinkDriverEx+0x94>)
 80099bc:	7a5b      	ldrb	r3, [r3, #9]
 80099be:	b2db      	uxtb	r3, r3
 80099c0:	1c5a      	adds	r2, r3, #1
 80099c2:	b2d1      	uxtb	r1, r2
 80099c4:	4a0e      	ldr	r2, [pc, #56]	@ (8009a00 <FATFS_LinkDriverEx+0x94>)
 80099c6:	7251      	strb	r1, [r2, #9]
 80099c8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80099ca:	7dbb      	ldrb	r3, [r7, #22]
 80099cc:	3330      	adds	r3, #48	@ 0x30
 80099ce:	b2da      	uxtb	r2, r3
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	3301      	adds	r3, #1
 80099d8:	223a      	movs	r2, #58	@ 0x3a
 80099da:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	3302      	adds	r3, #2
 80099e0:	222f      	movs	r2, #47	@ 0x2f
 80099e2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	3303      	adds	r3, #3
 80099e8:	2200      	movs	r2, #0
 80099ea:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80099ec:	2300      	movs	r3, #0
 80099ee:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80099f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	371c      	adds	r7, #28
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr
 80099fe:	bf00      	nop
 8009a00:	200004c8 	.word	0x200004c8

08009a04 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b082      	sub	sp, #8
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009a0e:	2200      	movs	r2, #0
 8009a10:	6839      	ldr	r1, [r7, #0]
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f7ff ffaa 	bl	800996c <FATFS_LinkDriverEx>
 8009a18:	4603      	mov	r3, r0
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3708      	adds	r7, #8
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
	...

08009a24 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009a28:	2200      	movs	r2, #0
 8009a2a:	4912      	ldr	r1, [pc, #72]	@ (8009a74 <MX_USB_DEVICE_Init+0x50>)
 8009a2c:	4812      	ldr	r0, [pc, #72]	@ (8009a78 <MX_USB_DEVICE_Init+0x54>)
 8009a2e:	f7fe fc83 	bl	8008338 <USBD_Init>
 8009a32:	4603      	mov	r3, r0
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d001      	beq.n	8009a3c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009a38:	f7f7 fc54 	bl	80012e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009a3c:	490f      	ldr	r1, [pc, #60]	@ (8009a7c <MX_USB_DEVICE_Init+0x58>)
 8009a3e:	480e      	ldr	r0, [pc, #56]	@ (8009a78 <MX_USB_DEVICE_Init+0x54>)
 8009a40:	f7fe fcaa 	bl	8008398 <USBD_RegisterClass>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d001      	beq.n	8009a4e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009a4a:	f7f7 fc4b 	bl	80012e4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009a4e:	490c      	ldr	r1, [pc, #48]	@ (8009a80 <MX_USB_DEVICE_Init+0x5c>)
 8009a50:	4809      	ldr	r0, [pc, #36]	@ (8009a78 <MX_USB_DEVICE_Init+0x54>)
 8009a52:	f7fe fbe1 	bl	8008218 <USBD_CDC_RegisterInterface>
 8009a56:	4603      	mov	r3, r0
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d001      	beq.n	8009a60 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009a5c:	f7f7 fc42 	bl	80012e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009a60:	4805      	ldr	r0, [pc, #20]	@ (8009a78 <MX_USB_DEVICE_Init+0x54>)
 8009a62:	f7fe fccf 	bl	8008404 <USBD_Start>
 8009a66:	4603      	mov	r3, r0
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d001      	beq.n	8009a70 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009a6c:	f7f7 fc3a 	bl	80012e4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009a70:	bf00      	nop
 8009a72:	bd80      	pop	{r7, pc}
 8009a74:	200000c0 	.word	0x200000c0
 8009a78:	200004d4 	.word	0x200004d4
 8009a7c:	2000002c 	.word	0x2000002c
 8009a80:	200000ac 	.word	0x200000ac

08009a84 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009a88:	2200      	movs	r2, #0
 8009a8a:	4905      	ldr	r1, [pc, #20]	@ (8009aa0 <CDC_Init_FS+0x1c>)
 8009a8c:	4805      	ldr	r0, [pc, #20]	@ (8009aa4 <CDC_Init_FS+0x20>)
 8009a8e:	f7fe fbdd 	bl	800824c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009a92:	4905      	ldr	r1, [pc, #20]	@ (8009aa8 <CDC_Init_FS+0x24>)
 8009a94:	4803      	ldr	r0, [pc, #12]	@ (8009aa4 <CDC_Init_FS+0x20>)
 8009a96:	f7fe fbfb 	bl	8008290 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009a9a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	bd80      	pop	{r7, pc}
 8009aa0:	20000bb0 	.word	0x20000bb0
 8009aa4:	200004d4 	.word	0x200004d4
 8009aa8:	200007b0 	.word	0x200007b0

08009aac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009aac:	b480      	push	{r7}
 8009aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009ab0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr

08009abc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b083      	sub	sp, #12
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	6039      	str	r1, [r7, #0]
 8009ac6:	71fb      	strb	r3, [r7, #7]
 8009ac8:	4613      	mov	r3, r2
 8009aca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009acc:	79fb      	ldrb	r3, [r7, #7]
 8009ace:	2b23      	cmp	r3, #35	@ 0x23
 8009ad0:	d84a      	bhi.n	8009b68 <CDC_Control_FS+0xac>
 8009ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ad8 <CDC_Control_FS+0x1c>)
 8009ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad8:	08009b69 	.word	0x08009b69
 8009adc:	08009b69 	.word	0x08009b69
 8009ae0:	08009b69 	.word	0x08009b69
 8009ae4:	08009b69 	.word	0x08009b69
 8009ae8:	08009b69 	.word	0x08009b69
 8009aec:	08009b69 	.word	0x08009b69
 8009af0:	08009b69 	.word	0x08009b69
 8009af4:	08009b69 	.word	0x08009b69
 8009af8:	08009b69 	.word	0x08009b69
 8009afc:	08009b69 	.word	0x08009b69
 8009b00:	08009b69 	.word	0x08009b69
 8009b04:	08009b69 	.word	0x08009b69
 8009b08:	08009b69 	.word	0x08009b69
 8009b0c:	08009b69 	.word	0x08009b69
 8009b10:	08009b69 	.word	0x08009b69
 8009b14:	08009b69 	.word	0x08009b69
 8009b18:	08009b69 	.word	0x08009b69
 8009b1c:	08009b69 	.word	0x08009b69
 8009b20:	08009b69 	.word	0x08009b69
 8009b24:	08009b69 	.word	0x08009b69
 8009b28:	08009b69 	.word	0x08009b69
 8009b2c:	08009b69 	.word	0x08009b69
 8009b30:	08009b69 	.word	0x08009b69
 8009b34:	08009b69 	.word	0x08009b69
 8009b38:	08009b69 	.word	0x08009b69
 8009b3c:	08009b69 	.word	0x08009b69
 8009b40:	08009b69 	.word	0x08009b69
 8009b44:	08009b69 	.word	0x08009b69
 8009b48:	08009b69 	.word	0x08009b69
 8009b4c:	08009b69 	.word	0x08009b69
 8009b50:	08009b69 	.word	0x08009b69
 8009b54:	08009b69 	.word	0x08009b69
 8009b58:	08009b69 	.word	0x08009b69
 8009b5c:	08009b69 	.word	0x08009b69
 8009b60:	08009b69 	.word	0x08009b69
 8009b64:	08009b69 	.word	0x08009b69
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009b68:	bf00      	nop
  }

  return (USBD_OK);
 8009b6a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	370c      	adds	r7, #12
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr

08009b78 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b082      	sub	sp, #8
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009b82:	6879      	ldr	r1, [r7, #4]
 8009b84:	4805      	ldr	r0, [pc, #20]	@ (8009b9c <CDC_Receive_FS+0x24>)
 8009b86:	f7fe fb83 	bl	8008290 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009b8a:	4804      	ldr	r0, [pc, #16]	@ (8009b9c <CDC_Receive_FS+0x24>)
 8009b8c:	f7fe fb9e 	bl	80082cc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009b90:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3708      	adds	r7, #8
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	200004d4 	.word	0x200004d4

08009ba0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b087      	sub	sp, #28
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	60f8      	str	r0, [r7, #12]
 8009ba8:	60b9      	str	r1, [r7, #8]
 8009baa:	4613      	mov	r3, r2
 8009bac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009bb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	371c      	adds	r7, #28
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr
	...

08009bc4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b083      	sub	sp, #12
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	4603      	mov	r3, r0
 8009bcc:	6039      	str	r1, [r7, #0]
 8009bce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	2212      	movs	r2, #18
 8009bd4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009bd6:	4b03      	ldr	r3, [pc, #12]	@ (8009be4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	370c      	adds	r7, #12
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr
 8009be4:	200000e0 	.word	0x200000e0

08009be8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b083      	sub	sp, #12
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	4603      	mov	r3, r0
 8009bf0:	6039      	str	r1, [r7, #0]
 8009bf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	2204      	movs	r2, #4
 8009bf8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009bfa:	4b03      	ldr	r3, [pc, #12]	@ (8009c08 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	370c      	adds	r7, #12
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr
 8009c08:	20000100 	.word	0x20000100

08009c0c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b082      	sub	sp, #8
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	4603      	mov	r3, r0
 8009c14:	6039      	str	r1, [r7, #0]
 8009c16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c18:	79fb      	ldrb	r3, [r7, #7]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d105      	bne.n	8009c2a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009c1e:	683a      	ldr	r2, [r7, #0]
 8009c20:	4907      	ldr	r1, [pc, #28]	@ (8009c40 <USBD_FS_ProductStrDescriptor+0x34>)
 8009c22:	4808      	ldr	r0, [pc, #32]	@ (8009c44 <USBD_FS_ProductStrDescriptor+0x38>)
 8009c24:	f7ff fdc2 	bl	80097ac <USBD_GetString>
 8009c28:	e004      	b.n	8009c34 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009c2a:	683a      	ldr	r2, [r7, #0]
 8009c2c:	4904      	ldr	r1, [pc, #16]	@ (8009c40 <USBD_FS_ProductStrDescriptor+0x34>)
 8009c2e:	4805      	ldr	r0, [pc, #20]	@ (8009c44 <USBD_FS_ProductStrDescriptor+0x38>)
 8009c30:	f7ff fdbc 	bl	80097ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c34:	4b02      	ldr	r3, [pc, #8]	@ (8009c40 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3708      	adds	r7, #8
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}
 8009c3e:	bf00      	nop
 8009c40:	20000fb0 	.word	0x20000fb0
 8009c44:	0800a568 	.word	0x0800a568

08009c48 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b082      	sub	sp, #8
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	4603      	mov	r3, r0
 8009c50:	6039      	str	r1, [r7, #0]
 8009c52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009c54:	683a      	ldr	r2, [r7, #0]
 8009c56:	4904      	ldr	r1, [pc, #16]	@ (8009c68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009c58:	4804      	ldr	r0, [pc, #16]	@ (8009c6c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009c5a:	f7ff fda7 	bl	80097ac <USBD_GetString>
  return USBD_StrDesc;
 8009c5e:	4b02      	ldr	r3, [pc, #8]	@ (8009c68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3708      	adds	r7, #8
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}
 8009c68:	20000fb0 	.word	0x20000fb0
 8009c6c:	0800a580 	.word	0x0800a580

08009c70 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	4603      	mov	r3, r0
 8009c78:	6039      	str	r1, [r7, #0]
 8009c7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	221a      	movs	r2, #26
 8009c80:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009c82:	f000 f855 	bl	8009d30 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009c86:	4b02      	ldr	r3, [pc, #8]	@ (8009c90 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3708      	adds	r7, #8
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}
 8009c90:	20000104 	.word	0x20000104

08009c94 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	6039      	str	r1, [r7, #0]
 8009c9e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009ca0:	79fb      	ldrb	r3, [r7, #7]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d105      	bne.n	8009cb2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009ca6:	683a      	ldr	r2, [r7, #0]
 8009ca8:	4907      	ldr	r1, [pc, #28]	@ (8009cc8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009caa:	4808      	ldr	r0, [pc, #32]	@ (8009ccc <USBD_FS_ConfigStrDescriptor+0x38>)
 8009cac:	f7ff fd7e 	bl	80097ac <USBD_GetString>
 8009cb0:	e004      	b.n	8009cbc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009cb2:	683a      	ldr	r2, [r7, #0]
 8009cb4:	4904      	ldr	r1, [pc, #16]	@ (8009cc8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009cb6:	4805      	ldr	r0, [pc, #20]	@ (8009ccc <USBD_FS_ConfigStrDescriptor+0x38>)
 8009cb8:	f7ff fd78 	bl	80097ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8009cbc:	4b02      	ldr	r3, [pc, #8]	@ (8009cc8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3708      	adds	r7, #8
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	20000fb0 	.word	0x20000fb0
 8009ccc:	0800a594 	.word	0x0800a594

08009cd0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	6039      	str	r1, [r7, #0]
 8009cda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009cdc:	79fb      	ldrb	r3, [r7, #7]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d105      	bne.n	8009cee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009ce2:	683a      	ldr	r2, [r7, #0]
 8009ce4:	4907      	ldr	r1, [pc, #28]	@ (8009d04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009ce6:	4808      	ldr	r0, [pc, #32]	@ (8009d08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009ce8:	f7ff fd60 	bl	80097ac <USBD_GetString>
 8009cec:	e004      	b.n	8009cf8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009cee:	683a      	ldr	r2, [r7, #0]
 8009cf0:	4904      	ldr	r1, [pc, #16]	@ (8009d04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009cf2:	4805      	ldr	r0, [pc, #20]	@ (8009d08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009cf4:	f7ff fd5a 	bl	80097ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8009cf8:	4b02      	ldr	r3, [pc, #8]	@ (8009d04 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3708      	adds	r7, #8
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	bf00      	nop
 8009d04:	20000fb0 	.word	0x20000fb0
 8009d08:	0800a5a0 	.word	0x0800a5a0

08009d0c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b083      	sub	sp, #12
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	4603      	mov	r3, r0
 8009d14:	6039      	str	r1, [r7, #0]
 8009d16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	220c      	movs	r2, #12
 8009d1c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8009d1e:	4b03      	ldr	r3, [pc, #12]	@ (8009d2c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	370c      	adds	r7, #12
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr
 8009d2c:	200000f4 	.word	0x200000f4

08009d30 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009d36:	4b0f      	ldr	r3, [pc, #60]	@ (8009d74 <Get_SerialNum+0x44>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8009d78 <Get_SerialNum+0x48>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009d42:	4b0e      	ldr	r3, [pc, #56]	@ (8009d7c <Get_SerialNum+0x4c>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009d48:	68fa      	ldr	r2, [r7, #12]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	4413      	add	r3, r2
 8009d4e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d009      	beq.n	8009d6a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009d56:	2208      	movs	r2, #8
 8009d58:	4909      	ldr	r1, [pc, #36]	@ (8009d80 <Get_SerialNum+0x50>)
 8009d5a:	68f8      	ldr	r0, [r7, #12]
 8009d5c:	f000 f814 	bl	8009d88 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009d60:	2204      	movs	r2, #4
 8009d62:	4908      	ldr	r1, [pc, #32]	@ (8009d84 <Get_SerialNum+0x54>)
 8009d64:	68b8      	ldr	r0, [r7, #8]
 8009d66:	f000 f80f 	bl	8009d88 <IntToUnicode>
  }
}
 8009d6a:	bf00      	nop
 8009d6c:	3710      	adds	r7, #16
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}
 8009d72:	bf00      	nop
 8009d74:	1fff7a10 	.word	0x1fff7a10
 8009d78:	1fff7a14 	.word	0x1fff7a14
 8009d7c:	1fff7a18 	.word	0x1fff7a18
 8009d80:	20000106 	.word	0x20000106
 8009d84:	20000116 	.word	0x20000116

08009d88 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b087      	sub	sp, #28
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	60b9      	str	r1, [r7, #8]
 8009d92:	4613      	mov	r3, r2
 8009d94:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009d96:	2300      	movs	r3, #0
 8009d98:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	75fb      	strb	r3, [r7, #23]
 8009d9e:	e027      	b.n	8009df0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	0f1b      	lsrs	r3, r3, #28
 8009da4:	2b09      	cmp	r3, #9
 8009da6:	d80b      	bhi.n	8009dc0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	0f1b      	lsrs	r3, r3, #28
 8009dac:	b2da      	uxtb	r2, r3
 8009dae:	7dfb      	ldrb	r3, [r7, #23]
 8009db0:	005b      	lsls	r3, r3, #1
 8009db2:	4619      	mov	r1, r3
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	440b      	add	r3, r1
 8009db8:	3230      	adds	r2, #48	@ 0x30
 8009dba:	b2d2      	uxtb	r2, r2
 8009dbc:	701a      	strb	r2, [r3, #0]
 8009dbe:	e00a      	b.n	8009dd6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	0f1b      	lsrs	r3, r3, #28
 8009dc4:	b2da      	uxtb	r2, r3
 8009dc6:	7dfb      	ldrb	r3, [r7, #23]
 8009dc8:	005b      	lsls	r3, r3, #1
 8009dca:	4619      	mov	r1, r3
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	440b      	add	r3, r1
 8009dd0:	3237      	adds	r2, #55	@ 0x37
 8009dd2:	b2d2      	uxtb	r2, r2
 8009dd4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	011b      	lsls	r3, r3, #4
 8009dda:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009ddc:	7dfb      	ldrb	r3, [r7, #23]
 8009dde:	005b      	lsls	r3, r3, #1
 8009de0:	3301      	adds	r3, #1
 8009de2:	68ba      	ldr	r2, [r7, #8]
 8009de4:	4413      	add	r3, r2
 8009de6:	2200      	movs	r2, #0
 8009de8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009dea:	7dfb      	ldrb	r3, [r7, #23]
 8009dec:	3301      	adds	r3, #1
 8009dee:	75fb      	strb	r3, [r7, #23]
 8009df0:	7dfa      	ldrb	r2, [r7, #23]
 8009df2:	79fb      	ldrb	r3, [r7, #7]
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d3d3      	bcc.n	8009da0 <IntToUnicode+0x18>
  }
}
 8009df8:	bf00      	nop
 8009dfa:	bf00      	nop
 8009dfc:	371c      	adds	r7, #28
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e04:	4770      	bx	lr
	...

08009e08 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b0a0      	sub	sp, #128	@ 0x80
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e10:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009e14:	2200      	movs	r2, #0
 8009e16:	601a      	str	r2, [r3, #0]
 8009e18:	605a      	str	r2, [r3, #4]
 8009e1a:	609a      	str	r2, [r3, #8]
 8009e1c:	60da      	str	r2, [r3, #12]
 8009e1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009e20:	f107 0310 	add.w	r3, r7, #16
 8009e24:	225c      	movs	r2, #92	@ 0x5c
 8009e26:	2100      	movs	r1, #0
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f000 fb65 	bl	800a4f8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009e36:	d149      	bne.n	8009ecc <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8009e38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009e3c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009e42:	f107 0310 	add.w	r3, r7, #16
 8009e46:	4618      	mov	r0, r3
 8009e48:	f7fa f83c 	bl	8003ec4 <HAL_RCCEx_PeriphCLKConfig>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d001      	beq.n	8009e56 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8009e52:	f7f7 fa47 	bl	80012e4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009e56:	2300      	movs	r3, #0
 8009e58:	60fb      	str	r3, [r7, #12]
 8009e5a:	4b1e      	ldr	r3, [pc, #120]	@ (8009ed4 <HAL_PCD_MspInit+0xcc>)
 8009e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e5e:	4a1d      	ldr	r2, [pc, #116]	@ (8009ed4 <HAL_PCD_MspInit+0xcc>)
 8009e60:	f043 0301 	orr.w	r3, r3, #1
 8009e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8009e66:	4b1b      	ldr	r3, [pc, #108]	@ (8009ed4 <HAL_PCD_MspInit+0xcc>)
 8009e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e6a:	f003 0301 	and.w	r3, r3, #1
 8009e6e:	60fb      	str	r3, [r7, #12]
 8009e70:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009e72:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009e76:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e78:	2302      	movs	r3, #2
 8009e7a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e80:	2303      	movs	r3, #3
 8009e82:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009e84:	230a      	movs	r3, #10
 8009e86:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009e88:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	4812      	ldr	r0, [pc, #72]	@ (8009ed8 <HAL_PCD_MspInit+0xd0>)
 8009e90:	f7f8 f942 	bl	8002118 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009e94:	4b0f      	ldr	r3, [pc, #60]	@ (8009ed4 <HAL_PCD_MspInit+0xcc>)
 8009e96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e98:	4a0e      	ldr	r2, [pc, #56]	@ (8009ed4 <HAL_PCD_MspInit+0xcc>)
 8009e9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e9e:	6353      	str	r3, [r2, #52]	@ 0x34
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	60bb      	str	r3, [r7, #8]
 8009ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8009ed4 <HAL_PCD_MspInit+0xcc>)
 8009ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ea8:	4a0a      	ldr	r2, [pc, #40]	@ (8009ed4 <HAL_PCD_MspInit+0xcc>)
 8009eaa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009eae:	6453      	str	r3, [r2, #68]	@ 0x44
 8009eb0:	4b08      	ldr	r3, [pc, #32]	@ (8009ed4 <HAL_PCD_MspInit+0xcc>)
 8009eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009eb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009eb8:	60bb      	str	r3, [r7, #8]
 8009eba:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	2100      	movs	r1, #0
 8009ec0:	2043      	movs	r0, #67	@ 0x43
 8009ec2:	f7f8 f860 	bl	8001f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009ec6:	2043      	movs	r0, #67	@ 0x43
 8009ec8:	f7f8 f879 	bl	8001fbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009ecc:	bf00      	nop
 8009ece:	3780      	adds	r7, #128	@ 0x80
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}
 8009ed4:	40023800 	.word	0x40023800
 8009ed8:	40020000 	.word	0x40020000

08009edc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b082      	sub	sp, #8
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	4610      	mov	r0, r2
 8009ef4:	f7fe fad3 	bl	800849e <USBD_LL_SetupStage>
}
 8009ef8:	bf00      	nop
 8009efa:	3708      	adds	r7, #8
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b082      	sub	sp, #8
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	460b      	mov	r3, r1
 8009f0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8009f12:	78fa      	ldrb	r2, [r7, #3]
 8009f14:	6879      	ldr	r1, [r7, #4]
 8009f16:	4613      	mov	r3, r2
 8009f18:	00db      	lsls	r3, r3, #3
 8009f1a:	4413      	add	r3, r2
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	440b      	add	r3, r1
 8009f20:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8009f24:	681a      	ldr	r2, [r3, #0]
 8009f26:	78fb      	ldrb	r3, [r7, #3]
 8009f28:	4619      	mov	r1, r3
 8009f2a:	f7fe fb0d 	bl	8008548 <USBD_LL_DataOutStage>
}
 8009f2e:	bf00      	nop
 8009f30:	3708      	adds	r7, #8
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}

08009f36 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f36:	b580      	push	{r7, lr}
 8009f38:	b082      	sub	sp, #8
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
 8009f3e:	460b      	mov	r3, r1
 8009f40:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8009f48:	78fa      	ldrb	r2, [r7, #3]
 8009f4a:	6879      	ldr	r1, [r7, #4]
 8009f4c:	4613      	mov	r3, r2
 8009f4e:	00db      	lsls	r3, r3, #3
 8009f50:	4413      	add	r3, r2
 8009f52:	009b      	lsls	r3, r3, #2
 8009f54:	440b      	add	r3, r1
 8009f56:	334c      	adds	r3, #76	@ 0x4c
 8009f58:	681a      	ldr	r2, [r3, #0]
 8009f5a:	78fb      	ldrb	r3, [r7, #3]
 8009f5c:	4619      	mov	r1, r3
 8009f5e:	f7fe fba6 	bl	80086ae <USBD_LL_DataInStage>
}
 8009f62:	bf00      	nop
 8009f64:	3708      	adds	r7, #8
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}

08009f6a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f6a:	b580      	push	{r7, lr}
 8009f6c:	b082      	sub	sp, #8
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f7fe fcda 	bl	8008932 <USBD_LL_SOF>
}
 8009f7e:	bf00      	nop
 8009f80:	3708      	adds	r7, #8
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}

08009f86 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f86:	b580      	push	{r7, lr}
 8009f88:	b084      	sub	sp, #16
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009f8e:	2301      	movs	r3, #1
 8009f90:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	68db      	ldr	r3, [r3, #12]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d102      	bne.n	8009fa0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	73fb      	strb	r3, [r7, #15]
 8009f9e:	e008      	b.n	8009fb2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	68db      	ldr	r3, [r3, #12]
 8009fa4:	2b02      	cmp	r3, #2
 8009fa6:	d102      	bne.n	8009fae <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009fa8:	2301      	movs	r3, #1
 8009faa:	73fb      	strb	r3, [r7, #15]
 8009fac:	e001      	b.n	8009fb2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009fae:	f7f7 f999 	bl	80012e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8009fb8:	7bfa      	ldrb	r2, [r7, #15]
 8009fba:	4611      	mov	r1, r2
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f7fe fc7a 	bl	80088b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f7fe fc22 	bl	8008812 <USBD_LL_Reset>
}
 8009fce:	bf00      	nop
 8009fd0:	3710      	adds	r7, #16
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
	...

08009fd8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b082      	sub	sp, #8
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7fe fc75 	bl	80088d6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	687a      	ldr	r2, [r7, #4]
 8009ff8:	6812      	ldr	r2, [r2, #0]
 8009ffa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009ffe:	f043 0301 	orr.w	r3, r3, #1
 800a002:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6a1b      	ldr	r3, [r3, #32]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d005      	beq.n	800a018 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a00c:	4b04      	ldr	r3, [pc, #16]	@ (800a020 <HAL_PCD_SuspendCallback+0x48>)
 800a00e:	691b      	ldr	r3, [r3, #16]
 800a010:	4a03      	ldr	r2, [pc, #12]	@ (800a020 <HAL_PCD_SuspendCallback+0x48>)
 800a012:	f043 0306 	orr.w	r3, r3, #6
 800a016:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a018:	bf00      	nop
 800a01a:	3708      	adds	r7, #8
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}
 800a020:	e000ed00 	.word	0xe000ed00

0800a024 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b082      	sub	sp, #8
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800a032:	4618      	mov	r0, r3
 800a034:	f7fe fc65 	bl	8008902 <USBD_LL_Resume>
}
 800a038:	bf00      	nop
 800a03a:	3708      	adds	r7, #8
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b082      	sub	sp, #8
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	460b      	mov	r3, r1
 800a04a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800a052:	78fa      	ldrb	r2, [r7, #3]
 800a054:	4611      	mov	r1, r2
 800a056:	4618      	mov	r0, r3
 800a058:	f7fe fcbd 	bl	80089d6 <USBD_LL_IsoOUTIncomplete>
}
 800a05c:	bf00      	nop
 800a05e:	3708      	adds	r7, #8
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b082      	sub	sp, #8
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	460b      	mov	r3, r1
 800a06e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800a076:	78fa      	ldrb	r2, [r7, #3]
 800a078:	4611      	mov	r1, r2
 800a07a:	4618      	mov	r0, r3
 800a07c:	f7fe fc79 	bl	8008972 <USBD_LL_IsoINIncomplete>
}
 800a080:	bf00      	nop
 800a082:	3708      	adds	r7, #8
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b082      	sub	sp, #8
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800a096:	4618      	mov	r0, r3
 800a098:	f7fe fccf 	bl	8008a3a <USBD_LL_DevConnected>
}
 800a09c:	bf00      	nop
 800a09e:	3708      	adds	r7, #8
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f7fe fccc 	bl	8008a50 <USBD_LL_DevDisconnected>
}
 800a0b8:	bf00      	nop
 800a0ba:	3708      	adds	r7, #8
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b082      	sub	sp, #8
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	781b      	ldrb	r3, [r3, #0]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d13c      	bne.n	800a14a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a0d0:	4a20      	ldr	r2, [pc, #128]	@ (800a154 <USBD_LL_Init+0x94>)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	4a1e      	ldr	r2, [pc, #120]	@ (800a154 <USBD_LL_Init+0x94>)
 800a0dc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a0e0:	4b1c      	ldr	r3, [pc, #112]	@ (800a154 <USBD_LL_Init+0x94>)
 800a0e2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a0e6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800a0e8:	4b1a      	ldr	r3, [pc, #104]	@ (800a154 <USBD_LL_Init+0x94>)
 800a0ea:	2206      	movs	r2, #6
 800a0ec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a0ee:	4b19      	ldr	r3, [pc, #100]	@ (800a154 <USBD_LL_Init+0x94>)
 800a0f0:	2202      	movs	r2, #2
 800a0f2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a0f4:	4b17      	ldr	r3, [pc, #92]	@ (800a154 <USBD_LL_Init+0x94>)
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a0fa:	4b16      	ldr	r3, [pc, #88]	@ (800a154 <USBD_LL_Init+0x94>)
 800a0fc:	2202      	movs	r2, #2
 800a0fe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a100:	4b14      	ldr	r3, [pc, #80]	@ (800a154 <USBD_LL_Init+0x94>)
 800a102:	2200      	movs	r2, #0
 800a104:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a106:	4b13      	ldr	r3, [pc, #76]	@ (800a154 <USBD_LL_Init+0x94>)
 800a108:	2200      	movs	r2, #0
 800a10a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a10c:	4b11      	ldr	r3, [pc, #68]	@ (800a154 <USBD_LL_Init+0x94>)
 800a10e:	2200      	movs	r2, #0
 800a110:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a112:	4b10      	ldr	r3, [pc, #64]	@ (800a154 <USBD_LL_Init+0x94>)
 800a114:	2200      	movs	r2, #0
 800a116:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a118:	4b0e      	ldr	r3, [pc, #56]	@ (800a154 <USBD_LL_Init+0x94>)
 800a11a:	2200      	movs	r2, #0
 800a11c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a11e:	480d      	ldr	r0, [pc, #52]	@ (800a154 <USBD_LL_Init+0x94>)
 800a120:	f7f8 faec 	bl	80026fc <HAL_PCD_Init>
 800a124:	4603      	mov	r3, r0
 800a126:	2b00      	cmp	r3, #0
 800a128:	d001      	beq.n	800a12e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a12a:	f7f7 f8db 	bl	80012e4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a12e:	2180      	movs	r1, #128	@ 0x80
 800a130:	4808      	ldr	r0, [pc, #32]	@ (800a154 <USBD_LL_Init+0x94>)
 800a132:	f7f9 fd78 	bl	8003c26 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a136:	2240      	movs	r2, #64	@ 0x40
 800a138:	2100      	movs	r1, #0
 800a13a:	4806      	ldr	r0, [pc, #24]	@ (800a154 <USBD_LL_Init+0x94>)
 800a13c:	f7f9 fd2c 	bl	8003b98 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a140:	2280      	movs	r2, #128	@ 0x80
 800a142:	2101      	movs	r1, #1
 800a144:	4803      	ldr	r0, [pc, #12]	@ (800a154 <USBD_LL_Init+0x94>)
 800a146:	f7f9 fd27 	bl	8003b98 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a14a:	2300      	movs	r3, #0
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3708      	adds	r7, #8
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}
 800a154:	200011b0 	.word	0x200011b0

0800a158 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b084      	sub	sp, #16
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a160:	2300      	movs	r3, #0
 800a162:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a164:	2300      	movs	r3, #0
 800a166:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a16e:	4618      	mov	r0, r3
 800a170:	f7f8 fbe8 	bl	8002944 <HAL_PCD_Start>
 800a174:	4603      	mov	r3, r0
 800a176:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a178:	7bfb      	ldrb	r3, [r7, #15]
 800a17a:	4618      	mov	r0, r3
 800a17c:	f000 f990 	bl	800a4a0 <USBD_Get_USB_Status>
 800a180:	4603      	mov	r3, r0
 800a182:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a184:	7bbb      	ldrb	r3, [r7, #14]
}
 800a186:	4618      	mov	r0, r3
 800a188:	3710      	adds	r7, #16
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}

0800a18e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a18e:	b580      	push	{r7, lr}
 800a190:	b084      	sub	sp, #16
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
 800a196:	4608      	mov	r0, r1
 800a198:	4611      	mov	r1, r2
 800a19a:	461a      	mov	r2, r3
 800a19c:	4603      	mov	r3, r0
 800a19e:	70fb      	strb	r3, [r7, #3]
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	70bb      	strb	r3, [r7, #2]
 800a1a4:	4613      	mov	r3, r2
 800a1a6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a1b6:	78bb      	ldrb	r3, [r7, #2]
 800a1b8:	883a      	ldrh	r2, [r7, #0]
 800a1ba:	78f9      	ldrb	r1, [r7, #3]
 800a1bc:	f7f9 f8e6 	bl	800338c <HAL_PCD_EP_Open>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1c4:	7bfb      	ldrb	r3, [r7, #15]
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f000 f96a 	bl	800a4a0 <USBD_Get_USB_Status>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3710      	adds	r7, #16
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}

0800a1da <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1da:	b580      	push	{r7, lr}
 800a1dc:	b084      	sub	sp, #16
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	6078      	str	r0, [r7, #4]
 800a1e2:	460b      	mov	r3, r1
 800a1e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a1f4:	78fa      	ldrb	r2, [r7, #3]
 800a1f6:	4611      	mov	r1, r2
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f7f9 f92f 	bl	800345c <HAL_PCD_EP_Close>
 800a1fe:	4603      	mov	r3, r0
 800a200:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a202:	7bfb      	ldrb	r3, [r7, #15]
 800a204:	4618      	mov	r0, r3
 800a206:	f000 f94b 	bl	800a4a0 <USBD_Get_USB_Status>
 800a20a:	4603      	mov	r3, r0
 800a20c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a20e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a210:	4618      	mov	r0, r3
 800a212:	3710      	adds	r7, #16
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b084      	sub	sp, #16
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	460b      	mov	r3, r1
 800a222:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a224:	2300      	movs	r3, #0
 800a226:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a228:	2300      	movs	r3, #0
 800a22a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a232:	78fa      	ldrb	r2, [r7, #3]
 800a234:	4611      	mov	r1, r2
 800a236:	4618      	mov	r0, r3
 800a238:	f7f9 fa07 	bl	800364a <HAL_PCD_EP_SetStall>
 800a23c:	4603      	mov	r3, r0
 800a23e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a240:	7bfb      	ldrb	r3, [r7, #15]
 800a242:	4618      	mov	r0, r3
 800a244:	f000 f92c 	bl	800a4a0 <USBD_Get_USB_Status>
 800a248:	4603      	mov	r3, r0
 800a24a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a24c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3710      	adds	r7, #16
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}

0800a256 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a256:	b580      	push	{r7, lr}
 800a258:	b084      	sub	sp, #16
 800a25a:	af00      	add	r7, sp, #0
 800a25c:	6078      	str	r0, [r7, #4]
 800a25e:	460b      	mov	r3, r1
 800a260:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a262:	2300      	movs	r3, #0
 800a264:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a266:	2300      	movs	r3, #0
 800a268:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a270:	78fa      	ldrb	r2, [r7, #3]
 800a272:	4611      	mov	r1, r2
 800a274:	4618      	mov	r0, r3
 800a276:	f7f9 fa4c 	bl	8003712 <HAL_PCD_EP_ClrStall>
 800a27a:	4603      	mov	r3, r0
 800a27c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a27e:	7bfb      	ldrb	r3, [r7, #15]
 800a280:	4618      	mov	r0, r3
 800a282:	f000 f90d 	bl	800a4a0 <USBD_Get_USB_Status>
 800a286:	4603      	mov	r3, r0
 800a288:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a28a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3710      	adds	r7, #16
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}

0800a294 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a294:	b480      	push	{r7}
 800a296:	b085      	sub	sp, #20
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	460b      	mov	r3, r1
 800a29e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a2a6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a2a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	da0b      	bge.n	800a2c8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a2b0:	78fb      	ldrb	r3, [r7, #3]
 800a2b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a2b6:	68f9      	ldr	r1, [r7, #12]
 800a2b8:	4613      	mov	r3, r2
 800a2ba:	00db      	lsls	r3, r3, #3
 800a2bc:	4413      	add	r3, r2
 800a2be:	009b      	lsls	r3, r3, #2
 800a2c0:	440b      	add	r3, r1
 800a2c2:	333e      	adds	r3, #62	@ 0x3e
 800a2c4:	781b      	ldrb	r3, [r3, #0]
 800a2c6:	e00b      	b.n	800a2e0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a2c8:	78fb      	ldrb	r3, [r7, #3]
 800a2ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a2ce:	68f9      	ldr	r1, [r7, #12]
 800a2d0:	4613      	mov	r3, r2
 800a2d2:	00db      	lsls	r3, r3, #3
 800a2d4:	4413      	add	r3, r2
 800a2d6:	009b      	lsls	r3, r3, #2
 800a2d8:	440b      	add	r3, r1
 800a2da:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800a2de:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3714      	adds	r7, #20
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr

0800a2ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b084      	sub	sp, #16
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	460b      	mov	r3, r1
 800a2f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a306:	78fa      	ldrb	r2, [r7, #3]
 800a308:	4611      	mov	r1, r2
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7f9 f819 	bl	8003342 <HAL_PCD_SetAddress>
 800a310:	4603      	mov	r3, r0
 800a312:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a314:	7bfb      	ldrb	r3, [r7, #15]
 800a316:	4618      	mov	r0, r3
 800a318:	f000 f8c2 	bl	800a4a0 <USBD_Get_USB_Status>
 800a31c:	4603      	mov	r3, r0
 800a31e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a320:	7bbb      	ldrb	r3, [r7, #14]
}
 800a322:	4618      	mov	r0, r3
 800a324:	3710      	adds	r7, #16
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}

0800a32a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a32a:	b580      	push	{r7, lr}
 800a32c:	b086      	sub	sp, #24
 800a32e:	af00      	add	r7, sp, #0
 800a330:	60f8      	str	r0, [r7, #12]
 800a332:	607a      	str	r2, [r7, #4]
 800a334:	603b      	str	r3, [r7, #0]
 800a336:	460b      	mov	r3, r1
 800a338:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a33a:	2300      	movs	r3, #0
 800a33c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a33e:	2300      	movs	r3, #0
 800a340:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a348:	7af9      	ldrb	r1, [r7, #11]
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	687a      	ldr	r2, [r7, #4]
 800a34e:	f7f9 f932 	bl	80035b6 <HAL_PCD_EP_Transmit>
 800a352:	4603      	mov	r3, r0
 800a354:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a356:	7dfb      	ldrb	r3, [r7, #23]
 800a358:	4618      	mov	r0, r3
 800a35a:	f000 f8a1 	bl	800a4a0 <USBD_Get_USB_Status>
 800a35e:	4603      	mov	r3, r0
 800a360:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a362:	7dbb      	ldrb	r3, [r7, #22]
}
 800a364:	4618      	mov	r0, r3
 800a366:	3718      	adds	r7, #24
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b086      	sub	sp, #24
 800a370:	af00      	add	r7, sp, #0
 800a372:	60f8      	str	r0, [r7, #12]
 800a374:	607a      	str	r2, [r7, #4]
 800a376:	603b      	str	r3, [r7, #0]
 800a378:	460b      	mov	r3, r1
 800a37a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a37c:	2300      	movs	r3, #0
 800a37e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a380:	2300      	movs	r3, #0
 800a382:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a38a:	7af9      	ldrb	r1, [r7, #11]
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	687a      	ldr	r2, [r7, #4]
 800a390:	f7f9 f8ae 	bl	80034f0 <HAL_PCD_EP_Receive>
 800a394:	4603      	mov	r3, r0
 800a396:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a398:	7dfb      	ldrb	r3, [r7, #23]
 800a39a:	4618      	mov	r0, r3
 800a39c:	f000 f880 	bl	800a4a0 <USBD_Get_USB_Status>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a3a4:	7dbb      	ldrb	r3, [r7, #22]
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3718      	adds	r7, #24
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}

0800a3ae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3ae:	b580      	push	{r7, lr}
 800a3b0:	b082      	sub	sp, #8
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	6078      	str	r0, [r7, #4]
 800a3b6:	460b      	mov	r3, r1
 800a3b8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a3c0:	78fa      	ldrb	r2, [r7, #3]
 800a3c2:	4611      	mov	r1, r2
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7f9 f8de 	bl	8003586 <HAL_PCD_EP_GetRxCount>
 800a3ca:	4603      	mov	r3, r0
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3708      	adds	r7, #8
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b082      	sub	sp, #8
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	460b      	mov	r3, r1
 800a3de:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a3e0:	78fb      	ldrb	r3, [r7, #3]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d002      	beq.n	800a3ec <HAL_PCDEx_LPM_Callback+0x18>
 800a3e6:	2b01      	cmp	r3, #1
 800a3e8:	d01f      	beq.n	800a42a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a3ea:	e03b      	b.n	800a464 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6a1b      	ldr	r3, [r3, #32]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d007      	beq.n	800a404 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800a3f4:	f7f6 fccc 	bl	8000d90 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a3f8:	4b1c      	ldr	r3, [pc, #112]	@ (800a46c <HAL_PCDEx_LPM_Callback+0x98>)
 800a3fa:	691b      	ldr	r3, [r3, #16]
 800a3fc:	4a1b      	ldr	r2, [pc, #108]	@ (800a46c <HAL_PCDEx_LPM_Callback+0x98>)
 800a3fe:	f023 0306 	bic.w	r3, r3, #6
 800a402:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	687a      	ldr	r2, [r7, #4]
 800a410:	6812      	ldr	r2, [r2, #0]
 800a412:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a416:	f023 0301 	bic.w	r3, r3, #1
 800a41a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800a422:	4618      	mov	r0, r3
 800a424:	f7fe fa6d 	bl	8008902 <USBD_LL_Resume>
    break;
 800a428:	e01c      	b.n	800a464 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	687a      	ldr	r2, [r7, #4]
 800a436:	6812      	ldr	r2, [r2, #0]
 800a438:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a43c:	f043 0301 	orr.w	r3, r3, #1
 800a440:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800a448:	4618      	mov	r0, r3
 800a44a:	f7fe fa44 	bl	80088d6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6a1b      	ldr	r3, [r3, #32]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d005      	beq.n	800a462 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a456:	4b05      	ldr	r3, [pc, #20]	@ (800a46c <HAL_PCDEx_LPM_Callback+0x98>)
 800a458:	691b      	ldr	r3, [r3, #16]
 800a45a:	4a04      	ldr	r2, [pc, #16]	@ (800a46c <HAL_PCDEx_LPM_Callback+0x98>)
 800a45c:	f043 0306 	orr.w	r3, r3, #6
 800a460:	6113      	str	r3, [r2, #16]
    break;
 800a462:	bf00      	nop
}
 800a464:	bf00      	nop
 800a466:	3708      	adds	r7, #8
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}
 800a46c:	e000ed00 	.word	0xe000ed00

0800a470 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a470:	b480      	push	{r7}
 800a472:	b083      	sub	sp, #12
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a478:	4b03      	ldr	r3, [pc, #12]	@ (800a488 <USBD_static_malloc+0x18>)
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	370c      	adds	r7, #12
 800a47e:	46bd      	mov	sp, r7
 800a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a484:	4770      	bx	lr
 800a486:	bf00      	nop
 800a488:	200016bc 	.word	0x200016bc

0800a48c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b083      	sub	sp, #12
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]

}
 800a494:	bf00      	nop
 800a496:	370c      	adds	r7, #12
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr

0800a4a0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b085      	sub	sp, #20
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a4ae:	79fb      	ldrb	r3, [r7, #7]
 800a4b0:	2b03      	cmp	r3, #3
 800a4b2:	d817      	bhi.n	800a4e4 <USBD_Get_USB_Status+0x44>
 800a4b4:	a201      	add	r2, pc, #4	@ (adr r2, 800a4bc <USBD_Get_USB_Status+0x1c>)
 800a4b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ba:	bf00      	nop
 800a4bc:	0800a4cd 	.word	0x0800a4cd
 800a4c0:	0800a4d3 	.word	0x0800a4d3
 800a4c4:	0800a4d9 	.word	0x0800a4d9
 800a4c8:	0800a4df 	.word	0x0800a4df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	73fb      	strb	r3, [r7, #15]
    break;
 800a4d0:	e00b      	b.n	800a4ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a4d2:	2303      	movs	r3, #3
 800a4d4:	73fb      	strb	r3, [r7, #15]
    break;
 800a4d6:	e008      	b.n	800a4ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	73fb      	strb	r3, [r7, #15]
    break;
 800a4dc:	e005      	b.n	800a4ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a4de:	2303      	movs	r3, #3
 800a4e0:	73fb      	strb	r3, [r7, #15]
    break;
 800a4e2:	e002      	b.n	800a4ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a4e4:	2303      	movs	r3, #3
 800a4e6:	73fb      	strb	r3, [r7, #15]
    break;
 800a4e8:	bf00      	nop
  }
  return usb_status;
 800a4ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3714      	adds	r7, #20
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr

0800a4f8 <memset>:
 800a4f8:	4402      	add	r2, r0
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d100      	bne.n	800a502 <memset+0xa>
 800a500:	4770      	bx	lr
 800a502:	f803 1b01 	strb.w	r1, [r3], #1
 800a506:	e7f9      	b.n	800a4fc <memset+0x4>

0800a508 <__libc_init_array>:
 800a508:	b570      	push	{r4, r5, r6, lr}
 800a50a:	4d0d      	ldr	r5, [pc, #52]	@ (800a540 <__libc_init_array+0x38>)
 800a50c:	4c0d      	ldr	r4, [pc, #52]	@ (800a544 <__libc_init_array+0x3c>)
 800a50e:	1b64      	subs	r4, r4, r5
 800a510:	10a4      	asrs	r4, r4, #2
 800a512:	2600      	movs	r6, #0
 800a514:	42a6      	cmp	r6, r4
 800a516:	d109      	bne.n	800a52c <__libc_init_array+0x24>
 800a518:	4d0b      	ldr	r5, [pc, #44]	@ (800a548 <__libc_init_array+0x40>)
 800a51a:	4c0c      	ldr	r4, [pc, #48]	@ (800a54c <__libc_init_array+0x44>)
 800a51c:	f000 f818 	bl	800a550 <_init>
 800a520:	1b64      	subs	r4, r4, r5
 800a522:	10a4      	asrs	r4, r4, #2
 800a524:	2600      	movs	r6, #0
 800a526:	42a6      	cmp	r6, r4
 800a528:	d105      	bne.n	800a536 <__libc_init_array+0x2e>
 800a52a:	bd70      	pop	{r4, r5, r6, pc}
 800a52c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a530:	4798      	blx	r3
 800a532:	3601      	adds	r6, #1
 800a534:	e7ee      	b.n	800a514 <__libc_init_array+0xc>
 800a536:	f855 3b04 	ldr.w	r3, [r5], #4
 800a53a:	4798      	blx	r3
 800a53c:	3601      	adds	r6, #1
 800a53e:	e7f2      	b.n	800a526 <__libc_init_array+0x1e>
 800a540:	0800a5d0 	.word	0x0800a5d0
 800a544:	0800a5d0 	.word	0x0800a5d0
 800a548:	0800a5d0 	.word	0x0800a5d0
 800a54c:	0800a5d4 	.word	0x0800a5d4

0800a550 <_init>:
 800a550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a552:	bf00      	nop
 800a554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a556:	bc08      	pop	{r3}
 800a558:	469e      	mov	lr, r3
 800a55a:	4770      	bx	lr

0800a55c <_fini>:
 800a55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a55e:	bf00      	nop
 800a560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a562:	bc08      	pop	{r3}
 800a564:	469e      	mov	lr, r3
 800a566:	4770      	bx	lr
