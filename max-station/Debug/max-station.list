
max-station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a418  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800a5dc  0800a5dc  0000b5dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a63c  0800a63c  0000c120  2**0
                  CONTENTS
  4 .ARM          00000008  0800a63c  0800a63c  0000b63c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a644  0800a644  0000c120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a644  0800a644  0000b644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a648  0800a648  0000b648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  20000000  0800a64c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017c4  20000120  0800a76c  0000c120  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200018e4  0800a76c  0000c8e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c120  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ada4  00000000  00000000  0000c150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004211  00000000  00000000  00026ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001590  00000000  00000000  0002b108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000109e  00000000  00000000  0002c698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027784  00000000  00000000  0002d736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f922  00000000  00000000  00054eba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df3a7  00000000  00000000  000747dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00153b83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059ec  00000000  00000000  00153bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  001595b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000120 	.word	0x20000120
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800a5c4 	.word	0x0800a5c4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000124 	.word	0x20000124
 8000200:	0800a5c4 	.word	0x0800a5c4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 80004fc:	22b0      	movs	r2, #176	@ 0xb0
 80004fe:	2100      	movs	r1, #0
 8000500:	6878      	ldr	r0, [r7, #4]
 8000502:	f00a f833 	bl	800a56c <memset>
    return 1;
 8000506:	2301      	movs	r3, #1
}
 8000508:	4618      	mov	r0, r3
 800050a:	3708      	adds	r7, #8
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}

08000510 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	if(huart == &huart3){
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	4a13      	ldr	r2, [pc, #76]	@ (8000568 <HAL_UART_RxCpltCallback+0x58>)
 800051c:	4293      	cmp	r3, r2
 800051e:	d11e      	bne.n	800055e <HAL_UART_RxCpltCallback+0x4e>
	if(rx_data_lora != '\n'&& rx_index_lora < LORA_RX_BUFFER_SIZE){
 8000520:	4b12      	ldr	r3, [pc, #72]	@ (800056c <HAL_UART_RxCpltCallback+0x5c>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	2b0a      	cmp	r3, #10
 8000526:	d00f      	beq.n	8000548 <HAL_UART_RxCpltCallback+0x38>
 8000528:	4b11      	ldr	r3, [pc, #68]	@ (8000570 <HAL_UART_RxCpltCallback+0x60>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b45      	cmp	r3, #69	@ 0x45
 800052e:	d80b      	bhi.n	8000548 <HAL_UART_RxCpltCallback+0x38>
	lora_rx_buffer[rx_index_lora++]=rx_data_lora;
 8000530:	4b0f      	ldr	r3, [pc, #60]	@ (8000570 <HAL_UART_RxCpltCallback+0x60>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	1c5a      	adds	r2, r3, #1
 8000536:	b2d1      	uxtb	r1, r2
 8000538:	4a0d      	ldr	r2, [pc, #52]	@ (8000570 <HAL_UART_RxCpltCallback+0x60>)
 800053a:	7011      	strb	r1, [r2, #0]
 800053c:	461a      	mov	r2, r3
 800053e:	4b0b      	ldr	r3, [pc, #44]	@ (800056c <HAL_UART_RxCpltCallback+0x5c>)
 8000540:	7819      	ldrb	r1, [r3, #0]
 8000542:	4b0c      	ldr	r3, [pc, #48]	@ (8000574 <HAL_UART_RxCpltCallback+0x64>)
 8000544:	5499      	strb	r1, [r3, r2]
 8000546:	e005      	b.n	8000554 <HAL_UART_RxCpltCallback+0x44>

	}
	else{
		rx_data_lora=0;
 8000548:	4b08      	ldr	r3, [pc, #32]	@ (800056c <HAL_UART_RxCpltCallback+0x5c>)
 800054a:	2200      	movs	r2, #0
 800054c:	701a      	strb	r2, [r3, #0]
		rx_index_lora=0;
 800054e:	4b08      	ldr	r3, [pc, #32]	@ (8000570 <HAL_UART_RxCpltCallback+0x60>)
 8000550:	2200      	movs	r2, #0
 8000552:	701a      	strb	r2, [r3, #0]

		}
HAL_UART_Receive_IT(&huart3, &rx_data_lora, 1);
 8000554:	2201      	movs	r2, #1
 8000556:	4905      	ldr	r1, [pc, #20]	@ (800056c <HAL_UART_RxCpltCallback+0x5c>)
 8000558:	4803      	ldr	r0, [pc, #12]	@ (8000568 <HAL_UART_RxCpltCallback+0x58>)
 800055a:	f004 fe4d 	bl	80051f8 <HAL_UART_Receive_IT>
//				rx_index = 0;
//				rx_data = 0;
//			}
//			HAL_UART_Receive_IT(&huart2, &rx_data, 1);
//		}
}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	200002b8 	.word	0x200002b8
 800056c:	20000343 	.word	0x20000343
 8000570:	20000342 	.word	0x20000342
 8000574:	200002fc 	.word	0x200002fc

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b0a0      	sub	sp, #128	@ 0x80
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f001 f959 	bl	8001834 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 fc0f 	bl	8000da4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 fdad 	bl	80010e4 <MX_GPIO_Init>
  MX_ADC1_Init();
 800058a:	f000 fc77 	bl	8000e7c <MX_ADC1_Init>
  MX_I2C1_Init();
 800058e:	f000 fcc7 	bl	8000f20 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000592:	f000 fcf3 	bl	8000f7c <MX_SPI1_Init>
  MX_UART4_Init();
 8000596:	f000 fd27 	bl	8000fe8 <MX_UART4_Init>
  MX_USART2_UART_Init();
 800059a:	f000 fd4f 	bl	800103c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800059e:	f000 fd77 	bl	8001090 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 80005a2:	f009 fa79 	bl	8009a98 <MX_USB_DEVICE_Init>
  MX_FATFS_Init();
 80005a6:	f007 fa07 	bl	80079b8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &rx_data_lora, 1);
 80005aa:	2201      	movs	r2, #1
 80005ac:	49b8      	ldr	r1, [pc, #736]	@ (8000890 <main+0x318>)
 80005ae:	48b9      	ldr	r0, [pc, #740]	@ (8000894 <main+0x31c>)
 80005b0:	f004 fe22 	bl	80051f8 <HAL_UART_Receive_IT>
//  HAL_UART_Receive_IT(&huart2,&rx_data, 1);
  E220_CONFIG(0x8,0x2A,0x10,1);
 80005b4:	2301      	movs	r3, #1
 80005b6:	2210      	movs	r2, #16
 80005b8:	212a      	movs	r1, #42	@ 0x2a
 80005ba:	2008      	movs	r0, #8
 80005bc:	f000 fe3e 	bl	800123c <E220_CONFIG>
  lwgps_init(&gps);
 80005c0:	48b5      	ldr	r0, [pc, #724]	@ (8000898 <main+0x320>)
 80005c2:	f7ff ff97 	bl	80004f4 <lwgps_init>


  tim1=HAL_GetTick();
 80005c6:	f001 f99b 	bl	8001900 <HAL_GetTick>
 80005ca:	4603      	mov	r3, r0
 80005cc:	4ab3      	ldr	r2, [pc, #716]	@ (800089c <main+0x324>)
 80005ce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if(HAL_GetTick()-tim1>500)
 80005d0:	f001 f996 	bl	8001900 <HAL_GetTick>
 80005d4:	4602      	mov	r2, r0
 80005d6:	4bb1      	ldr	r3, [pc, #708]	@ (800089c <main+0x324>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	1ad3      	subs	r3, r2, r3
 80005dc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80005e0:	d9f6      	bls.n	80005d0 <main+0x58>
{
		  HYI_BUFFER_Fill();
 80005e2:	f000 fe89 	bl	80012f8 <HYI_BUFFER_Fill>

	  if(lora_rx_buffer[3]==2){
 80005e6:	4bae      	ldr	r3, [pc, #696]	@ (80008a0 <main+0x328>)
 80005e8:	78db      	ldrb	r3, [r3, #3]
 80005ea:	2b02      	cmp	r3, #2
 80005ec:	f040 8225 	bne.w	8000a3a <main+0x4c2>

		  sustgpssatsinview=lora_rx_buffer[4];
 80005f0:	4bab      	ldr	r3, [pc, #684]	@ (80008a0 <main+0x328>)
 80005f2:	791a      	ldrb	r2, [r3, #4]
 80005f4:	4bab      	ldr	r3, [pc, #684]	@ (80008a4 <main+0x32c>)
 80005f6:	701a      	strb	r2, [r3, #0]

			 float2unit8 f2u8_gpsalt;
				 for(uint8_t i=0;i<4;i++)
 80005f8:	2300      	movs	r3, #0
 80005fa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80005fe:	e019      	b.n	8000634 <main+0xbc>
				 {
					 f2u8_gpsalt.array[i]=lora_rx_buffer[i+5];
 8000600:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000604:	1d5a      	adds	r2, r3, #5
 8000606:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800060a:	49a5      	ldr	r1, [pc, #660]	@ (80008a0 <main+0x328>)
 800060c:	5c8a      	ldrb	r2, [r1, r2]
 800060e:	3380      	adds	r3, #128	@ 0x80
 8000610:	443b      	add	r3, r7
 8000612:	f803 2c20 	strb.w	r2, [r3, #-32]
					 HYI_BUFFER[10+i] =lora_rx_buffer[i+5]; // 10 11 12 13
 8000616:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800061a:	1d5a      	adds	r2, r3, #5
 800061c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000620:	330a      	adds	r3, #10
 8000622:	499f      	ldr	r1, [pc, #636]	@ (80008a0 <main+0x328>)
 8000624:	5c89      	ldrb	r1, [r1, r2]
 8000626:	4aa0      	ldr	r2, [pc, #640]	@ (80008a8 <main+0x330>)
 8000628:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 800062a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800062e:	3301      	adds	r3, #1
 8000630:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8000634:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000638:	2b03      	cmp	r3, #3
 800063a:	d9e1      	bls.n	8000600 <main+0x88>
				 }
				 sustgpsaltitude=f2u8_gpsalt.fVal;
 800063c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800063e:	4a9b      	ldr	r2, [pc, #620]	@ (80008ac <main+0x334>)
 8000640:	6013      	str	r3, [r2, #0]
			 float2unit8 f2u8_latitude;

				 for(uint8_t i=0;i<4;i++)
 8000642:	2300      	movs	r3, #0
 8000644:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8000648:	e01b      	b.n	8000682 <main+0x10a>
				 {
					f2u8_latitude.array[i]=lora_rx_buffer[i+9];
 800064a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800064e:	f103 0209 	add.w	r2, r3, #9
 8000652:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000656:	4992      	ldr	r1, [pc, #584]	@ (80008a0 <main+0x328>)
 8000658:	5c8a      	ldrb	r2, [r1, r2]
 800065a:	3380      	adds	r3, #128	@ 0x80
 800065c:	443b      	add	r3, r7
 800065e:	f803 2c24 	strb.w	r2, [r3, #-36]
					HYI_BUFFER[14+i] =lora_rx_buffer[i+9]; // 14 15 16 17
 8000662:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000666:	f103 0209 	add.w	r2, r3, #9
 800066a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800066e:	330e      	adds	r3, #14
 8000670:	498b      	ldr	r1, [pc, #556]	@ (80008a0 <main+0x328>)
 8000672:	5c89      	ldrb	r1, [r1, r2]
 8000674:	4a8c      	ldr	r2, [pc, #560]	@ (80008a8 <main+0x330>)
 8000676:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 8000678:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800067c:	3301      	adds	r3, #1
 800067e:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8000682:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8000686:	2b03      	cmp	r3, #3
 8000688:	d9df      	bls.n	800064a <main+0xd2>
				 }
				 sustgpslatitude=f2u8_latitude.fVal;
 800068a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800068c:	4a88      	ldr	r2, [pc, #544]	@ (80008b0 <main+0x338>)
 800068e:	6013      	str	r3, [r2, #0]

			 float2unit8 f2u8_longitude;
				 for(uint8_t i=0;i<4;i++)
 8000690:	2300      	movs	r3, #0
 8000692:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 8000696:	e01b      	b.n	80006d0 <main+0x158>
				 {
					f2u8_longitude.array[i]=lora_rx_buffer[i+13];
 8000698:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 800069c:	f103 020d 	add.w	r2, r3, #13
 80006a0:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 80006a4:	497e      	ldr	r1, [pc, #504]	@ (80008a0 <main+0x328>)
 80006a6:	5c8a      	ldrb	r2, [r1, r2]
 80006a8:	3380      	adds	r3, #128	@ 0x80
 80006aa:	443b      	add	r3, r7
 80006ac:	f803 2c28 	strb.w	r2, [r3, #-40]
					HYI_BUFFER[18+i] =lora_rx_buffer[i+13]; // 18 19 20 21
 80006b0:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 80006b4:	f103 020d 	add.w	r2, r3, #13
 80006b8:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 80006bc:	3312      	adds	r3, #18
 80006be:	4978      	ldr	r1, [pc, #480]	@ (80008a0 <main+0x328>)
 80006c0:	5c89      	ldrb	r1, [r1, r2]
 80006c2:	4a79      	ldr	r2, [pc, #484]	@ (80008a8 <main+0x330>)
 80006c4:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 80006c6:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 80006ca:	3301      	adds	r3, #1
 80006cc:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
 80006d0:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 80006d4:	2b03      	cmp	r3, #3
 80006d6:	d9df      	bls.n	8000698 <main+0x120>
				 }
				 sustgpslongitude=f2u8_longitude.fVal;
 80006d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80006da:	4a76      	ldr	r2, [pc, #472]	@ (80008b4 <main+0x33c>)
 80006dc:	6013      	str	r3, [r2, #0]

			 float2unit8 f2u8_altitude;
				 for(uint8_t i=0;i<4;i++)
 80006de:	2300      	movs	r3, #0
 80006e0:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
 80006e4:	e01b      	b.n	800071e <main+0x1a6>
				 {
					f2u8_altitude.array[i]=lora_rx_buffer[i+17];
 80006e6:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 80006ea:	f103 0211 	add.w	r2, r3, #17
 80006ee:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 80006f2:	496b      	ldr	r1, [pc, #428]	@ (80008a0 <main+0x328>)
 80006f4:	5c8a      	ldrb	r2, [r1, r2]
 80006f6:	3380      	adds	r3, #128	@ 0x80
 80006f8:	443b      	add	r3, r7
 80006fa:	f803 2c2c 	strb.w	r2, [r3, #-44]
					HYI_BUFFER[6+i] =lora_rx_buffer[i+17]; // 6 7 8 9
 80006fe:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8000702:	f103 0211 	add.w	r2, r3, #17
 8000706:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800070a:	3306      	adds	r3, #6
 800070c:	4964      	ldr	r1, [pc, #400]	@ (80008a0 <main+0x328>)
 800070e:	5c89      	ldrb	r1, [r1, r2]
 8000710:	4a65      	ldr	r2, [pc, #404]	@ (80008a8 <main+0x330>)
 8000712:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 8000714:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8000718:	3301      	adds	r3, #1
 800071a:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
 800071e:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 8000722:	2b03      	cmp	r3, #3
 8000724:	d9df      	bls.n	80006e6 <main+0x16e>
				 }
				 sustaltitude=f2u8_altitude.fVal;
 8000726:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000728:	4a63      	ldr	r2, [pc, #396]	@ (80008b8 <main+0x340>)
 800072a:	6013      	str	r3, [r2, #0]

			 float2unit8 f2u8_speed;

				 for(uint8_t i=0;i<4;i++)
 800072c:	2300      	movs	r3, #0
 800072e:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8000732:	e010      	b.n	8000756 <main+0x1de>
				 {
					 f2u8_speed.array[i]=lora_rx_buffer[i+21];
 8000734:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8000738:	f103 0215 	add.w	r2, r3, #21
 800073c:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8000740:	4957      	ldr	r1, [pc, #348]	@ (80008a0 <main+0x328>)
 8000742:	5c8a      	ldrb	r2, [r1, r2]
 8000744:	3380      	adds	r3, #128	@ 0x80
 8000746:	443b      	add	r3, r7
 8000748:	f803 2c30 	strb.w	r2, [r3, #-48]
				 for(uint8_t i=0;i<4;i++)
 800074c:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8000750:	3301      	adds	r3, #1
 8000752:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8000756:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 800075a:	2b03      	cmp	r3, #3
 800075c:	d9ea      	bls.n	8000734 <main+0x1bc>
				 }
				 sustspeed=f2u8_speed.fVal;
 800075e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000760:	4a56      	ldr	r2, [pc, #344]	@ (80008bc <main+0x344>)
 8000762:	6013      	str	r3, [r2, #0]

			 float2unit8 f2u8_temp;
				 for(uint8_t i=0;i<4;i++)
 8000764:	2300      	movs	r3, #0
 8000766:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
 800076a:	e010      	b.n	800078e <main+0x216>
				 {
					 f2u8_temp.array[i]=lora_rx_buffer[i+25];
 800076c:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 8000770:	f103 0219 	add.w	r2, r3, #25
 8000774:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 8000778:	4949      	ldr	r1, [pc, #292]	@ (80008a0 <main+0x328>)
 800077a:	5c8a      	ldrb	r2, [r1, r2]
 800077c:	3380      	adds	r3, #128	@ 0x80
 800077e:	443b      	add	r3, r7
 8000780:	f803 2c34 	strb.w	r2, [r3, #-52]
				 for(uint8_t i=0;i<4;i++)
 8000784:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 8000788:	3301      	adds	r3, #1
 800078a:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
 800078e:	f897 307a 	ldrb.w	r3, [r7, #122]	@ 0x7a
 8000792:	2b03      	cmp	r3, #3
 8000794:	d9ea      	bls.n	800076c <main+0x1f4>
				 }
				 susttemperature=f2u8_temp.fVal;
 8000796:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000798:	4a49      	ldr	r2, [pc, #292]	@ (80008c0 <main+0x348>)
 800079a:	6013      	str	r3, [r2, #0]

			 float2unit8 f2u8_accx;
				 for(uint8_t i=0;i<4;i++)
 800079c:	2300      	movs	r3, #0
 800079e:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
 80007a2:	e01b      	b.n	80007dc <main+0x264>
				 {
					 f2u8_accx.array[i]=lora_rx_buffer[i+29];
 80007a4:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 80007a8:	f103 021d 	add.w	r2, r3, #29
 80007ac:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 80007b0:	493b      	ldr	r1, [pc, #236]	@ (80008a0 <main+0x328>)
 80007b2:	5c8a      	ldrb	r2, [r1, r2]
 80007b4:	3380      	adds	r3, #128	@ 0x80
 80007b6:	443b      	add	r3, r7
 80007b8:	f803 2c38 	strb.w	r2, [r3, #-56]
					 HYI_BUFFER[58+i]=lora_rx_buffer[i+29]; //
 80007bc:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 80007c0:	f103 021d 	add.w	r2, r3, #29
 80007c4:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 80007c8:	333a      	adds	r3, #58	@ 0x3a
 80007ca:	4935      	ldr	r1, [pc, #212]	@ (80008a0 <main+0x328>)
 80007cc:	5c89      	ldrb	r1, [r1, r2]
 80007ce:	4a36      	ldr	r2, [pc, #216]	@ (80008a8 <main+0x330>)
 80007d0:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 80007d2:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 80007d6:	3301      	adds	r3, #1
 80007d8:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
 80007dc:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 80007e0:	2b03      	cmp	r3, #3
 80007e2:	d9df      	bls.n	80007a4 <main+0x22c>
				 }
				 sustaccx=f2u8_accx.fVal;
 80007e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80007e6:	4a37      	ldr	r2, [pc, #220]	@ (80008c4 <main+0x34c>)
 80007e8:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_accy;
				 for(uint8_t i=0;i<4;i++)
 80007ea:	2300      	movs	r3, #0
 80007ec:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
 80007f0:	e01b      	b.n	800082a <main+0x2b2>
				 {
					 f2u8_accy.array[i]=lora_rx_buffer[i+33];
 80007f2:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 80007f6:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 80007fa:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 80007fe:	4928      	ldr	r1, [pc, #160]	@ (80008a0 <main+0x328>)
 8000800:	5c8a      	ldrb	r2, [r1, r2]
 8000802:	3380      	adds	r3, #128	@ 0x80
 8000804:	443b      	add	r3, r7
 8000806:	f803 2c3c 	strb.w	r2, [r3, #-60]
					 HYI_BUFFER[62+i]=lora_rx_buffer[i+33];
 800080a:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 800080e:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 8000812:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8000816:	333e      	adds	r3, #62	@ 0x3e
 8000818:	4921      	ldr	r1, [pc, #132]	@ (80008a0 <main+0x328>)
 800081a:	5c89      	ldrb	r1, [r1, r2]
 800081c:	4a22      	ldr	r2, [pc, #136]	@ (80008a8 <main+0x330>)
 800081e:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 8000820:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8000824:	3301      	adds	r3, #1
 8000826:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
 800082a:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 800082e:	2b03      	cmp	r3, #3
 8000830:	d9df      	bls.n	80007f2 <main+0x27a>
				 }
					 sustaccy=f2u8_accy.fVal;
 8000832:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000834:	4a24      	ldr	r2, [pc, #144]	@ (80008c8 <main+0x350>)
 8000836:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_accz;
			      for(uint8_t i=0;i<4;i++)
 8000838:	2300      	movs	r3, #0
 800083a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800083e:	e01b      	b.n	8000878 <main+0x300>
				 {
			    	  f2u8_accz.array[i]=lora_rx_buffer[i+37];
 8000840:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000844:	f103 0225 	add.w	r2, r3, #37	@ 0x25
 8000848:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800084c:	4914      	ldr	r1, [pc, #80]	@ (80008a0 <main+0x328>)
 800084e:	5c8a      	ldrb	r2, [r1, r2]
 8000850:	3380      	adds	r3, #128	@ 0x80
 8000852:	443b      	add	r3, r7
 8000854:	f803 2c40 	strb.w	r2, [r3, #-64]
			    	  HYI_BUFFER[66+i]=lora_rx_buffer[i+37];
 8000858:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800085c:	f103 0225 	add.w	r2, r3, #37	@ 0x25
 8000860:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000864:	3342      	adds	r3, #66	@ 0x42
 8000866:	490e      	ldr	r1, [pc, #56]	@ (80008a0 <main+0x328>)
 8000868:	5c89      	ldrb	r1, [r1, r2]
 800086a:	4a0f      	ldr	r2, [pc, #60]	@ (80008a8 <main+0x330>)
 800086c:	54d1      	strb	r1, [r2, r3]
			      for(uint8_t i=0;i<4;i++)
 800086e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000872:	3301      	adds	r3, #1
 8000874:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8000878:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800087c:	2b03      	cmp	r3, #3
 800087e:	d9df      	bls.n	8000840 <main+0x2c8>
				 }
					 sustaccz=f2u8_accz.fVal;
 8000880:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000882:	4a12      	ldr	r2, [pc, #72]	@ (80008cc <main+0x354>)
 8000884:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_roll;
				  for(uint8_t i=0;i<4;i++)
 8000886:	2300      	movs	r3, #0
 8000888:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 800088c:	e031      	b.n	80008f2 <main+0x37a>
 800088e:	bf00      	nop
 8000890:	20000343 	.word	0x20000343
 8000894:	200002b8 	.word	0x200002b8
 8000898:	20000410 	.word	0x20000410
 800089c:	20000408 	.word	0x20000408
 80008a0:	200002fc 	.word	0x200002fc
 80008a4:	20000391 	.word	0x20000391
 80008a8:	20000344 	.word	0x20000344
 80008ac:	20000394 	.word	0x20000394
 80008b0:	20000398 	.word	0x20000398
 80008b4:	2000039c 	.word	0x2000039c
 80008b8:	200003a4 	.word	0x200003a4
 80008bc:	200003a0 	.word	0x200003a0
 80008c0:	200003a8 	.word	0x200003a8
 80008c4:	200003ac 	.word	0x200003ac
 80008c8:	200003b0 	.word	0x200003b0
 80008cc:	200003b4 	.word	0x200003b4
				 {
					  f2u8_roll.array[i]=lora_rx_buffer[i+41];
 80008d0:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80008d4:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 80008d8:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80008dc:	49c1      	ldr	r1, [pc, #772]	@ (8000be4 <main+0x66c>)
 80008de:	5c8a      	ldrb	r2, [r1, r2]
 80008e0:	3380      	adds	r3, #128	@ 0x80
 80008e2:	443b      	add	r3, r7
 80008e4:	f803 2c44 	strb.w	r2, [r3, #-68]
				  for(uint8_t i=0;i<4;i++)
 80008e8:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80008ec:	3301      	adds	r3, #1
 80008ee:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 80008f2:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80008f6:	2b03      	cmp	r3, #3
 80008f8:	d9ea      	bls.n	80008d0 <main+0x358>
				 }
					 sustroll=f2u8_roll.fVal;
 80008fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80008fc:	4aba      	ldr	r2, [pc, #744]	@ (8000be8 <main+0x670>)
 80008fe:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_pitch;
				  for(uint8_t i=0;i<4;i++)
 8000900:	2300      	movs	r3, #0
 8000902:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 8000906:	e010      	b.n	800092a <main+0x3b2>
				 {
					  f2u8_pitch.array[i]=lora_rx_buffer[i+45];
 8000908:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 800090c:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
 8000910:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8000914:	49b3      	ldr	r1, [pc, #716]	@ (8000be4 <main+0x66c>)
 8000916:	5c8a      	ldrb	r2, [r1, r2]
 8000918:	3380      	adds	r3, #128	@ 0x80
 800091a:	443b      	add	r3, r7
 800091c:	f803 2c48 	strb.w	r2, [r3, #-72]
				  for(uint8_t i=0;i<4;i++)
 8000920:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8000924:	3301      	adds	r3, #1
 8000926:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 800092a:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 800092e:	2b03      	cmp	r3, #3
 8000930:	d9ea      	bls.n	8000908 <main+0x390>
				 }
					 sustpitch=f2u8_pitch.fVal;
 8000932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000934:	4aad      	ldr	r2, [pc, #692]	@ (8000bec <main+0x674>)
 8000936:	6013      	str	r3, [r2, #0]

					 sustv4_battery=lora_rx_buffer[49];
 8000938:	4baa      	ldr	r3, [pc, #680]	@ (8000be4 <main+0x66c>)
 800093a:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 800093e:	4bac      	ldr	r3, [pc, #688]	@ (8000bf0 <main+0x678>)
 8000940:	701a      	strb	r2, [r3, #0]
					 sustv4_mod=lora_rx_buffer[50];
 8000942:	4ba8      	ldr	r3, [pc, #672]	@ (8000be4 <main+0x66c>)
 8000944:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8000948:	4baa      	ldr	r3, [pc, #680]	@ (8000bf4 <main+0x67c>)
 800094a:	701a      	strb	r2, [r3, #0]
					 suststage_communication=lora_rx_buffer[51];
 800094c:	4ba5      	ldr	r3, [pc, #660]	@ (8000be4 <main+0x66c>)
 800094e:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 8000952:	4ba9      	ldr	r3, [pc, #676]	@ (8000bf8 <main+0x680>)
 8000954:	701a      	strb	r2, [r3, #0]

					 //EGU PART
					 EGU_ARIZA=lora_rx_buffer[52];
 8000956:	4ba3      	ldr	r3, [pc, #652]	@ (8000be4 <main+0x66c>)
 8000958:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 800095c:	4ba7      	ldr	r3, [pc, #668]	@ (8000bfc <main+0x684>)
 800095e:	701a      	strb	r2, [r3, #0]
					 EGU_AYRILMA_TESPIT=lora_rx_buffer[53];
 8000960:	4ba0      	ldr	r3, [pc, #640]	@ (8000be4 <main+0x66c>)
 8000962:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 8000966:	4ba6      	ldr	r3, [pc, #664]	@ (8000c00 <main+0x688>)
 8000968:	701a      	strb	r2, [r3, #0]

			float2unit8 f2u8_EGU_BATTERY;
					for(uint8_t i=0;i<4;i++)
 800096a:	2300      	movs	r3, #0
 800096c:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
 8000970:	e010      	b.n	8000994 <main+0x41c>
				 {
						f2u8_EGU_BATTERY.array[i]=lora_rx_buffer[i+54];
 8000972:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8000976:	f103 0236 	add.w	r2, r3, #54	@ 0x36
 800097a:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800097e:	4999      	ldr	r1, [pc, #612]	@ (8000be4 <main+0x66c>)
 8000980:	5c8a      	ldrb	r2, [r1, r2]
 8000982:	3380      	adds	r3, #128	@ 0x80
 8000984:	443b      	add	r3, r7
 8000986:	f803 2c4c 	strb.w	r2, [r3, #-76]
					for(uint8_t i=0;i<4;i++)
 800098a:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800098e:	3301      	adds	r3, #1
 8000990:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
 8000994:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8000998:	2b03      	cmp	r3, #3
 800099a:	d9ea      	bls.n	8000972 <main+0x3fa>
				 }
					 EGU_BATTERY=f2u8_EGU_BATTERY.fVal;
 800099c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800099e:	4a99      	ldr	r2, [pc, #612]	@ (8000c04 <main+0x68c>)
 80009a0:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_EGU_ANGLE;
					for(uint8_t i=0;i<4;i++)
 80009a2:	2300      	movs	r3, #0
 80009a4:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 80009a8:	e010      	b.n	80009cc <main+0x454>
				{
						f2u8_EGU_ANGLE.array[i]=lora_rx_buffer[i+58];
 80009aa:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80009ae:	f103 023a 	add.w	r2, r3, #58	@ 0x3a
 80009b2:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80009b6:	498b      	ldr	r1, [pc, #556]	@ (8000be4 <main+0x66c>)
 80009b8:	5c8a      	ldrb	r2, [r1, r2]
 80009ba:	3380      	adds	r3, #128	@ 0x80
 80009bc:	443b      	add	r3, r7
 80009be:	f803 2c50 	strb.w	r2, [r3, #-80]
					for(uint8_t i=0;i<4;i++)
 80009c2:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80009c6:	3301      	adds	r3, #1
 80009c8:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 80009cc:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 80009d0:	2b03      	cmp	r3, #3
 80009d2:	d9ea      	bls.n	80009aa <main+0x432>
				 }
					  EGU_ANGLE=f2u8_EGU_ANGLE.fVal;
 80009d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80009d6:	4a8c      	ldr	r2, [pc, #560]	@ (8000c08 <main+0x690>)
 80009d8:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_EGU_IRTIFA;
					for(uint8_t i=0;i<4;i++)
 80009da:	2300      	movs	r3, #0
 80009dc:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
 80009e0:	e010      	b.n	8000a04 <main+0x48c>
				{
						f2u8_EGU_IRTIFA.array[i]=lora_rx_buffer[i+62];
 80009e2:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80009e6:	f103 023e 	add.w	r2, r3, #62	@ 0x3e
 80009ea:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80009ee:	497d      	ldr	r1, [pc, #500]	@ (8000be4 <main+0x66c>)
 80009f0:	5c8a      	ldrb	r2, [r1, r2]
 80009f2:	3380      	adds	r3, #128	@ 0x80
 80009f4:	443b      	add	r3, r7
 80009f6:	f803 2c54 	strb.w	r2, [r3, #-84]
					for(uint8_t i=0;i<4;i++)
 80009fa:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80009fe:	3301      	adds	r3, #1
 8000a00:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
 8000a04:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8000a08:	2b03      	cmp	r3, #3
 8000a0a:	d9ea      	bls.n	80009e2 <main+0x46a>
				}
					  EGU_IRTIFA=f2u8_EGU_IRTIFA.fVal;
 8000a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a0e:	4a7f      	ldr	r2, [pc, #508]	@ (8000c0c <main+0x694>)
 8000a10:	6013      	str	r3, [r2, #0]

					  EGU_FITIL=lora_rx_buffer[53];
 8000a12:	4b74      	ldr	r3, [pc, #464]	@ (8000be4 <main+0x66c>)
 8000a14:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 8000a18:	4b7d      	ldr	r3, [pc, #500]	@ (8000c10 <main+0x698>)
 8000a1a:	701a      	strb	r2, [r3, #0]

					  EGU_UCUS_BASLADIMI=lora_rx_buffer[66];
 8000a1c:	4b71      	ldr	r3, [pc, #452]	@ (8000be4 <main+0x66c>)
 8000a1e:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 8000a22:	4b7c      	ldr	r3, [pc, #496]	@ (8000c14 <main+0x69c>)
 8000a24:	701a      	strb	r2, [r3, #0]
					  EGU_STAGE_DURUM=lora_rx_buffer[67];
 8000a26:	4b6f      	ldr	r3, [pc, #444]	@ (8000be4 <main+0x66c>)
 8000a28:	f893 2043 	ldrb.w	r2, [r3, #67]	@ 0x43
 8000a2c:	4b7a      	ldr	r3, [pc, #488]	@ (8000c18 <main+0x6a0>)
 8000a2e:	701a      	strb	r2, [r3, #0]
					  EGU_MOTOR_ATESLEME_TALEP_IN=lora_rx_buffer[68];
 8000a30:	4b6c      	ldr	r3, [pc, #432]	@ (8000be4 <main+0x66c>)
 8000a32:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8000a36:	4b79      	ldr	r3, [pc, #484]	@ (8000c1c <main+0x6a4>)
 8000a38:	701a      	strb	r2, [r3, #0]
}

	  if(lora_rx_buffer[3]==1){
 8000a3a:	4b6a      	ldr	r3, [pc, #424]	@ (8000be4 <main+0x66c>)
 8000a3c:	78db      	ldrb	r3, [r3, #3]
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	f040 8195 	bne.w	8000d6e <main+0x7f6>

		  boostgpssatsinview=lora_rx_buffer[4];
 8000a44:	4b67      	ldr	r3, [pc, #412]	@ (8000be4 <main+0x66c>)
 8000a46:	791a      	ldrb	r2, [r3, #4]
 8000a48:	4b75      	ldr	r3, [pc, #468]	@ (8000c20 <main+0x6a8>)
 8000a4a:	701a      	strb	r2, [r3, #0]

			 float2unit8 f2u8_bgpsalt;
				 for(uint8_t i=0;i<4;i++)
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
 8000a52:	e019      	b.n	8000a88 <main+0x510>
				 {
					 f2u8_bgpsalt.array[i]=lora_rx_buffer[i+5];
 8000a54:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8000a58:	1d5a      	adds	r2, r3, #5
 8000a5a:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8000a5e:	4961      	ldr	r1, [pc, #388]	@ (8000be4 <main+0x66c>)
 8000a60:	5c8a      	ldrb	r2, [r1, r2]
 8000a62:	3380      	adds	r3, #128	@ 0x80
 8000a64:	443b      	add	r3, r7
 8000a66:	f803 2c58 	strb.w	r2, [r3, #-88]
					 HYI_BUFFER[34+i]=lora_rx_buffer[i+5]; // 34 35 36 37
 8000a6a:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8000a6e:	1d5a      	adds	r2, r3, #5
 8000a70:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8000a74:	3322      	adds	r3, #34	@ 0x22
 8000a76:	495b      	ldr	r1, [pc, #364]	@ (8000be4 <main+0x66c>)
 8000a78:	5c89      	ldrb	r1, [r1, r2]
 8000a7a:	4a6a      	ldr	r2, [pc, #424]	@ (8000c24 <main+0x6ac>)
 8000a7c:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 8000a7e:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8000a82:	3301      	adds	r3, #1
 8000a84:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
 8000a88:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8000a8c:	2b03      	cmp	r3, #3
 8000a8e:	d9e1      	bls.n	8000a54 <main+0x4dc>
				 }
				 sustgpsaltitude=f2u8_bgpsalt.fVal;
 8000a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a92:	4a65      	ldr	r2, [pc, #404]	@ (8000c28 <main+0x6b0>)
 8000a94:	6013      	str	r3, [r2, #0]
			 float2unit8 f2u8_blatitude;

				 for(uint8_t i=0;i<4;i++)
 8000a96:	2300      	movs	r3, #0
 8000a98:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
 8000a9c:	e01b      	b.n	8000ad6 <main+0x55e>
				 {
					 f2u8_blatitude.array[i]=lora_rx_buffer[i+9];
 8000a9e:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8000aa2:	f103 0209 	add.w	r2, r3, #9
 8000aa6:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8000aaa:	494e      	ldr	r1, [pc, #312]	@ (8000be4 <main+0x66c>)
 8000aac:	5c8a      	ldrb	r2, [r1, r2]
 8000aae:	3380      	adds	r3, #128	@ 0x80
 8000ab0:	443b      	add	r3, r7
 8000ab2:	f803 2c5c 	strb.w	r2, [r3, #-92]
					 HYI_BUFFER[38+i]=lora_rx_buffer[i+9]; // 38 39 40 41
 8000ab6:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8000aba:	f103 0209 	add.w	r2, r3, #9
 8000abe:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8000ac2:	3326      	adds	r3, #38	@ 0x26
 8000ac4:	4947      	ldr	r1, [pc, #284]	@ (8000be4 <main+0x66c>)
 8000ac6:	5c89      	ldrb	r1, [r1, r2]
 8000ac8:	4a56      	ldr	r2, [pc, #344]	@ (8000c24 <main+0x6ac>)
 8000aca:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 8000acc:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
 8000ad6:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8000ada:	2b03      	cmp	r3, #3
 8000adc:	d9df      	bls.n	8000a9e <main+0x526>
				 }
				 boostgpslatitude=f2u8_blatitude.fVal;
 8000ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae0:	4a52      	ldr	r2, [pc, #328]	@ (8000c2c <main+0x6b4>)
 8000ae2:	6013      	str	r3, [r2, #0]

			 float2unit8 f2u8_blongitude;
				 for(uint8_t i=0;i<4;i++)
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8000aea:	e01b      	b.n	8000b24 <main+0x5ac>
				 {
					 f2u8_blongitude.array[i]=lora_rx_buffer[i+13];
 8000aec:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000af0:	f103 020d 	add.w	r2, r3, #13
 8000af4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000af8:	493a      	ldr	r1, [pc, #232]	@ (8000be4 <main+0x66c>)
 8000afa:	5c8a      	ldrb	r2, [r1, r2]
 8000afc:	3380      	adds	r3, #128	@ 0x80
 8000afe:	443b      	add	r3, r7
 8000b00:	f803 2c60 	strb.w	r2, [r3, #-96]
					 HYI_BUFFER[42+i]=lora_rx_buffer[i+13]; // 42 43 44 45
 8000b04:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000b08:	f103 020d 	add.w	r2, r3, #13
 8000b0c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000b10:	332a      	adds	r3, #42	@ 0x2a
 8000b12:	4934      	ldr	r1, [pc, #208]	@ (8000be4 <main+0x66c>)
 8000b14:	5c89      	ldrb	r1, [r1, r2]
 8000b16:	4a43      	ldr	r2, [pc, #268]	@ (8000c24 <main+0x6ac>)
 8000b18:	54d1      	strb	r1, [r2, r3]
				 for(uint8_t i=0;i<4;i++)
 8000b1a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000b1e:	3301      	adds	r3, #1
 8000b20:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8000b24:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000b28:	2b03      	cmp	r3, #3
 8000b2a:	d9df      	bls.n	8000aec <main+0x574>
				 }
				 boostgpslongitude=f2u8_blongitude.fVal;
 8000b2c:	6a3b      	ldr	r3, [r7, #32]
 8000b2e:	4a40      	ldr	r2, [pc, #256]	@ (8000c30 <main+0x6b8>)
 8000b30:	6013      	str	r3, [r2, #0]

			 float2unit8 f2u8_baltitude;
				 for(uint8_t i=0;i<4;i++)
 8000b32:	2300      	movs	r3, #0
 8000b34:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8000b38:	e010      	b.n	8000b5c <main+0x5e4>
				 {
					f2u8_baltitude.array[i]=lora_rx_buffer[i+17];
 8000b3a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8000b3e:	f103 0211 	add.w	r2, r3, #17
 8000b42:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8000b46:	4927      	ldr	r1, [pc, #156]	@ (8000be4 <main+0x66c>)
 8000b48:	5c8a      	ldrb	r2, [r1, r2]
 8000b4a:	3380      	adds	r3, #128	@ 0x80
 8000b4c:	443b      	add	r3, r7
 8000b4e:	f803 2c64 	strb.w	r2, [r3, #-100]
				 for(uint8_t i=0;i<4;i++)
 8000b52:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8000b56:	3301      	adds	r3, #1
 8000b58:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8000b5c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8000b60:	2b03      	cmp	r3, #3
 8000b62:	d9ea      	bls.n	8000b3a <main+0x5c2>
				 }
				 boostaltitude=f2u8_baltitude.fVal;
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	4a33      	ldr	r2, [pc, #204]	@ (8000c34 <main+0x6bc>)
 8000b68:	6013      	str	r3, [r2, #0]

			 float2unit8 f2u8_bspeed;

				 for(uint8_t i=0;i<4;i++)
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
 8000b70:	e010      	b.n	8000b94 <main+0x61c>
				 {
					 f2u8_bspeed.array[i]=lora_rx_buffer[i+21];
 8000b72:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8000b76:	f103 0215 	add.w	r2, r3, #21
 8000b7a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8000b7e:	4919      	ldr	r1, [pc, #100]	@ (8000be4 <main+0x66c>)
 8000b80:	5c8a      	ldrb	r2, [r1, r2]
 8000b82:	3380      	adds	r3, #128	@ 0x80
 8000b84:	443b      	add	r3, r7
 8000b86:	f803 2c68 	strb.w	r2, [r3, #-104]
				 for(uint8_t i=0;i<4;i++)
 8000b8a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8000b8e:	3301      	adds	r3, #1
 8000b90:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
 8000b94:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8000b98:	2b03      	cmp	r3, #3
 8000b9a:	d9ea      	bls.n	8000b72 <main+0x5fa>
				 }
				 boostspeed=f2u8_bspeed.fVal;
 8000b9c:	69bb      	ldr	r3, [r7, #24]
 8000b9e:	4a26      	ldr	r2, [pc, #152]	@ (8000c38 <main+0x6c0>)
 8000ba0:	6013      	str	r3, [r2, #0]

			 float2unit8 f2u8_btemp;
				 for(uint8_t i=0;i<4;i++)
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 8000ba8:	e010      	b.n	8000bcc <main+0x654>
				 {
					 f2u8_btemp.array[i]=lora_rx_buffer[i+25];
 8000baa:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8000bae:	f103 0219 	add.w	r2, r3, #25
 8000bb2:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8000bb6:	490b      	ldr	r1, [pc, #44]	@ (8000be4 <main+0x66c>)
 8000bb8:	5c8a      	ldrb	r2, [r1, r2]
 8000bba:	3380      	adds	r3, #128	@ 0x80
 8000bbc:	443b      	add	r3, r7
 8000bbe:	f803 2c6c 	strb.w	r2, [r3, #-108]
				 for(uint8_t i=0;i<4;i++)
 8000bc2:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 8000bcc:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8000bd0:	2b03      	cmp	r3, #3
 8000bd2:	d9ea      	bls.n	8000baa <main+0x632>
				 }
				 boosttemperature=f2u8_btemp.fVal;
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	4a19      	ldr	r2, [pc, #100]	@ (8000c3c <main+0x6c4>)
 8000bd8:	6013      	str	r3, [r2, #0]

			 float2unit8 f2u8_baccx;
				 for(uint8_t i=0;i<4;i++)
 8000bda:	2300      	movs	r3, #0
 8000bdc:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 8000be0:	e03f      	b.n	8000c62 <main+0x6ea>
 8000be2:	bf00      	nop
 8000be4:	200002fc 	.word	0x200002fc
 8000be8:	200003b8 	.word	0x200003b8
 8000bec:	200003bc 	.word	0x200003bc
 8000bf0:	200003c0 	.word	0x200003c0
 8000bf4:	200003c1 	.word	0x200003c1
 8000bf8:	200003c2 	.word	0x200003c2
 8000bfc:	200003c3 	.word	0x200003c3
 8000c00:	200003c4 	.word	0x200003c4
 8000c04:	200003cc 	.word	0x200003cc
 8000c08:	200003d4 	.word	0x200003d4
 8000c0c:	200003d0 	.word	0x200003d0
 8000c10:	200003c8 	.word	0x200003c8
 8000c14:	200003c7 	.word	0x200003c7
 8000c18:	200003c6 	.word	0x200003c6
 8000c1c:	200003c5 	.word	0x200003c5
 8000c20:	200003d8 	.word	0x200003d8
 8000c24:	20000344 	.word	0x20000344
 8000c28:	20000394 	.word	0x20000394
 8000c2c:	200003dc 	.word	0x200003dc
 8000c30:	200003e0 	.word	0x200003e0
 8000c34:	200003e8 	.word	0x200003e8
 8000c38:	200003e4 	.word	0x200003e4
 8000c3c:	200003ec 	.word	0x200003ec
				 {
					 f2u8_baccx.array[i]=lora_rx_buffer[i+29];
 8000c40:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000c44:	f103 021d 	add.w	r2, r3, #29
 8000c48:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000c4c:	494b      	ldr	r1, [pc, #300]	@ (8000d7c <main+0x804>)
 8000c4e:	5c8a      	ldrb	r2, [r1, r2]
 8000c50:	3380      	adds	r3, #128	@ 0x80
 8000c52:	443b      	add	r3, r7
 8000c54:	f803 2c70 	strb.w	r2, [r3, #-112]
				 for(uint8_t i=0;i<4;i++)
 8000c58:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
 8000c62:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000c66:	2b03      	cmp	r3, #3
 8000c68:	d9ea      	bls.n	8000c40 <main+0x6c8>
				 }
				 boostaccx=f2u8_baccx.fVal;
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	4a44      	ldr	r2, [pc, #272]	@ (8000d80 <main+0x808>)
 8000c6e:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_baccy;
				 for(uint8_t i=0;i<4;i++)
 8000c70:	2300      	movs	r3, #0
 8000c72:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
 8000c76:	e010      	b.n	8000c9a <main+0x722>
				 {
					 f2u8_baccy.array[i]=lora_rx_buffer[i+33];
 8000c78:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8000c7c:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 8000c80:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8000c84:	493d      	ldr	r1, [pc, #244]	@ (8000d7c <main+0x804>)
 8000c86:	5c8a      	ldrb	r2, [r1, r2]
 8000c88:	3380      	adds	r3, #128	@ 0x80
 8000c8a:	443b      	add	r3, r7
 8000c8c:	f803 2c74 	strb.w	r2, [r3, #-116]
				 for(uint8_t i=0;i<4;i++)
 8000c90:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8000c94:	3301      	adds	r3, #1
 8000c96:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
 8000c9a:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8000c9e:	2b03      	cmp	r3, #3
 8000ca0:	d9ea      	bls.n	8000c78 <main+0x700>
				 }
					 boostaccy=f2u8_baccy.fVal;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	4a37      	ldr	r2, [pc, #220]	@ (8000d84 <main+0x80c>)
 8000ca6:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_baccz;
			      for(uint8_t i=0;i<4;i++)
 8000ca8:	2300      	movs	r3, #0
 8000caa:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
 8000cae:	e010      	b.n	8000cd2 <main+0x75a>
				 {
			    	  f2u8_baccz.array[i]=lora_rx_buffer[i+37];
 8000cb0:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8000cb4:	f103 0225 	add.w	r2, r3, #37	@ 0x25
 8000cb8:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8000cbc:	492f      	ldr	r1, [pc, #188]	@ (8000d7c <main+0x804>)
 8000cbe:	5c8a      	ldrb	r2, [r1, r2]
 8000cc0:	3380      	adds	r3, #128	@ 0x80
 8000cc2:	443b      	add	r3, r7
 8000cc4:	f803 2c78 	strb.w	r2, [r3, #-120]
			      for(uint8_t i=0;i<4;i++)
 8000cc8:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8000ccc:	3301      	adds	r3, #1
 8000cce:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
 8000cd2:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8000cd6:	2b03      	cmp	r3, #3
 8000cd8:	d9ea      	bls.n	8000cb0 <main+0x738>
				 }
					 boostaccz=f2u8_baccz.fVal;
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	4a2a      	ldr	r2, [pc, #168]	@ (8000d88 <main+0x810>)
 8000cde:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_broll;
				  for(uint8_t i=0;i<4;i++)
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 8000ce6:	e010      	b.n	8000d0a <main+0x792>
				 {
					  f2u8_broll.array[i]=lora_rx_buffer[i+41];
 8000ce8:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8000cec:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 8000cf0:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8000cf4:	4921      	ldr	r1, [pc, #132]	@ (8000d7c <main+0x804>)
 8000cf6:	5c8a      	ldrb	r2, [r1, r2]
 8000cf8:	3380      	adds	r3, #128	@ 0x80
 8000cfa:	443b      	add	r3, r7
 8000cfc:	f803 2c7c 	strb.w	r2, [r3, #-124]
				  for(uint8_t i=0;i<4;i++)
 8000d00:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8000d04:	3301      	adds	r3, #1
 8000d06:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 8000d0a:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8000d0e:	2b03      	cmp	r3, #3
 8000d10:	d9ea      	bls.n	8000ce8 <main+0x770>
				 }
					 boostroll=f2u8_broll.fVal;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a1d      	ldr	r2, [pc, #116]	@ (8000d8c <main+0x814>)
 8000d16:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_bpitch;
				  for(uint8_t i=0;i<4;i++)
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8000d1e:	e010      	b.n	8000d42 <main+0x7ca>
				 {
					  f2u8_bpitch.array[i]=lora_rx_buffer[i+45];
 8000d20:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000d24:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
 8000d28:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000d2c:	4913      	ldr	r1, [pc, #76]	@ (8000d7c <main+0x804>)
 8000d2e:	5c8a      	ldrb	r2, [r1, r2]
 8000d30:	3380      	adds	r3, #128	@ 0x80
 8000d32:	443b      	add	r3, r7
 8000d34:	f803 2c80 	strb.w	r2, [r3, #-128]
				  for(uint8_t i=0;i<4;i++)
 8000d38:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8000d42:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000d46:	2b03      	cmp	r3, #3
 8000d48:	d9ea      	bls.n	8000d20 <main+0x7a8>
				 }
					 boostpitch=f2u8_bpitch.fVal;
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	4a10      	ldr	r2, [pc, #64]	@ (8000d90 <main+0x818>)
 8000d4e:	6013      	str	r3, [r2, #0]

					 boostv4_battery=lora_rx_buffer[49];
 8000d50:	4b0a      	ldr	r3, [pc, #40]	@ (8000d7c <main+0x804>)
 8000d52:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 8000d56:	4b0f      	ldr	r3, [pc, #60]	@ (8000d94 <main+0x81c>)
 8000d58:	701a      	strb	r2, [r3, #0]
					 boostv4_mod=lora_rx_buffer[50];
 8000d5a:	4b08      	ldr	r3, [pc, #32]	@ (8000d7c <main+0x804>)
 8000d5c:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 8000d60:	4b0d      	ldr	r3, [pc, #52]	@ (8000d98 <main+0x820>)
 8000d62:	701a      	strb	r2, [r3, #0]
					 booststage_communication=lora_rx_buffer[51];
 8000d64:	4b05      	ldr	r3, [pc, #20]	@ (8000d7c <main+0x804>)
 8000d66:	f893 2033 	ldrb.w	r2, [r3, #51]	@ 0x33
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d9c <main+0x824>)
 8000d6c:	701a      	strb	r2, [r3, #0]
}




	  tim1=HAL_GetTick();
 8000d6e:	f000 fdc7 	bl	8001900 <HAL_GetTick>
 8000d72:	4603      	mov	r3, r0
 8000d74:	4a0a      	ldr	r2, [pc, #40]	@ (8000da0 <main+0x828>)
 8000d76:	6013      	str	r3, [r2, #0]
	  if(HAL_GetTick()-tim1>500)
 8000d78:	e42a      	b.n	80005d0 <main+0x58>
 8000d7a:	bf00      	nop
 8000d7c:	200002fc 	.word	0x200002fc
 8000d80:	200003f0 	.word	0x200003f0
 8000d84:	200003f4 	.word	0x200003f4
 8000d88:	200003f8 	.word	0x200003f8
 8000d8c:	200003fc 	.word	0x200003fc
 8000d90:	20000400 	.word	0x20000400
 8000d94:	20000404 	.word	0x20000404
 8000d98:	20000405 	.word	0x20000405
 8000d9c:	20000406 	.word	0x20000406
 8000da0:	20000408 	.word	0x20000408

08000da4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b094      	sub	sp, #80	@ 0x50
 8000da8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000daa:	f107 031c 	add.w	r3, r7, #28
 8000dae:	2234      	movs	r2, #52	@ 0x34
 8000db0:	2100      	movs	r1, #0
 8000db2:	4618      	mov	r0, r3
 8000db4:	f009 fbda 	bl	800a56c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db8:	f107 0308 	add.w	r3, r7, #8
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc8:	2300      	movs	r3, #0
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	4b29      	ldr	r3, [pc, #164]	@ (8000e74 <SystemClock_Config+0xd0>)
 8000dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd0:	4a28      	ldr	r2, [pc, #160]	@ (8000e74 <SystemClock_Config+0xd0>)
 8000dd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dd8:	4b26      	ldr	r3, [pc, #152]	@ (8000e74 <SystemClock_Config+0xd0>)
 8000dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ddc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000de4:	2300      	movs	r3, #0
 8000de6:	603b      	str	r3, [r7, #0]
 8000de8:	4b23      	ldr	r3, [pc, #140]	@ (8000e78 <SystemClock_Config+0xd4>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a22      	ldr	r2, [pc, #136]	@ (8000e78 <SystemClock_Config+0xd4>)
 8000dee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000df2:	6013      	str	r3, [r2, #0]
 8000df4:	4b20      	ldr	r3, [pc, #128]	@ (8000e78 <SystemClock_Config+0xd4>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000dfc:	603b      	str	r3, [r7, #0]
 8000dfe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e00:	2301      	movs	r3, #1
 8000e02:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e04:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e08:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e0e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e12:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e14:	2304      	movs	r3, #4
 8000e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e18:	23a8      	movs	r3, #168	@ 0xa8
 8000e1a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e20:	2307      	movs	r3, #7
 8000e22:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e24:	2302      	movs	r3, #2
 8000e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e28:	f107 031c 	add.w	r3, r7, #28
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f003 fddd 	bl	80049ec <HAL_RCC_OscConfig>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e38:	f000 fa8e 	bl	8001358 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e3c:	230f      	movs	r3, #15
 8000e3e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8000e40:	2303      	movs	r3, #3
 8000e42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e44:	2300      	movs	r3, #0
 8000e46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e48:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e4c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e52:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e54:	f107 0308 	add.w	r3, r7, #8
 8000e58:	2105      	movs	r1, #5
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f002 ff52 	bl	8003d04 <HAL_RCC_ClockConfig>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000e66:	f000 fa77 	bl	8001358 <Error_Handler>
  }
}
 8000e6a:	bf00      	nop
 8000e6c:	3750      	adds	r7, #80	@ 0x50
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40007000 	.word	0x40007000

08000e7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e82:	463b      	mov	r3, r7
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e8e:	4b21      	ldr	r3, [pc, #132]	@ (8000f14 <MX_ADC1_Init+0x98>)
 8000e90:	4a21      	ldr	r2, [pc, #132]	@ (8000f18 <MX_ADC1_Init+0x9c>)
 8000e92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e94:	4b1f      	ldr	r3, [pc, #124]	@ (8000f14 <MX_ADC1_Init+0x98>)
 8000e96:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e9a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000f14 <MX_ADC1_Init+0x98>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ea2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f14 <MX_ADC1_Init+0x98>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f14 <MX_ADC1_Init+0x98>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eae:	4b19      	ldr	r3, [pc, #100]	@ (8000f14 <MX_ADC1_Init+0x98>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eb6:	4b17      	ldr	r3, [pc, #92]	@ (8000f14 <MX_ADC1_Init+0x98>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ebc:	4b15      	ldr	r3, [pc, #84]	@ (8000f14 <MX_ADC1_Init+0x98>)
 8000ebe:	4a17      	ldr	r2, [pc, #92]	@ (8000f1c <MX_ADC1_Init+0xa0>)
 8000ec0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ec2:	4b14      	ldr	r3, [pc, #80]	@ (8000f14 <MX_ADC1_Init+0x98>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ec8:	4b12      	ldr	r3, [pc, #72]	@ (8000f14 <MX_ADC1_Init+0x98>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ece:	4b11      	ldr	r3, [pc, #68]	@ (8000f14 <MX_ADC1_Init+0x98>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f14 <MX_ADC1_Init+0x98>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000edc:	480d      	ldr	r0, [pc, #52]	@ (8000f14 <MX_ADC1_Init+0x98>)
 8000ede:	f000 fd3f 	bl	8001960 <HAL_ADC_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ee8:	f000 fa36 	bl	8001358 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000eec:	230c      	movs	r3, #12
 8000eee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ef8:	463b      	mov	r3, r7
 8000efa:	4619      	mov	r1, r3
 8000efc:	4805      	ldr	r0, [pc, #20]	@ (8000f14 <MX_ADC1_Init+0x98>)
 8000efe:	f000 fd73 	bl	80019e8 <HAL_ADC_ConfigChannel>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f08:	f000 fa26 	bl	8001358 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f0c:	bf00      	nop
 8000f0e:	3710      	adds	r7, #16
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	2000013c 	.word	0x2000013c
 8000f18:	40012000 	.word	0x40012000
 8000f1c:	0f000001 	.word	0x0f000001

08000f20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f24:	4b12      	ldr	r3, [pc, #72]	@ (8000f70 <MX_I2C1_Init+0x50>)
 8000f26:	4a13      	ldr	r2, [pc, #76]	@ (8000f74 <MX_I2C1_Init+0x54>)
 8000f28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f2a:	4b11      	ldr	r3, [pc, #68]	@ (8000f70 <MX_I2C1_Init+0x50>)
 8000f2c:	4a12      	ldr	r2, [pc, #72]	@ (8000f78 <MX_I2C1_Init+0x58>)
 8000f2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f30:	4b0f      	ldr	r3, [pc, #60]	@ (8000f70 <MX_I2C1_Init+0x50>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f36:	4b0e      	ldr	r3, [pc, #56]	@ (8000f70 <MX_I2C1_Init+0x50>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f70 <MX_I2C1_Init+0x50>)
 8000f3e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f44:	4b0a      	ldr	r3, [pc, #40]	@ (8000f70 <MX_I2C1_Init+0x50>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f4a:	4b09      	ldr	r3, [pc, #36]	@ (8000f70 <MX_I2C1_Init+0x50>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f50:	4b07      	ldr	r3, [pc, #28]	@ (8000f70 <MX_I2C1_Init+0x50>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f56:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <MX_I2C1_Init+0x50>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f5c:	4804      	ldr	r0, [pc, #16]	@ (8000f70 <MX_I2C1_Init+0x50>)
 8000f5e:	f001 fac3 	bl	80024e8 <HAL_I2C_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f68:	f000 f9f6 	bl	8001358 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000184 	.word	0x20000184
 8000f74:	40005400 	.word	0x40005400
 8000f78:	000186a0 	.word	0x000186a0

08000f7c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f80:	4b17      	ldr	r3, [pc, #92]	@ (8000fe0 <MX_SPI1_Init+0x64>)
 8000f82:	4a18      	ldr	r2, [pc, #96]	@ (8000fe4 <MX_SPI1_Init+0x68>)
 8000f84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f86:	4b16      	ldr	r3, [pc, #88]	@ (8000fe0 <MX_SPI1_Init+0x64>)
 8000f88:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f8e:	4b14      	ldr	r3, [pc, #80]	@ (8000fe0 <MX_SPI1_Init+0x64>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f94:	4b12      	ldr	r3, [pc, #72]	@ (8000fe0 <MX_SPI1_Init+0x64>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f9a:	4b11      	ldr	r3, [pc, #68]	@ (8000fe0 <MX_SPI1_Init+0x64>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe0 <MX_SPI1_Init+0x64>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe0 <MX_SPI1_Init+0x64>)
 8000fa8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000fae:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe0 <MX_SPI1_Init+0x64>)
 8000fb0:	2220      	movs	r2, #32
 8000fb2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe0 <MX_SPI1_Init+0x64>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fba:	4b09      	ldr	r3, [pc, #36]	@ (8000fe0 <MX_SPI1_Init+0x64>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fc0:	4b07      	ldr	r3, [pc, #28]	@ (8000fe0 <MX_SPI1_Init+0x64>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000fc6:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <MX_SPI1_Init+0x64>)
 8000fc8:	220a      	movs	r2, #10
 8000fca:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fcc:	4804      	ldr	r0, [pc, #16]	@ (8000fe0 <MX_SPI1_Init+0x64>)
 8000fce:	f003 ffab 	bl	8004f28 <HAL_SPI_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000fd8:	f000 f9be 	bl	8001358 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	200001d8 	.word	0x200001d8
 8000fe4:	40013000 	.word	0x40013000

08000fe8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000fec:	4b11      	ldr	r3, [pc, #68]	@ (8001034 <MX_UART4_Init+0x4c>)
 8000fee:	4a12      	ldr	r2, [pc, #72]	@ (8001038 <MX_UART4_Init+0x50>)
 8000ff0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000ff2:	4b10      	ldr	r3, [pc, #64]	@ (8001034 <MX_UART4_Init+0x4c>)
 8000ff4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ff8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8001034 <MX_UART4_Init+0x4c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001000:	4b0c      	ldr	r3, [pc, #48]	@ (8001034 <MX_UART4_Init+0x4c>)
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001006:	4b0b      	ldr	r3, [pc, #44]	@ (8001034 <MX_UART4_Init+0x4c>)
 8001008:	2200      	movs	r2, #0
 800100a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800100c:	4b09      	ldr	r3, [pc, #36]	@ (8001034 <MX_UART4_Init+0x4c>)
 800100e:	220c      	movs	r2, #12
 8001010:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001012:	4b08      	ldr	r3, [pc, #32]	@ (8001034 <MX_UART4_Init+0x4c>)
 8001014:	2200      	movs	r2, #0
 8001016:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001018:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <MX_UART4_Init+0x4c>)
 800101a:	2200      	movs	r2, #0
 800101c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800101e:	4805      	ldr	r0, [pc, #20]	@ (8001034 <MX_UART4_Init+0x4c>)
 8001020:	f004 f80b 	bl	800503a <HAL_UART_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800102a:	f000 f995 	bl	8001358 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000230 	.word	0x20000230
 8001038:	40004c00 	.word	0x40004c00

0800103c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001040:	4b11      	ldr	r3, [pc, #68]	@ (8001088 <MX_USART2_UART_Init+0x4c>)
 8001042:	4a12      	ldr	r2, [pc, #72]	@ (800108c <MX_USART2_UART_Init+0x50>)
 8001044:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001046:	4b10      	ldr	r3, [pc, #64]	@ (8001088 <MX_USART2_UART_Init+0x4c>)
 8001048:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800104c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800104e:	4b0e      	ldr	r3, [pc, #56]	@ (8001088 <MX_USART2_UART_Init+0x4c>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001054:	4b0c      	ldr	r3, [pc, #48]	@ (8001088 <MX_USART2_UART_Init+0x4c>)
 8001056:	2200      	movs	r2, #0
 8001058:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800105a:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <MX_USART2_UART_Init+0x4c>)
 800105c:	2200      	movs	r2, #0
 800105e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001060:	4b09      	ldr	r3, [pc, #36]	@ (8001088 <MX_USART2_UART_Init+0x4c>)
 8001062:	220c      	movs	r2, #12
 8001064:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001066:	4b08      	ldr	r3, [pc, #32]	@ (8001088 <MX_USART2_UART_Init+0x4c>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800106c:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <MX_USART2_UART_Init+0x4c>)
 800106e:	2200      	movs	r2, #0
 8001070:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001072:	4805      	ldr	r0, [pc, #20]	@ (8001088 <MX_USART2_UART_Init+0x4c>)
 8001074:	f003 ffe1 	bl	800503a <HAL_UART_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800107e:	f000 f96b 	bl	8001358 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000274 	.word	0x20000274
 800108c:	40004400 	.word	0x40004400

08001090 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001094:	4b11      	ldr	r3, [pc, #68]	@ (80010dc <MX_USART3_UART_Init+0x4c>)
 8001096:	4a12      	ldr	r2, [pc, #72]	@ (80010e0 <MX_USART3_UART_Init+0x50>)
 8001098:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800109a:	4b10      	ldr	r3, [pc, #64]	@ (80010dc <MX_USART3_UART_Init+0x4c>)
 800109c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80010a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010a2:	4b0e      	ldr	r3, [pc, #56]	@ (80010dc <MX_USART3_UART_Init+0x4c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010a8:	4b0c      	ldr	r3, [pc, #48]	@ (80010dc <MX_USART3_UART_Init+0x4c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010ae:	4b0b      	ldr	r3, [pc, #44]	@ (80010dc <MX_USART3_UART_Init+0x4c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010b4:	4b09      	ldr	r3, [pc, #36]	@ (80010dc <MX_USART3_UART_Init+0x4c>)
 80010b6:	220c      	movs	r2, #12
 80010b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ba:	4b08      	ldr	r3, [pc, #32]	@ (80010dc <MX_USART3_UART_Init+0x4c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c0:	4b06      	ldr	r3, [pc, #24]	@ (80010dc <MX_USART3_UART_Init+0x4c>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010c6:	4805      	ldr	r0, [pc, #20]	@ (80010dc <MX_USART3_UART_Init+0x4c>)
 80010c8:	f003 ffb7 	bl	800503a <HAL_UART_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80010d2:	f000 f941 	bl	8001358 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200002b8 	.word	0x200002b8
 80010e0:	40004800 	.word	0x40004800

080010e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08a      	sub	sp, #40	@ 0x28
 80010e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
 80010f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	4b4c      	ldr	r3, [pc, #304]	@ (8001230 <MX_GPIO_Init+0x14c>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001102:	4a4b      	ldr	r2, [pc, #300]	@ (8001230 <MX_GPIO_Init+0x14c>)
 8001104:	f043 0304 	orr.w	r3, r3, #4
 8001108:	6313      	str	r3, [r2, #48]	@ 0x30
 800110a:	4b49      	ldr	r3, [pc, #292]	@ (8001230 <MX_GPIO_Init+0x14c>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110e:	f003 0304 	and.w	r3, r3, #4
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	4b45      	ldr	r3, [pc, #276]	@ (8001230 <MX_GPIO_Init+0x14c>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	4a44      	ldr	r2, [pc, #272]	@ (8001230 <MX_GPIO_Init+0x14c>)
 8001120:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001124:	6313      	str	r3, [r2, #48]	@ 0x30
 8001126:	4b42      	ldr	r3, [pc, #264]	@ (8001230 <MX_GPIO_Init+0x14c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	4b3e      	ldr	r3, [pc, #248]	@ (8001230 <MX_GPIO_Init+0x14c>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113a:	4a3d      	ldr	r2, [pc, #244]	@ (8001230 <MX_GPIO_Init+0x14c>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6313      	str	r3, [r2, #48]	@ 0x30
 8001142:	4b3b      	ldr	r3, [pc, #236]	@ (8001230 <MX_GPIO_Init+0x14c>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	4b37      	ldr	r3, [pc, #220]	@ (8001230 <MX_GPIO_Init+0x14c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	4a36      	ldr	r2, [pc, #216]	@ (8001230 <MX_GPIO_Init+0x14c>)
 8001158:	f043 0302 	orr.w	r3, r3, #2
 800115c:	6313      	str	r3, [r2, #48]	@ 0x30
 800115e:	4b34      	ldr	r3, [pc, #208]	@ (8001230 <MX_GPIO_Init+0x14c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|BUZZER_Pin|GATE_D_Pin|GATE_C_Pin, GPIO_PIN_RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	f640 4112 	movw	r1, #3090	@ 0xc12
 8001170:	4830      	ldr	r0, [pc, #192]	@ (8001234 <MX_GPIO_Init+0x150>)
 8001172:	f001 f99f 	bl	80024b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M0_Pin|M1_Pin|FN_Pin|LED2_Pin
 8001176:	2200      	movs	r2, #0
 8001178:	f246 011f 	movw	r1, #24607	@ 0x601f
 800117c:	482e      	ldr	r0, [pc, #184]	@ (8001238 <MX_GPIO_Init+0x154>)
 800117e:	f001 f999 	bl	80024b4 <HAL_GPIO_WritePin>
                          |LED1_Pin|GATE_B_Pin|GATE_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001182:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001186:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001188:	2300      	movs	r3, #0
 800118a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	4619      	mov	r1, r3
 8001196:	4827      	ldr	r0, [pc, #156]	@ (8001234 <MX_GPIO_Init+0x150>)
 8001198:	f000 fff8 	bl	800218c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin BUZZER_Pin GATE_D_Pin GATE_C_Pin */
  GPIO_InitStruct.Pin = CS_Pin|BUZZER_Pin|GATE_D_Pin|GATE_C_Pin;
 800119c:	f640 4312 	movw	r3, #3090	@ 0xc12
 80011a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a2:	2301      	movs	r3, #1
 80011a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2300      	movs	r3, #0
 80011ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	4619      	mov	r1, r3
 80011b4:	481f      	ldr	r0, [pc, #124]	@ (8001234 <MX_GPIO_Init+0x150>)
 80011b6:	f000 ffe9 	bl	800218c <HAL_GPIO_Init>

  /*Configure GPIO pins : M0_Pin M1_Pin FN_Pin LED2_Pin
                           LED1_Pin GATE_B_Pin GATE_A_Pin */
  GPIO_InitStruct.Pin = M0_Pin|M1_Pin|FN_Pin|LED2_Pin
 80011ba:	f246 031f 	movw	r3, #24607	@ 0x601f
 80011be:	617b      	str	r3, [r7, #20]
                          |LED1_Pin|GATE_B_Pin|GATE_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c0:	2301      	movs	r3, #1
 80011c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c8:	2300      	movs	r3, #0
 80011ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	4619      	mov	r1, r3
 80011d2:	4819      	ldr	r0, [pc, #100]	@ (8001238 <MX_GPIO_Init+0x154>)
 80011d4:	f000 ffda 	bl	800218c <HAL_GPIO_Init>

  /*Configure GPIO pin : SECINP_Pin */
  GPIO_InitStruct.Pin = SECINP_Pin;
 80011d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011de:	2300      	movs	r3, #0
 80011e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011e2:	2301      	movs	r3, #1
 80011e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SECINP_GPIO_Port, &GPIO_InitStruct);
 80011e6:	f107 0314 	add.w	r3, r7, #20
 80011ea:	4619      	mov	r1, r3
 80011ec:	4812      	ldr	r0, [pc, #72]	@ (8001238 <MX_GPIO_Init+0x154>)
 80011ee:	f000 ffcd 	bl	800218c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80011f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011fc:	2301      	movs	r3, #1
 80011fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	4619      	mov	r1, r3
 8001206:	480b      	ldr	r0, [pc, #44]	@ (8001234 <MX_GPIO_Init+0x150>)
 8001208:	f000 ffc0 	bl	800218c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|INT2_Pin;
 800120c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001212:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001216:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	4619      	mov	r1, r3
 8001222:	4805      	ldr	r0, [pc, #20]	@ (8001238 <MX_GPIO_Init+0x154>)
 8001224:	f000 ffb2 	bl	800218c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001228:	bf00      	nop
 800122a:	3728      	adds	r7, #40	@ 0x28
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40023800 	.word	0x40023800
 8001234:	40020800 	.word	0x40020800
 8001238:	40020400 	.word	0x40020400

0800123c <E220_CONFIG>:

/* USER CODE BEGIN 4 */
void E220_CONFIG(uint8_t ADDH, uint8_t ADDL, uint8_t CHN, uint8_t MODE)
{
 800123c:	b590      	push	{r4, r7, lr}
 800123e:	b087      	sub	sp, #28
 8001240:	af00      	add	r7, sp, #0
 8001242:	4604      	mov	r4, r0
 8001244:	4608      	mov	r0, r1
 8001246:	4611      	mov	r1, r2
 8001248:	461a      	mov	r2, r3
 800124a:	4623      	mov	r3, r4
 800124c:	71fb      	strb	r3, [r7, #7]
 800124e:	4603      	mov	r3, r0
 8001250:	71bb      	strb	r3, [r7, #6]
 8001252:	460b      	mov	r3, r1
 8001254:	717b      	strb	r3, [r7, #5]
 8001256:	4613      	mov	r3, r2
 8001258:	713b      	strb	r3, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, SET);
 800125a:	2201      	movs	r2, #1
 800125c:	2104      	movs	r1, #4
 800125e:	4824      	ldr	r0, [pc, #144]	@ (80012f0 <E220_CONFIG+0xb4>)
 8001260:	f001 f928 	bl	80024b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 8001264:	2201      	movs	r2, #1
 8001266:	2102      	movs	r1, #2
 8001268:	4821      	ldr	r0, [pc, #132]	@ (80012f0 <E220_CONFIG+0xb4>)
 800126a:	f001 f923 	bl	80024b4 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 800126e:	2032      	movs	r0, #50	@ 0x32
 8001270:	f000 fb52 	bl	8001918 <HAL_Delay>

    char cfg_buff[8] = {0}; // E220 için 8 elemanlı bir dizi kullanıyoruz
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	2300      	movs	r3, #0
 800127a:	613b      	str	r3, [r7, #16]
    enum {Transparent, Fixed} mode;
    mode = MODE;
 800127c:	793b      	ldrb	r3, [r7, #4]
 800127e:	75fb      	strb	r3, [r7, #23]

    cfg_buff[0] = ADDH;
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	733b      	strb	r3, [r7, #12]
    cfg_buff[1] = ADDL;
 8001284:	79bb      	ldrb	r3, [r7, #6]
 8001286:	737b      	strb	r3, [r7, #13]
    cfg_buff[2] = 0x62;
 8001288:	2362      	movs	r3, #98	@ 0x62
 800128a:	73bb      	strb	r3, [r7, #14]
    cfg_buff[3] = 0x00;
 800128c:	2300      	movs	r3, #0
 800128e:	73fb      	strb	r3, [r7, #15]
    cfg_buff[4] = CHN;
 8001290:	797b      	ldrb	r3, [r7, #5]
 8001292:	743b      	strb	r3, [r7, #16]

    switch(mode){
 8001294:	7dfb      	ldrb	r3, [r7, #23]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d002      	beq.n	80012a0 <E220_CONFIG+0x64>
 800129a:	2b01      	cmp	r3, #1
 800129c:	d003      	beq.n	80012a6 <E220_CONFIG+0x6a>
 800129e:	e005      	b.n	80012ac <E220_CONFIG+0x70>
        case Transparent:
            cfg_buff[5] = 0x00;  // opsiyon
 80012a0:	2300      	movs	r3, #0
 80012a2:	747b      	strb	r3, [r7, #17]
            break;
 80012a4:	e004      	b.n	80012b0 <E220_CONFIG+0x74>
        case Fixed:
            cfg_buff[5] = 0x11;
 80012a6:	2311      	movs	r3, #17
 80012a8:	747b      	strb	r3, [r7, #17]
            break;
 80012aa:	e001      	b.n	80012b0 <E220_CONFIG+0x74>
        default:
            cfg_buff[5] = 0x11;
 80012ac:	2311      	movs	r3, #17
 80012ae:	747b      	strb	r3, [r7, #17]
     }

     cfg_buff[6] = 0x00;
 80012b0:	2300      	movs	r3, #0
 80012b2:	74bb      	strb	r3, [r7, #18]
     cfg_buff[7] = 0x00;
 80012b4:	2300      	movs	r3, #0
 80012b6:	74fb      	strb	r3, [r7, #19]


    HAL_UART_Transmit(&huart3, (uint8_t*) cfg_buff, 8, 1000);
 80012b8:	f107 010c 	add.w	r1, r7, #12
 80012bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012c0:	2208      	movs	r2, #8
 80012c2:	480c      	ldr	r0, [pc, #48]	@ (80012f4 <E220_CONFIG+0xb8>)
 80012c4:	f003 ff06 	bl	80050d4 <HAL_UART_Transmit>

    HAL_Delay(25);
 80012c8:	2019      	movs	r0, #25
 80012ca:	f000 fb25 	bl	8001918 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2104      	movs	r1, #4
 80012d2:	4807      	ldr	r0, [pc, #28]	@ (80012f0 <E220_CONFIG+0xb4>)
 80012d4:	f001 f8ee 	bl	80024b4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	2102      	movs	r1, #2
 80012dc:	4804      	ldr	r0, [pc, #16]	@ (80012f0 <E220_CONFIG+0xb4>)
 80012de:	f001 f8e9 	bl	80024b4 <HAL_GPIO_WritePin>
    HAL_Delay(25);
 80012e2:	2019      	movs	r0, #25
 80012e4:	f000 fb18 	bl	8001918 <HAL_Delay>
}
 80012e8:	bf00      	nop
 80012ea:	371c      	adds	r7, #28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd90      	pop	{r4, r7, pc}
 80012f0:	40020400 	.word	0x40020400
 80012f4:	200002b8 	.word	0x200002b8

080012f8 <HYI_BUFFER_Fill>:
	HAL_UART_Transmit(&huart4, Cmd_End, 3, 100);
	free(buffer);
}

void HYI_BUFFER_Fill()
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
	HYI_BUFFER[0] =0xFF;
 80012fc:	4b13      	ldr	r3, [pc, #76]	@ (800134c <HYI_BUFFER_Fill+0x54>)
 80012fe:	22ff      	movs	r2, #255	@ 0xff
 8001300:	701a      	strb	r2, [r3, #0]
	HYI_BUFFER[1] =0xFF;
 8001302:	4b12      	ldr	r3, [pc, #72]	@ (800134c <HYI_BUFFER_Fill+0x54>)
 8001304:	22ff      	movs	r2, #255	@ 0xff
 8001306:	705a      	strb	r2, [r3, #1]
	HYI_BUFFER[3] =0x54;
 8001308:	4b10      	ldr	r3, [pc, #64]	@ (800134c <HYI_BUFFER_Fill+0x54>)
 800130a:	2254      	movs	r2, #84	@ 0x54
 800130c:	70da      	strb	r2, [r3, #3]
	HYI_BUFFER[4] =TAKIM_ID;
 800130e:	4b0f      	ldr	r3, [pc, #60]	@ (800134c <HYI_BUFFER_Fill+0x54>)
 8001310:	2200      	movs	r2, #0
 8001312:	711a      	strb	r2, [r3, #4]
	HYI_BUFFER[5] =takim_sayac;
 8001314:	4b0e      	ldr	r3, [pc, #56]	@ (8001350 <HYI_BUFFER_Fill+0x58>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	b2da      	uxtb	r2, r3
 800131a:	4b0c      	ldr	r3, [pc, #48]	@ (800134c <HYI_BUFFER_Fill+0x54>)
 800131c:	715a      	strb	r2, [r3, #5]
	HYI_BUFFER[74]= EGU_AYRILMA_TESPIT;
 800131e:	4b0d      	ldr	r3, [pc, #52]	@ (8001354 <HYI_BUFFER_Fill+0x5c>)
 8001320:	781a      	ldrb	r2, [r3, #0]
 8001322:	4b0a      	ldr	r3, [pc, #40]	@ (800134c <HYI_BUFFER_Fill+0x54>)
 8001324:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
	HYI_BUFFER[75]= 0; // CRC
 8001328:	4b08      	ldr	r3, [pc, #32]	@ (800134c <HYI_BUFFER_Fill+0x54>)
 800132a:	2200      	movs	r2, #0
 800132c:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
	HYI_BUFFER[76]= 0x0D;
 8001330:	4b06      	ldr	r3, [pc, #24]	@ (800134c <HYI_BUFFER_Fill+0x54>)
 8001332:	220d      	movs	r2, #13
 8001334:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
	HYI_BUFFER[77]= 0x0A;
 8001338:	4b04      	ldr	r3, [pc, #16]	@ (800134c <HYI_BUFFER_Fill+0x54>)
 800133a:	220a      	movs	r2, #10
 800133c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d





}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	20000344 	.word	0x20000344
 8001350:	2000040c 	.word	0x2000040c
 8001354:	200003c4 	.word	0x200003c4

08001358 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800135c:	b672      	cpsid	i
}
 800135e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001360:	bf00      	nop
 8001362:	e7fd      	b.n	8001360 <Error_Handler+0x8>

08001364 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	4b10      	ldr	r3, [pc, #64]	@ (80013b0 <HAL_MspInit+0x4c>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001372:	4a0f      	ldr	r2, [pc, #60]	@ (80013b0 <HAL_MspInit+0x4c>)
 8001374:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001378:	6453      	str	r3, [r2, #68]	@ 0x44
 800137a:	4b0d      	ldr	r3, [pc, #52]	@ (80013b0 <HAL_MspInit+0x4c>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800137e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	603b      	str	r3, [r7, #0]
 800138a:	4b09      	ldr	r3, [pc, #36]	@ (80013b0 <HAL_MspInit+0x4c>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138e:	4a08      	ldr	r2, [pc, #32]	@ (80013b0 <HAL_MspInit+0x4c>)
 8001390:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001394:	6413      	str	r3, [r2, #64]	@ 0x40
 8001396:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <HAL_MspInit+0x4c>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800139e:	603b      	str	r3, [r7, #0]
 80013a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800

080013b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08a      	sub	sp, #40	@ 0x28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a17      	ldr	r2, [pc, #92]	@ (8001430 <HAL_ADC_MspInit+0x7c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d127      	bne.n	8001426 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	4b16      	ldr	r3, [pc, #88]	@ (8001434 <HAL_ADC_MspInit+0x80>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013de:	4a15      	ldr	r2, [pc, #84]	@ (8001434 <HAL_ADC_MspInit+0x80>)
 80013e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80013e6:	4b13      	ldr	r3, [pc, #76]	@ (8001434 <HAL_ADC_MspInit+0x80>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001434 <HAL_ADC_MspInit+0x80>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001434 <HAL_ADC_MspInit+0x80>)
 80013fc:	f043 0304 	orr.w	r3, r3, #4
 8001400:	6313      	str	r3, [r2, #48]	@ 0x30
 8001402:	4b0c      	ldr	r3, [pc, #48]	@ (8001434 <HAL_ADC_MspInit+0x80>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	f003 0304 	and.w	r3, r3, #4
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC_VCC_Pin;
 800140e:	2304      	movs	r3, #4
 8001410:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001412:	2303      	movs	r3, #3
 8001414:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_VCC_GPIO_Port, &GPIO_InitStruct);
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	4619      	mov	r1, r3
 8001420:	4805      	ldr	r0, [pc, #20]	@ (8001438 <HAL_ADC_MspInit+0x84>)
 8001422:	f000 feb3 	bl	800218c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001426:	bf00      	nop
 8001428:	3728      	adds	r7, #40	@ 0x28
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40012000 	.word	0x40012000
 8001434:	40023800 	.word	0x40023800
 8001438:	40020800 	.word	0x40020800

0800143c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	@ 0x28
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a19      	ldr	r2, [pc, #100]	@ (80014c0 <HAL_I2C_MspInit+0x84>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d12b      	bne.n	80014b6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	4b18      	ldr	r3, [pc, #96]	@ (80014c4 <HAL_I2C_MspInit+0x88>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	4a17      	ldr	r2, [pc, #92]	@ (80014c4 <HAL_I2C_MspInit+0x88>)
 8001468:	f043 0302 	orr.w	r3, r3, #2
 800146c:	6313      	str	r3, [r2, #48]	@ 0x30
 800146e:	4b15      	ldr	r3, [pc, #84]	@ (80014c4 <HAL_I2C_MspInit+0x88>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800147a:	23c0      	movs	r3, #192	@ 0xc0
 800147c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800147e:	2312      	movs	r3, #18
 8001480:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001486:	2303      	movs	r3, #3
 8001488:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800148a:	2304      	movs	r3, #4
 800148c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148e:	f107 0314 	add.w	r3, r7, #20
 8001492:	4619      	mov	r1, r3
 8001494:	480c      	ldr	r0, [pc, #48]	@ (80014c8 <HAL_I2C_MspInit+0x8c>)
 8001496:	f000 fe79 	bl	800218c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	4b09      	ldr	r3, [pc, #36]	@ (80014c4 <HAL_I2C_MspInit+0x88>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a2:	4a08      	ldr	r2, [pc, #32]	@ (80014c4 <HAL_I2C_MspInit+0x88>)
 80014a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014aa:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <HAL_I2C_MspInit+0x88>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014b6:	bf00      	nop
 80014b8:	3728      	adds	r7, #40	@ 0x28
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40005400 	.word	0x40005400
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40020400 	.word	0x40020400

080014cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08a      	sub	sp, #40	@ 0x28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a19      	ldr	r2, [pc, #100]	@ (8001550 <HAL_SPI_MspInit+0x84>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d12b      	bne.n	8001546 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]
 80014f2:	4b18      	ldr	r3, [pc, #96]	@ (8001554 <HAL_SPI_MspInit+0x88>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f6:	4a17      	ldr	r2, [pc, #92]	@ (8001554 <HAL_SPI_MspInit+0x88>)
 80014f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80014fe:	4b15      	ldr	r3, [pc, #84]	@ (8001554 <HAL_SPI_MspInit+0x88>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001502:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	4b11      	ldr	r3, [pc, #68]	@ (8001554 <HAL_SPI_MspInit+0x88>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	4a10      	ldr	r2, [pc, #64]	@ (8001554 <HAL_SPI_MspInit+0x88>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	6313      	str	r3, [r2, #48]	@ 0x30
 800151a:	4b0e      	ldr	r3, [pc, #56]	@ (8001554 <HAL_SPI_MspInit+0x88>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001526:	23e0      	movs	r3, #224	@ 0xe0
 8001528:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152a:	2302      	movs	r3, #2
 800152c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001532:	2303      	movs	r3, #3
 8001534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001536:	2305      	movs	r3, #5
 8001538:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	4619      	mov	r1, r3
 8001540:	4805      	ldr	r0, [pc, #20]	@ (8001558 <HAL_SPI_MspInit+0x8c>)
 8001542:	f000 fe23 	bl	800218c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001546:	bf00      	nop
 8001548:	3728      	adds	r7, #40	@ 0x28
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40013000 	.word	0x40013000
 8001554:	40023800 	.word	0x40023800
 8001558:	40020000 	.word	0x40020000

0800155c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08e      	sub	sp, #56	@ 0x38
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a62      	ldr	r2, [pc, #392]	@ (8001704 <HAL_UART_MspInit+0x1a8>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d12c      	bne.n	80015d8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	623b      	str	r3, [r7, #32]
 8001582:	4b61      	ldr	r3, [pc, #388]	@ (8001708 <HAL_UART_MspInit+0x1ac>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001586:	4a60      	ldr	r2, [pc, #384]	@ (8001708 <HAL_UART_MspInit+0x1ac>)
 8001588:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800158c:	6413      	str	r3, [r2, #64]	@ 0x40
 800158e:	4b5e      	ldr	r3, [pc, #376]	@ (8001708 <HAL_UART_MspInit+0x1ac>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001592:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001596:	623b      	str	r3, [r7, #32]
 8001598:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
 800159e:	4b5a      	ldr	r3, [pc, #360]	@ (8001708 <HAL_UART_MspInit+0x1ac>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a2:	4a59      	ldr	r2, [pc, #356]	@ (8001708 <HAL_UART_MspInit+0x1ac>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015aa:	4b57      	ldr	r3, [pc, #348]	@ (8001708 <HAL_UART_MspInit+0x1ac>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	61fb      	str	r3, [r7, #28]
 80015b4:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015b6:	2303      	movs	r3, #3
 80015b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ba:	2302      	movs	r3, #2
 80015bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c2:	2303      	movs	r3, #3
 80015c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80015c6:	2308      	movs	r3, #8
 80015c8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ce:	4619      	mov	r1, r3
 80015d0:	484e      	ldr	r0, [pc, #312]	@ (800170c <HAL_UART_MspInit+0x1b0>)
 80015d2:	f000 fddb 	bl	800218c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015d6:	e091      	b.n	80016fc <HAL_UART_MspInit+0x1a0>
  else if(huart->Instance==USART2)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a4c      	ldr	r2, [pc, #304]	@ (8001710 <HAL_UART_MspInit+0x1b4>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d134      	bne.n	800164c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	61bb      	str	r3, [r7, #24]
 80015e6:	4b48      	ldr	r3, [pc, #288]	@ (8001708 <HAL_UART_MspInit+0x1ac>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ea:	4a47      	ldr	r2, [pc, #284]	@ (8001708 <HAL_UART_MspInit+0x1ac>)
 80015ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80015f2:	4b45      	ldr	r3, [pc, #276]	@ (8001708 <HAL_UART_MspInit+0x1ac>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015fa:	61bb      	str	r3, [r7, #24]
 80015fc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
 8001602:	4b41      	ldr	r3, [pc, #260]	@ (8001708 <HAL_UART_MspInit+0x1ac>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001606:	4a40      	ldr	r2, [pc, #256]	@ (8001708 <HAL_UART_MspInit+0x1ac>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6313      	str	r3, [r2, #48]	@ 0x30
 800160e:	4b3e      	ldr	r3, [pc, #248]	@ (8001708 <HAL_UART_MspInit+0x1ac>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TX2_GPS_Pin|RX2_GPS_Pin;
 800161a:	230c      	movs	r3, #12
 800161c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161e:	2302      	movs	r3, #2
 8001620:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001626:	2303      	movs	r3, #3
 8001628:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800162a:	2307      	movs	r3, #7
 800162c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001632:	4619      	mov	r1, r3
 8001634:	4835      	ldr	r0, [pc, #212]	@ (800170c <HAL_UART_MspInit+0x1b0>)
 8001636:	f000 fda9 	bl	800218c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800163a:	2200      	movs	r2, #0
 800163c:	2100      	movs	r1, #0
 800163e:	2026      	movs	r0, #38	@ 0x26
 8001640:	f000 fcdb 	bl	8001ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001644:	2026      	movs	r0, #38	@ 0x26
 8001646:	f000 fcf4 	bl	8002032 <HAL_NVIC_EnableIRQ>
}
 800164a:	e057      	b.n	80016fc <HAL_UART_MspInit+0x1a0>
  else if(huart->Instance==USART3)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a30      	ldr	r2, [pc, #192]	@ (8001714 <HAL_UART_MspInit+0x1b8>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d152      	bne.n	80016fc <HAL_UART_MspInit+0x1a0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	4b2b      	ldr	r3, [pc, #172]	@ (8001708 <HAL_UART_MspInit+0x1ac>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165e:	4a2a      	ldr	r2, [pc, #168]	@ (8001708 <HAL_UART_MspInit+0x1ac>)
 8001660:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001664:	6413      	str	r3, [r2, #64]	@ 0x40
 8001666:	4b28      	ldr	r3, [pc, #160]	@ (8001708 <HAL_UART_MspInit+0x1ac>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	4b24      	ldr	r3, [pc, #144]	@ (8001708 <HAL_UART_MspInit+0x1ac>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167a:	4a23      	ldr	r2, [pc, #140]	@ (8001708 <HAL_UART_MspInit+0x1ac>)
 800167c:	f043 0304 	orr.w	r3, r3, #4
 8001680:	6313      	str	r3, [r2, #48]	@ 0x30
 8001682:	4b21      	ldr	r3, [pc, #132]	@ (8001708 <HAL_UART_MspInit+0x1ac>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	f003 0304 	and.w	r3, r3, #4
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	4b1d      	ldr	r3, [pc, #116]	@ (8001708 <HAL_UART_MspInit+0x1ac>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001696:	4a1c      	ldr	r2, [pc, #112]	@ (8001708 <HAL_UART_MspInit+0x1ac>)
 8001698:	f043 0302 	orr.w	r3, r3, #2
 800169c:	6313      	str	r3, [r2, #48]	@ 0x30
 800169e:	4b1a      	ldr	r3, [pc, #104]	@ (8001708 <HAL_UART_MspInit+0x1ac>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	60bb      	str	r3, [r7, #8]
 80016a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RX3_LORA_Pin;
 80016aa:	2320      	movs	r3, #32
 80016ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ae:	2302      	movs	r3, #2
 80016b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b6:	2303      	movs	r3, #3
 80016b8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016ba:	2307      	movs	r3, #7
 80016bc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RX3_LORA_GPIO_Port, &GPIO_InitStruct);
 80016be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016c2:	4619      	mov	r1, r3
 80016c4:	4814      	ldr	r0, [pc, #80]	@ (8001718 <HAL_UART_MspInit+0x1bc>)
 80016c6:	f000 fd61 	bl	800218c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TX3_LORA_Pin;
 80016ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d0:	2302      	movs	r3, #2
 80016d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d8:	2303      	movs	r3, #3
 80016da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016dc:	2307      	movs	r3, #7
 80016de:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(TX3_LORA_GPIO_Port, &GPIO_InitStruct);
 80016e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016e4:	4619      	mov	r1, r3
 80016e6:	480d      	ldr	r0, [pc, #52]	@ (800171c <HAL_UART_MspInit+0x1c0>)
 80016e8:	f000 fd50 	bl	800218c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80016ec:	2200      	movs	r2, #0
 80016ee:	2100      	movs	r1, #0
 80016f0:	2027      	movs	r0, #39	@ 0x27
 80016f2:	f000 fc82 	bl	8001ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80016f6:	2027      	movs	r0, #39	@ 0x27
 80016f8:	f000 fc9b 	bl	8002032 <HAL_NVIC_EnableIRQ>
}
 80016fc:	bf00      	nop
 80016fe:	3738      	adds	r7, #56	@ 0x38
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40004c00 	.word	0x40004c00
 8001708:	40023800 	.word	0x40023800
 800170c:	40020000 	.word	0x40020000
 8001710:	40004400 	.word	0x40004400
 8001714:	40004800 	.word	0x40004800
 8001718:	40020800 	.word	0x40020800
 800171c:	40020400 	.word	0x40020400

08001720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001724:	bf00      	nop
 8001726:	e7fd      	b.n	8001724 <NMI_Handler+0x4>

08001728 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800172c:	bf00      	nop
 800172e:	e7fd      	b.n	800172c <HardFault_Handler+0x4>

08001730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001734:	bf00      	nop
 8001736:	e7fd      	b.n	8001734 <MemManage_Handler+0x4>

08001738 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <BusFault_Handler+0x4>

08001740 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001744:	bf00      	nop
 8001746:	e7fd      	b.n	8001744 <UsageFault_Handler+0x4>

08001748 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001776:	f000 f8af 	bl	80018d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001784:	4802      	ldr	r0, [pc, #8]	@ (8001790 <USART2_IRQHandler+0x10>)
 8001786:	f003 fd67 	bl	8005258 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000274 	.word	0x20000274

08001794 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001798:	4802      	ldr	r0, [pc, #8]	@ (80017a4 <USART3_IRQHandler+0x10>)
 800179a:	f003 fd5d 	bl	8005258 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	200002b8 	.word	0x200002b8

080017a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80017ac:	4802      	ldr	r0, [pc, #8]	@ (80017b8 <OTG_FS_IRQHandler+0x10>)
 80017ae:	f001 f936 	bl	8002a1e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	200011b8 	.word	0x200011b8

080017bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017c0:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <SystemInit+0x20>)
 80017c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017c6:	4a05      	ldr	r2, [pc, #20]	@ (80017dc <SystemInit+0x20>)
 80017c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001818 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017e4:	480d      	ldr	r0, [pc, #52]	@ (800181c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017e6:	490e      	ldr	r1, [pc, #56]	@ (8001820 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017e8:	4a0e      	ldr	r2, [pc, #56]	@ (8001824 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017ec:	e002      	b.n	80017f4 <LoopCopyDataInit>

080017ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017f2:	3304      	adds	r3, #4

080017f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f8:	d3f9      	bcc.n	80017ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001828 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017fc:	4c0b      	ldr	r4, [pc, #44]	@ (800182c <LoopFillZerobss+0x26>)
  movs r3, #0
 80017fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001800:	e001      	b.n	8001806 <LoopFillZerobss>

08001802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001804:	3204      	adds	r2, #4

08001806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001808:	d3fb      	bcc.n	8001802 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800180a:	f7ff ffd7 	bl	80017bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800180e:	f008 feb5 	bl	800a57c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001812:	f7fe feb1 	bl	8000578 <main>
  bx  lr    
 8001816:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001818:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800181c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001820:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 8001824:	0800a64c 	.word	0x0800a64c
  ldr r2, =_sbss
 8001828:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 800182c:	200018e4 	.word	0x200018e4

08001830 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001830:	e7fe      	b.n	8001830 <ADC_IRQHandler>
	...

08001834 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001838:	4b0e      	ldr	r3, [pc, #56]	@ (8001874 <HAL_Init+0x40>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a0d      	ldr	r2, [pc, #52]	@ (8001874 <HAL_Init+0x40>)
 800183e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001842:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001844:	4b0b      	ldr	r3, [pc, #44]	@ (8001874 <HAL_Init+0x40>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a0a      	ldr	r2, [pc, #40]	@ (8001874 <HAL_Init+0x40>)
 800184a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800184e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001850:	4b08      	ldr	r3, [pc, #32]	@ (8001874 <HAL_Init+0x40>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a07      	ldr	r2, [pc, #28]	@ (8001874 <HAL_Init+0x40>)
 8001856:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800185a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800185c:	2003      	movs	r0, #3
 800185e:	f000 fbc1 	bl	8001fe4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001862:	200f      	movs	r0, #15
 8001864:	f000 f808 	bl	8001878 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001868:	f7ff fd7c 	bl	8001364 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40023c00 	.word	0x40023c00

08001878 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001880:	4b12      	ldr	r3, [pc, #72]	@ (80018cc <HAL_InitTick+0x54>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	4b12      	ldr	r3, [pc, #72]	@ (80018d0 <HAL_InitTick+0x58>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	4619      	mov	r1, r3
 800188a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800188e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001892:	fbb2 f3f3 	udiv	r3, r2, r3
 8001896:	4618      	mov	r0, r3
 8001898:	f000 fbd9 	bl	800204e <HAL_SYSTICK_Config>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e00e      	b.n	80018c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b0f      	cmp	r3, #15
 80018aa:	d80a      	bhi.n	80018c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018ac:	2200      	movs	r2, #0
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	f04f 30ff 	mov.w	r0, #4294967295
 80018b4:	f000 fba1 	bl	8001ffa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018b8:	4a06      	ldr	r2, [pc, #24]	@ (80018d4 <HAL_InitTick+0x5c>)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018be:	2300      	movs	r3, #0
 80018c0:	e000      	b.n	80018c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000000 	.word	0x20000000
 80018d0:	20000008 	.word	0x20000008
 80018d4:	20000004 	.word	0x20000004

080018d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018dc:	4b06      	ldr	r3, [pc, #24]	@ (80018f8 <HAL_IncTick+0x20>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	461a      	mov	r2, r3
 80018e2:	4b06      	ldr	r3, [pc, #24]	@ (80018fc <HAL_IncTick+0x24>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4413      	add	r3, r2
 80018e8:	4a04      	ldr	r2, [pc, #16]	@ (80018fc <HAL_IncTick+0x24>)
 80018ea:	6013      	str	r3, [r2, #0]
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	20000008 	.word	0x20000008
 80018fc:	200004c0 	.word	0x200004c0

08001900 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return uwTick;
 8001904:	4b03      	ldr	r3, [pc, #12]	@ (8001914 <HAL_GetTick+0x14>)
 8001906:	681b      	ldr	r3, [r3, #0]
}
 8001908:	4618      	mov	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	200004c0 	.word	0x200004c0

08001918 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001920:	f7ff ffee 	bl	8001900 <HAL_GetTick>
 8001924:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001930:	d005      	beq.n	800193e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001932:	4b0a      	ldr	r3, [pc, #40]	@ (800195c <HAL_Delay+0x44>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	461a      	mov	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4413      	add	r3, r2
 800193c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800193e:	bf00      	nop
 8001940:	f7ff ffde 	bl	8001900 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	429a      	cmp	r2, r3
 800194e:	d8f7      	bhi.n	8001940 <HAL_Delay+0x28>
  {
  }
}
 8001950:	bf00      	nop
 8001952:	bf00      	nop
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000008 	.word	0x20000008

08001960 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001968:	2300      	movs	r3, #0
 800196a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e033      	b.n	80019de <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197a:	2b00      	cmp	r3, #0
 800197c:	d109      	bne.n	8001992 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7ff fd18 	bl	80013b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001996:	f003 0310 	and.w	r3, r3, #16
 800199a:	2b00      	cmp	r3, #0
 800199c:	d118      	bne.n	80019d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80019a6:	f023 0302 	bic.w	r3, r3, #2
 80019aa:	f043 0202 	orr.w	r2, r3, #2
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 f94a 	bl	8001c4c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c2:	f023 0303 	bic.w	r3, r3, #3
 80019c6:	f043 0201 	orr.w	r2, r3, #1
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	641a      	str	r2, [r3, #64]	@ 0x40
 80019ce:	e001      	b.n	80019d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
	...

080019e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80019f2:	2300      	movs	r3, #0
 80019f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d101      	bne.n	8001a04 <HAL_ADC_ConfigChannel+0x1c>
 8001a00:	2302      	movs	r3, #2
 8001a02:	e113      	b.n	8001c2c <HAL_ADC_ConfigChannel+0x244>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b09      	cmp	r3, #9
 8001a12:	d925      	bls.n	8001a60 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	68d9      	ldr	r1, [r3, #12]
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	461a      	mov	r2, r3
 8001a22:	4613      	mov	r3, r2
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	4413      	add	r3, r2
 8001a28:	3b1e      	subs	r3, #30
 8001a2a:	2207      	movs	r2, #7
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43da      	mvns	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	400a      	ands	r2, r1
 8001a38:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68d9      	ldr	r1, [r3, #12]
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	4403      	add	r3, r0
 8001a52:	3b1e      	subs	r3, #30
 8001a54:	409a      	lsls	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	e022      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6919      	ldr	r1, [r3, #16]
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	4613      	mov	r3, r2
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	4413      	add	r3, r2
 8001a74:	2207      	movs	r2, #7
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	43da      	mvns	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	400a      	ands	r2, r1
 8001a82:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6919      	ldr	r1, [r3, #16]
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	689a      	ldr	r2, [r3, #8]
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	4618      	mov	r0, r3
 8001a96:	4603      	mov	r3, r0
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	4403      	add	r3, r0
 8001a9c:	409a      	lsls	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b06      	cmp	r3, #6
 8001aac:	d824      	bhi.n	8001af8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	3b05      	subs	r3, #5
 8001ac0:	221f      	movs	r2, #31
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43da      	mvns	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	400a      	ands	r2, r1
 8001ace:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	4618      	mov	r0, r3
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4413      	add	r3, r2
 8001ae8:	3b05      	subs	r3, #5
 8001aea:	fa00 f203 	lsl.w	r2, r0, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	430a      	orrs	r2, r1
 8001af4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001af6:	e04c      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	2b0c      	cmp	r3, #12
 8001afe:	d824      	bhi.n	8001b4a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4413      	add	r3, r2
 8001b10:	3b23      	subs	r3, #35	@ 0x23
 8001b12:	221f      	movs	r2, #31
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43da      	mvns	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	400a      	ands	r2, r1
 8001b20:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	4618      	mov	r0, r3
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	4613      	mov	r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	4413      	add	r3, r2
 8001b3a:	3b23      	subs	r3, #35	@ 0x23
 8001b3c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	430a      	orrs	r2, r1
 8001b46:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b48:	e023      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	4613      	mov	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4413      	add	r3, r2
 8001b5a:	3b41      	subs	r3, #65	@ 0x41
 8001b5c:	221f      	movs	r2, #31
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43da      	mvns	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	400a      	ands	r2, r1
 8001b6a:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	4618      	mov	r0, r3
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685a      	ldr	r2, [r3, #4]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	3b41      	subs	r3, #65	@ 0x41
 8001b86:	fa00 f203 	lsl.w	r2, r0, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b92:	4b29      	ldr	r3, [pc, #164]	@ (8001c38 <HAL_ADC_ConfigChannel+0x250>)
 8001b94:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a28      	ldr	r2, [pc, #160]	@ (8001c3c <HAL_ADC_ConfigChannel+0x254>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d10f      	bne.n	8001bc0 <HAL_ADC_ConfigChannel+0x1d8>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2b12      	cmp	r3, #18
 8001ba6:	d10b      	bne.n	8001bc0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a1d      	ldr	r2, [pc, #116]	@ (8001c3c <HAL_ADC_ConfigChannel+0x254>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d12b      	bne.n	8001c22 <HAL_ADC_ConfigChannel+0x23a>
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a1c      	ldr	r2, [pc, #112]	@ (8001c40 <HAL_ADC_ConfigChannel+0x258>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d003      	beq.n	8001bdc <HAL_ADC_ConfigChannel+0x1f4>
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b11      	cmp	r3, #17
 8001bda:	d122      	bne.n	8001c22 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a11      	ldr	r2, [pc, #68]	@ (8001c40 <HAL_ADC_ConfigChannel+0x258>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d111      	bne.n	8001c22 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bfe:	4b11      	ldr	r3, [pc, #68]	@ (8001c44 <HAL_ADC_ConfigChannel+0x25c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a11      	ldr	r2, [pc, #68]	@ (8001c48 <HAL_ADC_ConfigChannel+0x260>)
 8001c04:	fba2 2303 	umull	r2, r3, r2, r3
 8001c08:	0c9a      	lsrs	r2, r3, #18
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4413      	add	r3, r2
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c14:	e002      	b.n	8001c1c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f9      	bne.n	8001c16 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	40012300 	.word	0x40012300
 8001c3c:	40012000 	.word	0x40012000
 8001c40:	10000012 	.word	0x10000012
 8001c44:	20000000 	.word	0x20000000
 8001c48:	431bde83 	.word	0x431bde83

08001c4c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c54:	4b79      	ldr	r3, [pc, #484]	@ (8001e3c <ADC_Init+0x1f0>)
 8001c56:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6859      	ldr	r1, [r3, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	021a      	lsls	r2, r3, #8
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001ca4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6859      	ldr	r1, [r3, #4]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	689a      	ldr	r2, [r3, #8]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6899      	ldr	r1, [r3, #8]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	68da      	ldr	r2, [r3, #12]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cde:	4a58      	ldr	r2, [pc, #352]	@ (8001e40 <ADC_Init+0x1f4>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d022      	beq.n	8001d2a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	689a      	ldr	r2, [r3, #8]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001cf2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6899      	ldr	r1, [r3, #8]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	430a      	orrs	r2, r1
 8001d04:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001d14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	6899      	ldr	r1, [r3, #8]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	430a      	orrs	r2, r1
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	e00f      	b.n	8001d4a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001d48:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f022 0202 	bic.w	r2, r2, #2
 8001d58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6899      	ldr	r1, [r3, #8]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	7e1b      	ldrb	r3, [r3, #24]
 8001d64:	005a      	lsls	r2, r3, #1
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d01b      	beq.n	8001db0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d86:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	685a      	ldr	r2, [r3, #4]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001d96:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6859      	ldr	r1, [r3, #4]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da2:	3b01      	subs	r3, #1
 8001da4:	035a      	lsls	r2, r3, #13
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	430a      	orrs	r2, r1
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	e007      	b.n	8001dc0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	685a      	ldr	r2, [r3, #4]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001dbe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001dce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	051a      	lsls	r2, r3, #20
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	430a      	orrs	r2, r1
 8001de4:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001df4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6899      	ldr	r1, [r3, #8]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e02:	025a      	lsls	r2, r3, #9
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689a      	ldr	r2, [r3, #8]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6899      	ldr	r1, [r3, #8]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	029a      	lsls	r2, r3, #10
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	609a      	str	r2, [r3, #8]
}
 8001e30:	bf00      	nop
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	40012300 	.word	0x40012300
 8001e40:	0f000001 	.word	0x0f000001

08001e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e54:	4b0c      	ldr	r3, [pc, #48]	@ (8001e88 <__NVIC_SetPriorityGrouping+0x44>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e60:	4013      	ands	r3, r2
 8001e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e76:	4a04      	ldr	r2, [pc, #16]	@ (8001e88 <__NVIC_SetPriorityGrouping+0x44>)
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	60d3      	str	r3, [r2, #12]
}
 8001e7c:	bf00      	nop
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e90:	4b04      	ldr	r3, [pc, #16]	@ (8001ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	0a1b      	lsrs	r3, r3, #8
 8001e96:	f003 0307 	and.w	r3, r3, #7
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	db0b      	blt.n	8001ed2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eba:	79fb      	ldrb	r3, [r7, #7]
 8001ebc:	f003 021f 	and.w	r2, r3, #31
 8001ec0:	4907      	ldr	r1, [pc, #28]	@ (8001ee0 <__NVIC_EnableIRQ+0x38>)
 8001ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec6:	095b      	lsrs	r3, r3, #5
 8001ec8:	2001      	movs	r0, #1
 8001eca:	fa00 f202 	lsl.w	r2, r0, r2
 8001ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	e000e100 	.word	0xe000e100

08001ee4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	6039      	str	r1, [r7, #0]
 8001eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	db0a      	blt.n	8001f0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	490c      	ldr	r1, [pc, #48]	@ (8001f30 <__NVIC_SetPriority+0x4c>)
 8001efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f02:	0112      	lsls	r2, r2, #4
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	440b      	add	r3, r1
 8001f08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f0c:	e00a      	b.n	8001f24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	4908      	ldr	r1, [pc, #32]	@ (8001f34 <__NVIC_SetPriority+0x50>)
 8001f14:	79fb      	ldrb	r3, [r7, #7]
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	3b04      	subs	r3, #4
 8001f1c:	0112      	lsls	r2, r2, #4
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	440b      	add	r3, r1
 8001f22:	761a      	strb	r2, [r3, #24]
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	e000e100 	.word	0xe000e100
 8001f34:	e000ed00 	.word	0xe000ed00

08001f38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b089      	sub	sp, #36	@ 0x24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	f1c3 0307 	rsb	r3, r3, #7
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	bf28      	it	cs
 8001f56:	2304      	movcs	r3, #4
 8001f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	2b06      	cmp	r3, #6
 8001f60:	d902      	bls.n	8001f68 <NVIC_EncodePriority+0x30>
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	3b03      	subs	r3, #3
 8001f66:	e000      	b.n	8001f6a <NVIC_EncodePriority+0x32>
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43da      	mvns	r2, r3
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	401a      	ands	r2, r3
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f80:	f04f 31ff 	mov.w	r1, #4294967295
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8a:	43d9      	mvns	r1, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f90:	4313      	orrs	r3, r2
         );
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3724      	adds	r7, #36	@ 0x24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
	...

08001fa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3b01      	subs	r3, #1
 8001fac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fb0:	d301      	bcc.n	8001fb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e00f      	b.n	8001fd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe0 <SysTick_Config+0x40>)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fbe:	210f      	movs	r1, #15
 8001fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc4:	f7ff ff8e 	bl	8001ee4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fc8:	4b05      	ldr	r3, [pc, #20]	@ (8001fe0 <SysTick_Config+0x40>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fce:	4b04      	ldr	r3, [pc, #16]	@ (8001fe0 <SysTick_Config+0x40>)
 8001fd0:	2207      	movs	r2, #7
 8001fd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	e000e010 	.word	0xe000e010

08001fe4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff ff29 	bl	8001e44 <__NVIC_SetPriorityGrouping>
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b086      	sub	sp, #24
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	4603      	mov	r3, r0
 8002002:	60b9      	str	r1, [r7, #8]
 8002004:	607a      	str	r2, [r7, #4]
 8002006:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800200c:	f7ff ff3e 	bl	8001e8c <__NVIC_GetPriorityGrouping>
 8002010:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	68b9      	ldr	r1, [r7, #8]
 8002016:	6978      	ldr	r0, [r7, #20]
 8002018:	f7ff ff8e 	bl	8001f38 <NVIC_EncodePriority>
 800201c:	4602      	mov	r2, r0
 800201e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002022:	4611      	mov	r1, r2
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff ff5d 	bl	8001ee4 <__NVIC_SetPriority>
}
 800202a:	bf00      	nop
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b082      	sub	sp, #8
 8002036:	af00      	add	r7, sp, #0
 8002038:	4603      	mov	r3, r0
 800203a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800203c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff ff31 	bl	8001ea8 <__NVIC_EnableIRQ>
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b082      	sub	sp, #8
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7ff ffa2 	bl	8001fa0 <SysTick_Config>
 800205c:	4603      	mov	r3, r0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b084      	sub	sp, #16
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002072:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002074:	f7ff fc44 	bl	8001900 <HAL_GetTick>
 8002078:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d008      	beq.n	8002098 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2280      	movs	r2, #128	@ 0x80
 800208a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e052      	b.n	800213e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0216 	bic.w	r2, r2, #22
 80020a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	695a      	ldr	r2, [r3, #20]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020b6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d103      	bne.n	80020c8 <HAL_DMA_Abort+0x62>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d007      	beq.n	80020d8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 0208 	bic.w	r2, r2, #8
 80020d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0201 	bic.w	r2, r2, #1
 80020e6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020e8:	e013      	b.n	8002112 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020ea:	f7ff fc09 	bl	8001900 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b05      	cmp	r3, #5
 80020f6:	d90c      	bls.n	8002112 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2220      	movs	r2, #32
 80020fc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2203      	movs	r2, #3
 8002102:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e015      	b.n	800213e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1e4      	bne.n	80020ea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002124:	223f      	movs	r2, #63	@ 0x3f
 8002126:	409a      	lsls	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d004      	beq.n	8002164 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2280      	movs	r2, #128	@ 0x80
 800215e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e00c      	b.n	800217e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2205      	movs	r2, #5
 8002168:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 0201 	bic.w	r2, r2, #1
 800217a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
	...

0800218c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800218c:	b480      	push	{r7}
 800218e:	b089      	sub	sp, #36	@ 0x24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800219a:	2300      	movs	r3, #0
 800219c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800219e:	2300      	movs	r3, #0
 80021a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021a2:	2300      	movs	r3, #0
 80021a4:	61fb      	str	r3, [r7, #28]
 80021a6:	e165      	b.n	8002474 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021a8:	2201      	movs	r2, #1
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	4013      	ands	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	f040 8154 	bne.w	800246e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d005      	beq.n	80021de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d130      	bne.n	8002240 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	2203      	movs	r2, #3
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43db      	mvns	r3, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	68da      	ldr	r2, [r3, #12]
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4313      	orrs	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002214:	2201      	movs	r2, #1
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4013      	ands	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	091b      	lsrs	r3, r3, #4
 800222a:	f003 0201 	and.w	r2, r3, #1
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4313      	orrs	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 0303 	and.w	r3, r3, #3
 8002248:	2b03      	cmp	r3, #3
 800224a:	d017      	beq.n	800227c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	2203      	movs	r2, #3
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	43db      	mvns	r3, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4013      	ands	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4313      	orrs	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f003 0303 	and.w	r3, r3, #3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d123      	bne.n	80022d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	08da      	lsrs	r2, r3, #3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3208      	adds	r2, #8
 8002290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002294:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	220f      	movs	r2, #15
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	691a      	ldr	r2, [r3, #16]
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4313      	orrs	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	08da      	lsrs	r2, r3, #3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	3208      	adds	r2, #8
 80022ca:	69b9      	ldr	r1, [r7, #24]
 80022cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	2203      	movs	r2, #3
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4013      	ands	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 0203 	and.w	r2, r3, #3
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 80ae 	beq.w	800246e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	4b5d      	ldr	r3, [pc, #372]	@ (800248c <HAL_GPIO_Init+0x300>)
 8002318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800231a:	4a5c      	ldr	r2, [pc, #368]	@ (800248c <HAL_GPIO_Init+0x300>)
 800231c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002320:	6453      	str	r3, [r2, #68]	@ 0x44
 8002322:	4b5a      	ldr	r3, [pc, #360]	@ (800248c <HAL_GPIO_Init+0x300>)
 8002324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002326:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800232e:	4a58      	ldr	r2, [pc, #352]	@ (8002490 <HAL_GPIO_Init+0x304>)
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	089b      	lsrs	r3, r3, #2
 8002334:	3302      	adds	r3, #2
 8002336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	220f      	movs	r2, #15
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43db      	mvns	r3, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4013      	ands	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a4f      	ldr	r2, [pc, #316]	@ (8002494 <HAL_GPIO_Init+0x308>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d025      	beq.n	80023a6 <HAL_GPIO_Init+0x21a>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a4e      	ldr	r2, [pc, #312]	@ (8002498 <HAL_GPIO_Init+0x30c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d01f      	beq.n	80023a2 <HAL_GPIO_Init+0x216>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a4d      	ldr	r2, [pc, #308]	@ (800249c <HAL_GPIO_Init+0x310>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d019      	beq.n	800239e <HAL_GPIO_Init+0x212>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a4c      	ldr	r2, [pc, #304]	@ (80024a0 <HAL_GPIO_Init+0x314>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d013      	beq.n	800239a <HAL_GPIO_Init+0x20e>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a4b      	ldr	r2, [pc, #300]	@ (80024a4 <HAL_GPIO_Init+0x318>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d00d      	beq.n	8002396 <HAL_GPIO_Init+0x20a>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a4a      	ldr	r2, [pc, #296]	@ (80024a8 <HAL_GPIO_Init+0x31c>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d007      	beq.n	8002392 <HAL_GPIO_Init+0x206>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a49      	ldr	r2, [pc, #292]	@ (80024ac <HAL_GPIO_Init+0x320>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d101      	bne.n	800238e <HAL_GPIO_Init+0x202>
 800238a:	2306      	movs	r3, #6
 800238c:	e00c      	b.n	80023a8 <HAL_GPIO_Init+0x21c>
 800238e:	2307      	movs	r3, #7
 8002390:	e00a      	b.n	80023a8 <HAL_GPIO_Init+0x21c>
 8002392:	2305      	movs	r3, #5
 8002394:	e008      	b.n	80023a8 <HAL_GPIO_Init+0x21c>
 8002396:	2304      	movs	r3, #4
 8002398:	e006      	b.n	80023a8 <HAL_GPIO_Init+0x21c>
 800239a:	2303      	movs	r3, #3
 800239c:	e004      	b.n	80023a8 <HAL_GPIO_Init+0x21c>
 800239e:	2302      	movs	r3, #2
 80023a0:	e002      	b.n	80023a8 <HAL_GPIO_Init+0x21c>
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <HAL_GPIO_Init+0x21c>
 80023a6:	2300      	movs	r3, #0
 80023a8:	69fa      	ldr	r2, [r7, #28]
 80023aa:	f002 0203 	and.w	r2, r2, #3
 80023ae:	0092      	lsls	r2, r2, #2
 80023b0:	4093      	lsls	r3, r2
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023b8:	4935      	ldr	r1, [pc, #212]	@ (8002490 <HAL_GPIO_Init+0x304>)
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	089b      	lsrs	r3, r3, #2
 80023be:	3302      	adds	r3, #2
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023c6:	4b3a      	ldr	r3, [pc, #232]	@ (80024b0 <HAL_GPIO_Init+0x324>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	43db      	mvns	r3, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4013      	ands	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023ea:	4a31      	ldr	r2, [pc, #196]	@ (80024b0 <HAL_GPIO_Init+0x324>)
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023f0:	4b2f      	ldr	r3, [pc, #188]	@ (80024b0 <HAL_GPIO_Init+0x324>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	43db      	mvns	r3, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4013      	ands	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002414:	4a26      	ldr	r2, [pc, #152]	@ (80024b0 <HAL_GPIO_Init+0x324>)
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800241a:	4b25      	ldr	r3, [pc, #148]	@ (80024b0 <HAL_GPIO_Init+0x324>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	43db      	mvns	r3, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4013      	ands	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	4313      	orrs	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800243e:	4a1c      	ldr	r2, [pc, #112]	@ (80024b0 <HAL_GPIO_Init+0x324>)
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002444:	4b1a      	ldr	r3, [pc, #104]	@ (80024b0 <HAL_GPIO_Init+0x324>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d003      	beq.n	8002468 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	4313      	orrs	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002468:	4a11      	ldr	r2, [pc, #68]	@ (80024b0 <HAL_GPIO_Init+0x324>)
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	3301      	adds	r3, #1
 8002472:	61fb      	str	r3, [r7, #28]
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	2b0f      	cmp	r3, #15
 8002478:	f67f ae96 	bls.w	80021a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800247c:	bf00      	nop
 800247e:	bf00      	nop
 8002480:	3724      	adds	r7, #36	@ 0x24
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	40023800 	.word	0x40023800
 8002490:	40013800 	.word	0x40013800
 8002494:	40020000 	.word	0x40020000
 8002498:	40020400 	.word	0x40020400
 800249c:	40020800 	.word	0x40020800
 80024a0:	40020c00 	.word	0x40020c00
 80024a4:	40021000 	.word	0x40021000
 80024a8:	40021400 	.word	0x40021400
 80024ac:	40021800 	.word	0x40021800
 80024b0:	40013c00 	.word	0x40013c00

080024b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	460b      	mov	r3, r1
 80024be:	807b      	strh	r3, [r7, #2]
 80024c0:	4613      	mov	r3, r2
 80024c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024c4:	787b      	ldrb	r3, [r7, #1]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ca:	887a      	ldrh	r2, [r7, #2]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024d0:	e003      	b.n	80024da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024d2:	887b      	ldrh	r3, [r7, #2]
 80024d4:	041a      	lsls	r2, r3, #16
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	619a      	str	r2, [r3, #24]
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
	...

080024e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e12b      	b.n	8002752 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d106      	bne.n	8002514 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7fe ff94 	bl	800143c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2224      	movs	r2, #36	@ 0x24
 8002518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 0201 	bic.w	r2, r2, #1
 800252a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800253a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800254a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800254c:	f001 fccc 	bl	8003ee8 <HAL_RCC_GetPCLK1Freq>
 8002550:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	4a81      	ldr	r2, [pc, #516]	@ (800275c <HAL_I2C_Init+0x274>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d807      	bhi.n	800256c <HAL_I2C_Init+0x84>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4a80      	ldr	r2, [pc, #512]	@ (8002760 <HAL_I2C_Init+0x278>)
 8002560:	4293      	cmp	r3, r2
 8002562:	bf94      	ite	ls
 8002564:	2301      	movls	r3, #1
 8002566:	2300      	movhi	r3, #0
 8002568:	b2db      	uxtb	r3, r3
 800256a:	e006      	b.n	800257a <HAL_I2C_Init+0x92>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4a7d      	ldr	r2, [pc, #500]	@ (8002764 <HAL_I2C_Init+0x27c>)
 8002570:	4293      	cmp	r3, r2
 8002572:	bf94      	ite	ls
 8002574:	2301      	movls	r3, #1
 8002576:	2300      	movhi	r3, #0
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e0e7      	b.n	8002752 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	4a78      	ldr	r2, [pc, #480]	@ (8002768 <HAL_I2C_Init+0x280>)
 8002586:	fba2 2303 	umull	r2, r3, r2, r3
 800258a:	0c9b      	lsrs	r3, r3, #18
 800258c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68ba      	ldr	r2, [r7, #8]
 800259e:	430a      	orrs	r2, r1
 80025a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	4a6a      	ldr	r2, [pc, #424]	@ (800275c <HAL_I2C_Init+0x274>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d802      	bhi.n	80025bc <HAL_I2C_Init+0xd4>
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	3301      	adds	r3, #1
 80025ba:	e009      	b.n	80025d0 <HAL_I2C_Init+0xe8>
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80025c2:	fb02 f303 	mul.w	r3, r2, r3
 80025c6:	4a69      	ldr	r2, [pc, #420]	@ (800276c <HAL_I2C_Init+0x284>)
 80025c8:	fba2 2303 	umull	r2, r3, r2, r3
 80025cc:	099b      	lsrs	r3, r3, #6
 80025ce:	3301      	adds	r3, #1
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6812      	ldr	r2, [r2, #0]
 80025d4:	430b      	orrs	r3, r1
 80025d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80025e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	495c      	ldr	r1, [pc, #368]	@ (800275c <HAL_I2C_Init+0x274>)
 80025ec:	428b      	cmp	r3, r1
 80025ee:	d819      	bhi.n	8002624 <HAL_I2C_Init+0x13c>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	1e59      	subs	r1, r3, #1
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80025fe:	1c59      	adds	r1, r3, #1
 8002600:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002604:	400b      	ands	r3, r1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00a      	beq.n	8002620 <HAL_I2C_Init+0x138>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	1e59      	subs	r1, r3, #1
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	005b      	lsls	r3, r3, #1
 8002614:	fbb1 f3f3 	udiv	r3, r1, r3
 8002618:	3301      	adds	r3, #1
 800261a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800261e:	e051      	b.n	80026c4 <HAL_I2C_Init+0x1dc>
 8002620:	2304      	movs	r3, #4
 8002622:	e04f      	b.n	80026c4 <HAL_I2C_Init+0x1dc>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d111      	bne.n	8002650 <HAL_I2C_Init+0x168>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	1e58      	subs	r0, r3, #1
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6859      	ldr	r1, [r3, #4]
 8002634:	460b      	mov	r3, r1
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	440b      	add	r3, r1
 800263a:	fbb0 f3f3 	udiv	r3, r0, r3
 800263e:	3301      	adds	r3, #1
 8002640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002644:	2b00      	cmp	r3, #0
 8002646:	bf0c      	ite	eq
 8002648:	2301      	moveq	r3, #1
 800264a:	2300      	movne	r3, #0
 800264c:	b2db      	uxtb	r3, r3
 800264e:	e012      	b.n	8002676 <HAL_I2C_Init+0x18e>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	1e58      	subs	r0, r3, #1
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6859      	ldr	r1, [r3, #4]
 8002658:	460b      	mov	r3, r1
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	0099      	lsls	r1, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	fbb0 f3f3 	udiv	r3, r0, r3
 8002666:	3301      	adds	r3, #1
 8002668:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800266c:	2b00      	cmp	r3, #0
 800266e:	bf0c      	ite	eq
 8002670:	2301      	moveq	r3, #1
 8002672:	2300      	movne	r3, #0
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <HAL_I2C_Init+0x196>
 800267a:	2301      	movs	r3, #1
 800267c:	e022      	b.n	80026c4 <HAL_I2C_Init+0x1dc>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10e      	bne.n	80026a4 <HAL_I2C_Init+0x1bc>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	1e58      	subs	r0, r3, #1
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6859      	ldr	r1, [r3, #4]
 800268e:	460b      	mov	r3, r1
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	440b      	add	r3, r1
 8002694:	fbb0 f3f3 	udiv	r3, r0, r3
 8002698:	3301      	adds	r3, #1
 800269a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800269e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026a2:	e00f      	b.n	80026c4 <HAL_I2C_Init+0x1dc>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	1e58      	subs	r0, r3, #1
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6859      	ldr	r1, [r3, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	0099      	lsls	r1, r3, #2
 80026b4:	440b      	add	r3, r1
 80026b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ba:	3301      	adds	r3, #1
 80026bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	6809      	ldr	r1, [r1, #0]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69da      	ldr	r2, [r3, #28]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	431a      	orrs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80026f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6911      	ldr	r1, [r2, #16]
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	68d2      	ldr	r2, [r2, #12]
 80026fe:	4311      	orrs	r1, r2
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	6812      	ldr	r2, [r2, #0]
 8002704:	430b      	orrs	r3, r1
 8002706:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	695a      	ldr	r2, [r3, #20]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	430a      	orrs	r2, r1
 8002722:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 0201 	orr.w	r2, r2, #1
 8002732:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2220      	movs	r2, #32
 800273e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	000186a0 	.word	0x000186a0
 8002760:	001e847f 	.word	0x001e847f
 8002764:	003d08ff 	.word	0x003d08ff
 8002768:	431bde83 	.word	0x431bde83
 800276c:	10624dd3 	.word	0x10624dd3

08002770 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002772:	b08f      	sub	sp, #60	@ 0x3c
 8002774:	af0a      	add	r7, sp, #40	@ 0x28
 8002776:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e116      	b.n	80029b0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b00      	cmp	r3, #0
 8002792:	d106      	bne.n	80027a2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f007 fb6d 	bl	8009e7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2203      	movs	r2, #3
 80027a6:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d102      	bne.n	80027bc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f003 fdc6 	bl	8006352 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	603b      	str	r3, [r7, #0]
 80027cc:	687e      	ldr	r6, [r7, #4]
 80027ce:	466d      	mov	r5, sp
 80027d0:	f106 0410 	add.w	r4, r6, #16
 80027d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80027e4:	1d33      	adds	r3, r6, #4
 80027e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027e8:	6838      	ldr	r0, [r7, #0]
 80027ea:	f003 fc9d 	bl	8006128 <USB_CoreInit>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d005      	beq.n	8002800 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2202      	movs	r2, #2
 80027f8:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e0d7      	b.n	80029b0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2100      	movs	r1, #0
 8002806:	4618      	mov	r0, r3
 8002808:	f003 fdb4 	bl	8006374 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800280c:	2300      	movs	r3, #0
 800280e:	73fb      	strb	r3, [r7, #15]
 8002810:	e04a      	b.n	80028a8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002812:	7bfa      	ldrb	r2, [r7, #15]
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	4613      	mov	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	4413      	add	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	440b      	add	r3, r1
 8002820:	333d      	adds	r3, #61	@ 0x3d
 8002822:	2201      	movs	r2, #1
 8002824:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002826:	7bfa      	ldrb	r2, [r7, #15]
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	4613      	mov	r3, r2
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	4413      	add	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	440b      	add	r3, r1
 8002834:	333c      	adds	r3, #60	@ 0x3c
 8002836:	7bfa      	ldrb	r2, [r7, #15]
 8002838:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800283a:	7bfa      	ldrb	r2, [r7, #15]
 800283c:	7bfb      	ldrb	r3, [r7, #15]
 800283e:	b298      	uxth	r0, r3
 8002840:	6879      	ldr	r1, [r7, #4]
 8002842:	4613      	mov	r3, r2
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	4413      	add	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	440b      	add	r3, r1
 800284c:	3344      	adds	r3, #68	@ 0x44
 800284e:	4602      	mov	r2, r0
 8002850:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002852:	7bfa      	ldrb	r2, [r7, #15]
 8002854:	6879      	ldr	r1, [r7, #4]
 8002856:	4613      	mov	r3, r2
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	4413      	add	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	440b      	add	r3, r1
 8002860:	3340      	adds	r3, #64	@ 0x40
 8002862:	2200      	movs	r2, #0
 8002864:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002866:	7bfa      	ldrb	r2, [r7, #15]
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	4613      	mov	r3, r2
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	4413      	add	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	440b      	add	r3, r1
 8002874:	3348      	adds	r3, #72	@ 0x48
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800287a:	7bfa      	ldrb	r2, [r7, #15]
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	4613      	mov	r3, r2
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	4413      	add	r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	440b      	add	r3, r1
 8002888:	334c      	adds	r3, #76	@ 0x4c
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800288e:	7bfa      	ldrb	r2, [r7, #15]
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	4613      	mov	r3, r2
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	4413      	add	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	440b      	add	r3, r1
 800289c:	3354      	adds	r3, #84	@ 0x54
 800289e:	2200      	movs	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028a2:	7bfb      	ldrb	r3, [r7, #15]
 80028a4:	3301      	adds	r3, #1
 80028a6:	73fb      	strb	r3, [r7, #15]
 80028a8:	7bfa      	ldrb	r2, [r7, #15]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d3af      	bcc.n	8002812 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028b2:	2300      	movs	r3, #0
 80028b4:	73fb      	strb	r3, [r7, #15]
 80028b6:	e044      	b.n	8002942 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80028b8:	7bfa      	ldrb	r2, [r7, #15]
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	4613      	mov	r3, r2
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	4413      	add	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	440b      	add	r3, r1
 80028c6:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 80028ca:	2200      	movs	r2, #0
 80028cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80028ce:	7bfa      	ldrb	r2, [r7, #15]
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	4413      	add	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	440b      	add	r3, r1
 80028dc:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 80028e0:	7bfa      	ldrb	r2, [r7, #15]
 80028e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028e4:	7bfa      	ldrb	r2, [r7, #15]
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	4413      	add	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80028f6:	2200      	movs	r2, #0
 80028f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028fa:	7bfa      	ldrb	r2, [r7, #15]
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	4613      	mov	r3, r2
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	4413      	add	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	440b      	add	r3, r1
 8002908:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002910:	7bfa      	ldrb	r2, [r7, #15]
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	4613      	mov	r3, r2
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	4413      	add	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	440b      	add	r3, r1
 800291e:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002926:	7bfa      	ldrb	r2, [r7, #15]
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	4613      	mov	r3, r2
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	4413      	add	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	440b      	add	r3, r1
 8002934:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800293c:	7bfb      	ldrb	r3, [r7, #15]
 800293e:	3301      	adds	r3, #1
 8002940:	73fb      	strb	r3, [r7, #15]
 8002942:	7bfa      	ldrb	r2, [r7, #15]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	429a      	cmp	r2, r3
 800294a:	d3b5      	bcc.n	80028b8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	603b      	str	r3, [r7, #0]
 8002952:	687e      	ldr	r6, [r7, #4]
 8002954:	466d      	mov	r5, sp
 8002956:	f106 0410 	add.w	r4, r6, #16
 800295a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800295c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800295e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002960:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002962:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002966:	e885 0003 	stmia.w	r5, {r0, r1}
 800296a:	1d33      	adds	r3, r6, #4
 800296c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800296e:	6838      	ldr	r0, [r7, #0]
 8002970:	f003 fd4c 	bl	800640c <USB_DevInit>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d005      	beq.n	8002986 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2202      	movs	r2, #2
 800297e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e014      	b.n	80029b0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299a:	2b01      	cmp	r3, #1
 800299c:	d102      	bne.n	80029a4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f001 f98c 	bl	8003cbc <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f004 fe8e 	bl	80076ca <USB_DevDisconnect>

  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029b8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d101      	bne.n	80029d4 <HAL_PCD_Start+0x1c>
 80029d0:	2302      	movs	r3, #2
 80029d2:	e020      	b.n	8002a16 <HAL_PCD_Start+0x5e>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d109      	bne.n	80029f8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d005      	beq.n	80029f8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029f0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f003 fc97 	bl	8006330 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f004 fe3e 	bl	8007688 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a1e:	b590      	push	{r4, r7, lr}
 8002a20:	b08d      	sub	sp, #52	@ 0x34
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a2c:	6a3b      	ldr	r3, [r7, #32]
 8002a2e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f004 fefc 	bl	8007832 <USB_GetMode>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f040 84b7 	bne.w	80033b0 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f004 fe60 	bl	800770c <USB_ReadInterrupts>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f000 84ad 	beq.w	80033ae <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	0a1b      	lsrs	r3, r3, #8
 8002a5e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f004 fe4d 	bl	800770c <USB_ReadInterrupts>
 8002a72:	4603      	mov	r3, r0
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d107      	bne.n	8002a8c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	695a      	ldr	r2, [r3, #20]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f002 0202 	and.w	r2, r2, #2
 8002a8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f004 fe3b 	bl	800770c <USB_ReadInterrupts>
 8002a96:	4603      	mov	r3, r0
 8002a98:	f003 0310 	and.w	r3, r3, #16
 8002a9c:	2b10      	cmp	r3, #16
 8002a9e:	d161      	bne.n	8002b64 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	699a      	ldr	r2, [r3, #24]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 0210 	bic.w	r2, r2, #16
 8002aae:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002ab0:	6a3b      	ldr	r3, [r7, #32]
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	f003 020f 	and.w	r2, r3, #15
 8002abc:	4613      	mov	r3, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	4413      	add	r3, r2
 8002acc:	3304      	adds	r3, #4
 8002ace:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	0c5b      	lsrs	r3, r3, #17
 8002ad4:	f003 030f 	and.w	r3, r3, #15
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d124      	bne.n	8002b26 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d035      	beq.n	8002b54 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	091b      	lsrs	r3, r3, #4
 8002af0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002af2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	461a      	mov	r2, r3
 8002afa:	6a38      	ldr	r0, [r7, #32]
 8002afc:	f004 fc72 	bl	80073e4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	691a      	ldr	r2, [r3, #16]
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	091b      	lsrs	r3, r3, #4
 8002b08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b0c:	441a      	add	r2, r3
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	6a1a      	ldr	r2, [r3, #32]
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	091b      	lsrs	r3, r3, #4
 8002b1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b1e:	441a      	add	r2, r3
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	621a      	str	r2, [r3, #32]
 8002b24:	e016      	b.n	8002b54 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	0c5b      	lsrs	r3, r3, #17
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	2b06      	cmp	r3, #6
 8002b30:	d110      	bne.n	8002b54 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8002b38:	2208      	movs	r2, #8
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	6a38      	ldr	r0, [r7, #32]
 8002b3e:	f004 fc51 	bl	80073e4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	6a1a      	ldr	r2, [r3, #32]
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	091b      	lsrs	r3, r3, #4
 8002b4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b4e:	441a      	add	r2, r3
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	699a      	ldr	r2, [r3, #24]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f042 0210 	orr.w	r2, r2, #16
 8002b62:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f004 fdcf 	bl	800770c <USB_ReadInterrupts>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b74:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002b78:	f040 80a7 	bne.w	8002cca <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f004 fdd4 	bl	8007732 <USB_ReadDevAllOutEpInterrupt>
 8002b8a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002b8c:	e099      	b.n	8002cc2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 808e 	beq.w	8002cb6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	4611      	mov	r1, r2
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f004 fdf8 	bl	800779a <USB_ReadDevOutEPInterrupt>
 8002baa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00c      	beq.n	8002bd0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb8:	015a      	lsls	r2, r3, #5
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002bc8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 fef0 	bl	80039b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00c      	beq.n	8002bf4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bdc:	015a      	lsls	r2, r3, #5
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	4413      	add	r3, r2
 8002be2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002be6:	461a      	mov	r2, r3
 8002be8:	2308      	movs	r3, #8
 8002bea:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002bec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 ffc6 	bl	8003b80 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	f003 0310 	and.w	r3, r3, #16
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d008      	beq.n	8002c10 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c00:	015a      	lsls	r2, r3, #5
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	4413      	add	r3, r2
 8002c06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	2310      	movs	r3, #16
 8002c0e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d030      	beq.n	8002c7c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002c1a:	6a3b      	ldr	r3, [r7, #32]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c22:	2b80      	cmp	r3, #128	@ 0x80
 8002c24:	d109      	bne.n	8002c3a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	69fa      	ldr	r2, [r7, #28]
 8002c30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c34:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c38:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002c3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	4413      	add	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3304      	adds	r3, #4
 8002c4e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	78db      	ldrb	r3, [r3, #3]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d108      	bne.n	8002c6a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	4619      	mov	r1, r3
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f007 fa25 	bl	800a0b4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6c:	015a      	lsls	r2, r3, #5
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	4413      	add	r3, r2
 8002c72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c76:	461a      	mov	r2, r3
 8002c78:	2302      	movs	r3, #2
 8002c7a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	f003 0320 	and.w	r3, r3, #32
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d008      	beq.n	8002c98 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c88:	015a      	lsls	r2, r3, #5
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c92:	461a      	mov	r2, r3
 8002c94:	2320      	movs	r3, #32
 8002c96:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d009      	beq.n	8002cb6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca4:	015a      	lsls	r2, r3, #5
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	4413      	add	r3, r2
 8002caa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cae:	461a      	mov	r2, r3
 8002cb0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002cb4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb8:	3301      	adds	r3, #1
 8002cba:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cbe:	085b      	lsrs	r3, r3, #1
 8002cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f47f af62 	bne.w	8002b8e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f004 fd1c 	bl	800770c <USB_ReadInterrupts>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cda:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002cde:	f040 80db 	bne.w	8002e98 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f004 fd3d 	bl	8007766 <USB_ReadDevAllInEpInterrupt>
 8002cec:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002cf2:	e0cd      	b.n	8002e90 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 80c2 	beq.w	8002e84 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	4611      	mov	r1, r2
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f004 fd63 	bl	80077d6 <USB_ReadDevInEPInterrupt>
 8002d10:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d057      	beq.n	8002dcc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1e:	f003 030f 	and.w	r3, r3, #15
 8002d22:	2201      	movs	r2, #1
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	43db      	mvns	r3, r3
 8002d36:	69f9      	ldr	r1, [r7, #28]
 8002d38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d42:	015a      	lsls	r2, r3, #5
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	4413      	add	r3, r2
 8002d48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	2301      	movs	r3, #1
 8002d50:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d132      	bne.n	8002dc0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d5e:	4613      	mov	r3, r2
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	4413      	add	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	440b      	add	r3, r1
 8002d68:	334c      	adds	r3, #76	@ 0x4c
 8002d6a:	6819      	ldr	r1, [r3, #0]
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d70:	4613      	mov	r3, r2
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	4413      	add	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4403      	add	r3, r0
 8002d7a:	3348      	adds	r3, #72	@ 0x48
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4419      	add	r1, r3
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d84:	4613      	mov	r3, r2
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	4413      	add	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4403      	add	r3, r0
 8002d8e:	334c      	adds	r3, #76	@ 0x4c
 8002d90:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d113      	bne.n	8002dc0 <HAL_PCD_IRQHandler+0x3a2>
 8002d98:	6879      	ldr	r1, [r7, #4]
 8002d9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	4413      	add	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	3354      	adds	r3, #84	@ 0x54
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d108      	bne.n	8002dc0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6818      	ldr	r0, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8002db8:	461a      	mov	r2, r3
 8002dba:	2101      	movs	r1, #1
 8002dbc:	f004 fd6a 	bl	8007894 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f007 f8ef 	bl	8009faa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	f003 0308 	and.w	r3, r3, #8
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d008      	beq.n	8002de8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd8:	015a      	lsls	r2, r3, #5
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	4413      	add	r3, r2
 8002dde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002de2:	461a      	mov	r2, r3
 8002de4:	2308      	movs	r3, #8
 8002de6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	f003 0310 	and.w	r3, r3, #16
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d008      	beq.n	8002e04 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df4:	015a      	lsls	r2, r3, #5
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	4413      	add	r3, r2
 8002dfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002dfe:	461a      	mov	r2, r3
 8002e00:	2310      	movs	r3, #16
 8002e02:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d008      	beq.n	8002e20 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e10:	015a      	lsls	r2, r3, #5
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	4413      	add	r3, r2
 8002e16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	2340      	movs	r3, #64	@ 0x40
 8002e1e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d023      	beq.n	8002e72 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002e2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e2c:	6a38      	ldr	r0, [r7, #32]
 8002e2e:	f003 fc4b 	bl	80066c8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002e32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e34:	4613      	mov	r3, r2
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	4413      	add	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	3338      	adds	r3, #56	@ 0x38
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	4413      	add	r3, r2
 8002e42:	3304      	adds	r3, #4
 8002e44:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	78db      	ldrb	r3, [r3, #3]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d108      	bne.n	8002e60 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	2200      	movs	r2, #0
 8002e52:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	4619      	mov	r1, r3
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f007 f93c 	bl	800a0d8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e62:	015a      	lsls	r2, r3, #5
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	4413      	add	r3, r2
 8002e68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	2302      	movs	r3, #2
 8002e70:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002e7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 fd08 	bl	8003894 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e86:	3301      	adds	r3, #1
 8002e88:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e8c:	085b      	lsrs	r3, r3, #1
 8002e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f47f af2e 	bne.w	8002cf4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f004 fc35 	bl	800770c <USB_ReadInterrupts>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002ea8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002eac:	d122      	bne.n	8002ef4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	69fa      	ldr	r2, [r7, #28]
 8002eb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ebc:	f023 0301 	bic.w	r3, r3, #1
 8002ec0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d108      	bne.n	8002ede <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f007 fab6 	bl	800a448 <HAL_PCDEx_LPM_Callback>
 8002edc:	e002      	b.n	8002ee4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f007 f8da 	bl	800a098 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	695a      	ldr	r2, [r3, #20]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002ef2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f004 fc07 	bl	800770c <USB_ReadInterrupts>
 8002efe:	4603      	mov	r3, r0
 8002f00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f08:	d112      	bne.n	8002f30 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d102      	bne.n	8002f20 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f007 f896 	bl	800a04c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	695a      	ldr	r2, [r3, #20]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002f2e:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f004 fbe9 	bl	800770c <USB_ReadInterrupts>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f44:	d121      	bne.n	8002f8a <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	695a      	ldr	r2, [r3, #20]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002f54:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d111      	bne.n	8002f84 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f6e:	089b      	lsrs	r3, r3, #2
 8002f70:	f003 020f 	and.w	r2, r3, #15
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f007 fa63 	bl	800a448 <HAL_PCDEx_LPM_Callback>
 8002f82:	e002      	b.n	8002f8a <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f007 f861 	bl	800a04c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f004 fbbc 	bl	800770c <USB_ReadInterrupts>
 8002f94:	4603      	mov	r3, r0
 8002f96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f9e:	f040 80b7 	bne.w	8003110 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	69fa      	ldr	r2, [r7, #28]
 8002fac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fb0:	f023 0301 	bic.w	r3, r3, #1
 8002fb4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2110      	movs	r1, #16
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f003 fb83 	bl	80066c8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fc6:	e046      	b.n	8003056 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fca:	015a      	lsls	r2, r3, #5
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	4413      	add	r3, r2
 8002fd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002fda:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fde:	015a      	lsls	r2, r3, #5
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fec:	0151      	lsls	r1, r2, #5
 8002fee:	69fa      	ldr	r2, [r7, #28]
 8002ff0:	440a      	add	r2, r1
 8002ff2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002ff6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002ffa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ffe:	015a      	lsls	r2, r3, #5
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	4413      	add	r3, r2
 8003004:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003008:	461a      	mov	r2, r3
 800300a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800300e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003012:	015a      	lsls	r2, r3, #5
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	4413      	add	r3, r2
 8003018:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003020:	0151      	lsls	r1, r2, #5
 8003022:	69fa      	ldr	r2, [r7, #28]
 8003024:	440a      	add	r2, r1
 8003026:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800302a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800302e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003032:	015a      	lsls	r2, r3, #5
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	4413      	add	r3, r2
 8003038:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003040:	0151      	lsls	r1, r2, #5
 8003042:	69fa      	ldr	r2, [r7, #28]
 8003044:	440a      	add	r2, r1
 8003046:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800304a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800304e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003052:	3301      	adds	r3, #1
 8003054:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800305c:	429a      	cmp	r2, r3
 800305e:	d3b3      	bcc.n	8002fc8 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	69fa      	ldr	r2, [r7, #28]
 800306a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800306e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003072:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003078:	2b00      	cmp	r3, #0
 800307a:	d016      	beq.n	80030aa <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003082:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003086:	69fa      	ldr	r2, [r7, #28]
 8003088:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800308c:	f043 030b 	orr.w	r3, r3, #11
 8003090:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800309a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800309c:	69fa      	ldr	r2, [r7, #28]
 800309e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030a2:	f043 030b 	orr.w	r3, r3, #11
 80030a6:	6453      	str	r3, [r2, #68]	@ 0x44
 80030a8:	e015      	b.n	80030d6 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	69fa      	ldr	r2, [r7, #28]
 80030b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030b8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80030bc:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80030c0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	69fa      	ldr	r2, [r7, #28]
 80030cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030d0:	f043 030b 	orr.w	r3, r3, #11
 80030d4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	69fa      	ldr	r2, [r7, #28]
 80030e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030e4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80030e8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6818      	ldr	r0, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80030fa:	461a      	mov	r2, r3
 80030fc:	f004 fbca 	bl	8007894 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	695a      	ldr	r2, [r3, #20]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800310e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4618      	mov	r0, r3
 8003116:	f004 faf9 	bl	800770c <USB_ReadInterrupts>
 800311a:	4603      	mov	r3, r0
 800311c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003120:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003124:	d124      	bne.n	8003170 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4618      	mov	r0, r3
 800312c:	f004 fb8f 	bl	800784e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4618      	mov	r0, r3
 8003136:	f003 fb44 	bl	80067c2 <USB_GetDevSpeed>
 800313a:	4603      	mov	r3, r0
 800313c:	461a      	mov	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681c      	ldr	r4, [r3, #0]
 8003146:	f000 fec3 	bl	8003ed0 <HAL_RCC_GetHCLKFreq>
 800314a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003150:	b2db      	uxtb	r3, r3
 8003152:	461a      	mov	r2, r3
 8003154:	4620      	mov	r0, r4
 8003156:	f003 f849 	bl	80061ec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f006 ff4d 	bl	8009ffa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	695a      	ldr	r2, [r3, #20]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800316e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4618      	mov	r0, r3
 8003176:	f004 fac9 	bl	800770c <USB_ReadInterrupts>
 800317a:	4603      	mov	r3, r0
 800317c:	f003 0308 	and.w	r3, r3, #8
 8003180:	2b08      	cmp	r3, #8
 8003182:	d10a      	bne.n	800319a <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f006 ff2a 	bl	8009fde <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	695a      	ldr	r2, [r3, #20]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f002 0208 	and.w	r2, r2, #8
 8003198:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f004 fab4 	bl	800770c <USB_ReadInterrupts>
 80031a4:	4603      	mov	r3, r0
 80031a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031aa:	2b80      	cmp	r3, #128	@ 0x80
 80031ac:	d122      	bne.n	80031f4 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80031ae:	6a3b      	ldr	r3, [r7, #32]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031b6:	6a3b      	ldr	r3, [r7, #32]
 80031b8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031ba:	2301      	movs	r3, #1
 80031bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80031be:	e014      	b.n	80031ea <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031c4:	4613      	mov	r3, r2
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	4413      	add	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d105      	bne.n	80031e4 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80031d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	4619      	mov	r1, r3
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 fb27 	bl	8003832 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e6:	3301      	adds	r3, #1
 80031e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d3e5      	bcc.n	80031c0 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f004 fa87 	bl	800770c <USB_ReadInterrupts>
 80031fe:	4603      	mov	r3, r0
 8003200:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003204:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003208:	d13b      	bne.n	8003282 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800320a:	2301      	movs	r3, #1
 800320c:	627b      	str	r3, [r7, #36]	@ 0x24
 800320e:	e02b      	b.n	8003268 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003212:	015a      	lsls	r2, r3, #5
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	4413      	add	r3, r2
 8003218:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003220:	6879      	ldr	r1, [r7, #4]
 8003222:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003224:	4613      	mov	r3, r2
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	4413      	add	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	440b      	add	r3, r1
 800322e:	3340      	adds	r3, #64	@ 0x40
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d115      	bne.n	8003262 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003236:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003238:	2b00      	cmp	r3, #0
 800323a:	da12      	bge.n	8003262 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003240:	4613      	mov	r3, r2
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	4413      	add	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	333f      	adds	r3, #63	@ 0x3f
 800324c:	2201      	movs	r2, #1
 800324e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003252:	b2db      	uxtb	r3, r3
 8003254:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003258:	b2db      	uxtb	r3, r3
 800325a:	4619      	mov	r1, r3
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 fae8 	bl	8003832 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003264:	3301      	adds	r3, #1
 8003266:	627b      	str	r3, [r7, #36]	@ 0x24
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800326e:	429a      	cmp	r2, r3
 8003270:	d3ce      	bcc.n	8003210 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	695a      	ldr	r2, [r3, #20]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003280:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f004 fa40 	bl	800770c <USB_ReadInterrupts>
 800328c:	4603      	mov	r3, r0
 800328e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003292:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003296:	d155      	bne.n	8003344 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003298:	2301      	movs	r3, #1
 800329a:	627b      	str	r3, [r7, #36]	@ 0x24
 800329c:	e045      	b.n	800332a <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800329e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a0:	015a      	lsls	r2, r3, #5
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	4413      	add	r3, r2
 80032a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032b2:	4613      	mov	r3, r2
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	4413      	add	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	440b      	add	r3, r1
 80032bc:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d12e      	bne.n	8003324 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80032c6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	da2b      	bge.n	8003324 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 80032d8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80032dc:	429a      	cmp	r2, r3
 80032de:	d121      	bne.n	8003324 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80032e0:	6879      	ldr	r1, [r7, #4]
 80032e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032e4:	4613      	mov	r3, r2
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	4413      	add	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	440b      	add	r3, r1
 80032ee:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 80032f2:	2201      	movs	r2, #1
 80032f4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80032f6:	6a3b      	ldr	r3, [r7, #32]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80032fe:	6a3b      	ldr	r3, [r7, #32]
 8003300:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003302:	6a3b      	ldr	r3, [r7, #32]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10a      	bne.n	8003324 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	69fa      	ldr	r2, [r7, #28]
 8003318:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800331c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003320:	6053      	str	r3, [r2, #4]
            break;
 8003322:	e007      	b.n	8003334 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003326:	3301      	adds	r3, #1
 8003328:	627b      	str	r3, [r7, #36]	@ 0x24
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003330:	429a      	cmp	r2, r3
 8003332:	d3b4      	bcc.n	800329e <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	695a      	ldr	r2, [r3, #20]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003342:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4618      	mov	r0, r3
 800334a:	f004 f9df 	bl	800770c <USB_ReadInterrupts>
 800334e:	4603      	mov	r3, r0
 8003350:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003354:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003358:	d10a      	bne.n	8003370 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f006 fece 	bl	800a0fc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	695a      	ldr	r2, [r3, #20]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800336e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f004 f9c9 	bl	800770c <USB_ReadInterrupts>
 800337a:	4603      	mov	r3, r0
 800337c:	f003 0304 	and.w	r3, r3, #4
 8003380:	2b04      	cmp	r3, #4
 8003382:	d115      	bne.n	80033b0 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	f003 0304 	and.w	r3, r3, #4
 8003392:	2b00      	cmp	r3, #0
 8003394:	d002      	beq.n	800339c <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f006 febe 	bl	800a118 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6859      	ldr	r1, [r3, #4]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	605a      	str	r2, [r3, #4]
 80033ac:	e000      	b.n	80033b0 <HAL_PCD_IRQHandler+0x992>
      return;
 80033ae:	bf00      	nop
    }
  }
}
 80033b0:	3734      	adds	r7, #52	@ 0x34
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd90      	pop	{r4, r7, pc}

080033b6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b082      	sub	sp, #8
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
 80033be:	460b      	mov	r3, r1
 80033c0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d101      	bne.n	80033d0 <HAL_PCD_SetAddress+0x1a>
 80033cc:	2302      	movs	r3, #2
 80033ce:	e013      	b.n	80033f8 <HAL_PCD_SetAddress+0x42>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	78fa      	ldrb	r2, [r7, #3]
 80033dc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	78fa      	ldrb	r2, [r7, #3]
 80033e6:	4611      	mov	r1, r2
 80033e8:	4618      	mov	r0, r3
 80033ea:	f004 f927 	bl	800763c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3708      	adds	r7, #8
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	4608      	mov	r0, r1
 800340a:	4611      	mov	r1, r2
 800340c:	461a      	mov	r2, r3
 800340e:	4603      	mov	r3, r0
 8003410:	70fb      	strb	r3, [r7, #3]
 8003412:	460b      	mov	r3, r1
 8003414:	803b      	strh	r3, [r7, #0]
 8003416:	4613      	mov	r3, r2
 8003418:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800341a:	2300      	movs	r3, #0
 800341c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800341e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003422:	2b00      	cmp	r3, #0
 8003424:	da0f      	bge.n	8003446 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003426:	78fb      	ldrb	r3, [r7, #3]
 8003428:	f003 020f 	and.w	r2, r3, #15
 800342c:	4613      	mov	r3, r2
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	4413      	add	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	3338      	adds	r3, #56	@ 0x38
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	4413      	add	r3, r2
 800343a:	3304      	adds	r3, #4
 800343c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2201      	movs	r2, #1
 8003442:	705a      	strb	r2, [r3, #1]
 8003444:	e00f      	b.n	8003466 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003446:	78fb      	ldrb	r3, [r7, #3]
 8003448:	f003 020f 	and.w	r2, r3, #15
 800344c:	4613      	mov	r3, r2
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	4413      	add	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	4413      	add	r3, r2
 800345c:	3304      	adds	r3, #4
 800345e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003466:	78fb      	ldrb	r3, [r7, #3]
 8003468:	f003 030f 	and.w	r3, r3, #15
 800346c:	b2da      	uxtb	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003472:	883a      	ldrh	r2, [r7, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	78ba      	ldrb	r2, [r7, #2]
 800347c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	785b      	ldrb	r3, [r3, #1]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d004      	beq.n	8003490 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	461a      	mov	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003490:	78bb      	ldrb	r3, [r7, #2]
 8003492:	2b02      	cmp	r3, #2
 8003494:	d102      	bne.n	800349c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d101      	bne.n	80034aa <HAL_PCD_EP_Open+0xaa>
 80034a6:	2302      	movs	r3, #2
 80034a8:	e00e      	b.n	80034c8 <HAL_PCD_EP_Open+0xc8>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68f9      	ldr	r1, [r7, #12]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f003 f9a7 	bl	800680c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 80034c6:	7afb      	ldrb	r3, [r7, #11]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	460b      	mov	r3, r1
 80034da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80034dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	da0f      	bge.n	8003504 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034e4:	78fb      	ldrb	r3, [r7, #3]
 80034e6:	f003 020f 	and.w	r2, r3, #15
 80034ea:	4613      	mov	r3, r2
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	4413      	add	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	3338      	adds	r3, #56	@ 0x38
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	4413      	add	r3, r2
 80034f8:	3304      	adds	r3, #4
 80034fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2201      	movs	r2, #1
 8003500:	705a      	strb	r2, [r3, #1]
 8003502:	e00f      	b.n	8003524 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003504:	78fb      	ldrb	r3, [r7, #3]
 8003506:	f003 020f 	and.w	r2, r3, #15
 800350a:	4613      	mov	r3, r2
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	4413      	add	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	4413      	add	r3, r2
 800351a:	3304      	adds	r3, #4
 800351c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003524:	78fb      	ldrb	r3, [r7, #3]
 8003526:	f003 030f 	and.w	r3, r3, #15
 800352a:	b2da      	uxtb	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003536:	2b01      	cmp	r3, #1
 8003538:	d101      	bne.n	800353e <HAL_PCD_EP_Close+0x6e>
 800353a:	2302      	movs	r3, #2
 800353c:	e00e      	b.n	800355c <HAL_PCD_EP_Close+0x8c>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68f9      	ldr	r1, [r7, #12]
 800354c:	4618      	mov	r0, r3
 800354e:	f003 f9e5 	bl	800691c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	607a      	str	r2, [r7, #4]
 800356e:	603b      	str	r3, [r7, #0]
 8003570:	460b      	mov	r3, r1
 8003572:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003574:	7afb      	ldrb	r3, [r7, #11]
 8003576:	f003 020f 	and.w	r2, r3, #15
 800357a:	4613      	mov	r3, r2
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	4413      	add	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	4413      	add	r3, r2
 800358a:	3304      	adds	r3, #4
 800358c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2200      	movs	r2, #0
 800359e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	2200      	movs	r2, #0
 80035a4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035a6:	7afb      	ldrb	r3, [r7, #11]
 80035a8:	f003 030f 	and.w	r3, r3, #15
 80035ac:	b2da      	uxtb	r2, r3
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d102      	bne.n	80035c0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80035c0:	7afb      	ldrb	r3, [r7, #11]
 80035c2:	f003 030f 	and.w	r3, r3, #15
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d109      	bne.n	80035de <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6818      	ldr	r0, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	461a      	mov	r2, r3
 80035d6:	6979      	ldr	r1, [r7, #20]
 80035d8:	f003 fcc4 	bl	8006f64 <USB_EP0StartXfer>
 80035dc:	e008      	b.n	80035f0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6818      	ldr	r0, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	461a      	mov	r2, r3
 80035ea:	6979      	ldr	r1, [r7, #20]
 80035ec:	f003 fa72 	bl	8006ad4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3718      	adds	r7, #24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
 8003602:	460b      	mov	r3, r1
 8003604:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003606:	78fb      	ldrb	r3, [r7, #3]
 8003608:	f003 020f 	and.w	r2, r3, #15
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	4613      	mov	r3, r2
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	4413      	add	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	440b      	add	r3, r1
 8003618:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800361c:	681b      	ldr	r3, [r3, #0]
}
 800361e:	4618      	mov	r0, r3
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b086      	sub	sp, #24
 800362e:	af00      	add	r7, sp, #0
 8003630:	60f8      	str	r0, [r7, #12]
 8003632:	607a      	str	r2, [r7, #4]
 8003634:	603b      	str	r3, [r7, #0]
 8003636:	460b      	mov	r3, r1
 8003638:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800363a:	7afb      	ldrb	r3, [r7, #11]
 800363c:	f003 020f 	and.w	r2, r3, #15
 8003640:	4613      	mov	r3, r2
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	4413      	add	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	3338      	adds	r3, #56	@ 0x38
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	4413      	add	r3, r2
 800364e:	3304      	adds	r3, #4
 8003650:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	2200      	movs	r2, #0
 8003662:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	2201      	movs	r2, #1
 8003668:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800366a:	7afb      	ldrb	r3, [r7, #11]
 800366c:	f003 030f 	and.w	r3, r3, #15
 8003670:	b2da      	uxtb	r2, r3
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d102      	bne.n	8003684 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003684:	7afb      	ldrb	r3, [r7, #11]
 8003686:	f003 030f 	and.w	r3, r3, #15
 800368a:	2b00      	cmp	r3, #0
 800368c:	d109      	bne.n	80036a2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6818      	ldr	r0, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	b2db      	uxtb	r3, r3
 8003698:	461a      	mov	r2, r3
 800369a:	6979      	ldr	r1, [r7, #20]
 800369c:	f003 fc62 	bl	8006f64 <USB_EP0StartXfer>
 80036a0:	e008      	b.n	80036b4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6818      	ldr	r0, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	461a      	mov	r2, r3
 80036ae:	6979      	ldr	r1, [r7, #20]
 80036b0:	f003 fa10 	bl	8006ad4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3718      	adds	r7, #24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b084      	sub	sp, #16
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
 80036c6:	460b      	mov	r3, r1
 80036c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80036ca:	78fb      	ldrb	r3, [r7, #3]
 80036cc:	f003 020f 	and.w	r2, r3, #15
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d901      	bls.n	80036dc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e050      	b.n	800377e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80036dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	da0f      	bge.n	8003704 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036e4:	78fb      	ldrb	r3, [r7, #3]
 80036e6:	f003 020f 	and.w	r2, r3, #15
 80036ea:	4613      	mov	r3, r2
 80036ec:	00db      	lsls	r3, r3, #3
 80036ee:	4413      	add	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	3338      	adds	r3, #56	@ 0x38
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	4413      	add	r3, r2
 80036f8:	3304      	adds	r3, #4
 80036fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2201      	movs	r2, #1
 8003700:	705a      	strb	r2, [r3, #1]
 8003702:	e00d      	b.n	8003720 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003704:	78fa      	ldrb	r2, [r7, #3]
 8003706:	4613      	mov	r3, r2
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	4413      	add	r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	4413      	add	r3, r2
 8003716:	3304      	adds	r3, #4
 8003718:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2201      	movs	r2, #1
 8003724:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003726:	78fb      	ldrb	r3, [r7, #3]
 8003728:	f003 030f 	and.w	r3, r3, #15
 800372c:	b2da      	uxtb	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003738:	2b01      	cmp	r3, #1
 800373a:	d101      	bne.n	8003740 <HAL_PCD_EP_SetStall+0x82>
 800373c:	2302      	movs	r3, #2
 800373e:	e01e      	b.n	800377e <HAL_PCD_EP_SetStall+0xc0>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68f9      	ldr	r1, [r7, #12]
 800374e:	4618      	mov	r0, r3
 8003750:	f003 fea0 	bl	8007494 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003754:	78fb      	ldrb	r3, [r7, #3]
 8003756:	f003 030f 	and.w	r3, r3, #15
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10a      	bne.n	8003774 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6818      	ldr	r0, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	b2d9      	uxtb	r1, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800376e:	461a      	mov	r2, r3
 8003770:	f004 f890 	bl	8007894 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b084      	sub	sp, #16
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
 800378e:	460b      	mov	r3, r1
 8003790:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003792:	78fb      	ldrb	r3, [r7, #3]
 8003794:	f003 020f 	and.w	r2, r3, #15
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	429a      	cmp	r2, r3
 800379e:	d901      	bls.n	80037a4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e042      	b.n	800382a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	da0f      	bge.n	80037cc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037ac:	78fb      	ldrb	r3, [r7, #3]
 80037ae:	f003 020f 	and.w	r2, r3, #15
 80037b2:	4613      	mov	r3, r2
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	4413      	add	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	3338      	adds	r3, #56	@ 0x38
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	4413      	add	r3, r2
 80037c0:	3304      	adds	r3, #4
 80037c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2201      	movs	r2, #1
 80037c8:	705a      	strb	r2, [r3, #1]
 80037ca:	e00f      	b.n	80037ec <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037cc:	78fb      	ldrb	r3, [r7, #3]
 80037ce:	f003 020f 	and.w	r2, r3, #15
 80037d2:	4613      	mov	r3, r2
 80037d4:	00db      	lsls	r3, r3, #3
 80037d6:	4413      	add	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	4413      	add	r3, r2
 80037e2:	3304      	adds	r3, #4
 80037e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037f2:	78fb      	ldrb	r3, [r7, #3]
 80037f4:	f003 030f 	and.w	r3, r3, #15
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003804:	2b01      	cmp	r3, #1
 8003806:	d101      	bne.n	800380c <HAL_PCD_EP_ClrStall+0x86>
 8003808:	2302      	movs	r3, #2
 800380a:	e00e      	b.n	800382a <HAL_PCD_EP_ClrStall+0xa4>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68f9      	ldr	r1, [r7, #12]
 800381a:	4618      	mov	r0, r3
 800381c:	f003 fea8 	bl	8007570 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b084      	sub	sp, #16
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
 800383a:	460b      	mov	r3, r1
 800383c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800383e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003842:	2b00      	cmp	r3, #0
 8003844:	da0c      	bge.n	8003860 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003846:	78fb      	ldrb	r3, [r7, #3]
 8003848:	f003 020f 	and.w	r2, r3, #15
 800384c:	4613      	mov	r3, r2
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	4413      	add	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	3338      	adds	r3, #56	@ 0x38
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	4413      	add	r3, r2
 800385a:	3304      	adds	r3, #4
 800385c:	60fb      	str	r3, [r7, #12]
 800385e:	e00c      	b.n	800387a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003860:	78fb      	ldrb	r3, [r7, #3]
 8003862:	f003 020f 	and.w	r2, r3, #15
 8003866:	4613      	mov	r3, r2
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	4413      	add	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	4413      	add	r3, r2
 8003876:	3304      	adds	r3, #4
 8003878:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68f9      	ldr	r1, [r7, #12]
 8003880:	4618      	mov	r0, r3
 8003882:	f003 fcc7 	bl	8007214 <USB_EPStopXfer>
 8003886:	4603      	mov	r3, r0
 8003888:	72fb      	strb	r3, [r7, #11]

  return ret;
 800388a:	7afb      	ldrb	r3, [r7, #11]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b08a      	sub	sp, #40	@ 0x28
 8003898:	af02      	add	r7, sp, #8
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	4613      	mov	r3, r2
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	4413      	add	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	3338      	adds	r3, #56	@ 0x38
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	4413      	add	r3, r2
 80038b8:	3304      	adds	r3, #4
 80038ba:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6a1a      	ldr	r2, [r3, #32]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d901      	bls.n	80038cc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e06c      	b.n	80039a6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	699a      	ldr	r2, [r3, #24]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	69fa      	ldr	r2, [r7, #28]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d902      	bls.n	80038e8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	3303      	adds	r3, #3
 80038ec:	089b      	lsrs	r3, r3, #2
 80038ee:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038f0:	e02b      	b.n	800394a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	699a      	ldr	r2, [r3, #24]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	69fa      	ldr	r2, [r7, #28]
 8003904:	429a      	cmp	r2, r3
 8003906:	d902      	bls.n	800390e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	3303      	adds	r3, #3
 8003912:	089b      	lsrs	r3, r3, #2
 8003914:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6919      	ldr	r1, [r3, #16]
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	b2da      	uxtb	r2, r3
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003926:	b2db      	uxtb	r3, r3
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	4603      	mov	r3, r0
 800392c:	6978      	ldr	r0, [r7, #20]
 800392e:	f003 fd1b 	bl	8007368 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	691a      	ldr	r2, [r3, #16]
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	441a      	add	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6a1a      	ldr	r2, [r3, #32]
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	441a      	add	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	015a      	lsls	r2, r3, #5
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	4413      	add	r3, r2
 8003952:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	429a      	cmp	r2, r3
 800395e:	d809      	bhi.n	8003974 <PCD_WriteEmptyTxFifo+0xe0>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6a1a      	ldr	r2, [r3, #32]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003968:	429a      	cmp	r2, r3
 800396a:	d203      	bcs.n	8003974 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1be      	bne.n	80038f2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	699a      	ldr	r2, [r3, #24]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	429a      	cmp	r2, r3
 800397e:	d811      	bhi.n	80039a4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	f003 030f 	and.w	r3, r3, #15
 8003986:	2201      	movs	r2, #1
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003994:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	43db      	mvns	r3, r3
 800399a:	6939      	ldr	r1, [r7, #16]
 800399c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80039a0:	4013      	ands	r3, r2
 80039a2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3720      	adds	r7, #32
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
	...

080039b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b088      	sub	sp, #32
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	333c      	adds	r3, #60	@ 0x3c
 80039c8:	3304      	adds	r3, #4
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	015a      	lsls	r2, r3, #5
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	4413      	add	r3, r2
 80039d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d17b      	bne.n	8003ade <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	f003 0308 	and.w	r3, r3, #8
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d015      	beq.n	8003a1c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	4a61      	ldr	r2, [pc, #388]	@ (8003b78 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	f240 80b9 	bls.w	8003b6c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f000 80b3 	beq.w	8003b6c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	015a      	lsls	r2, r3, #5
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a12:	461a      	mov	r2, r3
 8003a14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a18:	6093      	str	r3, [r2, #8]
 8003a1a:	e0a7      	b.n	8003b6c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	f003 0320 	and.w	r3, r3, #32
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d009      	beq.n	8003a3a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	015a      	lsls	r2, r3, #5
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a32:	461a      	mov	r2, r3
 8003a34:	2320      	movs	r3, #32
 8003a36:	6093      	str	r3, [r2, #8]
 8003a38:	e098      	b.n	8003b6c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f040 8093 	bne.w	8003b6c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	4a4b      	ldr	r2, [pc, #300]	@ (8003b78 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d90f      	bls.n	8003a6e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00a      	beq.n	8003a6e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	015a      	lsls	r2, r3, #5
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	4413      	add	r3, r2
 8003a60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a64:	461a      	mov	r2, r3
 8003a66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a6a:	6093      	str	r3, [r2, #8]
 8003a6c:	e07e      	b.n	8003b6c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	4613      	mov	r3, r2
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	4413      	add	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	4413      	add	r3, r2
 8003a80:	3304      	adds	r3, #4
 8003a82:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	69da      	ldr	r2, [r3, #28]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	0159      	lsls	r1, r3, #5
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	440b      	add	r3, r1
 8003a90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a9a:	1ad2      	subs	r2, r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d114      	bne.n	8003ad0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d109      	bne.n	8003ac2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6818      	ldr	r0, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003ab8:	461a      	mov	r2, r3
 8003aba:	2101      	movs	r1, #1
 8003abc:	f003 feea 	bl	8007894 <USB_EP0_OutStart>
 8003ac0:	e006      	b.n	8003ad0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	691a      	ldr	r2, [r3, #16]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	441a      	add	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f006 fa4c 	bl	8009f74 <HAL_PCD_DataOutStageCallback>
 8003adc:	e046      	b.n	8003b6c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	4a26      	ldr	r2, [pc, #152]	@ (8003b7c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d124      	bne.n	8003b30 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00a      	beq.n	8003b06 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003afc:	461a      	mov	r2, r3
 8003afe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b02:	6093      	str	r3, [r2, #8]
 8003b04:	e032      	b.n	8003b6c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	f003 0320 	and.w	r3, r3, #32
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d008      	beq.n	8003b22 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	015a      	lsls	r2, r3, #5
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	4413      	add	r3, r2
 8003b18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	2320      	movs	r3, #32
 8003b20:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	4619      	mov	r1, r3
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f006 fa23 	bl	8009f74 <HAL_PCD_DataOutStageCallback>
 8003b2e:	e01d      	b.n	8003b6c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d114      	bne.n	8003b60 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003b36:	6879      	ldr	r1, [r7, #4]
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	4413      	add	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	440b      	add	r3, r1
 8003b44:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d108      	bne.n	8003b60 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6818      	ldr	r0, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003b58:	461a      	mov	r2, r3
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	f003 fe9a 	bl	8007894 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	4619      	mov	r1, r3
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f006 fa04 	bl	8009f74 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3720      	adds	r7, #32
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	4f54300a 	.word	0x4f54300a
 8003b7c:	4f54310a 	.word	0x4f54310a

08003b80 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	333c      	adds	r3, #60	@ 0x3c
 8003b98:	3304      	adds	r3, #4
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	015a      	lsls	r2, r3, #5
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	4a15      	ldr	r2, [pc, #84]	@ (8003c08 <PCD_EP_OutSetupPacket_int+0x88>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d90e      	bls.n	8003bd4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d009      	beq.n	8003bd4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bcc:	461a      	mov	r2, r3
 8003bce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bd2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f006 f9bb 	bl	8009f50 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4a0a      	ldr	r2, [pc, #40]	@ (8003c08 <PCD_EP_OutSetupPacket_int+0x88>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d90c      	bls.n	8003bfc <PCD_EP_OutSetupPacket_int+0x7c>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d108      	bne.n	8003bfc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6818      	ldr	r0, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	2101      	movs	r1, #1
 8003bf8:	f003 fe4c 	bl	8007894 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3718      	adds	r7, #24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	4f54300a 	.word	0x4f54300a

08003c0c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	460b      	mov	r3, r1
 8003c16:	70fb      	strb	r3, [r7, #3]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c22:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003c24:	78fb      	ldrb	r3, [r7, #3]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d107      	bne.n	8003c3a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003c2a:	883b      	ldrh	r3, [r7, #0]
 8003c2c:	0419      	lsls	r1, r3, #16
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c38:	e028      	b.n	8003c8c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c40:	0c1b      	lsrs	r3, r3, #16
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	4413      	add	r3, r2
 8003c46:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c48:	2300      	movs	r3, #0
 8003c4a:	73fb      	strb	r3, [r7, #15]
 8003c4c:	e00d      	b.n	8003c6a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	7bfb      	ldrb	r3, [r7, #15]
 8003c54:	3340      	adds	r3, #64	@ 0x40
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	0c1b      	lsrs	r3, r3, #16
 8003c5e:	68ba      	ldr	r2, [r7, #8]
 8003c60:	4413      	add	r3, r2
 8003c62:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c64:	7bfb      	ldrb	r3, [r7, #15]
 8003c66:	3301      	adds	r3, #1
 8003c68:	73fb      	strb	r3, [r7, #15]
 8003c6a:	7bfa      	ldrb	r2, [r7, #15]
 8003c6c:	78fb      	ldrb	r3, [r7, #3]
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d3ec      	bcc.n	8003c4e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003c74:	883b      	ldrh	r3, [r7, #0]
 8003c76:	0418      	lsls	r0, r3, #16
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6819      	ldr	r1, [r3, #0]
 8003c7c:	78fb      	ldrb	r3, [r7, #3]
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	4302      	orrs	r2, r0
 8003c84:	3340      	adds	r3, #64	@ 0x40
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	440b      	add	r3, r1
 8003c8a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	887a      	ldrh	r2, [r7, #2]
 8003cac:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cee:	f043 0303 	orr.w	r3, r3, #3
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e0cc      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d18:	4b68      	ldr	r3, [pc, #416]	@ (8003ebc <HAL_RCC_ClockConfig+0x1b8>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 030f 	and.w	r3, r3, #15
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d90c      	bls.n	8003d40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d26:	4b65      	ldr	r3, [pc, #404]	@ (8003ebc <HAL_RCC_ClockConfig+0x1b8>)
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	b2d2      	uxtb	r2, r2
 8003d2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d2e:	4b63      	ldr	r3, [pc, #396]	@ (8003ebc <HAL_RCC_ClockConfig+0x1b8>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 030f 	and.w	r3, r3, #15
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d001      	beq.n	8003d40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e0b8      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d020      	beq.n	8003d8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0304 	and.w	r3, r3, #4
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d005      	beq.n	8003d64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d58:	4b59      	ldr	r3, [pc, #356]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	4a58      	ldr	r2, [pc, #352]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0308 	and.w	r3, r3, #8
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d005      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d70:	4b53      	ldr	r3, [pc, #332]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	4a52      	ldr	r2, [pc, #328]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d76:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d7c:	4b50      	ldr	r3, [pc, #320]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	494d      	ldr	r1, [pc, #308]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d044      	beq.n	8003e24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d107      	bne.n	8003db2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003da2:	4b47      	ldr	r3, [pc, #284]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d119      	bne.n	8003de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e07f      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d003      	beq.n	8003dc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dbe:	2b03      	cmp	r3, #3
 8003dc0:	d107      	bne.n	8003dd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dc2:	4b3f      	ldr	r3, [pc, #252]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d109      	bne.n	8003de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e06f      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd2:	4b3b      	ldr	r3, [pc, #236]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e067      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003de2:	4b37      	ldr	r3, [pc, #220]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f023 0203 	bic.w	r2, r3, #3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	4934      	ldr	r1, [pc, #208]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003df4:	f7fd fd84 	bl	8001900 <HAL_GetTick>
 8003df8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dfa:	e00a      	b.n	8003e12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dfc:	f7fd fd80 	bl	8001900 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e04f      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e12:	4b2b      	ldr	r3, [pc, #172]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 020c 	and.w	r2, r3, #12
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d1eb      	bne.n	8003dfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e24:	4b25      	ldr	r3, [pc, #148]	@ (8003ebc <HAL_RCC_ClockConfig+0x1b8>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 030f 	and.w	r3, r3, #15
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d20c      	bcs.n	8003e4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e32:	4b22      	ldr	r3, [pc, #136]	@ (8003ebc <HAL_RCC_ClockConfig+0x1b8>)
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	b2d2      	uxtb	r2, r2
 8003e38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e3a:	4b20      	ldr	r3, [pc, #128]	@ (8003ebc <HAL_RCC_ClockConfig+0x1b8>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 030f 	and.w	r3, r3, #15
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d001      	beq.n	8003e4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e032      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d008      	beq.n	8003e6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e58:	4b19      	ldr	r3, [pc, #100]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	4916      	ldr	r1, [pc, #88]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0308 	and.w	r3, r3, #8
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d009      	beq.n	8003e8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e76:	4b12      	ldr	r3, [pc, #72]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	490e      	ldr	r1, [pc, #56]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e8a:	f000 fb7f 	bl	800458c <HAL_RCC_GetSysClockFreq>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	4b0b      	ldr	r3, [pc, #44]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	091b      	lsrs	r3, r3, #4
 8003e96:	f003 030f 	and.w	r3, r3, #15
 8003e9a:	490a      	ldr	r1, [pc, #40]	@ (8003ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e9c:	5ccb      	ldrb	r3, [r1, r3]
 8003e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003ea2:	4a09      	ldr	r2, [pc, #36]	@ (8003ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ea6:	4b09      	ldr	r3, [pc, #36]	@ (8003ecc <HAL_RCC_ClockConfig+0x1c8>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7fd fce4 	bl	8001878 <HAL_InitTick>

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	40023c00 	.word	0x40023c00
 8003ec0:	40023800 	.word	0x40023800
 8003ec4:	0800a624 	.word	0x0800a624
 8003ec8:	20000000 	.word	0x20000000
 8003ecc:	20000004 	.word	0x20000004

08003ed0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ed4:	4b03      	ldr	r3, [pc, #12]	@ (8003ee4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	20000000 	.word	0x20000000

08003ee8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003eec:	f7ff fff0 	bl	8003ed0 <HAL_RCC_GetHCLKFreq>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	4b05      	ldr	r3, [pc, #20]	@ (8003f08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	0a9b      	lsrs	r3, r3, #10
 8003ef8:	f003 0307 	and.w	r3, r3, #7
 8003efc:	4903      	ldr	r1, [pc, #12]	@ (8003f0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003efe:	5ccb      	ldrb	r3, [r1, r3]
 8003f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	40023800 	.word	0x40023800
 8003f0c:	0800a634 	.word	0x0800a634

08003f10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f14:	f7ff ffdc 	bl	8003ed0 <HAL_RCC_GetHCLKFreq>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	4b05      	ldr	r3, [pc, #20]	@ (8003f30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	0b5b      	lsrs	r3, r3, #13
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	4903      	ldr	r1, [pc, #12]	@ (8003f34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f26:	5ccb      	ldrb	r3, [r1, r3]
 8003f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	40023800 	.word	0x40023800
 8003f34:	0800a634 	.word	0x0800a634

08003f38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b08c      	sub	sp, #48	@ 0x30
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f40:	2300      	movs	r3, #0
 8003f42:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8003f44:	2300      	movs	r3, #0
 8003f46:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003f50:	2300      	movs	r3, #0
 8003f52:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003f54:	2300      	movs	r3, #0
 8003f56:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8003f60:	2300      	movs	r3, #0
 8003f62:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0301 	and.w	r3, r3, #1
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d010      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003f70:	4b6f      	ldr	r3, [pc, #444]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f76:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f7e:	496c      	ldr	r1, [pc, #432]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d010      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003f9e:	4b64      	ldr	r3, [pc, #400]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fa4:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fac:	4960      	ldr	r1, [pc, #384]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d017      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fcc:	4b58      	ldr	r3, [pc, #352]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fd2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fda:	4955      	ldr	r1, [pc, #340]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fea:	d101      	bne.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003fec:	2301      	movs	r3, #1
 8003fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0308 	and.w	r3, r3, #8
 8004004:	2b00      	cmp	r3, #0
 8004006:	d017      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004008:	4b49      	ldr	r3, [pc, #292]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800400a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800400e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004016:	4946      	ldr	r1, [pc, #280]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004018:	4313      	orrs	r3, r2
 800401a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004022:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004026:	d101      	bne.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004028:	2301      	movs	r3, #1
 800402a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8004034:	2301      	movs	r3, #1
 8004036:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0320 	and.w	r3, r3, #32
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 808a 	beq.w	800415a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004046:	2300      	movs	r3, #0
 8004048:	60bb      	str	r3, [r7, #8]
 800404a:	4b39      	ldr	r3, [pc, #228]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800404c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404e:	4a38      	ldr	r2, [pc, #224]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004050:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004054:	6413      	str	r3, [r2, #64]	@ 0x40
 8004056:	4b36      	ldr	r3, [pc, #216]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800405e:	60bb      	str	r3, [r7, #8]
 8004060:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004062:	4b34      	ldr	r3, [pc, #208]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a33      	ldr	r2, [pc, #204]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004068:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800406c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800406e:	f7fd fc47 	bl	8001900 <HAL_GetTick>
 8004072:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004074:	e008      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004076:	f7fd fc43 	bl	8001900 <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d901      	bls.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e278      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004088:	4b2a      	ldr	r3, [pc, #168]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0f0      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004094:	4b26      	ldr	r3, [pc, #152]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004098:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800409c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800409e:	6a3b      	ldr	r3, [r7, #32]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d02f      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040ac:	6a3a      	ldr	r2, [r7, #32]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d028      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040b2:	4b1f      	ldr	r3, [pc, #124]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80040b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040ba:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040bc:	4b1e      	ldr	r3, [pc, #120]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80040be:	2201      	movs	r2, #1
 80040c0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040c2:	4b1d      	ldr	r3, [pc, #116]	@ (8004138 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80040c8:	4a19      	ldr	r2, [pc, #100]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80040ca:	6a3b      	ldr	r3, [r7, #32]
 80040cc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80040ce:	4b18      	ldr	r3, [pc, #96]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80040d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d114      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80040da:	f7fd fc11 	bl	8001900 <HAL_GetTick>
 80040de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040e0:	e00a      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040e2:	f7fd fc0d 	bl	8001900 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d901      	bls.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e240      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040f8:	4b0d      	ldr	r3, [pc, #52]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80040fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0ee      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004108:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800410c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004110:	d114      	bne.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8004112:	4b07      	ldr	r3, [pc, #28]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004122:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004126:	4902      	ldr	r1, [pc, #8]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004128:	4313      	orrs	r3, r2
 800412a:	608b      	str	r3, [r1, #8]
 800412c:	e00c      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800412e:	bf00      	nop
 8004130:	40023800 	.word	0x40023800
 8004134:	40007000 	.word	0x40007000
 8004138:	42470e40 	.word	0x42470e40
 800413c:	4b4a      	ldr	r3, [pc, #296]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	4a49      	ldr	r2, [pc, #292]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004142:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004146:	6093      	str	r3, [r2, #8]
 8004148:	4b47      	ldr	r3, [pc, #284]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800414a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004154:	4944      	ldr	r1, [pc, #272]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004156:	4313      	orrs	r3, r2
 8004158:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0310 	and.w	r3, r3, #16
 8004162:	2b00      	cmp	r3, #0
 8004164:	d004      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800416c:	4b3f      	ldr	r3, [pc, #252]	@ (800426c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800416e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00a      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800417c:	4b3a      	ldr	r3, [pc, #232]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800417e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004182:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800418a:	4937      	ldr	r1, [pc, #220]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00a      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800419e:	4b32      	ldr	r3, [pc, #200]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041a4:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041ac:	492e      	ldr	r1, [pc, #184]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d011      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80041c0:	4b29      	ldr	r3, [pc, #164]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041c6:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ce:	4926      	ldr	r1, [pc, #152]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041de:	d101      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80041e0:	2301      	movs	r3, #1
 80041e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00a      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80041f0:	4b1d      	ldr	r3, [pc, #116]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80041f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041f6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041fe:	491a      	ldr	r1, [pc, #104]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004200:	4313      	orrs	r3, r2
 8004202:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800420e:	2b00      	cmp	r3, #0
 8004210:	d011      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8004212:	4b15      	ldr	r3, [pc, #84]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004214:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004218:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004220:	4911      	ldr	r1, [pc, #68]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004222:	4313      	orrs	r3, r2
 8004224:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800422c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004230:	d101      	bne.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8004232:	2301      	movs	r3, #1
 8004234:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004238:	2b01      	cmp	r3, #1
 800423a:	d005      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004244:	f040 80ff 	bne.w	8004446 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004248:	4b09      	ldr	r3, [pc, #36]	@ (8004270 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800424a:	2200      	movs	r2, #0
 800424c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800424e:	f7fd fb57 	bl	8001900 <HAL_GetTick>
 8004252:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004254:	e00e      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004256:	f7fd fb53 	bl	8001900 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b02      	cmp	r3, #2
 8004262:	d907      	bls.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e188      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004268:	40023800 	.word	0x40023800
 800426c:	424711e0 	.word	0x424711e0
 8004270:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004274:	4b7e      	ldr	r3, [pc, #504]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1ea      	bne.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b00      	cmp	r3, #0
 800428a:	d003      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004290:	2b00      	cmp	r3, #0
 8004292:	d009      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800429c:	2b00      	cmp	r3, #0
 800429e:	d028      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d124      	bne.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80042a8:	4b71      	ldr	r3, [pc, #452]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80042aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042ae:	0c1b      	lsrs	r3, r3, #16
 80042b0:	f003 0303 	and.w	r3, r3, #3
 80042b4:	3301      	adds	r3, #1
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80042ba:	4b6d      	ldr	r3, [pc, #436]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80042bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042c0:	0e1b      	lsrs	r3, r3, #24
 80042c2:	f003 030f 	and.w	r3, r3, #15
 80042c6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	019b      	lsls	r3, r3, #6
 80042d2:	431a      	orrs	r2, r3
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	085b      	lsrs	r3, r3, #1
 80042d8:	3b01      	subs	r3, #1
 80042da:	041b      	lsls	r3, r3, #16
 80042dc:	431a      	orrs	r2, r3
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	061b      	lsls	r3, r3, #24
 80042e2:	431a      	orrs	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	695b      	ldr	r3, [r3, #20]
 80042e8:	071b      	lsls	r3, r3, #28
 80042ea:	4961      	ldr	r1, [pc, #388]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0304 	and.w	r3, r3, #4
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d004      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004302:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004306:	d00a      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004310:	2b00      	cmp	r3, #0
 8004312:	d035      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004318:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800431c:	d130      	bne.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800431e:	4b54      	ldr	r3, [pc, #336]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004320:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004324:	0c1b      	lsrs	r3, r3, #16
 8004326:	f003 0303 	and.w	r3, r3, #3
 800432a:	3301      	adds	r3, #1
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004330:	4b4f      	ldr	r3, [pc, #316]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004332:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004336:	0f1b      	lsrs	r3, r3, #28
 8004338:	f003 0307 	and.w	r3, r3, #7
 800433c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	019b      	lsls	r3, r3, #6
 8004348:	431a      	orrs	r2, r3
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	085b      	lsrs	r3, r3, #1
 800434e:	3b01      	subs	r3, #1
 8004350:	041b      	lsls	r3, r3, #16
 8004352:	431a      	orrs	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	061b      	lsls	r3, r3, #24
 800435a:	431a      	orrs	r2, r3
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	071b      	lsls	r3, r3, #28
 8004360:	4943      	ldr	r1, [pc, #268]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004362:	4313      	orrs	r3, r2
 8004364:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004368:	4b41      	ldr	r3, [pc, #260]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800436a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800436e:	f023 021f 	bic.w	r2, r3, #31
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004376:	3b01      	subs	r3, #1
 8004378:	493d      	ldr	r1, [pc, #244]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800437a:	4313      	orrs	r3, r2
 800437c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004388:	2b00      	cmp	r3, #0
 800438a:	d029      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004390:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004394:	d124      	bne.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004396:	4b36      	ldr	r3, [pc, #216]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004398:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800439c:	0c1b      	lsrs	r3, r3, #16
 800439e:	f003 0303 	and.w	r3, r3, #3
 80043a2:	3301      	adds	r3, #1
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80043a8:	4b31      	ldr	r3, [pc, #196]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80043aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043ae:	0f1b      	lsrs	r3, r3, #28
 80043b0:	f003 0307 	and.w	r3, r3, #7
 80043b4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685a      	ldr	r2, [r3, #4]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	019b      	lsls	r3, r3, #6
 80043c0:	431a      	orrs	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	085b      	lsrs	r3, r3, #1
 80043c8:	3b01      	subs	r3, #1
 80043ca:	041b      	lsls	r3, r3, #16
 80043cc:	431a      	orrs	r2, r3
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	061b      	lsls	r3, r3, #24
 80043d2:	431a      	orrs	r2, r3
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	071b      	lsls	r3, r3, #28
 80043d8:	4925      	ldr	r1, [pc, #148]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d016      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	019b      	lsls	r3, r3, #6
 80043f6:	431a      	orrs	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	085b      	lsrs	r3, r3, #1
 80043fe:	3b01      	subs	r3, #1
 8004400:	041b      	lsls	r3, r3, #16
 8004402:	431a      	orrs	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	061b      	lsls	r3, r3, #24
 800440a:	431a      	orrs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	071b      	lsls	r3, r3, #28
 8004412:	4917      	ldr	r1, [pc, #92]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004414:	4313      	orrs	r3, r2
 8004416:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800441a:	4b16      	ldr	r3, [pc, #88]	@ (8004474 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800441c:	2201      	movs	r2, #1
 800441e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004420:	f7fd fa6e 	bl	8001900 <HAL_GetTick>
 8004424:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004426:	e008      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004428:	f7fd fa6a 	bl	8001900 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d901      	bls.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e09f      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800443a:	4b0d      	ldr	r3, [pc, #52]	@ (8004470 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d0f0      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8004446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004448:	2b01      	cmp	r3, #1
 800444a:	f040 8095 	bne.w	8004578 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800444e:	4b0a      	ldr	r3, [pc, #40]	@ (8004478 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004450:	2200      	movs	r2, #0
 8004452:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004454:	f7fd fa54 	bl	8001900 <HAL_GetTick>
 8004458:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800445a:	e00f      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800445c:	f7fd fa50 	bl	8001900 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b02      	cmp	r3, #2
 8004468:	d908      	bls.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e085      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800446e:	bf00      	nop
 8004470:	40023800 	.word	0x40023800
 8004474:	42470068 	.word	0x42470068
 8004478:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800447c:	4b41      	ldr	r3, [pc, #260]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004484:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004488:	d0e8      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0304 	and.w	r3, r3, #4
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800449a:	2b00      	cmp	r3, #0
 800449c:	d009      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d02b      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d127      	bne.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80044b2:	4b34      	ldr	r3, [pc, #208]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80044b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044b8:	0c1b      	lsrs	r3, r3, #16
 80044ba:	f003 0303 	and.w	r3, r3, #3
 80044be:	3301      	adds	r3, #1
 80044c0:	005b      	lsls	r3, r3, #1
 80044c2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	699a      	ldr	r2, [r3, #24]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	69db      	ldr	r3, [r3, #28]
 80044cc:	019b      	lsls	r3, r3, #6
 80044ce:	431a      	orrs	r2, r3
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	085b      	lsrs	r3, r3, #1
 80044d4:	3b01      	subs	r3, #1
 80044d6:	041b      	lsls	r3, r3, #16
 80044d8:	431a      	orrs	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044de:	061b      	lsls	r3, r3, #24
 80044e0:	4928      	ldr	r1, [pc, #160]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80044e8:	4b26      	ldr	r3, [pc, #152]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80044ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044ee:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f6:	3b01      	subs	r3, #1
 80044f8:	021b      	lsls	r3, r3, #8
 80044fa:	4922      	ldr	r1, [pc, #136]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800450a:	2b00      	cmp	r3, #0
 800450c:	d01d      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x612>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004512:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004516:	d118      	bne.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004518:	4b1a      	ldr	r3, [pc, #104]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800451a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800451e:	0e1b      	lsrs	r3, r3, #24
 8004520:	f003 030f 	and.w	r3, r3, #15
 8004524:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	699a      	ldr	r2, [r3, #24]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	019b      	lsls	r3, r3, #6
 8004530:	431a      	orrs	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	085b      	lsrs	r3, r3, #1
 8004538:	3b01      	subs	r3, #1
 800453a:	041b      	lsls	r3, r3, #16
 800453c:	431a      	orrs	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	061b      	lsls	r3, r3, #24
 8004542:	4910      	ldr	r1, [pc, #64]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004544:	4313      	orrs	r3, r2
 8004546:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800454a:	4b0f      	ldr	r3, [pc, #60]	@ (8004588 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800454c:	2201      	movs	r2, #1
 800454e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004550:	f7fd f9d6 	bl	8001900 <HAL_GetTick>
 8004554:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004556:	e008      	b.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004558:	f7fd f9d2 	bl	8001900 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d901      	bls.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e007      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800456a:	4b06      	ldr	r3, [pc, #24]	@ (8004584 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004572:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004576:	d1ef      	bne.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3730      	adds	r7, #48	@ 0x30
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	40023800 	.word	0x40023800
 8004588:	42470070 	.word	0x42470070

0800458c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800458c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004590:	b0ae      	sub	sp, #184	@ 0xb8
 8004592:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004594:	2300      	movs	r3, #0
 8004596:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800459a:	2300      	movs	r3, #0
 800459c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80045a0:	2300      	movs	r3, #0
 80045a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80045a6:	2300      	movs	r3, #0
 80045a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80045ac:	2300      	movs	r3, #0
 80045ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045b2:	4bcb      	ldr	r3, [pc, #812]	@ (80048e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f003 030c 	and.w	r3, r3, #12
 80045ba:	2b0c      	cmp	r3, #12
 80045bc:	f200 8206 	bhi.w	80049cc <HAL_RCC_GetSysClockFreq+0x440>
 80045c0:	a201      	add	r2, pc, #4	@ (adr r2, 80045c8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80045c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c6:	bf00      	nop
 80045c8:	080045fd 	.word	0x080045fd
 80045cc:	080049cd 	.word	0x080049cd
 80045d0:	080049cd 	.word	0x080049cd
 80045d4:	080049cd 	.word	0x080049cd
 80045d8:	08004605 	.word	0x08004605
 80045dc:	080049cd 	.word	0x080049cd
 80045e0:	080049cd 	.word	0x080049cd
 80045e4:	080049cd 	.word	0x080049cd
 80045e8:	0800460d 	.word	0x0800460d
 80045ec:	080049cd 	.word	0x080049cd
 80045f0:	080049cd 	.word	0x080049cd
 80045f4:	080049cd 	.word	0x080049cd
 80045f8:	080047fd 	.word	0x080047fd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045fc:	4bb9      	ldr	r3, [pc, #740]	@ (80048e4 <HAL_RCC_GetSysClockFreq+0x358>)
 80045fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8004602:	e1e7      	b.n	80049d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004604:	4bb8      	ldr	r3, [pc, #736]	@ (80048e8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004606:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800460a:	e1e3      	b.n	80049d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800460c:	4bb4      	ldr	r3, [pc, #720]	@ (80048e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004614:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004618:	4bb1      	ldr	r3, [pc, #708]	@ (80048e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d071      	beq.n	8004708 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004624:	4bae      	ldr	r3, [pc, #696]	@ (80048e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	099b      	lsrs	r3, r3, #6
 800462a:	2200      	movs	r2, #0
 800462c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004630:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004634:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004638:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800463c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004640:	2300      	movs	r3, #0
 8004642:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004646:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800464a:	4622      	mov	r2, r4
 800464c:	462b      	mov	r3, r5
 800464e:	f04f 0000 	mov.w	r0, #0
 8004652:	f04f 0100 	mov.w	r1, #0
 8004656:	0159      	lsls	r1, r3, #5
 8004658:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800465c:	0150      	lsls	r0, r2, #5
 800465e:	4602      	mov	r2, r0
 8004660:	460b      	mov	r3, r1
 8004662:	4621      	mov	r1, r4
 8004664:	1a51      	subs	r1, r2, r1
 8004666:	6439      	str	r1, [r7, #64]	@ 0x40
 8004668:	4629      	mov	r1, r5
 800466a:	eb63 0301 	sbc.w	r3, r3, r1
 800466e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004670:	f04f 0200 	mov.w	r2, #0
 8004674:	f04f 0300 	mov.w	r3, #0
 8004678:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800467c:	4649      	mov	r1, r9
 800467e:	018b      	lsls	r3, r1, #6
 8004680:	4641      	mov	r1, r8
 8004682:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004686:	4641      	mov	r1, r8
 8004688:	018a      	lsls	r2, r1, #6
 800468a:	4641      	mov	r1, r8
 800468c:	1a51      	subs	r1, r2, r1
 800468e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004690:	4649      	mov	r1, r9
 8004692:	eb63 0301 	sbc.w	r3, r3, r1
 8004696:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004698:	f04f 0200 	mov.w	r2, #0
 800469c:	f04f 0300 	mov.w	r3, #0
 80046a0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80046a4:	4649      	mov	r1, r9
 80046a6:	00cb      	lsls	r3, r1, #3
 80046a8:	4641      	mov	r1, r8
 80046aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046ae:	4641      	mov	r1, r8
 80046b0:	00ca      	lsls	r2, r1, #3
 80046b2:	4610      	mov	r0, r2
 80046b4:	4619      	mov	r1, r3
 80046b6:	4603      	mov	r3, r0
 80046b8:	4622      	mov	r2, r4
 80046ba:	189b      	adds	r3, r3, r2
 80046bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80046be:	462b      	mov	r3, r5
 80046c0:	460a      	mov	r2, r1
 80046c2:	eb42 0303 	adc.w	r3, r2, r3
 80046c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80046c8:	f04f 0200 	mov.w	r2, #0
 80046cc:	f04f 0300 	mov.w	r3, #0
 80046d0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80046d4:	4629      	mov	r1, r5
 80046d6:	024b      	lsls	r3, r1, #9
 80046d8:	4621      	mov	r1, r4
 80046da:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80046de:	4621      	mov	r1, r4
 80046e0:	024a      	lsls	r2, r1, #9
 80046e2:	4610      	mov	r0, r2
 80046e4:	4619      	mov	r1, r3
 80046e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80046ea:	2200      	movs	r2, #0
 80046ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80046f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80046f4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80046f8:	f7fb fd84 	bl	8000204 <__aeabi_uldivmod>
 80046fc:	4602      	mov	r2, r0
 80046fe:	460b      	mov	r3, r1
 8004700:	4613      	mov	r3, r2
 8004702:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004706:	e067      	b.n	80047d8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004708:	4b75      	ldr	r3, [pc, #468]	@ (80048e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	099b      	lsrs	r3, r3, #6
 800470e:	2200      	movs	r2, #0
 8004710:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004714:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004718:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800471c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004720:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004722:	2300      	movs	r3, #0
 8004724:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004726:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800472a:	4622      	mov	r2, r4
 800472c:	462b      	mov	r3, r5
 800472e:	f04f 0000 	mov.w	r0, #0
 8004732:	f04f 0100 	mov.w	r1, #0
 8004736:	0159      	lsls	r1, r3, #5
 8004738:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800473c:	0150      	lsls	r0, r2, #5
 800473e:	4602      	mov	r2, r0
 8004740:	460b      	mov	r3, r1
 8004742:	4621      	mov	r1, r4
 8004744:	1a51      	subs	r1, r2, r1
 8004746:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004748:	4629      	mov	r1, r5
 800474a:	eb63 0301 	sbc.w	r3, r3, r1
 800474e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004750:	f04f 0200 	mov.w	r2, #0
 8004754:	f04f 0300 	mov.w	r3, #0
 8004758:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800475c:	4649      	mov	r1, r9
 800475e:	018b      	lsls	r3, r1, #6
 8004760:	4641      	mov	r1, r8
 8004762:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004766:	4641      	mov	r1, r8
 8004768:	018a      	lsls	r2, r1, #6
 800476a:	4641      	mov	r1, r8
 800476c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004770:	4649      	mov	r1, r9
 8004772:	eb63 0b01 	sbc.w	fp, r3, r1
 8004776:	f04f 0200 	mov.w	r2, #0
 800477a:	f04f 0300 	mov.w	r3, #0
 800477e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004782:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004786:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800478a:	4692      	mov	sl, r2
 800478c:	469b      	mov	fp, r3
 800478e:	4623      	mov	r3, r4
 8004790:	eb1a 0303 	adds.w	r3, sl, r3
 8004794:	623b      	str	r3, [r7, #32]
 8004796:	462b      	mov	r3, r5
 8004798:	eb4b 0303 	adc.w	r3, fp, r3
 800479c:	627b      	str	r3, [r7, #36]	@ 0x24
 800479e:	f04f 0200 	mov.w	r2, #0
 80047a2:	f04f 0300 	mov.w	r3, #0
 80047a6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80047aa:	4629      	mov	r1, r5
 80047ac:	028b      	lsls	r3, r1, #10
 80047ae:	4621      	mov	r1, r4
 80047b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047b4:	4621      	mov	r1, r4
 80047b6:	028a      	lsls	r2, r1, #10
 80047b8:	4610      	mov	r0, r2
 80047ba:	4619      	mov	r1, r3
 80047bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80047c0:	2200      	movs	r2, #0
 80047c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80047c4:	677a      	str	r2, [r7, #116]	@ 0x74
 80047c6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80047ca:	f7fb fd1b 	bl	8000204 <__aeabi_uldivmod>
 80047ce:	4602      	mov	r2, r0
 80047d0:	460b      	mov	r3, r1
 80047d2:	4613      	mov	r3, r2
 80047d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047d8:	4b41      	ldr	r3, [pc, #260]	@ (80048e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	0c1b      	lsrs	r3, r3, #16
 80047de:	f003 0303 	and.w	r3, r3, #3
 80047e2:	3301      	adds	r3, #1
 80047e4:	005b      	lsls	r3, r3, #1
 80047e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80047ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80047ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80047f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80047fa:	e0eb      	b.n	80049d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047fc:	4b38      	ldr	r3, [pc, #224]	@ (80048e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004804:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004808:	4b35      	ldr	r3, [pc, #212]	@ (80048e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d06b      	beq.n	80048ec <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004814:	4b32      	ldr	r3, [pc, #200]	@ (80048e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	099b      	lsrs	r3, r3, #6
 800481a:	2200      	movs	r2, #0
 800481c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800481e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004820:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004826:	663b      	str	r3, [r7, #96]	@ 0x60
 8004828:	2300      	movs	r3, #0
 800482a:	667b      	str	r3, [r7, #100]	@ 0x64
 800482c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004830:	4622      	mov	r2, r4
 8004832:	462b      	mov	r3, r5
 8004834:	f04f 0000 	mov.w	r0, #0
 8004838:	f04f 0100 	mov.w	r1, #0
 800483c:	0159      	lsls	r1, r3, #5
 800483e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004842:	0150      	lsls	r0, r2, #5
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	4621      	mov	r1, r4
 800484a:	1a51      	subs	r1, r2, r1
 800484c:	61b9      	str	r1, [r7, #24]
 800484e:	4629      	mov	r1, r5
 8004850:	eb63 0301 	sbc.w	r3, r3, r1
 8004854:	61fb      	str	r3, [r7, #28]
 8004856:	f04f 0200 	mov.w	r2, #0
 800485a:	f04f 0300 	mov.w	r3, #0
 800485e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004862:	4659      	mov	r1, fp
 8004864:	018b      	lsls	r3, r1, #6
 8004866:	4651      	mov	r1, sl
 8004868:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800486c:	4651      	mov	r1, sl
 800486e:	018a      	lsls	r2, r1, #6
 8004870:	4651      	mov	r1, sl
 8004872:	ebb2 0801 	subs.w	r8, r2, r1
 8004876:	4659      	mov	r1, fp
 8004878:	eb63 0901 	sbc.w	r9, r3, r1
 800487c:	f04f 0200 	mov.w	r2, #0
 8004880:	f04f 0300 	mov.w	r3, #0
 8004884:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004888:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800488c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004890:	4690      	mov	r8, r2
 8004892:	4699      	mov	r9, r3
 8004894:	4623      	mov	r3, r4
 8004896:	eb18 0303 	adds.w	r3, r8, r3
 800489a:	613b      	str	r3, [r7, #16]
 800489c:	462b      	mov	r3, r5
 800489e:	eb49 0303 	adc.w	r3, r9, r3
 80048a2:	617b      	str	r3, [r7, #20]
 80048a4:	f04f 0200 	mov.w	r2, #0
 80048a8:	f04f 0300 	mov.w	r3, #0
 80048ac:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80048b0:	4629      	mov	r1, r5
 80048b2:	024b      	lsls	r3, r1, #9
 80048b4:	4621      	mov	r1, r4
 80048b6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048ba:	4621      	mov	r1, r4
 80048bc:	024a      	lsls	r2, r1, #9
 80048be:	4610      	mov	r0, r2
 80048c0:	4619      	mov	r1, r3
 80048c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80048c6:	2200      	movs	r2, #0
 80048c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80048ca:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80048cc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80048d0:	f7fb fc98 	bl	8000204 <__aeabi_uldivmod>
 80048d4:	4602      	mov	r2, r0
 80048d6:	460b      	mov	r3, r1
 80048d8:	4613      	mov	r3, r2
 80048da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80048de:	e065      	b.n	80049ac <HAL_RCC_GetSysClockFreq+0x420>
 80048e0:	40023800 	.word	0x40023800
 80048e4:	00f42400 	.word	0x00f42400
 80048e8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048ec:	4b3d      	ldr	r3, [pc, #244]	@ (80049e4 <HAL_RCC_GetSysClockFreq+0x458>)
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	099b      	lsrs	r3, r3, #6
 80048f2:	2200      	movs	r2, #0
 80048f4:	4618      	mov	r0, r3
 80048f6:	4611      	mov	r1, r2
 80048f8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80048fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80048fe:	2300      	movs	r3, #0
 8004900:	657b      	str	r3, [r7, #84]	@ 0x54
 8004902:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004906:	4642      	mov	r2, r8
 8004908:	464b      	mov	r3, r9
 800490a:	f04f 0000 	mov.w	r0, #0
 800490e:	f04f 0100 	mov.w	r1, #0
 8004912:	0159      	lsls	r1, r3, #5
 8004914:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004918:	0150      	lsls	r0, r2, #5
 800491a:	4602      	mov	r2, r0
 800491c:	460b      	mov	r3, r1
 800491e:	4641      	mov	r1, r8
 8004920:	1a51      	subs	r1, r2, r1
 8004922:	60b9      	str	r1, [r7, #8]
 8004924:	4649      	mov	r1, r9
 8004926:	eb63 0301 	sbc.w	r3, r3, r1
 800492a:	60fb      	str	r3, [r7, #12]
 800492c:	f04f 0200 	mov.w	r2, #0
 8004930:	f04f 0300 	mov.w	r3, #0
 8004934:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004938:	4659      	mov	r1, fp
 800493a:	018b      	lsls	r3, r1, #6
 800493c:	4651      	mov	r1, sl
 800493e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004942:	4651      	mov	r1, sl
 8004944:	018a      	lsls	r2, r1, #6
 8004946:	4651      	mov	r1, sl
 8004948:	1a54      	subs	r4, r2, r1
 800494a:	4659      	mov	r1, fp
 800494c:	eb63 0501 	sbc.w	r5, r3, r1
 8004950:	f04f 0200 	mov.w	r2, #0
 8004954:	f04f 0300 	mov.w	r3, #0
 8004958:	00eb      	lsls	r3, r5, #3
 800495a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800495e:	00e2      	lsls	r2, r4, #3
 8004960:	4614      	mov	r4, r2
 8004962:	461d      	mov	r5, r3
 8004964:	4643      	mov	r3, r8
 8004966:	18e3      	adds	r3, r4, r3
 8004968:	603b      	str	r3, [r7, #0]
 800496a:	464b      	mov	r3, r9
 800496c:	eb45 0303 	adc.w	r3, r5, r3
 8004970:	607b      	str	r3, [r7, #4]
 8004972:	f04f 0200 	mov.w	r2, #0
 8004976:	f04f 0300 	mov.w	r3, #0
 800497a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800497e:	4629      	mov	r1, r5
 8004980:	028b      	lsls	r3, r1, #10
 8004982:	4621      	mov	r1, r4
 8004984:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004988:	4621      	mov	r1, r4
 800498a:	028a      	lsls	r2, r1, #10
 800498c:	4610      	mov	r0, r2
 800498e:	4619      	mov	r1, r3
 8004990:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004994:	2200      	movs	r2, #0
 8004996:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004998:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800499a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800499e:	f7fb fc31 	bl	8000204 <__aeabi_uldivmod>
 80049a2:	4602      	mov	r2, r0
 80049a4:	460b      	mov	r3, r1
 80049a6:	4613      	mov	r3, r2
 80049a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80049ac:	4b0d      	ldr	r3, [pc, #52]	@ (80049e4 <HAL_RCC_GetSysClockFreq+0x458>)
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	0f1b      	lsrs	r3, r3, #28
 80049b2:	f003 0307 	and.w	r3, r3, #7
 80049b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80049ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80049be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80049c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80049ca:	e003      	b.n	80049d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049cc:	4b06      	ldr	r3, [pc, #24]	@ (80049e8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80049ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80049d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	37b8      	adds	r7, #184	@ 0xb8
 80049dc:	46bd      	mov	sp, r7
 80049de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049e2:	bf00      	nop
 80049e4:	40023800 	.word	0x40023800
 80049e8:	00f42400 	.word	0x00f42400

080049ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e28d      	b.n	8004f1a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f000 8083 	beq.w	8004b12 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004a0c:	4b94      	ldr	r3, [pc, #592]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f003 030c 	and.w	r3, r3, #12
 8004a14:	2b04      	cmp	r3, #4
 8004a16:	d019      	beq.n	8004a4c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a18:	4b91      	ldr	r3, [pc, #580]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004a20:	2b08      	cmp	r3, #8
 8004a22:	d106      	bne.n	8004a32 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a24:	4b8e      	ldr	r3, [pc, #568]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a30:	d00c      	beq.n	8004a4c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a32:	4b8b      	ldr	r3, [pc, #556]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004a3a:	2b0c      	cmp	r3, #12
 8004a3c:	d112      	bne.n	8004a64 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a3e:	4b88      	ldr	r3, [pc, #544]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a4a:	d10b      	bne.n	8004a64 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a4c:	4b84      	ldr	r3, [pc, #528]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d05b      	beq.n	8004b10 <HAL_RCC_OscConfig+0x124>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d157      	bne.n	8004b10 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e25a      	b.n	8004f1a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a6c:	d106      	bne.n	8004a7c <HAL_RCC_OscConfig+0x90>
 8004a6e:	4b7c      	ldr	r3, [pc, #496]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a7b      	ldr	r2, [pc, #492]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004a74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a78:	6013      	str	r3, [r2, #0]
 8004a7a:	e01d      	b.n	8004ab8 <HAL_RCC_OscConfig+0xcc>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a84:	d10c      	bne.n	8004aa0 <HAL_RCC_OscConfig+0xb4>
 8004a86:	4b76      	ldr	r3, [pc, #472]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a75      	ldr	r2, [pc, #468]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004a8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a90:	6013      	str	r3, [r2, #0]
 8004a92:	4b73      	ldr	r3, [pc, #460]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a72      	ldr	r2, [pc, #456]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004a98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a9c:	6013      	str	r3, [r2, #0]
 8004a9e:	e00b      	b.n	8004ab8 <HAL_RCC_OscConfig+0xcc>
 8004aa0:	4b6f      	ldr	r3, [pc, #444]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a6e      	ldr	r2, [pc, #440]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004aa6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004aaa:	6013      	str	r3, [r2, #0]
 8004aac:	4b6c      	ldr	r3, [pc, #432]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a6b      	ldr	r2, [pc, #428]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004ab2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ab6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d013      	beq.n	8004ae8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac0:	f7fc ff1e 	bl	8001900 <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ac8:	f7fc ff1a 	bl	8001900 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b64      	cmp	r3, #100	@ 0x64
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e21f      	b.n	8004f1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ada:	4b61      	ldr	r3, [pc, #388]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d0f0      	beq.n	8004ac8 <HAL_RCC_OscConfig+0xdc>
 8004ae6:	e014      	b.n	8004b12 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae8:	f7fc ff0a 	bl	8001900 <HAL_GetTick>
 8004aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aee:	e008      	b.n	8004b02 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004af0:	f7fc ff06 	bl	8001900 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b64      	cmp	r3, #100	@ 0x64
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e20b      	b.n	8004f1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b02:	4b57      	ldr	r3, [pc, #348]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1f0      	bne.n	8004af0 <HAL_RCC_OscConfig+0x104>
 8004b0e:	e000      	b.n	8004b12 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d06f      	beq.n	8004bfe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004b1e:	4b50      	ldr	r3, [pc, #320]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f003 030c 	and.w	r3, r3, #12
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d017      	beq.n	8004b5a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b2a:	4b4d      	ldr	r3, [pc, #308]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004b32:	2b08      	cmp	r3, #8
 8004b34:	d105      	bne.n	8004b42 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b36:	4b4a      	ldr	r3, [pc, #296]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00b      	beq.n	8004b5a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b42:	4b47      	ldr	r3, [pc, #284]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004b4a:	2b0c      	cmp	r3, #12
 8004b4c:	d11c      	bne.n	8004b88 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b4e:	4b44      	ldr	r3, [pc, #272]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d116      	bne.n	8004b88 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b5a:	4b41      	ldr	r3, [pc, #260]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d005      	beq.n	8004b72 <HAL_RCC_OscConfig+0x186>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d001      	beq.n	8004b72 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e1d3      	b.n	8004f1a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b72:	4b3b      	ldr	r3, [pc, #236]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	00db      	lsls	r3, r3, #3
 8004b80:	4937      	ldr	r1, [pc, #220]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b86:	e03a      	b.n	8004bfe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d020      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b90:	4b34      	ldr	r3, [pc, #208]	@ (8004c64 <HAL_RCC_OscConfig+0x278>)
 8004b92:	2201      	movs	r2, #1
 8004b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b96:	f7fc feb3 	bl	8001900 <HAL_GetTick>
 8004b9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b9c:	e008      	b.n	8004bb0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b9e:	f7fc feaf 	bl	8001900 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d901      	bls.n	8004bb0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e1b4      	b.n	8004f1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bb0:	4b2b      	ldr	r3, [pc, #172]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0302 	and.w	r3, r3, #2
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d0f0      	beq.n	8004b9e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bbc:	4b28      	ldr	r3, [pc, #160]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	00db      	lsls	r3, r3, #3
 8004bca:	4925      	ldr	r1, [pc, #148]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	600b      	str	r3, [r1, #0]
 8004bd0:	e015      	b.n	8004bfe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bd2:	4b24      	ldr	r3, [pc, #144]	@ (8004c64 <HAL_RCC_OscConfig+0x278>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd8:	f7fc fe92 	bl	8001900 <HAL_GetTick>
 8004bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bde:	e008      	b.n	8004bf2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004be0:	f7fc fe8e 	bl	8001900 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e193      	b.n	8004f1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1f0      	bne.n	8004be0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0308 	and.w	r3, r3, #8
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d036      	beq.n	8004c78 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d016      	beq.n	8004c40 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c12:	4b15      	ldr	r3, [pc, #84]	@ (8004c68 <HAL_RCC_OscConfig+0x27c>)
 8004c14:	2201      	movs	r2, #1
 8004c16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c18:	f7fc fe72 	bl	8001900 <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c20:	f7fc fe6e 	bl	8001900 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e173      	b.n	8004f1a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c32:	4b0b      	ldr	r3, [pc, #44]	@ (8004c60 <HAL_RCC_OscConfig+0x274>)
 8004c34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0f0      	beq.n	8004c20 <HAL_RCC_OscConfig+0x234>
 8004c3e:	e01b      	b.n	8004c78 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c40:	4b09      	ldr	r3, [pc, #36]	@ (8004c68 <HAL_RCC_OscConfig+0x27c>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c46:	f7fc fe5b 	bl	8001900 <HAL_GetTick>
 8004c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c4c:	e00e      	b.n	8004c6c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c4e:	f7fc fe57 	bl	8001900 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d907      	bls.n	8004c6c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e15c      	b.n	8004f1a <HAL_RCC_OscConfig+0x52e>
 8004c60:	40023800 	.word	0x40023800
 8004c64:	42470000 	.word	0x42470000
 8004c68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c6c:	4b8a      	ldr	r3, [pc, #552]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004c6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c70:	f003 0302 	and.w	r3, r3, #2
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1ea      	bne.n	8004c4e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0304 	and.w	r3, r3, #4
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f000 8097 	beq.w	8004db4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c86:	2300      	movs	r3, #0
 8004c88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c8a:	4b83      	ldr	r3, [pc, #524]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10f      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c96:	2300      	movs	r3, #0
 8004c98:	60bb      	str	r3, [r7, #8]
 8004c9a:	4b7f      	ldr	r3, [pc, #508]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9e:	4a7e      	ldr	r2, [pc, #504]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004ca0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ca4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ca6:	4b7c      	ldr	r3, [pc, #496]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cae:	60bb      	str	r3, [r7, #8]
 8004cb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb6:	4b79      	ldr	r3, [pc, #484]	@ (8004e9c <HAL_RCC_OscConfig+0x4b0>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d118      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cc2:	4b76      	ldr	r3, [pc, #472]	@ (8004e9c <HAL_RCC_OscConfig+0x4b0>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a75      	ldr	r2, [pc, #468]	@ (8004e9c <HAL_RCC_OscConfig+0x4b0>)
 8004cc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ccc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cce:	f7fc fe17 	bl	8001900 <HAL_GetTick>
 8004cd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cd4:	e008      	b.n	8004ce8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cd6:	f7fc fe13 	bl	8001900 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e118      	b.n	8004f1a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ce8:	4b6c      	ldr	r3, [pc, #432]	@ (8004e9c <HAL_RCC_OscConfig+0x4b0>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0f0      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d106      	bne.n	8004d0a <HAL_RCC_OscConfig+0x31e>
 8004cfc:	4b66      	ldr	r3, [pc, #408]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d00:	4a65      	ldr	r2, [pc, #404]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004d02:	f043 0301 	orr.w	r3, r3, #1
 8004d06:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d08:	e01c      	b.n	8004d44 <HAL_RCC_OscConfig+0x358>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	2b05      	cmp	r3, #5
 8004d10:	d10c      	bne.n	8004d2c <HAL_RCC_OscConfig+0x340>
 8004d12:	4b61      	ldr	r3, [pc, #388]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d16:	4a60      	ldr	r2, [pc, #384]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004d18:	f043 0304 	orr.w	r3, r3, #4
 8004d1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d1e:	4b5e      	ldr	r3, [pc, #376]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d22:	4a5d      	ldr	r2, [pc, #372]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004d24:	f043 0301 	orr.w	r3, r3, #1
 8004d28:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d2a:	e00b      	b.n	8004d44 <HAL_RCC_OscConfig+0x358>
 8004d2c:	4b5a      	ldr	r3, [pc, #360]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004d2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d30:	4a59      	ldr	r2, [pc, #356]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004d32:	f023 0301 	bic.w	r3, r3, #1
 8004d36:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d38:	4b57      	ldr	r3, [pc, #348]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004d3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d3c:	4a56      	ldr	r2, [pc, #344]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004d3e:	f023 0304 	bic.w	r3, r3, #4
 8004d42:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d015      	beq.n	8004d78 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d4c:	f7fc fdd8 	bl	8001900 <HAL_GetTick>
 8004d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d52:	e00a      	b.n	8004d6a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d54:	f7fc fdd4 	bl	8001900 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e0d7      	b.n	8004f1a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d6a:	4b4b      	ldr	r3, [pc, #300]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d0ee      	beq.n	8004d54 <HAL_RCC_OscConfig+0x368>
 8004d76:	e014      	b.n	8004da2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d78:	f7fc fdc2 	bl	8001900 <HAL_GetTick>
 8004d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d7e:	e00a      	b.n	8004d96 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d80:	f7fc fdbe 	bl	8001900 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e0c1      	b.n	8004f1a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d96:	4b40      	ldr	r3, [pc, #256]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1ee      	bne.n	8004d80 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004da2:	7dfb      	ldrb	r3, [r7, #23]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d105      	bne.n	8004db4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004da8:	4b3b      	ldr	r3, [pc, #236]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dac:	4a3a      	ldr	r2, [pc, #232]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004dae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004db2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 80ad 	beq.w	8004f18 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004dbe:	4b36      	ldr	r3, [pc, #216]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f003 030c 	and.w	r3, r3, #12
 8004dc6:	2b08      	cmp	r3, #8
 8004dc8:	d060      	beq.n	8004e8c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d145      	bne.n	8004e5e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dd2:	4b33      	ldr	r3, [pc, #204]	@ (8004ea0 <HAL_RCC_OscConfig+0x4b4>)
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd8:	f7fc fd92 	bl	8001900 <HAL_GetTick>
 8004ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dde:	e008      	b.n	8004df2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004de0:	f7fc fd8e 	bl	8001900 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d901      	bls.n	8004df2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e093      	b.n	8004f1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004df2:	4b29      	ldr	r3, [pc, #164]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1f0      	bne.n	8004de0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	69da      	ldr	r2, [r3, #28]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	431a      	orrs	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e0c:	019b      	lsls	r3, r3, #6
 8004e0e:	431a      	orrs	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e14:	085b      	lsrs	r3, r3, #1
 8004e16:	3b01      	subs	r3, #1
 8004e18:	041b      	lsls	r3, r3, #16
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e20:	061b      	lsls	r3, r3, #24
 8004e22:	431a      	orrs	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e28:	071b      	lsls	r3, r3, #28
 8004e2a:	491b      	ldr	r1, [pc, #108]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e30:	4b1b      	ldr	r3, [pc, #108]	@ (8004ea0 <HAL_RCC_OscConfig+0x4b4>)
 8004e32:	2201      	movs	r2, #1
 8004e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e36:	f7fc fd63 	bl	8001900 <HAL_GetTick>
 8004e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e3c:	e008      	b.n	8004e50 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e3e:	f7fc fd5f 	bl	8001900 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d901      	bls.n	8004e50 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e064      	b.n	8004f1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e50:	4b11      	ldr	r3, [pc, #68]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d0f0      	beq.n	8004e3e <HAL_RCC_OscConfig+0x452>
 8004e5c:	e05c      	b.n	8004f18 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e5e:	4b10      	ldr	r3, [pc, #64]	@ (8004ea0 <HAL_RCC_OscConfig+0x4b4>)
 8004e60:	2200      	movs	r2, #0
 8004e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e64:	f7fc fd4c 	bl	8001900 <HAL_GetTick>
 8004e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e6a:	e008      	b.n	8004e7e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e6c:	f7fc fd48 	bl	8001900 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e04d      	b.n	8004f1a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e7e:	4b06      	ldr	r3, [pc, #24]	@ (8004e98 <HAL_RCC_OscConfig+0x4ac>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1f0      	bne.n	8004e6c <HAL_RCC_OscConfig+0x480>
 8004e8a:	e045      	b.n	8004f18 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d107      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e040      	b.n	8004f1a <HAL_RCC_OscConfig+0x52e>
 8004e98:	40023800 	.word	0x40023800
 8004e9c:	40007000 	.word	0x40007000
 8004ea0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ea4:	4b1f      	ldr	r3, [pc, #124]	@ (8004f24 <HAL_RCC_OscConfig+0x538>)
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d030      	beq.n	8004f14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d129      	bne.n	8004f14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d122      	bne.n	8004f14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004eda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d119      	bne.n	8004f14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eea:	085b      	lsrs	r3, r3, #1
 8004eec:	3b01      	subs	r3, #1
 8004eee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d10f      	bne.n	8004f14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d107      	bne.n	8004f14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f0e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d001      	beq.n	8004f18 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e000      	b.n	8004f1a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3718      	adds	r7, #24
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	40023800 	.word	0x40023800

08004f28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e07b      	b.n	8005032 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d108      	bne.n	8004f54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f4a:	d009      	beq.n	8004f60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	61da      	str	r2, [r3, #28]
 8004f52:	e005      	b.n	8004f60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d106      	bne.n	8004f80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f7fc faa6 	bl	80014cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2202      	movs	r2, #2
 8004f84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004fa8:	431a      	orrs	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fb2:	431a      	orrs	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	431a      	orrs	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fd0:	431a      	orrs	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	69db      	ldr	r3, [r3, #28]
 8004fd6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fda:	431a      	orrs	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a1b      	ldr	r3, [r3, #32]
 8004fe0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fe4:	ea42 0103 	orr.w	r1, r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	0c1b      	lsrs	r3, r3, #16
 8004ffe:	f003 0104 	and.w	r1, r3, #4
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005006:	f003 0210 	and.w	r2, r3, #16
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	430a      	orrs	r2, r1
 8005010:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	69da      	ldr	r2, [r3, #28]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005020:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3708      	adds	r7, #8
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}

0800503a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800503a:	b580      	push	{r7, lr}
 800503c:	b082      	sub	sp, #8
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d101      	bne.n	800504c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e03f      	b.n	80050cc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005052:	b2db      	uxtb	r3, r3
 8005054:	2b00      	cmp	r3, #0
 8005056:	d106      	bne.n	8005066 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f7fc fa7b 	bl	800155c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2224      	movs	r2, #36	@ 0x24
 800506a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68da      	ldr	r2, [r3, #12]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800507c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 fdde 	bl	8005c40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	691a      	ldr	r2, [r3, #16]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005092:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	695a      	ldr	r2, [r3, #20]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80050a2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68da      	ldr	r2, [r3, #12]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050b2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2220      	movs	r2, #32
 80050be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2220      	movs	r2, #32
 80050c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3708      	adds	r7, #8
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b08a      	sub	sp, #40	@ 0x28
 80050d8:	af02      	add	r7, sp, #8
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	603b      	str	r3, [r7, #0]
 80050e0:	4613      	mov	r3, r2
 80050e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80050e4:	2300      	movs	r3, #0
 80050e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	2b20      	cmp	r3, #32
 80050f2:	d17c      	bne.n	80051ee <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d002      	beq.n	8005100 <HAL_UART_Transmit+0x2c>
 80050fa:	88fb      	ldrh	r3, [r7, #6]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d101      	bne.n	8005104 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e075      	b.n	80051f0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800510a:	2b01      	cmp	r3, #1
 800510c:	d101      	bne.n	8005112 <HAL_UART_Transmit+0x3e>
 800510e:	2302      	movs	r3, #2
 8005110:	e06e      	b.n	80051f0 <HAL_UART_Transmit+0x11c>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2221      	movs	r2, #33	@ 0x21
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005128:	f7fc fbea 	bl	8001900 <HAL_GetTick>
 800512c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	88fa      	ldrh	r2, [r7, #6]
 8005132:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	88fa      	ldrh	r2, [r7, #6]
 8005138:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005142:	d108      	bne.n	8005156 <HAL_UART_Transmit+0x82>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d104      	bne.n	8005156 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800514c:	2300      	movs	r3, #0
 800514e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	61bb      	str	r3, [r7, #24]
 8005154:	e003      	b.n	800515e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800515a:	2300      	movs	r3, #0
 800515c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8005166:	e02a      	b.n	80051be <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	2200      	movs	r2, #0
 8005170:	2180      	movs	r1, #128	@ 0x80
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f000 fb1e 	bl	80057b4 <UART_WaitOnFlagUntilTimeout>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e036      	b.n	80051f0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d10b      	bne.n	80051a0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	881b      	ldrh	r3, [r3, #0]
 800518c:	461a      	mov	r2, r3
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005196:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	3302      	adds	r3, #2
 800519c:	61bb      	str	r3, [r7, #24]
 800519e:	e007      	b.n	80051b0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	781a      	ldrb	r2, [r3, #0]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	3301      	adds	r3, #1
 80051ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	3b01      	subs	r3, #1
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1cf      	bne.n	8005168 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	9300      	str	r3, [sp, #0]
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	2200      	movs	r2, #0
 80051d0:	2140      	movs	r1, #64	@ 0x40
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f000 faee 	bl	80057b4 <UART_WaitOnFlagUntilTimeout>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d001      	beq.n	80051e2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e006      	b.n	80051f0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2220      	movs	r2, #32
 80051e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80051ea:	2300      	movs	r3, #0
 80051ec:	e000      	b.n	80051f0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80051ee:	2302      	movs	r3, #2
  }
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3720      	adds	r7, #32
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	4613      	mov	r3, r2
 8005204:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b20      	cmp	r3, #32
 8005210:	d11d      	bne.n	800524e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d002      	beq.n	800521e <HAL_UART_Receive_IT+0x26>
 8005218:	88fb      	ldrh	r3, [r7, #6]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e016      	b.n	8005250 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005228:	2b01      	cmp	r3, #1
 800522a:	d101      	bne.n	8005230 <HAL_UART_Receive_IT+0x38>
 800522c:	2302      	movs	r3, #2
 800522e:	e00f      	b.n	8005250 <HAL_UART_Receive_IT+0x58>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800523e:	88fb      	ldrh	r3, [r7, #6]
 8005240:	461a      	mov	r2, r3
 8005242:	68b9      	ldr	r1, [r7, #8]
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f000 fb23 	bl	8005890 <UART_Start_Receive_IT>
 800524a:	4603      	mov	r3, r0
 800524c:	e000      	b.n	8005250 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800524e:	2302      	movs	r3, #2
  }
}
 8005250:	4618      	mov	r0, r3
 8005252:	3710      	adds	r7, #16
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b0ba      	sub	sp, #232	@ 0xe8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800527e:	2300      	movs	r3, #0
 8005280:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005284:	2300      	movs	r3, #0
 8005286:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800528a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800528e:	f003 030f 	and.w	r3, r3, #15
 8005292:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005296:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10f      	bne.n	80052be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800529e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052a2:	f003 0320 	and.w	r3, r3, #32
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d009      	beq.n	80052be <HAL_UART_IRQHandler+0x66>
 80052aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052ae:	f003 0320 	and.w	r3, r3, #32
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d003      	beq.n	80052be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 fc07 	bl	8005aca <UART_Receive_IT>
      return;
 80052bc:	e256      	b.n	800576c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80052be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f000 80de 	beq.w	8005484 <HAL_UART_IRQHandler+0x22c>
 80052c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052cc:	f003 0301 	and.w	r3, r3, #1
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d106      	bne.n	80052e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80052d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052d8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f000 80d1 	beq.w	8005484 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80052e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052e6:	f003 0301 	and.w	r3, r3, #1
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00b      	beq.n	8005306 <HAL_UART_IRQHandler+0xae>
 80052ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d005      	beq.n	8005306 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052fe:	f043 0201 	orr.w	r2, r3, #1
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800530a:	f003 0304 	and.w	r3, r3, #4
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00b      	beq.n	800532a <HAL_UART_IRQHandler+0xd2>
 8005312:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	2b00      	cmp	r3, #0
 800531c:	d005      	beq.n	800532a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005322:	f043 0202 	orr.w	r2, r3, #2
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800532a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00b      	beq.n	800534e <HAL_UART_IRQHandler+0xf6>
 8005336:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b00      	cmp	r3, #0
 8005340:	d005      	beq.n	800534e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005346:	f043 0204 	orr.w	r2, r3, #4
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800534e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005352:	f003 0308 	and.w	r3, r3, #8
 8005356:	2b00      	cmp	r3, #0
 8005358:	d011      	beq.n	800537e <HAL_UART_IRQHandler+0x126>
 800535a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800535e:	f003 0320 	and.w	r3, r3, #32
 8005362:	2b00      	cmp	r3, #0
 8005364:	d105      	bne.n	8005372 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005366:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d005      	beq.n	800537e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005376:	f043 0208 	orr.w	r2, r3, #8
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005382:	2b00      	cmp	r3, #0
 8005384:	f000 81ed 	beq.w	8005762 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800538c:	f003 0320 	and.w	r3, r3, #32
 8005390:	2b00      	cmp	r3, #0
 8005392:	d008      	beq.n	80053a6 <HAL_UART_IRQHandler+0x14e>
 8005394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005398:	f003 0320 	and.w	r3, r3, #32
 800539c:	2b00      	cmp	r3, #0
 800539e:	d002      	beq.n	80053a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 fb92 	bl	8005aca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	695b      	ldr	r3, [r3, #20]
 80053ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053b0:	2b40      	cmp	r3, #64	@ 0x40
 80053b2:	bf0c      	ite	eq
 80053b4:	2301      	moveq	r3, #1
 80053b6:	2300      	movne	r3, #0
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c2:	f003 0308 	and.w	r3, r3, #8
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d103      	bne.n	80053d2 <HAL_UART_IRQHandler+0x17a>
 80053ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d04f      	beq.n	8005472 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 fa9a 	bl	800590c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053e2:	2b40      	cmp	r3, #64	@ 0x40
 80053e4:	d141      	bne.n	800546a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	3314      	adds	r3, #20
 80053ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80053f4:	e853 3f00 	ldrex	r3, [r3]
 80053f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80053fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005400:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005404:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	3314      	adds	r3, #20
 800540e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005412:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005416:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800541e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005422:	e841 2300 	strex	r3, r2, [r1]
 8005426:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800542a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1d9      	bne.n	80053e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005436:	2b00      	cmp	r3, #0
 8005438:	d013      	beq.n	8005462 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800543e:	4a7d      	ldr	r2, [pc, #500]	@ (8005634 <HAL_UART_IRQHandler+0x3dc>)
 8005440:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005446:	4618      	mov	r0, r3
 8005448:	f7fc fe7d 	bl	8002146 <HAL_DMA_Abort_IT>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d016      	beq.n	8005480 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800545c:	4610      	mov	r0, r2
 800545e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005460:	e00e      	b.n	8005480 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 f990 	bl	8005788 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005468:	e00a      	b.n	8005480 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 f98c 	bl	8005788 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005470:	e006      	b.n	8005480 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f988 	bl	8005788 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 800547e:	e170      	b.n	8005762 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005480:	bf00      	nop
    return;
 8005482:	e16e      	b.n	8005762 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005488:	2b01      	cmp	r3, #1
 800548a:	f040 814a 	bne.w	8005722 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800548e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005492:	f003 0310 	and.w	r3, r3, #16
 8005496:	2b00      	cmp	r3, #0
 8005498:	f000 8143 	beq.w	8005722 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800549c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054a0:	f003 0310 	and.w	r3, r3, #16
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f000 813c 	beq.w	8005722 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054aa:	2300      	movs	r3, #0
 80054ac:	60bb      	str	r3, [r7, #8]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	60bb      	str	r3, [r7, #8]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	60bb      	str	r3, [r7, #8]
 80054be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054ca:	2b40      	cmp	r3, #64	@ 0x40
 80054cc:	f040 80b4 	bne.w	8005638 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80054dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f000 8140 	beq.w	8005766 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80054ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80054ee:	429a      	cmp	r2, r3
 80054f0:	f080 8139 	bcs.w	8005766 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80054fa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005506:	f000 8088 	beq.w	800561a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	330c      	adds	r3, #12
 8005510:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005514:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005518:	e853 3f00 	ldrex	r3, [r3]
 800551c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005520:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005524:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005528:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	330c      	adds	r3, #12
 8005532:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005536:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800553a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800553e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005542:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005546:	e841 2300 	strex	r3, r2, [r1]
 800554a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800554e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1d9      	bne.n	800550a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	3314      	adds	r3, #20
 800555c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005560:	e853 3f00 	ldrex	r3, [r3]
 8005564:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005566:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005568:	f023 0301 	bic.w	r3, r3, #1
 800556c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	3314      	adds	r3, #20
 8005576:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800557a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800557e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005580:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005582:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005586:	e841 2300 	strex	r3, r2, [r1]
 800558a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800558c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1e1      	bne.n	8005556 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	3314      	adds	r3, #20
 8005598:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800559c:	e853 3f00 	ldrex	r3, [r3]
 80055a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80055a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	3314      	adds	r3, #20
 80055b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80055b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80055b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80055bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80055be:	e841 2300 	strex	r3, r2, [r1]
 80055c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80055c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1e3      	bne.n	8005592 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2220      	movs	r2, #32
 80055ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	330c      	adds	r3, #12
 80055de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055e2:	e853 3f00 	ldrex	r3, [r3]
 80055e6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80055e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055ea:	f023 0310 	bic.w	r3, r3, #16
 80055ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	330c      	adds	r3, #12
 80055f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80055fc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80055fe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005600:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005602:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005604:	e841 2300 	strex	r3, r2, [r1]
 8005608:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800560a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1e3      	bne.n	80055d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005614:	4618      	mov	r0, r3
 8005616:	f7fc fd26 	bl	8002066 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005622:	b29b      	uxth	r3, r3
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	b29b      	uxth	r3, r3
 8005628:	4619      	mov	r1, r3
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 f8b6 	bl	800579c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005630:	e099      	b.n	8005766 <HAL_UART_IRQHandler+0x50e>
 8005632:	bf00      	nop
 8005634:	080059d3 	.word	0x080059d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005640:	b29b      	uxth	r3, r3
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800564c:	b29b      	uxth	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	f000 808b 	beq.w	800576a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005654:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005658:	2b00      	cmp	r3, #0
 800565a:	f000 8086 	beq.w	800576a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	330c      	adds	r3, #12
 8005664:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005668:	e853 3f00 	ldrex	r3, [r3]
 800566c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800566e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005670:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005674:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	330c      	adds	r3, #12
 800567e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005682:	647a      	str	r2, [r7, #68]	@ 0x44
 8005684:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005686:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005688:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800568a:	e841 2300 	strex	r3, r2, [r1]
 800568e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005690:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1e3      	bne.n	800565e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	3314      	adds	r3, #20
 800569c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a0:	e853 3f00 	ldrex	r3, [r3]
 80056a4:	623b      	str	r3, [r7, #32]
   return(result);
 80056a6:	6a3b      	ldr	r3, [r7, #32]
 80056a8:	f023 0301 	bic.w	r3, r3, #1
 80056ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	3314      	adds	r3, #20
 80056b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80056ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80056bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056c2:	e841 2300 	strex	r3, r2, [r1]
 80056c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1e3      	bne.n	8005696 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2220      	movs	r2, #32
 80056d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	330c      	adds	r3, #12
 80056e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	e853 3f00 	ldrex	r3, [r3]
 80056ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f023 0310 	bic.w	r3, r3, #16
 80056f2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	330c      	adds	r3, #12
 80056fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005700:	61fa      	str	r2, [r7, #28]
 8005702:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005704:	69b9      	ldr	r1, [r7, #24]
 8005706:	69fa      	ldr	r2, [r7, #28]
 8005708:	e841 2300 	strex	r3, r2, [r1]
 800570c:	617b      	str	r3, [r7, #20]
   return(result);
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1e3      	bne.n	80056dc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005714:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005718:	4619      	mov	r1, r3
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f83e 	bl	800579c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005720:	e023      	b.n	800576a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800572a:	2b00      	cmp	r3, #0
 800572c:	d009      	beq.n	8005742 <HAL_UART_IRQHandler+0x4ea>
 800572e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005736:	2b00      	cmp	r3, #0
 8005738:	d003      	beq.n	8005742 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 f95d 	bl	80059fa <UART_Transmit_IT>
    return;
 8005740:	e014      	b.n	800576c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00e      	beq.n	800576c <HAL_UART_IRQHandler+0x514>
 800574e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005752:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005756:	2b00      	cmp	r3, #0
 8005758:	d008      	beq.n	800576c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 f99d 	bl	8005a9a <UART_EndTransmit_IT>
    return;
 8005760:	e004      	b.n	800576c <HAL_UART_IRQHandler+0x514>
    return;
 8005762:	bf00      	nop
 8005764:	e002      	b.n	800576c <HAL_UART_IRQHandler+0x514>
      return;
 8005766:	bf00      	nop
 8005768:	e000      	b.n	800576c <HAL_UART_IRQHandler+0x514>
      return;
 800576a:	bf00      	nop
  }
}
 800576c:	37e8      	adds	r7, #232	@ 0xe8
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop

08005774 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	460b      	mov	r3, r1
 80057a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b090      	sub	sp, #64	@ 0x40
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	603b      	str	r3, [r7, #0]
 80057c0:	4613      	mov	r3, r2
 80057c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057c4:	e050      	b.n	8005868 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057cc:	d04c      	beq.n	8005868 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80057ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d007      	beq.n	80057e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80057d4:	f7fc f894 	bl	8001900 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d241      	bcs.n	8005868 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	330c      	adds	r3, #12
 80057ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ee:	e853 3f00 	ldrex	r3, [r3]
 80057f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f6:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80057fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	330c      	adds	r3, #12
 8005802:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005804:	637a      	str	r2, [r7, #52]	@ 0x34
 8005806:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005808:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800580a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800580c:	e841 2300 	strex	r3, r2, [r1]
 8005810:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1e5      	bne.n	80057e4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	3314      	adds	r3, #20
 800581e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	e853 3f00 	ldrex	r3, [r3]
 8005826:	613b      	str	r3, [r7, #16]
   return(result);
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	f023 0301 	bic.w	r3, r3, #1
 800582e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	3314      	adds	r3, #20
 8005836:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005838:	623a      	str	r2, [r7, #32]
 800583a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583c:	69f9      	ldr	r1, [r7, #28]
 800583e:	6a3a      	ldr	r2, [r7, #32]
 8005840:	e841 2300 	strex	r3, r2, [r1]
 8005844:	61bb      	str	r3, [r7, #24]
   return(result);
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1e5      	bne.n	8005818 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2220      	movs	r2, #32
 8005850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2220      	movs	r2, #32
 8005858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8005864:	2303      	movs	r3, #3
 8005866:	e00f      	b.n	8005888 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	4013      	ands	r3, r2
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	429a      	cmp	r2, r3
 8005876:	bf0c      	ite	eq
 8005878:	2301      	moveq	r3, #1
 800587a:	2300      	movne	r3, #0
 800587c:	b2db      	uxtb	r3, r3
 800587e:	461a      	mov	r2, r3
 8005880:	79fb      	ldrb	r3, [r7, #7]
 8005882:	429a      	cmp	r2, r3
 8005884:	d09f      	beq.n	80057c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3740      	adds	r7, #64	@ 0x40
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	4613      	mov	r3, r2
 800589c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	68ba      	ldr	r2, [r7, #8]
 80058a2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	88fa      	ldrh	r2, [r7, #6]
 80058a8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	88fa      	ldrh	r2, [r7, #6]
 80058ae:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2222      	movs	r2, #34	@ 0x22
 80058ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d007      	beq.n	80058de <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68da      	ldr	r2, [r3, #12]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058dc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	695a      	ldr	r2, [r3, #20]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f042 0201 	orr.w	r2, r2, #1
 80058ec:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68da      	ldr	r2, [r3, #12]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f042 0220 	orr.w	r2, r2, #32
 80058fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3714      	adds	r7, #20
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800590c:	b480      	push	{r7}
 800590e:	b095      	sub	sp, #84	@ 0x54
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	330c      	adds	r3, #12
 800591a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800591e:	e853 3f00 	ldrex	r3, [r3]
 8005922:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005926:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800592a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	330c      	adds	r3, #12
 8005932:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005934:	643a      	str	r2, [r7, #64]	@ 0x40
 8005936:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005938:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800593a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800593c:	e841 2300 	strex	r3, r2, [r1]
 8005940:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1e5      	bne.n	8005914 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	3314      	adds	r3, #20
 800594e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005950:	6a3b      	ldr	r3, [r7, #32]
 8005952:	e853 3f00 	ldrex	r3, [r3]
 8005956:	61fb      	str	r3, [r7, #28]
   return(result);
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	f023 0301 	bic.w	r3, r3, #1
 800595e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	3314      	adds	r3, #20
 8005966:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005968:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800596a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800596e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005970:	e841 2300 	strex	r3, r2, [r1]
 8005974:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1e5      	bne.n	8005948 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005980:	2b01      	cmp	r3, #1
 8005982:	d119      	bne.n	80059b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	330c      	adds	r3, #12
 800598a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	e853 3f00 	ldrex	r3, [r3]
 8005992:	60bb      	str	r3, [r7, #8]
   return(result);
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	f023 0310 	bic.w	r3, r3, #16
 800599a:	647b      	str	r3, [r7, #68]	@ 0x44
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	330c      	adds	r3, #12
 80059a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059a4:	61ba      	str	r2, [r7, #24]
 80059a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a8:	6979      	ldr	r1, [r7, #20]
 80059aa:	69ba      	ldr	r2, [r7, #24]
 80059ac:	e841 2300 	strex	r3, r2, [r1]
 80059b0:	613b      	str	r3, [r7, #16]
   return(result);
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1e5      	bne.n	8005984 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2220      	movs	r2, #32
 80059bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80059c6:	bf00      	nop
 80059c8:	3754      	adds	r7, #84	@ 0x54
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b084      	sub	sp, #16
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	f7ff fecb 	bl	8005788 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059f2:	bf00      	nop
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80059fa:	b480      	push	{r7}
 80059fc:	b085      	sub	sp, #20
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	2b21      	cmp	r3, #33	@ 0x21
 8005a0c:	d13e      	bne.n	8005a8c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a16:	d114      	bne.n	8005a42 <UART_Transmit_IT+0x48>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d110      	bne.n	8005a42 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a1b      	ldr	r3, [r3, #32]
 8005a24:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	881b      	ldrh	r3, [r3, #0]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a34:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	1c9a      	adds	r2, r3, #2
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	621a      	str	r2, [r3, #32]
 8005a40:	e008      	b.n	8005a54 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	1c59      	adds	r1, r3, #1
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	6211      	str	r1, [r2, #32]
 8005a4c:	781a      	ldrb	r2, [r3, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	4619      	mov	r1, r3
 8005a62:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d10f      	bne.n	8005a88 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68da      	ldr	r2, [r3, #12]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a76:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68da      	ldr	r2, [r3, #12]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a86:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	e000      	b.n	8005a8e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a8c:	2302      	movs	r3, #2
  }
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3714      	adds	r7, #20
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr

08005a9a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b082      	sub	sp, #8
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68da      	ldr	r2, [r3, #12]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ab0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2220      	movs	r2, #32
 8005ab6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f7ff fe5a 	bl	8005774 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3708      	adds	r7, #8
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b08c      	sub	sp, #48	@ 0x30
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	2b22      	cmp	r3, #34	@ 0x22
 8005adc:	f040 80ab 	bne.w	8005c36 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ae8:	d117      	bne.n	8005b1a <UART_Receive_IT+0x50>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d113      	bne.n	8005b1a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005af2:	2300      	movs	r3, #0
 8005af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005afa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b0c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b12:	1c9a      	adds	r2, r3, #2
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	629a      	str	r2, [r3, #40]	@ 0x28
 8005b18:	e026      	b.n	8005b68 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005b20:	2300      	movs	r3, #0
 8005b22:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b2c:	d007      	beq.n	8005b3e <UART_Receive_IT+0x74>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10a      	bne.n	8005b4c <UART_Receive_IT+0x82>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d106      	bne.n	8005b4c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	b2da      	uxtb	r2, r3
 8005b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b48:	701a      	strb	r2, [r3, #0]
 8005b4a:	e008      	b.n	8005b5e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b58:	b2da      	uxtb	r2, r3
 8005b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b5c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b62:	1c5a      	adds	r2, r3, #1
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	4619      	mov	r1, r3
 8005b76:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d15a      	bne.n	8005c32 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68da      	ldr	r2, [r3, #12]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f022 0220 	bic.w	r2, r2, #32
 8005b8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68da      	ldr	r2, [r3, #12]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	695a      	ldr	r2, [r3, #20]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f022 0201 	bic.w	r2, r2, #1
 8005baa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2220      	movs	r2, #32
 8005bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d135      	bne.n	8005c28 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	330c      	adds	r3, #12
 8005bc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	e853 3f00 	ldrex	r3, [r3]
 8005bd0:	613b      	str	r3, [r7, #16]
   return(result);
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	f023 0310 	bic.w	r3, r3, #16
 8005bd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	330c      	adds	r3, #12
 8005be0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005be2:	623a      	str	r2, [r7, #32]
 8005be4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be6:	69f9      	ldr	r1, [r7, #28]
 8005be8:	6a3a      	ldr	r2, [r7, #32]
 8005bea:	e841 2300 	strex	r3, r2, [r1]
 8005bee:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1e5      	bne.n	8005bc2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0310 	and.w	r3, r3, #16
 8005c00:	2b10      	cmp	r3, #16
 8005c02:	d10a      	bne.n	8005c1a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c04:	2300      	movs	r3, #0
 8005c06:	60fb      	str	r3, [r7, #12]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	60fb      	str	r3, [r7, #12]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	60fb      	str	r3, [r7, #12]
 8005c18:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005c1e:	4619      	mov	r1, r3
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f7ff fdbb 	bl	800579c <HAL_UARTEx_RxEventCallback>
 8005c26:	e002      	b.n	8005c2e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f7fa fc71 	bl	8000510 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	e002      	b.n	8005c38 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005c32:	2300      	movs	r3, #0
 8005c34:	e000      	b.n	8005c38 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005c36:	2302      	movs	r3, #2
  }
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3730      	adds	r7, #48	@ 0x30
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c44:	b0c0      	sub	sp, #256	@ 0x100
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c5c:	68d9      	ldr	r1, [r3, #12]
 8005c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	ea40 0301 	orr.w	r3, r0, r1
 8005c68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c6e:	689a      	ldr	r2, [r3, #8]
 8005c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	431a      	orrs	r2, r3
 8005c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	431a      	orrs	r2, r3
 8005c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c84:	69db      	ldr	r3, [r3, #28]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005c98:	f021 010c 	bic.w	r1, r1, #12
 8005c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005ca6:	430b      	orrs	r3, r1
 8005ca8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cba:	6999      	ldr	r1, [r3, #24]
 8005cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	ea40 0301 	orr.w	r3, r0, r1
 8005cc6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	4b8f      	ldr	r3, [pc, #572]	@ (8005f0c <UART_SetConfig+0x2cc>)
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d005      	beq.n	8005ce0 <UART_SetConfig+0xa0>
 8005cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	4b8d      	ldr	r3, [pc, #564]	@ (8005f10 <UART_SetConfig+0x2d0>)
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d104      	bne.n	8005cea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ce0:	f7fe f916 	bl	8003f10 <HAL_RCC_GetPCLK2Freq>
 8005ce4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005ce8:	e003      	b.n	8005cf2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005cea:	f7fe f8fd 	bl	8003ee8 <HAL_RCC_GetPCLK1Freq>
 8005cee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cf6:	69db      	ldr	r3, [r3, #28]
 8005cf8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cfc:	f040 810c 	bne.w	8005f18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d04:	2200      	movs	r2, #0
 8005d06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005d0a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005d0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005d12:	4622      	mov	r2, r4
 8005d14:	462b      	mov	r3, r5
 8005d16:	1891      	adds	r1, r2, r2
 8005d18:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005d1a:	415b      	adcs	r3, r3
 8005d1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005d22:	4621      	mov	r1, r4
 8005d24:	eb12 0801 	adds.w	r8, r2, r1
 8005d28:	4629      	mov	r1, r5
 8005d2a:	eb43 0901 	adc.w	r9, r3, r1
 8005d2e:	f04f 0200 	mov.w	r2, #0
 8005d32:	f04f 0300 	mov.w	r3, #0
 8005d36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d42:	4690      	mov	r8, r2
 8005d44:	4699      	mov	r9, r3
 8005d46:	4623      	mov	r3, r4
 8005d48:	eb18 0303 	adds.w	r3, r8, r3
 8005d4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005d50:	462b      	mov	r3, r5
 8005d52:	eb49 0303 	adc.w	r3, r9, r3
 8005d56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005d66:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005d6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005d6e:	460b      	mov	r3, r1
 8005d70:	18db      	adds	r3, r3, r3
 8005d72:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d74:	4613      	mov	r3, r2
 8005d76:	eb42 0303 	adc.w	r3, r2, r3
 8005d7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005d80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005d84:	f7fa fa3e 	bl	8000204 <__aeabi_uldivmod>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	4b61      	ldr	r3, [pc, #388]	@ (8005f14 <UART_SetConfig+0x2d4>)
 8005d8e:	fba3 2302 	umull	r2, r3, r3, r2
 8005d92:	095b      	lsrs	r3, r3, #5
 8005d94:	011c      	lsls	r4, r3, #4
 8005d96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005da0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005da4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005da8:	4642      	mov	r2, r8
 8005daa:	464b      	mov	r3, r9
 8005dac:	1891      	adds	r1, r2, r2
 8005dae:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005db0:	415b      	adcs	r3, r3
 8005db2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005db4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005db8:	4641      	mov	r1, r8
 8005dba:	eb12 0a01 	adds.w	sl, r2, r1
 8005dbe:	4649      	mov	r1, r9
 8005dc0:	eb43 0b01 	adc.w	fp, r3, r1
 8005dc4:	f04f 0200 	mov.w	r2, #0
 8005dc8:	f04f 0300 	mov.w	r3, #0
 8005dcc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005dd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005dd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005dd8:	4692      	mov	sl, r2
 8005dda:	469b      	mov	fp, r3
 8005ddc:	4643      	mov	r3, r8
 8005dde:	eb1a 0303 	adds.w	r3, sl, r3
 8005de2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005de6:	464b      	mov	r3, r9
 8005de8:	eb4b 0303 	adc.w	r3, fp, r3
 8005dec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005dfc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005e00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005e04:	460b      	mov	r3, r1
 8005e06:	18db      	adds	r3, r3, r3
 8005e08:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	eb42 0303 	adc.w	r3, r2, r3
 8005e10:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005e16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005e1a:	f7fa f9f3 	bl	8000204 <__aeabi_uldivmod>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	460b      	mov	r3, r1
 8005e22:	4611      	mov	r1, r2
 8005e24:	4b3b      	ldr	r3, [pc, #236]	@ (8005f14 <UART_SetConfig+0x2d4>)
 8005e26:	fba3 2301 	umull	r2, r3, r3, r1
 8005e2a:	095b      	lsrs	r3, r3, #5
 8005e2c:	2264      	movs	r2, #100	@ 0x64
 8005e2e:	fb02 f303 	mul.w	r3, r2, r3
 8005e32:	1acb      	subs	r3, r1, r3
 8005e34:	00db      	lsls	r3, r3, #3
 8005e36:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005e3a:	4b36      	ldr	r3, [pc, #216]	@ (8005f14 <UART_SetConfig+0x2d4>)
 8005e3c:	fba3 2302 	umull	r2, r3, r3, r2
 8005e40:	095b      	lsrs	r3, r3, #5
 8005e42:	005b      	lsls	r3, r3, #1
 8005e44:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005e48:	441c      	add	r4, r3
 8005e4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e54:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005e58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005e5c:	4642      	mov	r2, r8
 8005e5e:	464b      	mov	r3, r9
 8005e60:	1891      	adds	r1, r2, r2
 8005e62:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005e64:	415b      	adcs	r3, r3
 8005e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005e6c:	4641      	mov	r1, r8
 8005e6e:	1851      	adds	r1, r2, r1
 8005e70:	6339      	str	r1, [r7, #48]	@ 0x30
 8005e72:	4649      	mov	r1, r9
 8005e74:	414b      	adcs	r3, r1
 8005e76:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e78:	f04f 0200 	mov.w	r2, #0
 8005e7c:	f04f 0300 	mov.w	r3, #0
 8005e80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005e84:	4659      	mov	r1, fp
 8005e86:	00cb      	lsls	r3, r1, #3
 8005e88:	4651      	mov	r1, sl
 8005e8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e8e:	4651      	mov	r1, sl
 8005e90:	00ca      	lsls	r2, r1, #3
 8005e92:	4610      	mov	r0, r2
 8005e94:	4619      	mov	r1, r3
 8005e96:	4603      	mov	r3, r0
 8005e98:	4642      	mov	r2, r8
 8005e9a:	189b      	adds	r3, r3, r2
 8005e9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ea0:	464b      	mov	r3, r9
 8005ea2:	460a      	mov	r2, r1
 8005ea4:	eb42 0303 	adc.w	r3, r2, r3
 8005ea8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005eb8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005ebc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	18db      	adds	r3, r3, r3
 8005ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	eb42 0303 	adc.w	r3, r2, r3
 8005ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ece:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005ed2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005ed6:	f7fa f995 	bl	8000204 <__aeabi_uldivmod>
 8005eda:	4602      	mov	r2, r0
 8005edc:	460b      	mov	r3, r1
 8005ede:	4b0d      	ldr	r3, [pc, #52]	@ (8005f14 <UART_SetConfig+0x2d4>)
 8005ee0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ee4:	095b      	lsrs	r3, r3, #5
 8005ee6:	2164      	movs	r1, #100	@ 0x64
 8005ee8:	fb01 f303 	mul.w	r3, r1, r3
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	00db      	lsls	r3, r3, #3
 8005ef0:	3332      	adds	r3, #50	@ 0x32
 8005ef2:	4a08      	ldr	r2, [pc, #32]	@ (8005f14 <UART_SetConfig+0x2d4>)
 8005ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef8:	095b      	lsrs	r3, r3, #5
 8005efa:	f003 0207 	and.w	r2, r3, #7
 8005efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4422      	add	r2, r4
 8005f06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f08:	e106      	b.n	8006118 <UART_SetConfig+0x4d8>
 8005f0a:	bf00      	nop
 8005f0c:	40011000 	.word	0x40011000
 8005f10:	40011400 	.word	0x40011400
 8005f14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005f22:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005f26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005f2a:	4642      	mov	r2, r8
 8005f2c:	464b      	mov	r3, r9
 8005f2e:	1891      	adds	r1, r2, r2
 8005f30:	6239      	str	r1, [r7, #32]
 8005f32:	415b      	adcs	r3, r3
 8005f34:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f3a:	4641      	mov	r1, r8
 8005f3c:	1854      	adds	r4, r2, r1
 8005f3e:	4649      	mov	r1, r9
 8005f40:	eb43 0501 	adc.w	r5, r3, r1
 8005f44:	f04f 0200 	mov.w	r2, #0
 8005f48:	f04f 0300 	mov.w	r3, #0
 8005f4c:	00eb      	lsls	r3, r5, #3
 8005f4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f52:	00e2      	lsls	r2, r4, #3
 8005f54:	4614      	mov	r4, r2
 8005f56:	461d      	mov	r5, r3
 8005f58:	4643      	mov	r3, r8
 8005f5a:	18e3      	adds	r3, r4, r3
 8005f5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005f60:	464b      	mov	r3, r9
 8005f62:	eb45 0303 	adc.w	r3, r5, r3
 8005f66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005f76:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005f7a:	f04f 0200 	mov.w	r2, #0
 8005f7e:	f04f 0300 	mov.w	r3, #0
 8005f82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005f86:	4629      	mov	r1, r5
 8005f88:	008b      	lsls	r3, r1, #2
 8005f8a:	4621      	mov	r1, r4
 8005f8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f90:	4621      	mov	r1, r4
 8005f92:	008a      	lsls	r2, r1, #2
 8005f94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005f98:	f7fa f934 	bl	8000204 <__aeabi_uldivmod>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	4b60      	ldr	r3, [pc, #384]	@ (8006124 <UART_SetConfig+0x4e4>)
 8005fa2:	fba3 2302 	umull	r2, r3, r3, r2
 8005fa6:	095b      	lsrs	r3, r3, #5
 8005fa8:	011c      	lsls	r4, r3, #4
 8005faa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005fb4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005fb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005fbc:	4642      	mov	r2, r8
 8005fbe:	464b      	mov	r3, r9
 8005fc0:	1891      	adds	r1, r2, r2
 8005fc2:	61b9      	str	r1, [r7, #24]
 8005fc4:	415b      	adcs	r3, r3
 8005fc6:	61fb      	str	r3, [r7, #28]
 8005fc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fcc:	4641      	mov	r1, r8
 8005fce:	1851      	adds	r1, r2, r1
 8005fd0:	6139      	str	r1, [r7, #16]
 8005fd2:	4649      	mov	r1, r9
 8005fd4:	414b      	adcs	r3, r1
 8005fd6:	617b      	str	r3, [r7, #20]
 8005fd8:	f04f 0200 	mov.w	r2, #0
 8005fdc:	f04f 0300 	mov.w	r3, #0
 8005fe0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005fe4:	4659      	mov	r1, fp
 8005fe6:	00cb      	lsls	r3, r1, #3
 8005fe8:	4651      	mov	r1, sl
 8005fea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fee:	4651      	mov	r1, sl
 8005ff0:	00ca      	lsls	r2, r1, #3
 8005ff2:	4610      	mov	r0, r2
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	4642      	mov	r2, r8
 8005ffa:	189b      	adds	r3, r3, r2
 8005ffc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006000:	464b      	mov	r3, r9
 8006002:	460a      	mov	r2, r1
 8006004:	eb42 0303 	adc.w	r3, r2, r3
 8006008:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800600c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006016:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006018:	f04f 0200 	mov.w	r2, #0
 800601c:	f04f 0300 	mov.w	r3, #0
 8006020:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006024:	4649      	mov	r1, r9
 8006026:	008b      	lsls	r3, r1, #2
 8006028:	4641      	mov	r1, r8
 800602a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800602e:	4641      	mov	r1, r8
 8006030:	008a      	lsls	r2, r1, #2
 8006032:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006036:	f7fa f8e5 	bl	8000204 <__aeabi_uldivmod>
 800603a:	4602      	mov	r2, r0
 800603c:	460b      	mov	r3, r1
 800603e:	4611      	mov	r1, r2
 8006040:	4b38      	ldr	r3, [pc, #224]	@ (8006124 <UART_SetConfig+0x4e4>)
 8006042:	fba3 2301 	umull	r2, r3, r3, r1
 8006046:	095b      	lsrs	r3, r3, #5
 8006048:	2264      	movs	r2, #100	@ 0x64
 800604a:	fb02 f303 	mul.w	r3, r2, r3
 800604e:	1acb      	subs	r3, r1, r3
 8006050:	011b      	lsls	r3, r3, #4
 8006052:	3332      	adds	r3, #50	@ 0x32
 8006054:	4a33      	ldr	r2, [pc, #204]	@ (8006124 <UART_SetConfig+0x4e4>)
 8006056:	fba2 2303 	umull	r2, r3, r2, r3
 800605a:	095b      	lsrs	r3, r3, #5
 800605c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006060:	441c      	add	r4, r3
 8006062:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006066:	2200      	movs	r2, #0
 8006068:	673b      	str	r3, [r7, #112]	@ 0x70
 800606a:	677a      	str	r2, [r7, #116]	@ 0x74
 800606c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006070:	4642      	mov	r2, r8
 8006072:	464b      	mov	r3, r9
 8006074:	1891      	adds	r1, r2, r2
 8006076:	60b9      	str	r1, [r7, #8]
 8006078:	415b      	adcs	r3, r3
 800607a:	60fb      	str	r3, [r7, #12]
 800607c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006080:	4641      	mov	r1, r8
 8006082:	1851      	adds	r1, r2, r1
 8006084:	6039      	str	r1, [r7, #0]
 8006086:	4649      	mov	r1, r9
 8006088:	414b      	adcs	r3, r1
 800608a:	607b      	str	r3, [r7, #4]
 800608c:	f04f 0200 	mov.w	r2, #0
 8006090:	f04f 0300 	mov.w	r3, #0
 8006094:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006098:	4659      	mov	r1, fp
 800609a:	00cb      	lsls	r3, r1, #3
 800609c:	4651      	mov	r1, sl
 800609e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060a2:	4651      	mov	r1, sl
 80060a4:	00ca      	lsls	r2, r1, #3
 80060a6:	4610      	mov	r0, r2
 80060a8:	4619      	mov	r1, r3
 80060aa:	4603      	mov	r3, r0
 80060ac:	4642      	mov	r2, r8
 80060ae:	189b      	adds	r3, r3, r2
 80060b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80060b2:	464b      	mov	r3, r9
 80060b4:	460a      	mov	r2, r1
 80060b6:	eb42 0303 	adc.w	r3, r2, r3
 80060ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80060bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80060c6:	667a      	str	r2, [r7, #100]	@ 0x64
 80060c8:	f04f 0200 	mov.w	r2, #0
 80060cc:	f04f 0300 	mov.w	r3, #0
 80060d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80060d4:	4649      	mov	r1, r9
 80060d6:	008b      	lsls	r3, r1, #2
 80060d8:	4641      	mov	r1, r8
 80060da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060de:	4641      	mov	r1, r8
 80060e0:	008a      	lsls	r2, r1, #2
 80060e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80060e6:	f7fa f88d 	bl	8000204 <__aeabi_uldivmod>
 80060ea:	4602      	mov	r2, r0
 80060ec:	460b      	mov	r3, r1
 80060ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006124 <UART_SetConfig+0x4e4>)
 80060f0:	fba3 1302 	umull	r1, r3, r3, r2
 80060f4:	095b      	lsrs	r3, r3, #5
 80060f6:	2164      	movs	r1, #100	@ 0x64
 80060f8:	fb01 f303 	mul.w	r3, r1, r3
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	011b      	lsls	r3, r3, #4
 8006100:	3332      	adds	r3, #50	@ 0x32
 8006102:	4a08      	ldr	r2, [pc, #32]	@ (8006124 <UART_SetConfig+0x4e4>)
 8006104:	fba2 2303 	umull	r2, r3, r2, r3
 8006108:	095b      	lsrs	r3, r3, #5
 800610a:	f003 020f 	and.w	r2, r3, #15
 800610e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4422      	add	r2, r4
 8006116:	609a      	str	r2, [r3, #8]
}
 8006118:	bf00      	nop
 800611a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800611e:	46bd      	mov	sp, r7
 8006120:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006124:	51eb851f 	.word	0x51eb851f

08006128 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006128:	b084      	sub	sp, #16
 800612a:	b580      	push	{r7, lr}
 800612c:	b084      	sub	sp, #16
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
 8006132:	f107 001c 	add.w	r0, r7, #28
 8006136:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800613a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800613c:	2b01      	cmp	r3, #1
 800613e:	d122      	bne.n	8006186 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006144:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006154:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006168:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800616a:	2b01      	cmp	r3, #1
 800616c:	d105      	bne.n	800617a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f001 fbe8 	bl	8007950 <USB_CoreReset>
 8006180:	4603      	mov	r3, r0
 8006182:	73fb      	strb	r3, [r7, #15]
 8006184:	e01a      	b.n	80061bc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f001 fbdc 	bl	8007950 <USB_CoreReset>
 8006198:	4603      	mov	r3, r0
 800619a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800619c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d106      	bne.n	80061b0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061a6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	639a      	str	r2, [r3, #56]	@ 0x38
 80061ae:	e005      	b.n	80061bc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061b4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80061bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d10b      	bne.n	80061da <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	f043 0206 	orr.w	r2, r3, #6
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f043 0220 	orr.w	r2, r3, #32
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80061da:	7bfb      	ldrb	r3, [r7, #15]
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061e6:	b004      	add	sp, #16
 80061e8:	4770      	bx	lr
	...

080061ec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b087      	sub	sp, #28
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	4613      	mov	r3, r2
 80061f8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80061fa:	79fb      	ldrb	r3, [r7, #7]
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d165      	bne.n	80062cc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	4a41      	ldr	r2, [pc, #260]	@ (8006308 <USB_SetTurnaroundTime+0x11c>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d906      	bls.n	8006216 <USB_SetTurnaroundTime+0x2a>
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	4a40      	ldr	r2, [pc, #256]	@ (800630c <USB_SetTurnaroundTime+0x120>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d202      	bcs.n	8006216 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006210:	230f      	movs	r3, #15
 8006212:	617b      	str	r3, [r7, #20]
 8006214:	e062      	b.n	80062dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	4a3c      	ldr	r2, [pc, #240]	@ (800630c <USB_SetTurnaroundTime+0x120>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d306      	bcc.n	800622c <USB_SetTurnaroundTime+0x40>
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	4a3b      	ldr	r2, [pc, #236]	@ (8006310 <USB_SetTurnaroundTime+0x124>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d202      	bcs.n	800622c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006226:	230e      	movs	r3, #14
 8006228:	617b      	str	r3, [r7, #20]
 800622a:	e057      	b.n	80062dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	4a38      	ldr	r2, [pc, #224]	@ (8006310 <USB_SetTurnaroundTime+0x124>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d306      	bcc.n	8006242 <USB_SetTurnaroundTime+0x56>
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	4a37      	ldr	r2, [pc, #220]	@ (8006314 <USB_SetTurnaroundTime+0x128>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d202      	bcs.n	8006242 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800623c:	230d      	movs	r3, #13
 800623e:	617b      	str	r3, [r7, #20]
 8006240:	e04c      	b.n	80062dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	4a33      	ldr	r2, [pc, #204]	@ (8006314 <USB_SetTurnaroundTime+0x128>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d306      	bcc.n	8006258 <USB_SetTurnaroundTime+0x6c>
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	4a32      	ldr	r2, [pc, #200]	@ (8006318 <USB_SetTurnaroundTime+0x12c>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d802      	bhi.n	8006258 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006252:	230c      	movs	r3, #12
 8006254:	617b      	str	r3, [r7, #20]
 8006256:	e041      	b.n	80062dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	4a2f      	ldr	r2, [pc, #188]	@ (8006318 <USB_SetTurnaroundTime+0x12c>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d906      	bls.n	800626e <USB_SetTurnaroundTime+0x82>
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	4a2e      	ldr	r2, [pc, #184]	@ (800631c <USB_SetTurnaroundTime+0x130>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d802      	bhi.n	800626e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006268:	230b      	movs	r3, #11
 800626a:	617b      	str	r3, [r7, #20]
 800626c:	e036      	b.n	80062dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	4a2a      	ldr	r2, [pc, #168]	@ (800631c <USB_SetTurnaroundTime+0x130>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d906      	bls.n	8006284 <USB_SetTurnaroundTime+0x98>
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	4a29      	ldr	r2, [pc, #164]	@ (8006320 <USB_SetTurnaroundTime+0x134>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d802      	bhi.n	8006284 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800627e:	230a      	movs	r3, #10
 8006280:	617b      	str	r3, [r7, #20]
 8006282:	e02b      	b.n	80062dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	4a26      	ldr	r2, [pc, #152]	@ (8006320 <USB_SetTurnaroundTime+0x134>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d906      	bls.n	800629a <USB_SetTurnaroundTime+0xae>
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	4a25      	ldr	r2, [pc, #148]	@ (8006324 <USB_SetTurnaroundTime+0x138>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d202      	bcs.n	800629a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006294:	2309      	movs	r3, #9
 8006296:	617b      	str	r3, [r7, #20]
 8006298:	e020      	b.n	80062dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	4a21      	ldr	r2, [pc, #132]	@ (8006324 <USB_SetTurnaroundTime+0x138>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d306      	bcc.n	80062b0 <USB_SetTurnaroundTime+0xc4>
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	4a20      	ldr	r2, [pc, #128]	@ (8006328 <USB_SetTurnaroundTime+0x13c>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d802      	bhi.n	80062b0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80062aa:	2308      	movs	r3, #8
 80062ac:	617b      	str	r3, [r7, #20]
 80062ae:	e015      	b.n	80062dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	4a1d      	ldr	r2, [pc, #116]	@ (8006328 <USB_SetTurnaroundTime+0x13c>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d906      	bls.n	80062c6 <USB_SetTurnaroundTime+0xda>
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	4a1c      	ldr	r2, [pc, #112]	@ (800632c <USB_SetTurnaroundTime+0x140>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d202      	bcs.n	80062c6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80062c0:	2307      	movs	r3, #7
 80062c2:	617b      	str	r3, [r7, #20]
 80062c4:	e00a      	b.n	80062dc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80062c6:	2306      	movs	r3, #6
 80062c8:	617b      	str	r3, [r7, #20]
 80062ca:	e007      	b.n	80062dc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80062cc:	79fb      	ldrb	r3, [r7, #7]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d102      	bne.n	80062d8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80062d2:	2309      	movs	r3, #9
 80062d4:	617b      	str	r3, [r7, #20]
 80062d6:	e001      	b.n	80062dc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80062d8:	2309      	movs	r3, #9
 80062da:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	68da      	ldr	r2, [r3, #12]
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	029b      	lsls	r3, r3, #10
 80062f0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80062f4:	431a      	orrs	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	371c      	adds	r7, #28
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr
 8006308:	00d8acbf 	.word	0x00d8acbf
 800630c:	00e4e1c0 	.word	0x00e4e1c0
 8006310:	00f42400 	.word	0x00f42400
 8006314:	01067380 	.word	0x01067380
 8006318:	011a499f 	.word	0x011a499f
 800631c:	01312cff 	.word	0x01312cff
 8006320:	014ca43f 	.word	0x014ca43f
 8006324:	016e3600 	.word	0x016e3600
 8006328:	01a6ab1f 	.word	0x01a6ab1f
 800632c:	01e84800 	.word	0x01e84800

08006330 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f043 0201 	orr.w	r2, r3, #1
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	370c      	adds	r7, #12
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr

08006352 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006352:	b480      	push	{r7}
 8006354:	b083      	sub	sp, #12
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f023 0201 	bic.w	r2, r3, #1
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	460b      	mov	r3, r1
 800637e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006380:	2300      	movs	r3, #0
 8006382:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006390:	78fb      	ldrb	r3, [r7, #3]
 8006392:	2b01      	cmp	r3, #1
 8006394:	d115      	bne.n	80063c2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80063a2:	2001      	movs	r0, #1
 80063a4:	f7fb fab8 	bl	8001918 <HAL_Delay>
      ms++;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	3301      	adds	r3, #1
 80063ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f001 fa3f 	bl	8007832 <USB_GetMode>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d01e      	beq.n	80063f8 <USB_SetCurrentMode+0x84>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2b31      	cmp	r3, #49	@ 0x31
 80063be:	d9f0      	bls.n	80063a2 <USB_SetCurrentMode+0x2e>
 80063c0:	e01a      	b.n	80063f8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80063c2:	78fb      	ldrb	r3, [r7, #3]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d115      	bne.n	80063f4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80063d4:	2001      	movs	r0, #1
 80063d6:	f7fb fa9f 	bl	8001918 <HAL_Delay>
      ms++;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	3301      	adds	r3, #1
 80063de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f001 fa26 	bl	8007832 <USB_GetMode>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d005      	beq.n	80063f8 <USB_SetCurrentMode+0x84>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2b31      	cmp	r3, #49	@ 0x31
 80063f0:	d9f0      	bls.n	80063d4 <USB_SetCurrentMode+0x60>
 80063f2:	e001      	b.n	80063f8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e005      	b.n	8006404 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2b32      	cmp	r3, #50	@ 0x32
 80063fc:	d101      	bne.n	8006402 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e000      	b.n	8006404 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800640c:	b084      	sub	sp, #16
 800640e:	b580      	push	{r7, lr}
 8006410:	b086      	sub	sp, #24
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
 8006416:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800641a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800641e:	2300      	movs	r3, #0
 8006420:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006426:	2300      	movs	r3, #0
 8006428:	613b      	str	r3, [r7, #16]
 800642a:	e009      	b.n	8006440 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	3340      	adds	r3, #64	@ 0x40
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	4413      	add	r3, r2
 8006436:	2200      	movs	r2, #0
 8006438:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	3301      	adds	r3, #1
 800643e:	613b      	str	r3, [r7, #16]
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	2b0e      	cmp	r3, #14
 8006444:	d9f2      	bls.n	800642c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006446:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006448:	2b00      	cmp	r3, #0
 800644a:	d11c      	bne.n	8006486 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800645a:	f043 0302 	orr.w	r3, r3, #2
 800645e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006464:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	601a      	str	r2, [r3, #0]
 8006484:	e005      	b.n	8006492 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800648a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006498:	461a      	mov	r2, r3
 800649a:	2300      	movs	r3, #0
 800649c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064a4:	4619      	mov	r1, r3
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064ac:	461a      	mov	r2, r3
 80064ae:	680b      	ldr	r3, [r1, #0]
 80064b0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80064b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d10c      	bne.n	80064d2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80064b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d104      	bne.n	80064c8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80064be:	2100      	movs	r1, #0
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 f965 	bl	8006790 <USB_SetDevSpeed>
 80064c6:	e008      	b.n	80064da <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80064c8:	2101      	movs	r1, #1
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 f960 	bl	8006790 <USB_SetDevSpeed>
 80064d0:	e003      	b.n	80064da <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80064d2:	2103      	movs	r1, #3
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 f95b 	bl	8006790 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80064da:	2110      	movs	r1, #16
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 f8f3 	bl	80066c8 <USB_FlushTxFifo>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d001      	beq.n	80064ec <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 f91f 	bl	8006730 <USB_FlushRxFifo>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d001      	beq.n	80064fc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006502:	461a      	mov	r2, r3
 8006504:	2300      	movs	r3, #0
 8006506:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800650e:	461a      	mov	r2, r3
 8006510:	2300      	movs	r3, #0
 8006512:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800651a:	461a      	mov	r2, r3
 800651c:	2300      	movs	r3, #0
 800651e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006520:	2300      	movs	r3, #0
 8006522:	613b      	str	r3, [r7, #16]
 8006524:	e043      	b.n	80065ae <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	015a      	lsls	r2, r3, #5
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	4413      	add	r3, r2
 800652e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006538:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800653c:	d118      	bne.n	8006570 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10a      	bne.n	800655a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	015a      	lsls	r2, r3, #5
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	4413      	add	r3, r2
 800654c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006550:	461a      	mov	r2, r3
 8006552:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006556:	6013      	str	r3, [r2, #0]
 8006558:	e013      	b.n	8006582 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	015a      	lsls	r2, r3, #5
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	4413      	add	r3, r2
 8006562:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006566:	461a      	mov	r2, r3
 8006568:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800656c:	6013      	str	r3, [r2, #0]
 800656e:	e008      	b.n	8006582 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	015a      	lsls	r2, r3, #5
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	4413      	add	r3, r2
 8006578:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800657c:	461a      	mov	r2, r3
 800657e:	2300      	movs	r3, #0
 8006580:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	015a      	lsls	r2, r3, #5
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	4413      	add	r3, r2
 800658a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800658e:	461a      	mov	r2, r3
 8006590:	2300      	movs	r3, #0
 8006592:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	015a      	lsls	r2, r3, #5
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	4413      	add	r3, r2
 800659c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065a0:	461a      	mov	r2, r3
 80065a2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80065a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	3301      	adds	r3, #1
 80065ac:	613b      	str	r3, [r7, #16]
 80065ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d3b7      	bcc.n	8006526 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065b6:	2300      	movs	r3, #0
 80065b8:	613b      	str	r3, [r7, #16]
 80065ba:	e043      	b.n	8006644 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	015a      	lsls	r2, r3, #5
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	4413      	add	r3, r2
 80065c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065d2:	d118      	bne.n	8006606 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d10a      	bne.n	80065f0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	015a      	lsls	r2, r3, #5
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	4413      	add	r3, r2
 80065e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065e6:	461a      	mov	r2, r3
 80065e8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80065ec:	6013      	str	r3, [r2, #0]
 80065ee:	e013      	b.n	8006618 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	015a      	lsls	r2, r3, #5
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065fc:	461a      	mov	r2, r3
 80065fe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006602:	6013      	str	r3, [r2, #0]
 8006604:	e008      	b.n	8006618 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	015a      	lsls	r2, r3, #5
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	4413      	add	r3, r2
 800660e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006612:	461a      	mov	r2, r3
 8006614:	2300      	movs	r3, #0
 8006616:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	015a      	lsls	r2, r3, #5
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	4413      	add	r3, r2
 8006620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006624:	461a      	mov	r2, r3
 8006626:	2300      	movs	r3, #0
 8006628:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	015a      	lsls	r2, r3, #5
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	4413      	add	r3, r2
 8006632:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006636:	461a      	mov	r2, r3
 8006638:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800663c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	3301      	adds	r3, #1
 8006642:	613b      	str	r3, [r7, #16]
 8006644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	429a      	cmp	r2, r3
 800664a:	d3b7      	bcc.n	80065bc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800665a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800665e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800666c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800666e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006670:	2b00      	cmp	r3, #0
 8006672:	d105      	bne.n	8006680 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	699b      	ldr	r3, [r3, #24]
 8006678:	f043 0210 	orr.w	r2, r3, #16
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	699a      	ldr	r2, [r3, #24]
 8006684:	4b0f      	ldr	r3, [pc, #60]	@ (80066c4 <USB_DevInit+0x2b8>)
 8006686:	4313      	orrs	r3, r2
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800668c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800668e:	2b00      	cmp	r3, #0
 8006690:	d005      	beq.n	800669e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	699b      	ldr	r3, [r3, #24]
 8006696:	f043 0208 	orr.w	r2, r3, #8
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800669e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d107      	bne.n	80066b4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	699b      	ldr	r3, [r3, #24]
 80066a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80066ac:	f043 0304 	orr.w	r3, r3, #4
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80066b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3718      	adds	r7, #24
 80066ba:	46bd      	mov	sp, r7
 80066bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066c0:	b004      	add	sp, #16
 80066c2:	4770      	bx	lr
 80066c4:	803c3800 	.word	0x803c3800

080066c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b085      	sub	sp, #20
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80066d2:	2300      	movs	r3, #0
 80066d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	3301      	adds	r3, #1
 80066da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	4a13      	ldr	r2, [pc, #76]	@ (800672c <USB_FlushTxFifo+0x64>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d901      	bls.n	80066e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80066e4:	2303      	movs	r3, #3
 80066e6:	e01b      	b.n	8006720 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	daf2      	bge.n	80066d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80066f0:	2300      	movs	r3, #0
 80066f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	019b      	lsls	r3, r3, #6
 80066f8:	f043 0220 	orr.w	r2, r3, #32
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	3301      	adds	r3, #1
 8006704:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	4a08      	ldr	r2, [pc, #32]	@ (800672c <USB_FlushTxFifo+0x64>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d901      	bls.n	8006712 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	e006      	b.n	8006720 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	f003 0320 	and.w	r3, r3, #32
 800671a:	2b20      	cmp	r3, #32
 800671c:	d0f0      	beq.n	8006700 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	3714      	adds	r7, #20
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr
 800672c:	00030d40 	.word	0x00030d40

08006730 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006730:	b480      	push	{r7}
 8006732:	b085      	sub	sp, #20
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006738:	2300      	movs	r3, #0
 800673a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	3301      	adds	r3, #1
 8006740:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	4a11      	ldr	r2, [pc, #68]	@ (800678c <USB_FlushRxFifo+0x5c>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d901      	bls.n	800674e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e018      	b.n	8006780 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	2b00      	cmp	r3, #0
 8006754:	daf2      	bge.n	800673c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006756:	2300      	movs	r3, #0
 8006758:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2210      	movs	r2, #16
 800675e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	3301      	adds	r3, #1
 8006764:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	4a08      	ldr	r2, [pc, #32]	@ (800678c <USB_FlushRxFifo+0x5c>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d901      	bls.n	8006772 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800676e:	2303      	movs	r3, #3
 8006770:	e006      	b.n	8006780 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	f003 0310 	and.w	r3, r3, #16
 800677a:	2b10      	cmp	r3, #16
 800677c:	d0f0      	beq.n	8006760 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3714      	adds	r7, #20
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr
 800678c:	00030d40 	.word	0x00030d40

08006790 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	460b      	mov	r3, r1
 800679a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	78fb      	ldrb	r3, [r7, #3]
 80067aa:	68f9      	ldr	r1, [r7, #12]
 80067ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80067b0:	4313      	orrs	r3, r2
 80067b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3714      	adds	r7, #20
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr

080067c2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80067c2:	b480      	push	{r7}
 80067c4:	b087      	sub	sp, #28
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	f003 0306 	and.w	r3, r3, #6
 80067da:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d102      	bne.n	80067e8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80067e2:	2300      	movs	r3, #0
 80067e4:	75fb      	strb	r3, [r7, #23]
 80067e6:	e00a      	b.n	80067fe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d002      	beq.n	80067f4 <USB_GetDevSpeed+0x32>
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2b06      	cmp	r3, #6
 80067f2:	d102      	bne.n	80067fa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80067f4:	2302      	movs	r3, #2
 80067f6:	75fb      	strb	r3, [r7, #23]
 80067f8:	e001      	b.n	80067fe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80067fa:	230f      	movs	r3, #15
 80067fc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80067fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006800:	4618      	mov	r0, r3
 8006802:	371c      	adds	r7, #28
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	785b      	ldrb	r3, [r3, #1]
 8006824:	2b01      	cmp	r3, #1
 8006826:	d13a      	bne.n	800689e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800682e:	69da      	ldr	r2, [r3, #28]
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	f003 030f 	and.w	r3, r3, #15
 8006838:	2101      	movs	r1, #1
 800683a:	fa01 f303 	lsl.w	r3, r1, r3
 800683e:	b29b      	uxth	r3, r3
 8006840:	68f9      	ldr	r1, [r7, #12]
 8006842:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006846:	4313      	orrs	r3, r2
 8006848:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	015a      	lsls	r2, r3, #5
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	4413      	add	r3, r2
 8006852:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800685c:	2b00      	cmp	r3, #0
 800685e:	d155      	bne.n	800690c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	015a      	lsls	r2, r3, #5
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	4413      	add	r3, r2
 8006868:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	791b      	ldrb	r3, [r3, #4]
 800687a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800687c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	059b      	lsls	r3, r3, #22
 8006882:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006884:	4313      	orrs	r3, r2
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	0151      	lsls	r1, r2, #5
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	440a      	add	r2, r1
 800688e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006892:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006896:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800689a:	6013      	str	r3, [r2, #0]
 800689c:	e036      	b.n	800690c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068a4:	69da      	ldr	r2, [r3, #28]
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	f003 030f 	and.w	r3, r3, #15
 80068ae:	2101      	movs	r1, #1
 80068b0:	fa01 f303 	lsl.w	r3, r1, r3
 80068b4:	041b      	lsls	r3, r3, #16
 80068b6:	68f9      	ldr	r1, [r7, #12]
 80068b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80068bc:	4313      	orrs	r3, r2
 80068be:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	015a      	lsls	r2, r3, #5
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	4413      	add	r3, r2
 80068c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d11a      	bne.n	800690c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	015a      	lsls	r2, r3, #5
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	4413      	add	r3, r2
 80068de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	791b      	ldrb	r3, [r3, #4]
 80068f0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80068f2:	430b      	orrs	r3, r1
 80068f4:	4313      	orrs	r3, r2
 80068f6:	68ba      	ldr	r2, [r7, #8]
 80068f8:	0151      	lsls	r1, r2, #5
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	440a      	add	r2, r1
 80068fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006902:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006906:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800690a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3714      	adds	r7, #20
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr
	...

0800691c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800691c:	b480      	push	{r7}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	785b      	ldrb	r3, [r3, #1]
 8006934:	2b01      	cmp	r3, #1
 8006936:	d161      	bne.n	80069fc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	015a      	lsls	r2, r3, #5
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	4413      	add	r3, r2
 8006940:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800694a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800694e:	d11f      	bne.n	8006990 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	015a      	lsls	r2, r3, #5
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	4413      	add	r3, r2
 8006958:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	0151      	lsls	r1, r2, #5
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	440a      	add	r2, r1
 8006966:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800696a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800696e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	015a      	lsls	r2, r3, #5
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	4413      	add	r3, r2
 8006978:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68ba      	ldr	r2, [r7, #8]
 8006980:	0151      	lsls	r1, r2, #5
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	440a      	add	r2, r1
 8006986:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800698a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800698e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006996:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	f003 030f 	and.w	r3, r3, #15
 80069a0:	2101      	movs	r1, #1
 80069a2:	fa01 f303 	lsl.w	r3, r1, r3
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	43db      	mvns	r3, r3
 80069aa:	68f9      	ldr	r1, [r7, #12]
 80069ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80069b0:	4013      	ands	r3, r2
 80069b2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069ba:	69da      	ldr	r2, [r3, #28]
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	f003 030f 	and.w	r3, r3, #15
 80069c4:	2101      	movs	r1, #1
 80069c6:	fa01 f303 	lsl.w	r3, r1, r3
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	43db      	mvns	r3, r3
 80069ce:	68f9      	ldr	r1, [r7, #12]
 80069d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80069d4:	4013      	ands	r3, r2
 80069d6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	015a      	lsls	r2, r3, #5
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	4413      	add	r3, r2
 80069e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	0159      	lsls	r1, r3, #5
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	440b      	add	r3, r1
 80069ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069f2:	4619      	mov	r1, r3
 80069f4:	4b35      	ldr	r3, [pc, #212]	@ (8006acc <USB_DeactivateEndpoint+0x1b0>)
 80069f6:	4013      	ands	r3, r2
 80069f8:	600b      	str	r3, [r1, #0]
 80069fa:	e060      	b.n	8006abe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	015a      	lsls	r2, r3, #5
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	4413      	add	r3, r2
 8006a04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a12:	d11f      	bne.n	8006a54 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	015a      	lsls	r2, r3, #5
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68ba      	ldr	r2, [r7, #8]
 8006a24:	0151      	lsls	r1, r2, #5
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	440a      	add	r2, r1
 8006a2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a2e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006a32:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	015a      	lsls	r2, r3, #5
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	4413      	add	r3, r2
 8006a3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	0151      	lsls	r1, r2, #5
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	440a      	add	r2, r1
 8006a4a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a4e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006a52:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	f003 030f 	and.w	r3, r3, #15
 8006a64:	2101      	movs	r1, #1
 8006a66:	fa01 f303 	lsl.w	r3, r1, r3
 8006a6a:	041b      	lsls	r3, r3, #16
 8006a6c:	43db      	mvns	r3, r3
 8006a6e:	68f9      	ldr	r1, [r7, #12]
 8006a70:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a74:	4013      	ands	r3, r2
 8006a76:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a7e:	69da      	ldr	r2, [r3, #28]
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	f003 030f 	and.w	r3, r3, #15
 8006a88:	2101      	movs	r1, #1
 8006a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a8e:	041b      	lsls	r3, r3, #16
 8006a90:	43db      	mvns	r3, r3
 8006a92:	68f9      	ldr	r1, [r7, #12]
 8006a94:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a98:	4013      	ands	r3, r2
 8006a9a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	015a      	lsls	r2, r3, #5
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	0159      	lsls	r1, r3, #5
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	440b      	add	r3, r1
 8006ab2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	4b05      	ldr	r3, [pc, #20]	@ (8006ad0 <USB_DeactivateEndpoint+0x1b4>)
 8006aba:	4013      	ands	r3, r2
 8006abc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3714      	adds	r7, #20
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr
 8006acc:	ec337800 	.word	0xec337800
 8006ad0:	eff37800 	.word	0xeff37800

08006ad4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b08a      	sub	sp, #40	@ 0x28
 8006ad8:	af02      	add	r7, sp, #8
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	4613      	mov	r3, r2
 8006ae0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	785b      	ldrb	r3, [r3, #1]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	f040 815c 	bne.w	8006dae <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d132      	bne.n	8006b64 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	015a      	lsls	r2, r3, #5
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	4413      	add	r3, r2
 8006b06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b0a:	691b      	ldr	r3, [r3, #16]
 8006b0c:	69ba      	ldr	r2, [r7, #24]
 8006b0e:	0151      	lsls	r1, r2, #5
 8006b10:	69fa      	ldr	r2, [r7, #28]
 8006b12:	440a      	add	r2, r1
 8006b14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b18:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006b1c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006b20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	015a      	lsls	r2, r3, #5
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	4413      	add	r3, r2
 8006b2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	69ba      	ldr	r2, [r7, #24]
 8006b32:	0151      	lsls	r1, r2, #5
 8006b34:	69fa      	ldr	r2, [r7, #28]
 8006b36:	440a      	add	r2, r1
 8006b38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b3c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006b40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	015a      	lsls	r2, r3, #5
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	4413      	add	r3, r2
 8006b4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	69ba      	ldr	r2, [r7, #24]
 8006b52:	0151      	lsls	r1, r2, #5
 8006b54:	69fa      	ldr	r2, [r7, #28]
 8006b56:	440a      	add	r2, r1
 8006b58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b5c:	0cdb      	lsrs	r3, r3, #19
 8006b5e:	04db      	lsls	r3, r3, #19
 8006b60:	6113      	str	r3, [r2, #16]
 8006b62:	e074      	b.n	8006c4e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	015a      	lsls	r2, r3, #5
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	69ba      	ldr	r2, [r7, #24]
 8006b74:	0151      	lsls	r1, r2, #5
 8006b76:	69fa      	ldr	r2, [r7, #28]
 8006b78:	440a      	add	r2, r1
 8006b7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b7e:	0cdb      	lsrs	r3, r3, #19
 8006b80:	04db      	lsls	r3, r3, #19
 8006b82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	015a      	lsls	r2, r3, #5
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	69ba      	ldr	r2, [r7, #24]
 8006b94:	0151      	lsls	r1, r2, #5
 8006b96:	69fa      	ldr	r2, [r7, #28]
 8006b98:	440a      	add	r2, r1
 8006b9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b9e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006ba2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006ba6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	015a      	lsls	r2, r3, #5
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	4413      	add	r3, r2
 8006bb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bb4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	6999      	ldr	r1, [r3, #24]
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	440b      	add	r3, r1
 8006bc0:	1e59      	subs	r1, r3, #1
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8006bca:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006bcc:	4b9d      	ldr	r3, [pc, #628]	@ (8006e44 <USB_EPStartXfer+0x370>)
 8006bce:	400b      	ands	r3, r1
 8006bd0:	69b9      	ldr	r1, [r7, #24]
 8006bd2:	0148      	lsls	r0, r1, #5
 8006bd4:	69f9      	ldr	r1, [r7, #28]
 8006bd6:	4401      	add	r1, r0
 8006bd8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	015a      	lsls	r2, r3, #5
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	4413      	add	r3, r2
 8006be8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bec:	691a      	ldr	r2, [r3, #16]
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	699b      	ldr	r3, [r3, #24]
 8006bf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bf6:	69b9      	ldr	r1, [r7, #24]
 8006bf8:	0148      	lsls	r0, r1, #5
 8006bfa:	69f9      	ldr	r1, [r7, #28]
 8006bfc:	4401      	add	r1, r0
 8006bfe:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006c02:	4313      	orrs	r3, r2
 8006c04:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	791b      	ldrb	r3, [r3, #4]
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d11f      	bne.n	8006c4e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	015a      	lsls	r2, r3, #5
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	4413      	add	r3, r2
 8006c16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	69ba      	ldr	r2, [r7, #24]
 8006c1e:	0151      	lsls	r1, r2, #5
 8006c20:	69fa      	ldr	r2, [r7, #28]
 8006c22:	440a      	add	r2, r1
 8006c24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c28:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006c2c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	015a      	lsls	r2, r3, #5
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	4413      	add	r3, r2
 8006c36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c3a:	691b      	ldr	r3, [r3, #16]
 8006c3c:	69ba      	ldr	r2, [r7, #24]
 8006c3e:	0151      	lsls	r1, r2, #5
 8006c40:	69fa      	ldr	r2, [r7, #28]
 8006c42:	440a      	add	r2, r1
 8006c44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c48:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006c4c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006c4e:	79fb      	ldrb	r3, [r7, #7]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d14b      	bne.n	8006cec <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	695b      	ldr	r3, [r3, #20]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d009      	beq.n	8006c70 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	015a      	lsls	r2, r3, #5
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	4413      	add	r3, r2
 8006c64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c68:	461a      	mov	r2, r3
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	695b      	ldr	r3, [r3, #20]
 8006c6e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	791b      	ldrb	r3, [r3, #4]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d128      	bne.n	8006cca <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d110      	bne.n	8006caa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	015a      	lsls	r2, r3, #5
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	4413      	add	r3, r2
 8006c90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	69ba      	ldr	r2, [r7, #24]
 8006c98:	0151      	lsls	r1, r2, #5
 8006c9a:	69fa      	ldr	r2, [r7, #28]
 8006c9c:	440a      	add	r2, r1
 8006c9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ca2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006ca6:	6013      	str	r3, [r2, #0]
 8006ca8:	e00f      	b.n	8006cca <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	015a      	lsls	r2, r3, #5
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	69ba      	ldr	r2, [r7, #24]
 8006cba:	0151      	lsls	r1, r2, #5
 8006cbc:	69fa      	ldr	r2, [r7, #28]
 8006cbe:	440a      	add	r2, r1
 8006cc0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006cc8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	015a      	lsls	r2, r3, #5
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	69ba      	ldr	r2, [r7, #24]
 8006cda:	0151      	lsls	r1, r2, #5
 8006cdc:	69fa      	ldr	r2, [r7, #28]
 8006cde:	440a      	add	r2, r1
 8006ce0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ce4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006ce8:	6013      	str	r3, [r2, #0]
 8006cea:	e133      	b.n	8006f54 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	015a      	lsls	r2, r3, #5
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	69ba      	ldr	r2, [r7, #24]
 8006cfc:	0151      	lsls	r1, r2, #5
 8006cfe:	69fa      	ldr	r2, [r7, #28]
 8006d00:	440a      	add	r2, r1
 8006d02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d06:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006d0a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	791b      	ldrb	r3, [r3, #4]
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d015      	beq.n	8006d40 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	699b      	ldr	r3, [r3, #24]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f000 811b 	beq.w	8006f54 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	f003 030f 	and.w	r3, r3, #15
 8006d2e:	2101      	movs	r1, #1
 8006d30:	fa01 f303 	lsl.w	r3, r1, r3
 8006d34:	69f9      	ldr	r1, [r7, #28]
 8006d36:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	634b      	str	r3, [r1, #52]	@ 0x34
 8006d3e:	e109      	b.n	8006f54 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d110      	bne.n	8006d72 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	015a      	lsls	r2, r3, #5
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	4413      	add	r3, r2
 8006d58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	69ba      	ldr	r2, [r7, #24]
 8006d60:	0151      	lsls	r1, r2, #5
 8006d62:	69fa      	ldr	r2, [r7, #28]
 8006d64:	440a      	add	r2, r1
 8006d66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d6a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006d6e:	6013      	str	r3, [r2, #0]
 8006d70:	e00f      	b.n	8006d92 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	015a      	lsls	r2, r3, #5
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	4413      	add	r3, r2
 8006d7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	69ba      	ldr	r2, [r7, #24]
 8006d82:	0151      	lsls	r1, r2, #5
 8006d84:	69fa      	ldr	r2, [r7, #28]
 8006d86:	440a      	add	r2, r1
 8006d88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d90:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	6919      	ldr	r1, [r3, #16]
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	781a      	ldrb	r2, [r3, #0]
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	b298      	uxth	r0, r3
 8006da0:	79fb      	ldrb	r3, [r7, #7]
 8006da2:	9300      	str	r3, [sp, #0]
 8006da4:	4603      	mov	r3, r0
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f000 fade 	bl	8007368 <USB_WritePacket>
 8006dac:	e0d2      	b.n	8006f54 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006dae:	69bb      	ldr	r3, [r7, #24]
 8006db0:	015a      	lsls	r2, r3, #5
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	4413      	add	r3, r2
 8006db6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	69ba      	ldr	r2, [r7, #24]
 8006dbe:	0151      	lsls	r1, r2, #5
 8006dc0:	69fa      	ldr	r2, [r7, #28]
 8006dc2:	440a      	add	r2, r1
 8006dc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006dc8:	0cdb      	lsrs	r3, r3, #19
 8006dca:	04db      	lsls	r3, r3, #19
 8006dcc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	015a      	lsls	r2, r3, #5
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	69ba      	ldr	r2, [r7, #24]
 8006dde:	0151      	lsls	r1, r2, #5
 8006de0:	69fa      	ldr	r2, [r7, #28]
 8006de2:	440a      	add	r2, r1
 8006de4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006de8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006dec:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006df0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	699b      	ldr	r3, [r3, #24]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d126      	bne.n	8006e48 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	015a      	lsls	r2, r3, #5
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	4413      	add	r3, r2
 8006e02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e06:	691a      	ldr	r2, [r3, #16]
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e10:	69b9      	ldr	r1, [r7, #24]
 8006e12:	0148      	lsls	r0, r1, #5
 8006e14:	69f9      	ldr	r1, [r7, #28]
 8006e16:	4401      	add	r1, r0
 8006e18:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	015a      	lsls	r2, r3, #5
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	4413      	add	r3, r2
 8006e28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	69ba      	ldr	r2, [r7, #24]
 8006e30:	0151      	lsls	r1, r2, #5
 8006e32:	69fa      	ldr	r2, [r7, #28]
 8006e34:	440a      	add	r2, r1
 8006e36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e3a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006e3e:	6113      	str	r3, [r2, #16]
 8006e40:	e03a      	b.n	8006eb8 <USB_EPStartXfer+0x3e4>
 8006e42:	bf00      	nop
 8006e44:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	699a      	ldr	r2, [r3, #24]
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	4413      	add	r3, r2
 8006e52:	1e5a      	subs	r2, r3, #1
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e5c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	8afa      	ldrh	r2, [r7, #22]
 8006e64:	fb03 f202 	mul.w	r2, r3, r2
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	015a      	lsls	r2, r3, #5
 8006e70:	69fb      	ldr	r3, [r7, #28]
 8006e72:	4413      	add	r3, r2
 8006e74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e78:	691a      	ldr	r2, [r3, #16]
 8006e7a:	8afb      	ldrh	r3, [r7, #22]
 8006e7c:	04d9      	lsls	r1, r3, #19
 8006e7e:	4b38      	ldr	r3, [pc, #224]	@ (8006f60 <USB_EPStartXfer+0x48c>)
 8006e80:	400b      	ands	r3, r1
 8006e82:	69b9      	ldr	r1, [r7, #24]
 8006e84:	0148      	lsls	r0, r1, #5
 8006e86:	69f9      	ldr	r1, [r7, #28]
 8006e88:	4401      	add	r1, r0
 8006e8a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	015a      	lsls	r2, r3, #5
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	4413      	add	r3, r2
 8006e9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e9e:	691a      	ldr	r2, [r3, #16]
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	69db      	ldr	r3, [r3, #28]
 8006ea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ea8:	69b9      	ldr	r1, [r7, #24]
 8006eaa:	0148      	lsls	r0, r1, #5
 8006eac:	69f9      	ldr	r1, [r7, #28]
 8006eae:	4401      	add	r1, r0
 8006eb0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006eb8:	79fb      	ldrb	r3, [r7, #7]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d10d      	bne.n	8006eda <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d009      	beq.n	8006eda <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	6919      	ldr	r1, [r3, #16]
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	015a      	lsls	r2, r3, #5
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ed6:	460a      	mov	r2, r1
 8006ed8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	791b      	ldrb	r3, [r3, #4]
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d128      	bne.n	8006f34 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d110      	bne.n	8006f14 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	015a      	lsls	r2, r3, #5
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	4413      	add	r3, r2
 8006efa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	69ba      	ldr	r2, [r7, #24]
 8006f02:	0151      	lsls	r1, r2, #5
 8006f04:	69fa      	ldr	r2, [r7, #28]
 8006f06:	440a      	add	r2, r1
 8006f08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f0c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006f10:	6013      	str	r3, [r2, #0]
 8006f12:	e00f      	b.n	8006f34 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	015a      	lsls	r2, r3, #5
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	4413      	add	r3, r2
 8006f1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	69ba      	ldr	r2, [r7, #24]
 8006f24:	0151      	lsls	r1, r2, #5
 8006f26:	69fa      	ldr	r2, [r7, #28]
 8006f28:	440a      	add	r2, r1
 8006f2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f32:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	015a      	lsls	r2, r3, #5
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	4413      	add	r3, r2
 8006f3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	69ba      	ldr	r2, [r7, #24]
 8006f44:	0151      	lsls	r1, r2, #5
 8006f46:	69fa      	ldr	r2, [r7, #28]
 8006f48:	440a      	add	r2, r1
 8006f4a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f4e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006f52:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3720      	adds	r7, #32
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	1ff80000 	.word	0x1ff80000

08006f64 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b087      	sub	sp, #28
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	4613      	mov	r3, r2
 8006f70:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	785b      	ldrb	r3, [r3, #1]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	f040 80ce 	bne.w	8007122 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	699b      	ldr	r3, [r3, #24]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d132      	bne.n	8006ff4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	015a      	lsls	r2, r3, #5
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	4413      	add	r3, r2
 8006f96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f9a:	691b      	ldr	r3, [r3, #16]
 8006f9c:	693a      	ldr	r2, [r7, #16]
 8006f9e:	0151      	lsls	r1, r2, #5
 8006fa0:	697a      	ldr	r2, [r7, #20]
 8006fa2:	440a      	add	r2, r1
 8006fa4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fa8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006fac:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006fb0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	015a      	lsls	r2, r3, #5
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	4413      	add	r3, r2
 8006fba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	0151      	lsls	r1, r2, #5
 8006fc4:	697a      	ldr	r2, [r7, #20]
 8006fc6:	440a      	add	r2, r1
 8006fc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fcc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006fd0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	015a      	lsls	r2, r3, #5
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	4413      	add	r3, r2
 8006fda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	693a      	ldr	r2, [r7, #16]
 8006fe2:	0151      	lsls	r1, r2, #5
 8006fe4:	697a      	ldr	r2, [r7, #20]
 8006fe6:	440a      	add	r2, r1
 8006fe8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fec:	0cdb      	lsrs	r3, r3, #19
 8006fee:	04db      	lsls	r3, r3, #19
 8006ff0:	6113      	str	r3, [r2, #16]
 8006ff2:	e04e      	b.n	8007092 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	015a      	lsls	r2, r3, #5
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	0151      	lsls	r1, r2, #5
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	440a      	add	r2, r1
 800700a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800700e:	0cdb      	lsrs	r3, r3, #19
 8007010:	04db      	lsls	r3, r3, #19
 8007012:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	015a      	lsls	r2, r3, #5
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	4413      	add	r3, r2
 800701c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	693a      	ldr	r2, [r7, #16]
 8007024:	0151      	lsls	r1, r2, #5
 8007026:	697a      	ldr	r2, [r7, #20]
 8007028:	440a      	add	r2, r1
 800702a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800702e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007032:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007036:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	699a      	ldr	r2, [r3, #24]
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	429a      	cmp	r2, r3
 8007042:	d903      	bls.n	800704c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	68da      	ldr	r2, [r3, #12]
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	015a      	lsls	r2, r3, #5
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	4413      	add	r3, r2
 8007054:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	693a      	ldr	r2, [r7, #16]
 800705c:	0151      	lsls	r1, r2, #5
 800705e:	697a      	ldr	r2, [r7, #20]
 8007060:	440a      	add	r2, r1
 8007062:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007066:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800706a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	015a      	lsls	r2, r3, #5
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	4413      	add	r3, r2
 8007074:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007078:	691a      	ldr	r2, [r3, #16]
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	699b      	ldr	r3, [r3, #24]
 800707e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007082:	6939      	ldr	r1, [r7, #16]
 8007084:	0148      	lsls	r0, r1, #5
 8007086:	6979      	ldr	r1, [r7, #20]
 8007088:	4401      	add	r1, r0
 800708a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800708e:	4313      	orrs	r3, r2
 8007090:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007092:	79fb      	ldrb	r3, [r7, #7]
 8007094:	2b01      	cmp	r3, #1
 8007096:	d11e      	bne.n	80070d6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	695b      	ldr	r3, [r3, #20]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d009      	beq.n	80070b4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	015a      	lsls	r2, r3, #5
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	4413      	add	r3, r2
 80070a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070ac:	461a      	mov	r2, r3
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	695b      	ldr	r3, [r3, #20]
 80070b2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	015a      	lsls	r2, r3, #5
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	4413      	add	r3, r2
 80070bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	693a      	ldr	r2, [r7, #16]
 80070c4:	0151      	lsls	r1, r2, #5
 80070c6:	697a      	ldr	r2, [r7, #20]
 80070c8:	440a      	add	r2, r1
 80070ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070ce:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80070d2:	6013      	str	r3, [r2, #0]
 80070d4:	e097      	b.n	8007206 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	015a      	lsls	r2, r3, #5
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	4413      	add	r3, r2
 80070de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	693a      	ldr	r2, [r7, #16]
 80070e6:	0151      	lsls	r1, r2, #5
 80070e8:	697a      	ldr	r2, [r7, #20]
 80070ea:	440a      	add	r2, r1
 80070ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070f0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80070f4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	699b      	ldr	r3, [r3, #24]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	f000 8083 	beq.w	8007206 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007106:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	f003 030f 	and.w	r3, r3, #15
 8007110:	2101      	movs	r1, #1
 8007112:	fa01 f303 	lsl.w	r3, r1, r3
 8007116:	6979      	ldr	r1, [r7, #20]
 8007118:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800711c:	4313      	orrs	r3, r2
 800711e:	634b      	str	r3, [r1, #52]	@ 0x34
 8007120:	e071      	b.n	8007206 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	015a      	lsls	r2, r3, #5
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	4413      	add	r3, r2
 800712a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	693a      	ldr	r2, [r7, #16]
 8007132:	0151      	lsls	r1, r2, #5
 8007134:	697a      	ldr	r2, [r7, #20]
 8007136:	440a      	add	r2, r1
 8007138:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800713c:	0cdb      	lsrs	r3, r3, #19
 800713e:	04db      	lsls	r3, r3, #19
 8007140:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	015a      	lsls	r2, r3, #5
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	4413      	add	r3, r2
 800714a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	693a      	ldr	r2, [r7, #16]
 8007152:	0151      	lsls	r1, r2, #5
 8007154:	697a      	ldr	r2, [r7, #20]
 8007156:	440a      	add	r2, r1
 8007158:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800715c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007160:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007164:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	699b      	ldr	r3, [r3, #24]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d003      	beq.n	8007176 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	68da      	ldr	r2, [r3, #12]
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	68da      	ldr	r2, [r3, #12]
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	015a      	lsls	r2, r3, #5
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	4413      	add	r3, r2
 8007186:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	693a      	ldr	r2, [r7, #16]
 800718e:	0151      	lsls	r1, r2, #5
 8007190:	697a      	ldr	r2, [r7, #20]
 8007192:	440a      	add	r2, r1
 8007194:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007198:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800719c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	015a      	lsls	r2, r3, #5
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	4413      	add	r3, r2
 80071a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071aa:	691a      	ldr	r2, [r3, #16]
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	69db      	ldr	r3, [r3, #28]
 80071b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071b4:	6939      	ldr	r1, [r7, #16]
 80071b6:	0148      	lsls	r0, r1, #5
 80071b8:	6979      	ldr	r1, [r7, #20]
 80071ba:	4401      	add	r1, r0
 80071bc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80071c0:	4313      	orrs	r3, r2
 80071c2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80071c4:	79fb      	ldrb	r3, [r7, #7]
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d10d      	bne.n	80071e6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d009      	beq.n	80071e6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	6919      	ldr	r1, [r3, #16]
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	015a      	lsls	r2, r3, #5
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	4413      	add	r3, r2
 80071de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071e2:	460a      	mov	r2, r1
 80071e4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	015a      	lsls	r2, r3, #5
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	4413      	add	r3, r2
 80071ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	693a      	ldr	r2, [r7, #16]
 80071f6:	0151      	lsls	r1, r2, #5
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	440a      	add	r2, r1
 80071fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007200:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007204:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	371c      	adds	r7, #28
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007214:	b480      	push	{r7}
 8007216:	b087      	sub	sp, #28
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800721e:	2300      	movs	r3, #0
 8007220:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007222:	2300      	movs	r3, #0
 8007224:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	785b      	ldrb	r3, [r3, #1]
 800722e:	2b01      	cmp	r3, #1
 8007230:	d14a      	bne.n	80072c8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	015a      	lsls	r2, r3, #5
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	4413      	add	r3, r2
 800723c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007246:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800724a:	f040 8086 	bne.w	800735a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	015a      	lsls	r2, r3, #5
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	4413      	add	r3, r2
 8007258:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	683a      	ldr	r2, [r7, #0]
 8007260:	7812      	ldrb	r2, [r2, #0]
 8007262:	0151      	lsls	r1, r2, #5
 8007264:	693a      	ldr	r2, [r7, #16]
 8007266:	440a      	add	r2, r1
 8007268:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800726c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007270:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	015a      	lsls	r2, r3, #5
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	4413      	add	r3, r2
 800727c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	683a      	ldr	r2, [r7, #0]
 8007284:	7812      	ldrb	r2, [r2, #0]
 8007286:	0151      	lsls	r1, r2, #5
 8007288:	693a      	ldr	r2, [r7, #16]
 800728a:	440a      	add	r2, r1
 800728c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007290:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007294:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	3301      	adds	r3, #1
 800729a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f242 7210 	movw	r2, #10000	@ 0x2710
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d902      	bls.n	80072ac <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	75fb      	strb	r3, [r7, #23]
          break;
 80072aa:	e056      	b.n	800735a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	015a      	lsls	r2, r3, #5
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	4413      	add	r3, r2
 80072b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80072c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072c4:	d0e7      	beq.n	8007296 <USB_EPStopXfer+0x82>
 80072c6:	e048      	b.n	800735a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	015a      	lsls	r2, r3, #5
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	4413      	add	r3, r2
 80072d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80072dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072e0:	d13b      	bne.n	800735a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	015a      	lsls	r2, r3, #5
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	4413      	add	r3, r2
 80072ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	683a      	ldr	r2, [r7, #0]
 80072f4:	7812      	ldrb	r2, [r2, #0]
 80072f6:	0151      	lsls	r1, r2, #5
 80072f8:	693a      	ldr	r2, [r7, #16]
 80072fa:	440a      	add	r2, r1
 80072fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007300:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007304:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	015a      	lsls	r2, r3, #5
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	4413      	add	r3, r2
 8007310:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	683a      	ldr	r2, [r7, #0]
 8007318:	7812      	ldrb	r2, [r2, #0]
 800731a:	0151      	lsls	r1, r2, #5
 800731c:	693a      	ldr	r2, [r7, #16]
 800731e:	440a      	add	r2, r1
 8007320:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007324:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007328:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	3301      	adds	r3, #1
 800732e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007336:	4293      	cmp	r3, r2
 8007338:	d902      	bls.n	8007340 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	75fb      	strb	r3, [r7, #23]
          break;
 800733e:	e00c      	b.n	800735a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	015a      	lsls	r2, r3, #5
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	4413      	add	r3, r2
 800734a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007354:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007358:	d0e7      	beq.n	800732a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800735a:	7dfb      	ldrb	r3, [r7, #23]
}
 800735c:	4618      	mov	r0, r3
 800735e:	371c      	adds	r7, #28
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007368:	b480      	push	{r7}
 800736a:	b089      	sub	sp, #36	@ 0x24
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	4611      	mov	r1, r2
 8007374:	461a      	mov	r2, r3
 8007376:	460b      	mov	r3, r1
 8007378:	71fb      	strb	r3, [r7, #7]
 800737a:	4613      	mov	r3, r2
 800737c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007386:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800738a:	2b00      	cmp	r3, #0
 800738c:	d123      	bne.n	80073d6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800738e:	88bb      	ldrh	r3, [r7, #4]
 8007390:	3303      	adds	r3, #3
 8007392:	089b      	lsrs	r3, r3, #2
 8007394:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007396:	2300      	movs	r3, #0
 8007398:	61bb      	str	r3, [r7, #24]
 800739a:	e018      	b.n	80073ce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800739c:	79fb      	ldrb	r3, [r7, #7]
 800739e:	031a      	lsls	r2, r3, #12
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	4413      	add	r3, r2
 80073a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073a8:	461a      	mov	r2, r3
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	6013      	str	r3, [r2, #0]
      pSrc++;
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	3301      	adds	r3, #1
 80073b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	3301      	adds	r3, #1
 80073ba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	3301      	adds	r3, #1
 80073c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	3301      	adds	r3, #1
 80073c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	3301      	adds	r3, #1
 80073cc:	61bb      	str	r3, [r7, #24]
 80073ce:	69ba      	ldr	r2, [r7, #24]
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d3e2      	bcc.n	800739c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3724      	adds	r7, #36	@ 0x24
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b08b      	sub	sp, #44	@ 0x2c
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	4613      	mov	r3, r2
 80073f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80073fa:	88fb      	ldrh	r3, [r7, #6]
 80073fc:	089b      	lsrs	r3, r3, #2
 80073fe:	b29b      	uxth	r3, r3
 8007400:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007402:	88fb      	ldrh	r3, [r7, #6]
 8007404:	f003 0303 	and.w	r3, r3, #3
 8007408:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800740a:	2300      	movs	r3, #0
 800740c:	623b      	str	r3, [r7, #32]
 800740e:	e014      	b.n	800743a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800741a:	601a      	str	r2, [r3, #0]
    pDest++;
 800741c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800741e:	3301      	adds	r3, #1
 8007420:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007424:	3301      	adds	r3, #1
 8007426:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800742a:	3301      	adds	r3, #1
 800742c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800742e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007430:	3301      	adds	r3, #1
 8007432:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007434:	6a3b      	ldr	r3, [r7, #32]
 8007436:	3301      	adds	r3, #1
 8007438:	623b      	str	r3, [r7, #32]
 800743a:	6a3a      	ldr	r2, [r7, #32]
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	429a      	cmp	r2, r3
 8007440:	d3e6      	bcc.n	8007410 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007442:	8bfb      	ldrh	r3, [r7, #30]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d01e      	beq.n	8007486 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007448:	2300      	movs	r3, #0
 800744a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800744c:	69bb      	ldr	r3, [r7, #24]
 800744e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007452:	461a      	mov	r2, r3
 8007454:	f107 0310 	add.w	r3, r7, #16
 8007458:	6812      	ldr	r2, [r2, #0]
 800745a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800745c:	693a      	ldr	r2, [r7, #16]
 800745e:	6a3b      	ldr	r3, [r7, #32]
 8007460:	b2db      	uxtb	r3, r3
 8007462:	00db      	lsls	r3, r3, #3
 8007464:	fa22 f303 	lsr.w	r3, r2, r3
 8007468:	b2da      	uxtb	r2, r3
 800746a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800746c:	701a      	strb	r2, [r3, #0]
      i++;
 800746e:	6a3b      	ldr	r3, [r7, #32]
 8007470:	3301      	adds	r3, #1
 8007472:	623b      	str	r3, [r7, #32]
      pDest++;
 8007474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007476:	3301      	adds	r3, #1
 8007478:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800747a:	8bfb      	ldrh	r3, [r7, #30]
 800747c:	3b01      	subs	r3, #1
 800747e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007480:	8bfb      	ldrh	r3, [r7, #30]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1ea      	bne.n	800745c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007488:	4618      	mov	r0, r3
 800748a:	372c      	adds	r7, #44	@ 0x2c
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007494:	b480      	push	{r7}
 8007496:	b085      	sub	sp, #20
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	785b      	ldrb	r3, [r3, #1]
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d12c      	bne.n	800750a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	015a      	lsls	r2, r3, #5
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	4413      	add	r3, r2
 80074b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	db12      	blt.n	80074e8 <USB_EPSetStall+0x54>
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00f      	beq.n	80074e8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	015a      	lsls	r2, r3, #5
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	4413      	add	r3, r2
 80074d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	68ba      	ldr	r2, [r7, #8]
 80074d8:	0151      	lsls	r1, r2, #5
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	440a      	add	r2, r1
 80074de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074e2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80074e6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	015a      	lsls	r2, r3, #5
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	4413      	add	r3, r2
 80074f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	68ba      	ldr	r2, [r7, #8]
 80074f8:	0151      	lsls	r1, r2, #5
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	440a      	add	r2, r1
 80074fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007502:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007506:	6013      	str	r3, [r2, #0]
 8007508:	e02b      	b.n	8007562 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	015a      	lsls	r2, r3, #5
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	4413      	add	r3, r2
 8007512:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2b00      	cmp	r3, #0
 800751a:	db12      	blt.n	8007542 <USB_EPSetStall+0xae>
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00f      	beq.n	8007542 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	015a      	lsls	r2, r3, #5
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	4413      	add	r3, r2
 800752a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	68ba      	ldr	r2, [r7, #8]
 8007532:	0151      	lsls	r1, r2, #5
 8007534:	68fa      	ldr	r2, [r7, #12]
 8007536:	440a      	add	r2, r1
 8007538:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800753c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007540:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	015a      	lsls	r2, r3, #5
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	4413      	add	r3, r2
 800754a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	68ba      	ldr	r2, [r7, #8]
 8007552:	0151      	lsls	r1, r2, #5
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	440a      	add	r2, r1
 8007558:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800755c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007560:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007562:	2300      	movs	r3, #0
}
 8007564:	4618      	mov	r0, r3
 8007566:	3714      	adds	r7, #20
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007570:	b480      	push	{r7}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	785b      	ldrb	r3, [r3, #1]
 8007588:	2b01      	cmp	r3, #1
 800758a:	d128      	bne.n	80075de <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	015a      	lsls	r2, r3, #5
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	4413      	add	r3, r2
 8007594:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68ba      	ldr	r2, [r7, #8]
 800759c:	0151      	lsls	r1, r2, #5
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	440a      	add	r2, r1
 80075a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80075aa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	791b      	ldrb	r3, [r3, #4]
 80075b0:	2b03      	cmp	r3, #3
 80075b2:	d003      	beq.n	80075bc <USB_EPClearStall+0x4c>
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	791b      	ldrb	r3, [r3, #4]
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	d138      	bne.n	800762e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	015a      	lsls	r2, r3, #5
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	4413      	add	r3, r2
 80075c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	68ba      	ldr	r2, [r7, #8]
 80075cc:	0151      	lsls	r1, r2, #5
 80075ce:	68fa      	ldr	r2, [r7, #12]
 80075d0:	440a      	add	r2, r1
 80075d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075da:	6013      	str	r3, [r2, #0]
 80075dc:	e027      	b.n	800762e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	015a      	lsls	r2, r3, #5
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	4413      	add	r3, r2
 80075e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	0151      	lsls	r1, r2, #5
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	440a      	add	r2, r1
 80075f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075f8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80075fc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	791b      	ldrb	r3, [r3, #4]
 8007602:	2b03      	cmp	r3, #3
 8007604:	d003      	beq.n	800760e <USB_EPClearStall+0x9e>
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	791b      	ldrb	r3, [r3, #4]
 800760a:	2b02      	cmp	r3, #2
 800760c:	d10f      	bne.n	800762e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	015a      	lsls	r2, r3, #5
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	4413      	add	r3, r2
 8007616:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	68ba      	ldr	r2, [r7, #8]
 800761e:	0151      	lsls	r1, r2, #5
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	440a      	add	r2, r1
 8007624:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007628:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800762c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800762e:	2300      	movs	r3, #0
}
 8007630:	4618      	mov	r0, r3
 8007632:	3714      	adds	r7, #20
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800763c:	b480      	push	{r7}
 800763e:	b085      	sub	sp, #20
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	460b      	mov	r3, r1
 8007646:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800765a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800765e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	78fb      	ldrb	r3, [r7, #3]
 800766a:	011b      	lsls	r3, r3, #4
 800766c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007670:	68f9      	ldr	r1, [r7, #12]
 8007672:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007676:	4313      	orrs	r3, r2
 8007678:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3714      	adds	r7, #20
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007688:	b480      	push	{r7}
 800768a:	b085      	sub	sp, #20
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80076a2:	f023 0303 	bic.w	r3, r3, #3
 80076a6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	68fa      	ldr	r2, [r7, #12]
 80076b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076b6:	f023 0302 	bic.w	r3, r3, #2
 80076ba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3714      	adds	r7, #20
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr

080076ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80076ca:	b480      	push	{r7}
 80076cc:	b085      	sub	sp, #20
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	68fa      	ldr	r2, [r7, #12]
 80076e0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80076e4:	f023 0303 	bic.w	r3, r3, #3
 80076e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076f8:	f043 0302 	orr.w	r3, r3, #2
 80076fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3714      	adds	r7, #20
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	695b      	ldr	r3, [r3, #20]
 8007718:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	699b      	ldr	r3, [r3, #24]
 800771e:	68fa      	ldr	r2, [r7, #12]
 8007720:	4013      	ands	r3, r2
 8007722:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007724:	68fb      	ldr	r3, [r7, #12]
}
 8007726:	4618      	mov	r0, r3
 8007728:	3714      	adds	r7, #20
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr

08007732 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007732:	b480      	push	{r7}
 8007734:	b085      	sub	sp, #20
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007744:	699b      	ldr	r3, [r3, #24]
 8007746:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800774e:	69db      	ldr	r3, [r3, #28]
 8007750:	68ba      	ldr	r2, [r7, #8]
 8007752:	4013      	ands	r3, r2
 8007754:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	0c1b      	lsrs	r3, r3, #16
}
 800775a:	4618      	mov	r0, r3
 800775c:	3714      	adds	r7, #20
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr

08007766 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007766:	b480      	push	{r7}
 8007768:	b085      	sub	sp, #20
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007778:	699b      	ldr	r3, [r3, #24]
 800777a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007782:	69db      	ldr	r3, [r3, #28]
 8007784:	68ba      	ldr	r2, [r7, #8]
 8007786:	4013      	ands	r3, r2
 8007788:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	b29b      	uxth	r3, r3
}
 800778e:	4618      	mov	r0, r3
 8007790:	3714      	adds	r7, #20
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr

0800779a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800779a:	b480      	push	{r7}
 800779c:	b085      	sub	sp, #20
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
 80077a2:	460b      	mov	r3, r1
 80077a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80077aa:	78fb      	ldrb	r3, [r7, #3]
 80077ac:	015a      	lsls	r2, r3, #5
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	4413      	add	r3, r2
 80077b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077c0:	695b      	ldr	r3, [r3, #20]
 80077c2:	68ba      	ldr	r2, [r7, #8]
 80077c4:	4013      	ands	r3, r2
 80077c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80077c8:	68bb      	ldr	r3, [r7, #8]
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3714      	adds	r7, #20
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr

080077d6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80077d6:	b480      	push	{r7}
 80077d8:	b087      	sub	sp, #28
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
 80077de:	460b      	mov	r3, r1
 80077e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077f8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80077fa:	78fb      	ldrb	r3, [r7, #3]
 80077fc:	f003 030f 	and.w	r3, r3, #15
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	fa22 f303 	lsr.w	r3, r2, r3
 8007806:	01db      	lsls	r3, r3, #7
 8007808:	b2db      	uxtb	r3, r3
 800780a:	693a      	ldr	r2, [r7, #16]
 800780c:	4313      	orrs	r3, r2
 800780e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007810:	78fb      	ldrb	r3, [r7, #3]
 8007812:	015a      	lsls	r2, r3, #5
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	4413      	add	r3, r2
 8007818:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	693a      	ldr	r2, [r7, #16]
 8007820:	4013      	ands	r3, r2
 8007822:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007824:	68bb      	ldr	r3, [r7, #8]
}
 8007826:	4618      	mov	r0, r3
 8007828:	371c      	adds	r7, #28
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr

08007832 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007832:	b480      	push	{r7}
 8007834:	b083      	sub	sp, #12
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	695b      	ldr	r3, [r3, #20]
 800783e:	f003 0301 	and.w	r3, r3, #1
}
 8007842:	4618      	mov	r0, r3
 8007844:	370c      	adds	r7, #12
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr

0800784e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800784e:	b480      	push	{r7}
 8007850:	b085      	sub	sp, #20
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007868:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800786c:	f023 0307 	bic.w	r3, r3, #7
 8007870:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	68fa      	ldr	r2, [r7, #12]
 800787c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007880:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007884:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007886:	2300      	movs	r3, #0
}
 8007888:	4618      	mov	r0, r3
 800788a:	3714      	adds	r7, #20
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007894:	b480      	push	{r7}
 8007896:	b087      	sub	sp, #28
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	460b      	mov	r3, r1
 800789e:	607a      	str	r2, [r7, #4]
 80078a0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	333c      	adds	r3, #60	@ 0x3c
 80078aa:	3304      	adds	r3, #4
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	4a26      	ldr	r2, [pc, #152]	@ (800794c <USB_EP0_OutStart+0xb8>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d90a      	bls.n	80078ce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80078c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80078c8:	d101      	bne.n	80078ce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80078ca:	2300      	movs	r3, #0
 80078cc:	e037      	b.n	800793e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078d4:	461a      	mov	r2, r3
 80078d6:	2300      	movs	r3, #0
 80078d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078e0:	691b      	ldr	r3, [r3, #16]
 80078e2:	697a      	ldr	r2, [r7, #20]
 80078e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80078ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	697a      	ldr	r2, [r7, #20]
 80078f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078fc:	f043 0318 	orr.w	r3, r3, #24
 8007900:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	697a      	ldr	r2, [r7, #20]
 800790c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007910:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007914:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007916:	7afb      	ldrb	r3, [r7, #11]
 8007918:	2b01      	cmp	r3, #1
 800791a:	d10f      	bne.n	800793c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007922:	461a      	mov	r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	697a      	ldr	r2, [r7, #20]
 8007932:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007936:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800793a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800793c:	2300      	movs	r3, #0
}
 800793e:	4618      	mov	r0, r3
 8007940:	371c      	adds	r7, #28
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop
 800794c:	4f54300a 	.word	0x4f54300a

08007950 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007950:	b480      	push	{r7}
 8007952:	b085      	sub	sp, #20
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007958:	2300      	movs	r3, #0
 800795a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	3301      	adds	r3, #1
 8007960:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	4a13      	ldr	r2, [pc, #76]	@ (80079b4 <USB_CoreReset+0x64>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d901      	bls.n	800796e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800796a:	2303      	movs	r3, #3
 800796c:	e01b      	b.n	80079a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	691b      	ldr	r3, [r3, #16]
 8007972:	2b00      	cmp	r3, #0
 8007974:	daf2      	bge.n	800795c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007976:	2300      	movs	r3, #0
 8007978:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	f043 0201 	orr.w	r2, r3, #1
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	3301      	adds	r3, #1
 800798a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	4a09      	ldr	r2, [pc, #36]	@ (80079b4 <USB_CoreReset+0x64>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d901      	bls.n	8007998 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007994:	2303      	movs	r3, #3
 8007996:	e006      	b.n	80079a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	f003 0301 	and.w	r3, r3, #1
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d0f0      	beq.n	8007986 <USB_CoreReset+0x36>

  return HAL_OK;
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3714      	adds	r7, #20
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr
 80079b2:	bf00      	nop
 80079b4:	00030d40 	.word	0x00030d40

080079b8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80079bc:	4904      	ldr	r1, [pc, #16]	@ (80079d0 <MX_FATFS_Init+0x18>)
 80079be:	4805      	ldr	r0, [pc, #20]	@ (80079d4 <MX_FATFS_Init+0x1c>)
 80079c0:	f002 f85a 	bl	8009a78 <FATFS_LinkDriver>
 80079c4:	4603      	mov	r3, r0
 80079c6:	461a      	mov	r2, r3
 80079c8:	4b03      	ldr	r3, [pc, #12]	@ (80079d8 <MX_FATFS_Init+0x20>)
 80079ca:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80079cc:	bf00      	nop
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	200004c8 	.word	0x200004c8
 80079d4:	2000000c 	.word	0x2000000c
 80079d8:	200004c4 	.word	0x200004c4

080079dc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	4603      	mov	r3, r0
 80079e4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80079e6:	4b06      	ldr	r3, [pc, #24]	@ (8007a00 <USER_initialize+0x24>)
 80079e8:	2201      	movs	r2, #1
 80079ea:	701a      	strb	r2, [r3, #0]
    return Stat;
 80079ec:	4b04      	ldr	r3, [pc, #16]	@ (8007a00 <USER_initialize+0x24>)
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	370c      	adds	r7, #12
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr
 80079fe:	bf00      	nop
 8007a00:	20000009 	.word	0x20000009

08007a04 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8007a0e:	4b06      	ldr	r3, [pc, #24]	@ (8007a28 <USER_status+0x24>)
 8007a10:	2201      	movs	r2, #1
 8007a12:	701a      	strb	r2, [r3, #0]
    return Stat;
 8007a14:	4b04      	ldr	r3, [pc, #16]	@ (8007a28 <USER_status+0x24>)
 8007a16:	781b      	ldrb	r3, [r3, #0]
 8007a18:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	370c      	adds	r7, #12
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr
 8007a26:	bf00      	nop
 8007a28:	20000009 	.word	0x20000009

08007a2c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b085      	sub	sp, #20
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	60b9      	str	r1, [r7, #8]
 8007a34:	607a      	str	r2, [r7, #4]
 8007a36:	603b      	str	r3, [r7, #0]
 8007a38:	4603      	mov	r3, r0
 8007a3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8007a3c:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3714      	adds	r7, #20
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr

08007a4a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007a4a:	b480      	push	{r7}
 8007a4c:	b085      	sub	sp, #20
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	607a      	str	r2, [r7, #4]
 8007a54:	603b      	str	r3, [r7, #0]
 8007a56:	4603      	mov	r3, r0
 8007a58:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8007a5a:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3714      	adds	r7, #20
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	4603      	mov	r3, r0
 8007a70:	603a      	str	r2, [r7, #0]
 8007a72:	71fb      	strb	r3, [r7, #7]
 8007a74:	460b      	mov	r3, r1
 8007a76:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	73fb      	strb	r3, [r7, #15]
    return res;
 8007a7c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3714      	adds	r7, #20
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr
	...

08007a8c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	460b      	mov	r3, r1
 8007a96:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007a98:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007a9c:	f002 fd22 	bl	800a4e4 <USBD_static_malloc>
 8007aa0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d109      	bne.n	8007abc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	32b0      	adds	r2, #176	@ 0xb0
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007ab8:	2302      	movs	r3, #2
 8007aba:	e0d4      	b.n	8007c66 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007abc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007ac0:	2100      	movs	r1, #0
 8007ac2:	68f8      	ldr	r0, [r7, #12]
 8007ac4:	f002 fd52 	bl	800a56c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	32b0      	adds	r2, #176	@ 0xb0
 8007ad2:	68f9      	ldr	r1, [r7, #12]
 8007ad4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	32b0      	adds	r2, #176	@ 0xb0
 8007ae2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	7c1b      	ldrb	r3, [r3, #16]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d138      	bne.n	8007b66 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007af4:	4b5e      	ldr	r3, [pc, #376]	@ (8007c70 <USBD_CDC_Init+0x1e4>)
 8007af6:	7819      	ldrb	r1, [r3, #0]
 8007af8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007afc:	2202      	movs	r2, #2
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f002 fb7f 	bl	800a202 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007b04:	4b5a      	ldr	r3, [pc, #360]	@ (8007c70 <USBD_CDC_Init+0x1e4>)
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	f003 020f 	and.w	r2, r3, #15
 8007b0c:	6879      	ldr	r1, [r7, #4]
 8007b0e:	4613      	mov	r3, r2
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	4413      	add	r3, r2
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	440b      	add	r3, r1
 8007b18:	3324      	adds	r3, #36	@ 0x24
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007b1e:	4b55      	ldr	r3, [pc, #340]	@ (8007c74 <USBD_CDC_Init+0x1e8>)
 8007b20:	7819      	ldrb	r1, [r3, #0]
 8007b22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b26:	2202      	movs	r2, #2
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f002 fb6a 	bl	800a202 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007b2e:	4b51      	ldr	r3, [pc, #324]	@ (8007c74 <USBD_CDC_Init+0x1e8>)
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	f003 020f 	and.w	r2, r3, #15
 8007b36:	6879      	ldr	r1, [r7, #4]
 8007b38:	4613      	mov	r3, r2
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	4413      	add	r3, r2
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	440b      	add	r3, r1
 8007b42:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007b46:	2201      	movs	r2, #1
 8007b48:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007b4a:	4b4b      	ldr	r3, [pc, #300]	@ (8007c78 <USBD_CDC_Init+0x1ec>)
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	f003 020f 	and.w	r2, r3, #15
 8007b52:	6879      	ldr	r1, [r7, #4]
 8007b54:	4613      	mov	r3, r2
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	4413      	add	r3, r2
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	440b      	add	r3, r1
 8007b5e:	3326      	adds	r3, #38	@ 0x26
 8007b60:	2210      	movs	r2, #16
 8007b62:	801a      	strh	r2, [r3, #0]
 8007b64:	e035      	b.n	8007bd2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007b66:	4b42      	ldr	r3, [pc, #264]	@ (8007c70 <USBD_CDC_Init+0x1e4>)
 8007b68:	7819      	ldrb	r1, [r3, #0]
 8007b6a:	2340      	movs	r3, #64	@ 0x40
 8007b6c:	2202      	movs	r2, #2
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f002 fb47 	bl	800a202 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007b74:	4b3e      	ldr	r3, [pc, #248]	@ (8007c70 <USBD_CDC_Init+0x1e4>)
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	f003 020f 	and.w	r2, r3, #15
 8007b7c:	6879      	ldr	r1, [r7, #4]
 8007b7e:	4613      	mov	r3, r2
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	4413      	add	r3, r2
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	440b      	add	r3, r1
 8007b88:	3324      	adds	r3, #36	@ 0x24
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007b8e:	4b39      	ldr	r3, [pc, #228]	@ (8007c74 <USBD_CDC_Init+0x1e8>)
 8007b90:	7819      	ldrb	r1, [r3, #0]
 8007b92:	2340      	movs	r3, #64	@ 0x40
 8007b94:	2202      	movs	r2, #2
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f002 fb33 	bl	800a202 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007b9c:	4b35      	ldr	r3, [pc, #212]	@ (8007c74 <USBD_CDC_Init+0x1e8>)
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	f003 020f 	and.w	r2, r3, #15
 8007ba4:	6879      	ldr	r1, [r7, #4]
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	4413      	add	r3, r2
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	440b      	add	r3, r1
 8007bb0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007bb8:	4b2f      	ldr	r3, [pc, #188]	@ (8007c78 <USBD_CDC_Init+0x1ec>)
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	f003 020f 	and.w	r2, r3, #15
 8007bc0:	6879      	ldr	r1, [r7, #4]
 8007bc2:	4613      	mov	r3, r2
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	4413      	add	r3, r2
 8007bc8:	009b      	lsls	r3, r3, #2
 8007bca:	440b      	add	r3, r1
 8007bcc:	3326      	adds	r3, #38	@ 0x26
 8007bce:	2210      	movs	r2, #16
 8007bd0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007bd2:	4b29      	ldr	r3, [pc, #164]	@ (8007c78 <USBD_CDC_Init+0x1ec>)
 8007bd4:	7819      	ldrb	r1, [r3, #0]
 8007bd6:	2308      	movs	r3, #8
 8007bd8:	2203      	movs	r2, #3
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f002 fb11 	bl	800a202 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007be0:	4b25      	ldr	r3, [pc, #148]	@ (8007c78 <USBD_CDC_Init+0x1ec>)
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	f003 020f 	and.w	r2, r3, #15
 8007be8:	6879      	ldr	r1, [r7, #4]
 8007bea:	4613      	mov	r3, r2
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	4413      	add	r3, r2
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	440b      	add	r3, r1
 8007bf4:	3324      	adds	r3, #36	@ 0x24
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	33b0      	adds	r3, #176	@ 0xb0
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	4413      	add	r3, r2
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d101      	bne.n	8007c34 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007c30:	2302      	movs	r3, #2
 8007c32:	e018      	b.n	8007c66 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	7c1b      	ldrb	r3, [r3, #16]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d10a      	bne.n	8007c52 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c3c:	4b0d      	ldr	r3, [pc, #52]	@ (8007c74 <USBD_CDC_Init+0x1e8>)
 8007c3e:	7819      	ldrb	r1, [r3, #0]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007c46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f002 fbc8 	bl	800a3e0 <USBD_LL_PrepareReceive>
 8007c50:	e008      	b.n	8007c64 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c52:	4b08      	ldr	r3, [pc, #32]	@ (8007c74 <USBD_CDC_Init+0x1e8>)
 8007c54:	7819      	ldrb	r1, [r3, #0]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007c5c:	2340      	movs	r3, #64	@ 0x40
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f002 fbbe 	bl	800a3e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007c64:	2300      	movs	r3, #0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3710      	adds	r7, #16
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	200000a7 	.word	0x200000a7
 8007c74:	200000a8 	.word	0x200000a8
 8007c78:	200000a9 	.word	0x200000a9

08007c7c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b082      	sub	sp, #8
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	460b      	mov	r3, r1
 8007c86:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007c88:	4b3a      	ldr	r3, [pc, #232]	@ (8007d74 <USBD_CDC_DeInit+0xf8>)
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f002 fadd 	bl	800a24e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007c94:	4b37      	ldr	r3, [pc, #220]	@ (8007d74 <USBD_CDC_DeInit+0xf8>)
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	f003 020f 	and.w	r2, r3, #15
 8007c9c:	6879      	ldr	r1, [r7, #4]
 8007c9e:	4613      	mov	r3, r2
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	4413      	add	r3, r2
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	440b      	add	r3, r1
 8007ca8:	3324      	adds	r3, #36	@ 0x24
 8007caa:	2200      	movs	r2, #0
 8007cac:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007cae:	4b32      	ldr	r3, [pc, #200]	@ (8007d78 <USBD_CDC_DeInit+0xfc>)
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f002 faca 	bl	800a24e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007cba:	4b2f      	ldr	r3, [pc, #188]	@ (8007d78 <USBD_CDC_DeInit+0xfc>)
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	f003 020f 	and.w	r2, r3, #15
 8007cc2:	6879      	ldr	r1, [r7, #4]
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	4413      	add	r3, r2
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	440b      	add	r3, r1
 8007cce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007cd6:	4b29      	ldr	r3, [pc, #164]	@ (8007d7c <USBD_CDC_DeInit+0x100>)
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	4619      	mov	r1, r3
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f002 fab6 	bl	800a24e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007ce2:	4b26      	ldr	r3, [pc, #152]	@ (8007d7c <USBD_CDC_DeInit+0x100>)
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	f003 020f 	and.w	r2, r3, #15
 8007cea:	6879      	ldr	r1, [r7, #4]
 8007cec:	4613      	mov	r3, r2
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	4413      	add	r3, r2
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	440b      	add	r3, r1
 8007cf6:	3324      	adds	r3, #36	@ 0x24
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007cfc:	4b1f      	ldr	r3, [pc, #124]	@ (8007d7c <USBD_CDC_DeInit+0x100>)
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	f003 020f 	and.w	r2, r3, #15
 8007d04:	6879      	ldr	r1, [r7, #4]
 8007d06:	4613      	mov	r3, r2
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	4413      	add	r3, r2
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	440b      	add	r3, r1
 8007d10:	3326      	adds	r3, #38	@ 0x26
 8007d12:	2200      	movs	r2, #0
 8007d14:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	32b0      	adds	r2, #176	@ 0xb0
 8007d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d01f      	beq.n	8007d68 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	33b0      	adds	r3, #176	@ 0xb0
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	4413      	add	r3, r2
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	32b0      	adds	r2, #176	@ 0xb0
 8007d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f002 fbd8 	bl	800a500 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	32b0      	adds	r2, #176	@ 0xb0
 8007d5a:	2100      	movs	r1, #0
 8007d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007d68:	2300      	movs	r3, #0
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3708      	adds	r7, #8
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	200000a7 	.word	0x200000a7
 8007d78:	200000a8 	.word	0x200000a8
 8007d7c:	200000a9 	.word	0x200000a9

08007d80 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b086      	sub	sp, #24
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	32b0      	adds	r2, #176	@ 0xb0
 8007d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d98:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007da2:	2300      	movs	r3, #0
 8007da4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d101      	bne.n	8007db0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007dac:	2303      	movs	r3, #3
 8007dae:	e0bf      	b.n	8007f30 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d050      	beq.n	8007e5e <USBD_CDC_Setup+0xde>
 8007dbc:	2b20      	cmp	r3, #32
 8007dbe:	f040 80af 	bne.w	8007f20 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	88db      	ldrh	r3, [r3, #6]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d03a      	beq.n	8007e40 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	b25b      	sxtb	r3, r3
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	da1b      	bge.n	8007e0c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	33b0      	adds	r3, #176	@ 0xb0
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	4413      	add	r3, r2
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	683a      	ldr	r2, [r7, #0]
 8007de8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007dea:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007dec:	683a      	ldr	r2, [r7, #0]
 8007dee:	88d2      	ldrh	r2, [r2, #6]
 8007df0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	88db      	ldrh	r3, [r3, #6]
 8007df6:	2b07      	cmp	r3, #7
 8007df8:	bf28      	it	cs
 8007dfa:	2307      	movcs	r3, #7
 8007dfc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	89fa      	ldrh	r2, [r7, #14]
 8007e02:	4619      	mov	r1, r3
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f001 fd6b 	bl	80098e0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007e0a:	e090      	b.n	8007f2e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	785a      	ldrb	r2, [r3, #1]
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	88db      	ldrh	r3, [r3, #6]
 8007e1a:	2b3f      	cmp	r3, #63	@ 0x3f
 8007e1c:	d803      	bhi.n	8007e26 <USBD_CDC_Setup+0xa6>
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	88db      	ldrh	r3, [r3, #6]
 8007e22:	b2da      	uxtb	r2, r3
 8007e24:	e000      	b.n	8007e28 <USBD_CDC_Setup+0xa8>
 8007e26:	2240      	movs	r2, #64	@ 0x40
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007e2e:	6939      	ldr	r1, [r7, #16]
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007e36:	461a      	mov	r2, r3
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f001 fd7d 	bl	8009938 <USBD_CtlPrepareRx>
      break;
 8007e3e:	e076      	b.n	8007f2e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	33b0      	adds	r3, #176	@ 0xb0
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	4413      	add	r3, r2
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	683a      	ldr	r2, [r7, #0]
 8007e54:	7850      	ldrb	r0, [r2, #1]
 8007e56:	2200      	movs	r2, #0
 8007e58:	6839      	ldr	r1, [r7, #0]
 8007e5a:	4798      	blx	r3
      break;
 8007e5c:	e067      	b.n	8007f2e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	785b      	ldrb	r3, [r3, #1]
 8007e62:	2b0b      	cmp	r3, #11
 8007e64:	d851      	bhi.n	8007f0a <USBD_CDC_Setup+0x18a>
 8007e66:	a201      	add	r2, pc, #4	@ (adr r2, 8007e6c <USBD_CDC_Setup+0xec>)
 8007e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e6c:	08007e9d 	.word	0x08007e9d
 8007e70:	08007f19 	.word	0x08007f19
 8007e74:	08007f0b 	.word	0x08007f0b
 8007e78:	08007f0b 	.word	0x08007f0b
 8007e7c:	08007f0b 	.word	0x08007f0b
 8007e80:	08007f0b 	.word	0x08007f0b
 8007e84:	08007f0b 	.word	0x08007f0b
 8007e88:	08007f0b 	.word	0x08007f0b
 8007e8c:	08007f0b 	.word	0x08007f0b
 8007e90:	08007f0b 	.word	0x08007f0b
 8007e94:	08007ec7 	.word	0x08007ec7
 8007e98:	08007ef1 	.word	0x08007ef1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	2b03      	cmp	r3, #3
 8007ea6:	d107      	bne.n	8007eb8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007ea8:	f107 030a 	add.w	r3, r7, #10
 8007eac:	2202      	movs	r2, #2
 8007eae:	4619      	mov	r1, r3
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f001 fd15 	bl	80098e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007eb6:	e032      	b.n	8007f1e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007eb8:	6839      	ldr	r1, [r7, #0]
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f001 fc9f 	bl	80097fe <USBD_CtlError>
            ret = USBD_FAIL;
 8007ec0:	2303      	movs	r3, #3
 8007ec2:	75fb      	strb	r3, [r7, #23]
          break;
 8007ec4:	e02b      	b.n	8007f1e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	2b03      	cmp	r3, #3
 8007ed0:	d107      	bne.n	8007ee2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007ed2:	f107 030d 	add.w	r3, r7, #13
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	4619      	mov	r1, r3
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f001 fd00 	bl	80098e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007ee0:	e01d      	b.n	8007f1e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007ee2:	6839      	ldr	r1, [r7, #0]
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f001 fc8a 	bl	80097fe <USBD_CtlError>
            ret = USBD_FAIL;
 8007eea:	2303      	movs	r3, #3
 8007eec:	75fb      	strb	r3, [r7, #23]
          break;
 8007eee:	e016      	b.n	8007f1e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	2b03      	cmp	r3, #3
 8007efa:	d00f      	beq.n	8007f1c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007efc:	6839      	ldr	r1, [r7, #0]
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f001 fc7d 	bl	80097fe <USBD_CtlError>
            ret = USBD_FAIL;
 8007f04:	2303      	movs	r3, #3
 8007f06:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007f08:	e008      	b.n	8007f1c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007f0a:	6839      	ldr	r1, [r7, #0]
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f001 fc76 	bl	80097fe <USBD_CtlError>
          ret = USBD_FAIL;
 8007f12:	2303      	movs	r3, #3
 8007f14:	75fb      	strb	r3, [r7, #23]
          break;
 8007f16:	e002      	b.n	8007f1e <USBD_CDC_Setup+0x19e>
          break;
 8007f18:	bf00      	nop
 8007f1a:	e008      	b.n	8007f2e <USBD_CDC_Setup+0x1ae>
          break;
 8007f1c:	bf00      	nop
      }
      break;
 8007f1e:	e006      	b.n	8007f2e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007f20:	6839      	ldr	r1, [r7, #0]
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f001 fc6b 	bl	80097fe <USBD_CtlError>
      ret = USBD_FAIL;
 8007f28:	2303      	movs	r3, #3
 8007f2a:	75fb      	strb	r3, [r7, #23]
      break;
 8007f2c:	bf00      	nop
  }

  return (uint8_t)ret;
 8007f2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3718      	adds	r7, #24
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	460b      	mov	r3, r1
 8007f42:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007f4a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	32b0      	adds	r2, #176	@ 0xb0
 8007f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d101      	bne.n	8007f62 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	e065      	b.n	800802e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	32b0      	adds	r2, #176	@ 0xb0
 8007f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f70:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007f72:	78fb      	ldrb	r3, [r7, #3]
 8007f74:	f003 020f 	and.w	r2, r3, #15
 8007f78:	6879      	ldr	r1, [r7, #4]
 8007f7a:	4613      	mov	r3, r2
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	4413      	add	r3, r2
 8007f80:	009b      	lsls	r3, r3, #2
 8007f82:	440b      	add	r3, r1
 8007f84:	3318      	adds	r3, #24
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d02f      	beq.n	8007fec <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007f8c:	78fb      	ldrb	r3, [r7, #3]
 8007f8e:	f003 020f 	and.w	r2, r3, #15
 8007f92:	6879      	ldr	r1, [r7, #4]
 8007f94:	4613      	mov	r3, r2
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	4413      	add	r3, r2
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	440b      	add	r3, r1
 8007f9e:	3318      	adds	r3, #24
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	78fb      	ldrb	r3, [r7, #3]
 8007fa4:	f003 010f 	and.w	r1, r3, #15
 8007fa8:	68f8      	ldr	r0, [r7, #12]
 8007faa:	460b      	mov	r3, r1
 8007fac:	00db      	lsls	r3, r3, #3
 8007fae:	440b      	add	r3, r1
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	4403      	add	r3, r0
 8007fb4:	3348      	adds	r3, #72	@ 0x48
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	fbb2 f1f3 	udiv	r1, r2, r3
 8007fbc:	fb01 f303 	mul.w	r3, r1, r3
 8007fc0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d112      	bne.n	8007fec <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007fc6:	78fb      	ldrb	r3, [r7, #3]
 8007fc8:	f003 020f 	and.w	r2, r3, #15
 8007fcc:	6879      	ldr	r1, [r7, #4]
 8007fce:	4613      	mov	r3, r2
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	4413      	add	r3, r2
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	440b      	add	r3, r1
 8007fd8:	3318      	adds	r3, #24
 8007fda:	2200      	movs	r2, #0
 8007fdc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007fde:	78f9      	ldrb	r1, [r7, #3]
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f002 f9da 	bl	800a39e <USBD_LL_Transmit>
 8007fea:	e01f      	b.n	800802c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	33b0      	adds	r3, #176	@ 0xb0
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	4413      	add	r3, r2
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	691b      	ldr	r3, [r3, #16]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d010      	beq.n	800802c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	33b0      	adds	r3, #176	@ 0xb0
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	4413      	add	r3, r2
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	691b      	ldr	r3, [r3, #16]
 800801c:	68ba      	ldr	r2, [r7, #8]
 800801e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008022:	68ba      	ldr	r2, [r7, #8]
 8008024:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008028:	78fa      	ldrb	r2, [r7, #3]
 800802a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b084      	sub	sp, #16
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
 800803e:	460b      	mov	r3, r1
 8008040:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	32b0      	adds	r2, #176	@ 0xb0
 800804c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008050:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	32b0      	adds	r2, #176	@ 0xb0
 800805c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d101      	bne.n	8008068 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008064:	2303      	movs	r3, #3
 8008066:	e01a      	b.n	800809e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008068:	78fb      	ldrb	r3, [r7, #3]
 800806a:	4619      	mov	r1, r3
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f002 f9d8 	bl	800a422 <USBD_LL_GetRxDataSize>
 8008072:	4602      	mov	r2, r0
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	33b0      	adds	r3, #176	@ 0xb0
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	4413      	add	r3, r2
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	68fa      	ldr	r2, [r7, #12]
 800808e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008098:	4611      	mov	r1, r2
 800809a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3710      	adds	r7, #16
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b084      	sub	sp, #16
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	32b0      	adds	r2, #176	@ 0xb0
 80080b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080bc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d101      	bne.n	80080c8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80080c4:	2303      	movs	r3, #3
 80080c6:	e024      	b.n	8008112 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	33b0      	adds	r3, #176	@ 0xb0
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	4413      	add	r3, r2
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d019      	beq.n	8008110 <USBD_CDC_EP0_RxReady+0x6a>
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80080e2:	2bff      	cmp	r3, #255	@ 0xff
 80080e4:	d014      	beq.n	8008110 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	33b0      	adds	r3, #176	@ 0xb0
 80080f0:	009b      	lsls	r3, r3, #2
 80080f2:	4413      	add	r3, r2
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	68fa      	ldr	r2, [r7, #12]
 80080fa:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80080fe:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008100:	68fa      	ldr	r2, [r7, #12]
 8008102:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008106:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	22ff      	movs	r2, #255	@ 0xff
 800810c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
	...

0800811c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b086      	sub	sp, #24
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008124:	2182      	movs	r1, #130	@ 0x82
 8008126:	4818      	ldr	r0, [pc, #96]	@ (8008188 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008128:	f000 fd09 	bl	8008b3e <USBD_GetEpDesc>
 800812c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800812e:	2101      	movs	r1, #1
 8008130:	4815      	ldr	r0, [pc, #84]	@ (8008188 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008132:	f000 fd04 	bl	8008b3e <USBD_GetEpDesc>
 8008136:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008138:	2181      	movs	r1, #129	@ 0x81
 800813a:	4813      	ldr	r0, [pc, #76]	@ (8008188 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800813c:	f000 fcff 	bl	8008b3e <USBD_GetEpDesc>
 8008140:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d002      	beq.n	800814e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	2210      	movs	r2, #16
 800814c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d006      	beq.n	8008162 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	2200      	movs	r2, #0
 8008158:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800815c:	711a      	strb	r2, [r3, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d006      	beq.n	8008176 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2200      	movs	r2, #0
 800816c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008170:	711a      	strb	r2, [r3, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2243      	movs	r2, #67	@ 0x43
 800817a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800817c:	4b02      	ldr	r3, [pc, #8]	@ (8008188 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800817e:	4618      	mov	r0, r3
 8008180:	3718      	adds	r7, #24
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	20000064 	.word	0x20000064

0800818c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b086      	sub	sp, #24
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008194:	2182      	movs	r1, #130	@ 0x82
 8008196:	4818      	ldr	r0, [pc, #96]	@ (80081f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008198:	f000 fcd1 	bl	8008b3e <USBD_GetEpDesc>
 800819c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800819e:	2101      	movs	r1, #1
 80081a0:	4815      	ldr	r0, [pc, #84]	@ (80081f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80081a2:	f000 fccc 	bl	8008b3e <USBD_GetEpDesc>
 80081a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80081a8:	2181      	movs	r1, #129	@ 0x81
 80081aa:	4813      	ldr	r0, [pc, #76]	@ (80081f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80081ac:	f000 fcc7 	bl	8008b3e <USBD_GetEpDesc>
 80081b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d002      	beq.n	80081be <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	2210      	movs	r2, #16
 80081bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d006      	beq.n	80081d2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	2200      	movs	r2, #0
 80081c8:	711a      	strb	r2, [r3, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f042 0202 	orr.w	r2, r2, #2
 80081d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d006      	beq.n	80081e6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2200      	movs	r2, #0
 80081dc:	711a      	strb	r2, [r3, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	f042 0202 	orr.w	r2, r2, #2
 80081e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2243      	movs	r2, #67	@ 0x43
 80081ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80081ec:	4b02      	ldr	r3, [pc, #8]	@ (80081f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3718      	adds	r7, #24
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	20000064 	.word	0x20000064

080081fc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b086      	sub	sp, #24
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008204:	2182      	movs	r1, #130	@ 0x82
 8008206:	4818      	ldr	r0, [pc, #96]	@ (8008268 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008208:	f000 fc99 	bl	8008b3e <USBD_GetEpDesc>
 800820c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800820e:	2101      	movs	r1, #1
 8008210:	4815      	ldr	r0, [pc, #84]	@ (8008268 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008212:	f000 fc94 	bl	8008b3e <USBD_GetEpDesc>
 8008216:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008218:	2181      	movs	r1, #129	@ 0x81
 800821a:	4813      	ldr	r0, [pc, #76]	@ (8008268 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800821c:	f000 fc8f 	bl	8008b3e <USBD_GetEpDesc>
 8008220:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d002      	beq.n	800822e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	2210      	movs	r2, #16
 800822c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d006      	beq.n	8008242 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	2200      	movs	r2, #0
 8008238:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800823c:	711a      	strb	r2, [r3, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d006      	beq.n	8008256 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2200      	movs	r2, #0
 800824c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008250:	711a      	strb	r2, [r3, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2243      	movs	r2, #67	@ 0x43
 800825a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800825c:	4b02      	ldr	r3, [pc, #8]	@ (8008268 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800825e:	4618      	mov	r0, r3
 8008260:	3718      	adds	r7, #24
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	20000064 	.word	0x20000064

0800826c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800826c:	b480      	push	{r7}
 800826e:	b083      	sub	sp, #12
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	220a      	movs	r2, #10
 8008278:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800827a:	4b03      	ldr	r3, [pc, #12]	@ (8008288 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800827c:	4618      	mov	r0, r3
 800827e:	370c      	adds	r7, #12
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr
 8008288:	20000020 	.word	0x20000020

0800828c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800828c:	b480      	push	{r7}
 800828e:	b083      	sub	sp, #12
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d101      	bne.n	80082a0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800829c:	2303      	movs	r3, #3
 800829e:	e009      	b.n	80082b4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	33b0      	adds	r3, #176	@ 0xb0
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	4413      	add	r3, r2
 80082ae:	683a      	ldr	r2, [r7, #0]
 80082b0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80082b2:	2300      	movs	r3, #0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	370c      	adds	r7, #12
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b087      	sub	sp, #28
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	32b0      	adds	r2, #176	@ 0xb0
 80082d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082da:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d101      	bne.n	80082e6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80082e2:	2303      	movs	r3, #3
 80082e4:	e008      	b.n	80082f8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	68ba      	ldr	r2, [r7, #8]
 80082ea:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80082f6:	2300      	movs	r3, #0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	371c      	adds	r7, #28
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr

08008304 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008304:	b480      	push	{r7}
 8008306:	b085      	sub	sp, #20
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	32b0      	adds	r2, #176	@ 0xb0
 8008318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800831c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d101      	bne.n	8008328 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008324:	2303      	movs	r3, #3
 8008326:	e004      	b.n	8008332 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	683a      	ldr	r2, [r7, #0]
 800832c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008330:	2300      	movs	r3, #0
}
 8008332:	4618      	mov	r0, r3
 8008334:	3714      	adds	r7, #20
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr
	...

08008340 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	32b0      	adds	r2, #176	@ 0xb0
 8008352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008356:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	32b0      	adds	r2, #176	@ 0xb0
 8008362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d101      	bne.n	800836e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800836a:	2303      	movs	r3, #3
 800836c:	e018      	b.n	80083a0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	7c1b      	ldrb	r3, [r3, #16]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d10a      	bne.n	800838c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008376:	4b0c      	ldr	r3, [pc, #48]	@ (80083a8 <USBD_CDC_ReceivePacket+0x68>)
 8008378:	7819      	ldrb	r1, [r3, #0]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008380:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f002 f82b 	bl	800a3e0 <USBD_LL_PrepareReceive>
 800838a:	e008      	b.n	800839e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800838c:	4b06      	ldr	r3, [pc, #24]	@ (80083a8 <USBD_CDC_ReceivePacket+0x68>)
 800838e:	7819      	ldrb	r1, [r3, #0]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008396:	2340      	movs	r3, #64	@ 0x40
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f002 f821 	bl	800a3e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800839e:	2300      	movs	r3, #0
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3710      	adds	r7, #16
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	200000a8 	.word	0x200000a8

080083ac <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b086      	sub	sp, #24
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	4613      	mov	r3, r2
 80083b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d101      	bne.n	80083c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80083c0:	2303      	movs	r3, #3
 80083c2:	e01f      	b.n	8008404 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2200      	movs	r2, #0
 80083c8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2200      	movs	r2, #0
 80083d0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2200      	movs	r2, #0
 80083d8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d003      	beq.n	80083ea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	68ba      	ldr	r2, [r7, #8]
 80083e6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2201      	movs	r2, #1
 80083ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	79fa      	ldrb	r2, [r7, #7]
 80083f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80083f8:	68f8      	ldr	r0, [r7, #12]
 80083fa:	f001 fe9b 	bl	800a134 <USBD_LL_Init>
 80083fe:	4603      	mov	r3, r0
 8008400:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008402:	7dfb      	ldrb	r3, [r7, #23]
}
 8008404:	4618      	mov	r0, r3
 8008406:	3718      	adds	r7, #24
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008416:	2300      	movs	r3, #0
 8008418:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d101      	bne.n	8008424 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008420:	2303      	movs	r3, #3
 8008422:	e025      	b.n	8008470 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	683a      	ldr	r2, [r7, #0]
 8008428:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	32ae      	adds	r2, #174	@ 0xae
 8008436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800843a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00f      	beq.n	8008460 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	32ae      	adds	r2, #174	@ 0xae
 800844a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800844e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008450:	f107 020e 	add.w	r2, r7, #14
 8008454:	4610      	mov	r0, r2
 8008456:	4798      	blx	r3
 8008458:	4602      	mov	r2, r0
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008466:	1c5a      	adds	r2, r3, #1
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800846e:	2300      	movs	r3, #0
}
 8008470:	4618      	mov	r0, r3
 8008472:	3710      	adds	r7, #16
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f001 fea3 	bl	800a1cc <USBD_LL_Start>
 8008486:	4603      	mov	r3, r0
}
 8008488:	4618      	mov	r0, r3
 800848a:	3708      	adds	r7, #8
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008498:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800849a:	4618      	mov	r0, r3
 800849c:	370c      	adds	r7, #12
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr

080084a6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b084      	sub	sp, #16
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
 80084ae:	460b      	mov	r3, r1
 80084b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80084b2:	2300      	movs	r3, #0
 80084b4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d009      	beq.n	80084d4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	78fa      	ldrb	r2, [r7, #3]
 80084ca:	4611      	mov	r1, r2
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	4798      	blx	r3
 80084d0:	4603      	mov	r3, r0
 80084d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80084d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084de:	b580      	push	{r7, lr}
 80084e0:	b084      	sub	sp, #16
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
 80084e6:	460b      	mov	r3, r1
 80084e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80084ea:	2300      	movs	r3, #0
 80084ec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	78fa      	ldrb	r2, [r7, #3]
 80084f8:	4611      	mov	r1, r2
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	4798      	blx	r3
 80084fe:	4603      	mov	r3, r0
 8008500:	2b00      	cmp	r3, #0
 8008502:	d001      	beq.n	8008508 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008504:	2303      	movs	r3, #3
 8008506:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008508:	7bfb      	ldrb	r3, [r7, #15]
}
 800850a:	4618      	mov	r0, r3
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b084      	sub	sp, #16
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
 800851a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008522:	6839      	ldr	r1, [r7, #0]
 8008524:	4618      	mov	r0, r3
 8008526:	f001 f930 	bl	800978a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2201      	movs	r2, #1
 800852e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008538:	461a      	mov	r2, r3
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008546:	f003 031f 	and.w	r3, r3, #31
 800854a:	2b02      	cmp	r3, #2
 800854c:	d01a      	beq.n	8008584 <USBD_LL_SetupStage+0x72>
 800854e:	2b02      	cmp	r3, #2
 8008550:	d822      	bhi.n	8008598 <USBD_LL_SetupStage+0x86>
 8008552:	2b00      	cmp	r3, #0
 8008554:	d002      	beq.n	800855c <USBD_LL_SetupStage+0x4a>
 8008556:	2b01      	cmp	r3, #1
 8008558:	d00a      	beq.n	8008570 <USBD_LL_SetupStage+0x5e>
 800855a:	e01d      	b.n	8008598 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008562:	4619      	mov	r1, r3
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 fb5d 	bl	8008c24 <USBD_StdDevReq>
 800856a:	4603      	mov	r3, r0
 800856c:	73fb      	strb	r3, [r7, #15]
      break;
 800856e:	e020      	b.n	80085b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008576:	4619      	mov	r1, r3
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 fbc5 	bl	8008d08 <USBD_StdItfReq>
 800857e:	4603      	mov	r3, r0
 8008580:	73fb      	strb	r3, [r7, #15]
      break;
 8008582:	e016      	b.n	80085b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800858a:	4619      	mov	r1, r3
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 fc27 	bl	8008de0 <USBD_StdEPReq>
 8008592:	4603      	mov	r3, r0
 8008594:	73fb      	strb	r3, [r7, #15]
      break;
 8008596:	e00c      	b.n	80085b2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800859e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	4619      	mov	r1, r3
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f001 fe70 	bl	800a28c <USBD_LL_StallEP>
 80085ac:	4603      	mov	r3, r0
 80085ae:	73fb      	strb	r3, [r7, #15]
      break;
 80085b0:	bf00      	nop
  }

  return ret;
 80085b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3710      	adds	r7, #16
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b086      	sub	sp, #24
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	460b      	mov	r3, r1
 80085c6:	607a      	str	r2, [r7, #4]
 80085c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80085ca:	2300      	movs	r3, #0
 80085cc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80085ce:	7afb      	ldrb	r3, [r7, #11]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d16e      	bne.n	80086b2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80085da:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80085e2:	2b03      	cmp	r3, #3
 80085e4:	f040 8098 	bne.w	8008718 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	689a      	ldr	r2, [r3, #8]
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d913      	bls.n	800861c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	689a      	ldr	r2, [r3, #8]
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	68db      	ldr	r3, [r3, #12]
 80085fc:	1ad2      	subs	r2, r2, r3
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	68da      	ldr	r2, [r3, #12]
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	4293      	cmp	r3, r2
 800860c:	bf28      	it	cs
 800860e:	4613      	movcs	r3, r2
 8008610:	461a      	mov	r2, r3
 8008612:	6879      	ldr	r1, [r7, #4]
 8008614:	68f8      	ldr	r0, [r7, #12]
 8008616:	f001 f9ac 	bl	8009972 <USBD_CtlContinueRx>
 800861a:	e07d      	b.n	8008718 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008622:	f003 031f 	and.w	r3, r3, #31
 8008626:	2b02      	cmp	r3, #2
 8008628:	d014      	beq.n	8008654 <USBD_LL_DataOutStage+0x98>
 800862a:	2b02      	cmp	r3, #2
 800862c:	d81d      	bhi.n	800866a <USBD_LL_DataOutStage+0xae>
 800862e:	2b00      	cmp	r3, #0
 8008630:	d002      	beq.n	8008638 <USBD_LL_DataOutStage+0x7c>
 8008632:	2b01      	cmp	r3, #1
 8008634:	d003      	beq.n	800863e <USBD_LL_DataOutStage+0x82>
 8008636:	e018      	b.n	800866a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008638:	2300      	movs	r3, #0
 800863a:	75bb      	strb	r3, [r7, #22]
            break;
 800863c:	e018      	b.n	8008670 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008644:	b2db      	uxtb	r3, r3
 8008646:	4619      	mov	r1, r3
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f000 fa5e 	bl	8008b0a <USBD_CoreFindIF>
 800864e:	4603      	mov	r3, r0
 8008650:	75bb      	strb	r3, [r7, #22]
            break;
 8008652:	e00d      	b.n	8008670 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800865a:	b2db      	uxtb	r3, r3
 800865c:	4619      	mov	r1, r3
 800865e:	68f8      	ldr	r0, [r7, #12]
 8008660:	f000 fa60 	bl	8008b24 <USBD_CoreFindEP>
 8008664:	4603      	mov	r3, r0
 8008666:	75bb      	strb	r3, [r7, #22]
            break;
 8008668:	e002      	b.n	8008670 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800866a:	2300      	movs	r3, #0
 800866c:	75bb      	strb	r3, [r7, #22]
            break;
 800866e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008670:	7dbb      	ldrb	r3, [r7, #22]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d119      	bne.n	80086aa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800867c:	b2db      	uxtb	r3, r3
 800867e:	2b03      	cmp	r3, #3
 8008680:	d113      	bne.n	80086aa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008682:	7dba      	ldrb	r2, [r7, #22]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	32ae      	adds	r2, #174	@ 0xae
 8008688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800868c:	691b      	ldr	r3, [r3, #16]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d00b      	beq.n	80086aa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008692:	7dba      	ldrb	r2, [r7, #22]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800869a:	7dba      	ldrb	r2, [r7, #22]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	32ae      	adds	r2, #174	@ 0xae
 80086a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086a4:	691b      	ldr	r3, [r3, #16]
 80086a6:	68f8      	ldr	r0, [r7, #12]
 80086a8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80086aa:	68f8      	ldr	r0, [r7, #12]
 80086ac:	f001 f972 	bl	8009994 <USBD_CtlSendStatus>
 80086b0:	e032      	b.n	8008718 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80086b2:	7afb      	ldrb	r3, [r7, #11]
 80086b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	4619      	mov	r1, r3
 80086bc:	68f8      	ldr	r0, [r7, #12]
 80086be:	f000 fa31 	bl	8008b24 <USBD_CoreFindEP>
 80086c2:	4603      	mov	r3, r0
 80086c4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80086c6:	7dbb      	ldrb	r3, [r7, #22]
 80086c8:	2bff      	cmp	r3, #255	@ 0xff
 80086ca:	d025      	beq.n	8008718 <USBD_LL_DataOutStage+0x15c>
 80086cc:	7dbb      	ldrb	r3, [r7, #22]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d122      	bne.n	8008718 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	2b03      	cmp	r3, #3
 80086dc:	d117      	bne.n	800870e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80086de:	7dba      	ldrb	r2, [r7, #22]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	32ae      	adds	r2, #174	@ 0xae
 80086e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086e8:	699b      	ldr	r3, [r3, #24]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d00f      	beq.n	800870e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80086ee:	7dba      	ldrb	r2, [r7, #22]
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80086f6:	7dba      	ldrb	r2, [r7, #22]
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	32ae      	adds	r2, #174	@ 0xae
 80086fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008700:	699b      	ldr	r3, [r3, #24]
 8008702:	7afa      	ldrb	r2, [r7, #11]
 8008704:	4611      	mov	r1, r2
 8008706:	68f8      	ldr	r0, [r7, #12]
 8008708:	4798      	blx	r3
 800870a:	4603      	mov	r3, r0
 800870c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800870e:	7dfb      	ldrb	r3, [r7, #23]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d001      	beq.n	8008718 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008714:	7dfb      	ldrb	r3, [r7, #23]
 8008716:	e000      	b.n	800871a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008718:	2300      	movs	r3, #0
}
 800871a:	4618      	mov	r0, r3
 800871c:	3718      	adds	r7, #24
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}

08008722 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008722:	b580      	push	{r7, lr}
 8008724:	b086      	sub	sp, #24
 8008726:	af00      	add	r7, sp, #0
 8008728:	60f8      	str	r0, [r7, #12]
 800872a:	460b      	mov	r3, r1
 800872c:	607a      	str	r2, [r7, #4]
 800872e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008730:	7afb      	ldrb	r3, [r7, #11]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d16f      	bne.n	8008816 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	3314      	adds	r3, #20
 800873a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008742:	2b02      	cmp	r3, #2
 8008744:	d15a      	bne.n	80087fc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	689a      	ldr	r2, [r3, #8]
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	429a      	cmp	r2, r3
 8008750:	d914      	bls.n	800877c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	689a      	ldr	r2, [r3, #8]
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	68db      	ldr	r3, [r3, #12]
 800875a:	1ad2      	subs	r2, r2, r3
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	689b      	ldr	r3, [r3, #8]
 8008764:	461a      	mov	r2, r3
 8008766:	6879      	ldr	r1, [r7, #4]
 8008768:	68f8      	ldr	r0, [r7, #12]
 800876a:	f001 f8d4 	bl	8009916 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800876e:	2300      	movs	r3, #0
 8008770:	2200      	movs	r2, #0
 8008772:	2100      	movs	r1, #0
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f001 fe33 	bl	800a3e0 <USBD_LL_PrepareReceive>
 800877a:	e03f      	b.n	80087fc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	68da      	ldr	r2, [r3, #12]
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	429a      	cmp	r2, r3
 8008786:	d11c      	bne.n	80087c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	685a      	ldr	r2, [r3, #4]
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008790:	429a      	cmp	r2, r3
 8008792:	d316      	bcc.n	80087c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	685a      	ldr	r2, [r3, #4]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800879e:	429a      	cmp	r2, r3
 80087a0:	d20f      	bcs.n	80087c2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80087a2:	2200      	movs	r2, #0
 80087a4:	2100      	movs	r1, #0
 80087a6:	68f8      	ldr	r0, [r7, #12]
 80087a8:	f001 f8b5 	bl	8009916 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2200      	movs	r2, #0
 80087b0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087b4:	2300      	movs	r3, #0
 80087b6:	2200      	movs	r2, #0
 80087b8:	2100      	movs	r1, #0
 80087ba:	68f8      	ldr	r0, [r7, #12]
 80087bc:	f001 fe10 	bl	800a3e0 <USBD_LL_PrepareReceive>
 80087c0:	e01c      	b.n	80087fc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	2b03      	cmp	r3, #3
 80087cc:	d10f      	bne.n	80087ee <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087d4:	68db      	ldr	r3, [r3, #12]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d009      	beq.n	80087ee <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2200      	movs	r2, #0
 80087de:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	68f8      	ldr	r0, [r7, #12]
 80087ec:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80087ee:	2180      	movs	r1, #128	@ 0x80
 80087f0:	68f8      	ldr	r0, [r7, #12]
 80087f2:	f001 fd4b 	bl	800a28c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80087f6:	68f8      	ldr	r0, [r7, #12]
 80087f8:	f001 f8df 	bl	80099ba <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008802:	2b00      	cmp	r3, #0
 8008804:	d03a      	beq.n	800887c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f7ff fe42 	bl	8008490 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2200      	movs	r2, #0
 8008810:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008814:	e032      	b.n	800887c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008816:	7afb      	ldrb	r3, [r7, #11]
 8008818:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800881c:	b2db      	uxtb	r3, r3
 800881e:	4619      	mov	r1, r3
 8008820:	68f8      	ldr	r0, [r7, #12]
 8008822:	f000 f97f 	bl	8008b24 <USBD_CoreFindEP>
 8008826:	4603      	mov	r3, r0
 8008828:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800882a:	7dfb      	ldrb	r3, [r7, #23]
 800882c:	2bff      	cmp	r3, #255	@ 0xff
 800882e:	d025      	beq.n	800887c <USBD_LL_DataInStage+0x15a>
 8008830:	7dfb      	ldrb	r3, [r7, #23]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d122      	bne.n	800887c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800883c:	b2db      	uxtb	r3, r3
 800883e:	2b03      	cmp	r3, #3
 8008840:	d11c      	bne.n	800887c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008842:	7dfa      	ldrb	r2, [r7, #23]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	32ae      	adds	r2, #174	@ 0xae
 8008848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800884c:	695b      	ldr	r3, [r3, #20]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d014      	beq.n	800887c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008852:	7dfa      	ldrb	r2, [r7, #23]
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800885a:	7dfa      	ldrb	r2, [r7, #23]
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	32ae      	adds	r2, #174	@ 0xae
 8008860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008864:	695b      	ldr	r3, [r3, #20]
 8008866:	7afa      	ldrb	r2, [r7, #11]
 8008868:	4611      	mov	r1, r2
 800886a:	68f8      	ldr	r0, [r7, #12]
 800886c:	4798      	blx	r3
 800886e:	4603      	mov	r3, r0
 8008870:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008872:	7dbb      	ldrb	r3, [r7, #22]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d001      	beq.n	800887c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008878:	7dbb      	ldrb	r3, [r7, #22]
 800887a:	e000      	b.n	800887e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800887c:	2300      	movs	r3, #0
}
 800887e:	4618      	mov	r0, r3
 8008880:	3718      	adds	r7, #24
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008886:	b580      	push	{r7, lr}
 8008888:	b084      	sub	sp, #16
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800888e:	2300      	movs	r3, #0
 8008890:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2201      	movs	r2, #1
 8008896:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2200      	movs	r2, #0
 800889e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2200      	movs	r2, #0
 80088ac:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d014      	beq.n	80088ec <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00e      	beq.n	80088ec <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	6852      	ldr	r2, [r2, #4]
 80088da:	b2d2      	uxtb	r2, r2
 80088dc:	4611      	mov	r1, r2
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	4798      	blx	r3
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d001      	beq.n	80088ec <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80088e8:	2303      	movs	r3, #3
 80088ea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80088ec:	2340      	movs	r3, #64	@ 0x40
 80088ee:	2200      	movs	r2, #0
 80088f0:	2100      	movs	r1, #0
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f001 fc85 	bl	800a202 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2240      	movs	r2, #64	@ 0x40
 8008904:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008908:	2340      	movs	r3, #64	@ 0x40
 800890a:	2200      	movs	r2, #0
 800890c:	2180      	movs	r1, #128	@ 0x80
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f001 fc77 	bl	800a202 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2201      	movs	r2, #1
 8008918:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2240      	movs	r2, #64	@ 0x40
 800891e:	621a      	str	r2, [r3, #32]

  return ret;
 8008920:	7bfb      	ldrb	r3, [r7, #15]
}
 8008922:	4618      	mov	r0, r3
 8008924:	3710      	adds	r7, #16
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800892a:	b480      	push	{r7}
 800892c:	b083      	sub	sp, #12
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
 8008932:	460b      	mov	r3, r1
 8008934:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	78fa      	ldrb	r2, [r7, #3]
 800893a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	370c      	adds	r7, #12
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr

0800894a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800894a:	b480      	push	{r7}
 800894c:	b083      	sub	sp, #12
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008958:	b2da      	uxtb	r2, r3
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2204      	movs	r2, #4
 8008964:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008968:	2300      	movs	r3, #0
}
 800896a:	4618      	mov	r0, r3
 800896c:	370c      	adds	r7, #12
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr

08008976 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008976:	b480      	push	{r7}
 8008978:	b083      	sub	sp, #12
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008984:	b2db      	uxtb	r3, r3
 8008986:	2b04      	cmp	r3, #4
 8008988:	d106      	bne.n	8008998 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008990:	b2da      	uxtb	r2, r3
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008998:	2300      	movs	r3, #0
}
 800899a:	4618      	mov	r0, r3
 800899c:	370c      	adds	r7, #12
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr

080089a6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b082      	sub	sp, #8
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	2b03      	cmp	r3, #3
 80089b8:	d110      	bne.n	80089dc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d00b      	beq.n	80089dc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089ca:	69db      	ldr	r3, [r3, #28]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d005      	beq.n	80089dc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089d6:	69db      	ldr	r3, [r3, #28]
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3708      	adds	r7, #8
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b082      	sub	sp, #8
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
 80089ee:	460b      	mov	r3, r1
 80089f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	32ae      	adds	r2, #174	@ 0xae
 80089fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d101      	bne.n	8008a08 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008a04:	2303      	movs	r3, #3
 8008a06:	e01c      	b.n	8008a42 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	2b03      	cmp	r3, #3
 8008a12:	d115      	bne.n	8008a40 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	32ae      	adds	r2, #174	@ 0xae
 8008a1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a22:	6a1b      	ldr	r3, [r3, #32]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d00b      	beq.n	8008a40 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	32ae      	adds	r2, #174	@ 0xae
 8008a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a36:	6a1b      	ldr	r3, [r3, #32]
 8008a38:	78fa      	ldrb	r2, [r7, #3]
 8008a3a:	4611      	mov	r1, r2
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3708      	adds	r7, #8
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b082      	sub	sp, #8
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
 8008a52:	460b      	mov	r3, r1
 8008a54:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	32ae      	adds	r2, #174	@ 0xae
 8008a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d101      	bne.n	8008a6c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008a68:	2303      	movs	r3, #3
 8008a6a:	e01c      	b.n	8008aa6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	2b03      	cmp	r3, #3
 8008a76:	d115      	bne.n	8008aa4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	32ae      	adds	r2, #174	@ 0xae
 8008a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d00b      	beq.n	8008aa4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	32ae      	adds	r2, #174	@ 0xae
 8008a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a9c:	78fa      	ldrb	r2, [r7, #3]
 8008a9e:	4611      	mov	r1, r2
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008aa4:	2300      	movs	r3, #0
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3708      	adds	r7, #8
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008aae:	b480      	push	{r7}
 8008ab0:	b083      	sub	sp, #12
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008ab6:	2300      	movs	r3, #0
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	370c      	adds	r7, #12
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr

08008ac4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008acc:	2300      	movs	r3, #0
 8008ace:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d00e      	beq.n	8008b00 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	6852      	ldr	r2, [r2, #4]
 8008aee:	b2d2      	uxtb	r2, r2
 8008af0:	4611      	mov	r1, r2
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	4798      	blx	r3
 8008af6:	4603      	mov	r3, r0
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d001      	beq.n	8008b00 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008afc:	2303      	movs	r3, #3
 8008afe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3710      	adds	r7, #16
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008b0a:	b480      	push	{r7}
 8008b0c:	b083      	sub	sp, #12
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
 8008b12:	460b      	mov	r3, r1
 8008b14:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008b16:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	370c      	adds	r7, #12
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr

08008b24 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b083      	sub	sp, #12
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008b30:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	370c      	adds	r7, #12
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr

08008b3e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008b3e:	b580      	push	{r7, lr}
 8008b40:	b086      	sub	sp, #24
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
 8008b46:	460b      	mov	r3, r1
 8008b48:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008b52:	2300      	movs	r3, #0
 8008b54:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	885b      	ldrh	r3, [r3, #2]
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	7812      	ldrb	r2, [r2, #0]
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d91f      	bls.n	8008ba4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008b6a:	e013      	b.n	8008b94 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008b6c:	f107 030a 	add.w	r3, r7, #10
 8008b70:	4619      	mov	r1, r3
 8008b72:	6978      	ldr	r0, [r7, #20]
 8008b74:	f000 f81b 	bl	8008bae <USBD_GetNextDesc>
 8008b78:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	785b      	ldrb	r3, [r3, #1]
 8008b7e:	2b05      	cmp	r3, #5
 8008b80:	d108      	bne.n	8008b94 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	789b      	ldrb	r3, [r3, #2]
 8008b8a:	78fa      	ldrb	r2, [r7, #3]
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d008      	beq.n	8008ba2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008b90:	2300      	movs	r3, #0
 8008b92:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	885b      	ldrh	r3, [r3, #2]
 8008b98:	b29a      	uxth	r2, r3
 8008b9a:	897b      	ldrh	r3, [r7, #10]
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d8e5      	bhi.n	8008b6c <USBD_GetEpDesc+0x2e>
 8008ba0:	e000      	b.n	8008ba4 <USBD_GetEpDesc+0x66>
          break;
 8008ba2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008ba4:	693b      	ldr	r3, [r7, #16]
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3718      	adds	r7, #24
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}

08008bae <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008bae:	b480      	push	{r7}
 8008bb0:	b085      	sub	sp, #20
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
 8008bb6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	881b      	ldrh	r3, [r3, #0]
 8008bc0:	68fa      	ldr	r2, [r7, #12]
 8008bc2:	7812      	ldrb	r2, [r2, #0]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	b29a      	uxth	r2, r3
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4413      	add	r3, r2
 8008bd6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3714      	adds	r7, #20
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr

08008be6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008be6:	b480      	push	{r7}
 8008be8:	b087      	sub	sp, #28
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008c04:	8a3b      	ldrh	r3, [r7, #16]
 8008c06:	021b      	lsls	r3, r3, #8
 8008c08:	b21a      	sxth	r2, r3
 8008c0a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	b21b      	sxth	r3, r3
 8008c12:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008c14:	89fb      	ldrh	r3, [r7, #14]
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	371c      	adds	r7, #28
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr
	...

08008c24 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008c3a:	2b40      	cmp	r3, #64	@ 0x40
 8008c3c:	d005      	beq.n	8008c4a <USBD_StdDevReq+0x26>
 8008c3e:	2b40      	cmp	r3, #64	@ 0x40
 8008c40:	d857      	bhi.n	8008cf2 <USBD_StdDevReq+0xce>
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d00f      	beq.n	8008c66 <USBD_StdDevReq+0x42>
 8008c46:	2b20      	cmp	r3, #32
 8008c48:	d153      	bne.n	8008cf2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	32ae      	adds	r2, #174	@ 0xae
 8008c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	6839      	ldr	r1, [r7, #0]
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	4798      	blx	r3
 8008c60:	4603      	mov	r3, r0
 8008c62:	73fb      	strb	r3, [r7, #15]
      break;
 8008c64:	e04a      	b.n	8008cfc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	785b      	ldrb	r3, [r3, #1]
 8008c6a:	2b09      	cmp	r3, #9
 8008c6c:	d83b      	bhi.n	8008ce6 <USBD_StdDevReq+0xc2>
 8008c6e:	a201      	add	r2, pc, #4	@ (adr r2, 8008c74 <USBD_StdDevReq+0x50>)
 8008c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c74:	08008cc9 	.word	0x08008cc9
 8008c78:	08008cdd 	.word	0x08008cdd
 8008c7c:	08008ce7 	.word	0x08008ce7
 8008c80:	08008cd3 	.word	0x08008cd3
 8008c84:	08008ce7 	.word	0x08008ce7
 8008c88:	08008ca7 	.word	0x08008ca7
 8008c8c:	08008c9d 	.word	0x08008c9d
 8008c90:	08008ce7 	.word	0x08008ce7
 8008c94:	08008cbf 	.word	0x08008cbf
 8008c98:	08008cb1 	.word	0x08008cb1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008c9c:	6839      	ldr	r1, [r7, #0]
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 fa3c 	bl	800911c <USBD_GetDescriptor>
          break;
 8008ca4:	e024      	b.n	8008cf0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008ca6:	6839      	ldr	r1, [r7, #0]
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 fbcb 	bl	8009444 <USBD_SetAddress>
          break;
 8008cae:	e01f      	b.n	8008cf0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008cb0:	6839      	ldr	r1, [r7, #0]
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 fc0a 	bl	80094cc <USBD_SetConfig>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	73fb      	strb	r3, [r7, #15]
          break;
 8008cbc:	e018      	b.n	8008cf0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008cbe:	6839      	ldr	r1, [r7, #0]
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 fcad 	bl	8009620 <USBD_GetConfig>
          break;
 8008cc6:	e013      	b.n	8008cf0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008cc8:	6839      	ldr	r1, [r7, #0]
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 fcde 	bl	800968c <USBD_GetStatus>
          break;
 8008cd0:	e00e      	b.n	8008cf0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008cd2:	6839      	ldr	r1, [r7, #0]
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 fd0d 	bl	80096f4 <USBD_SetFeature>
          break;
 8008cda:	e009      	b.n	8008cf0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008cdc:	6839      	ldr	r1, [r7, #0]
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 fd31 	bl	8009746 <USBD_ClrFeature>
          break;
 8008ce4:	e004      	b.n	8008cf0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008ce6:	6839      	ldr	r1, [r7, #0]
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 fd88 	bl	80097fe <USBD_CtlError>
          break;
 8008cee:	bf00      	nop
      }
      break;
 8008cf0:	e004      	b.n	8008cfc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008cf2:	6839      	ldr	r1, [r7, #0]
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 fd82 	bl	80097fe <USBD_CtlError>
      break;
 8008cfa:	bf00      	nop
  }

  return ret;
 8008cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop

08008d08 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d12:	2300      	movs	r3, #0
 8008d14:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008d1e:	2b40      	cmp	r3, #64	@ 0x40
 8008d20:	d005      	beq.n	8008d2e <USBD_StdItfReq+0x26>
 8008d22:	2b40      	cmp	r3, #64	@ 0x40
 8008d24:	d852      	bhi.n	8008dcc <USBD_StdItfReq+0xc4>
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d001      	beq.n	8008d2e <USBD_StdItfReq+0x26>
 8008d2a:	2b20      	cmp	r3, #32
 8008d2c:	d14e      	bne.n	8008dcc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	3b01      	subs	r3, #1
 8008d38:	2b02      	cmp	r3, #2
 8008d3a:	d840      	bhi.n	8008dbe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	889b      	ldrh	r3, [r3, #4]
 8008d40:	b2db      	uxtb	r3, r3
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d836      	bhi.n	8008db4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	889b      	ldrh	r3, [r3, #4]
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f7ff fedb 	bl	8008b0a <USBD_CoreFindIF>
 8008d54:	4603      	mov	r3, r0
 8008d56:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d58:	7bbb      	ldrb	r3, [r7, #14]
 8008d5a:	2bff      	cmp	r3, #255	@ 0xff
 8008d5c:	d01d      	beq.n	8008d9a <USBD_StdItfReq+0x92>
 8008d5e:	7bbb      	ldrb	r3, [r7, #14]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d11a      	bne.n	8008d9a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008d64:	7bba      	ldrb	r2, [r7, #14]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	32ae      	adds	r2, #174	@ 0xae
 8008d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d6e:	689b      	ldr	r3, [r3, #8]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d00f      	beq.n	8008d94 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008d74:	7bba      	ldrb	r2, [r7, #14]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008d7c:	7bba      	ldrb	r2, [r7, #14]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	32ae      	adds	r2, #174	@ 0xae
 8008d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	6839      	ldr	r1, [r7, #0]
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	4798      	blx	r3
 8008d8e:	4603      	mov	r3, r0
 8008d90:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008d92:	e004      	b.n	8008d9e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008d94:	2303      	movs	r3, #3
 8008d96:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008d98:	e001      	b.n	8008d9e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008d9a:	2303      	movs	r3, #3
 8008d9c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	88db      	ldrh	r3, [r3, #6]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d110      	bne.n	8008dc8 <USBD_StdItfReq+0xc0>
 8008da6:	7bfb      	ldrb	r3, [r7, #15]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d10d      	bne.n	8008dc8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 fdf1 	bl	8009994 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008db2:	e009      	b.n	8008dc8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008db4:	6839      	ldr	r1, [r7, #0]
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 fd21 	bl	80097fe <USBD_CtlError>
          break;
 8008dbc:	e004      	b.n	8008dc8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008dbe:	6839      	ldr	r1, [r7, #0]
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 fd1c 	bl	80097fe <USBD_CtlError>
          break;
 8008dc6:	e000      	b.n	8008dca <USBD_StdItfReq+0xc2>
          break;
 8008dc8:	bf00      	nop
      }
      break;
 8008dca:	e004      	b.n	8008dd6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008dcc:	6839      	ldr	r1, [r7, #0]
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 fd15 	bl	80097fe <USBD_CtlError>
      break;
 8008dd4:	bf00      	nop
  }

  return ret;
 8008dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3710      	adds	r7, #16
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008dea:	2300      	movs	r3, #0
 8008dec:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	889b      	ldrh	r3, [r3, #4]
 8008df2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008dfc:	2b40      	cmp	r3, #64	@ 0x40
 8008dfe:	d007      	beq.n	8008e10 <USBD_StdEPReq+0x30>
 8008e00:	2b40      	cmp	r3, #64	@ 0x40
 8008e02:	f200 817f 	bhi.w	8009104 <USBD_StdEPReq+0x324>
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d02a      	beq.n	8008e60 <USBD_StdEPReq+0x80>
 8008e0a:	2b20      	cmp	r3, #32
 8008e0c:	f040 817a 	bne.w	8009104 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008e10:	7bbb      	ldrb	r3, [r7, #14]
 8008e12:	4619      	mov	r1, r3
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f7ff fe85 	bl	8008b24 <USBD_CoreFindEP>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e1e:	7b7b      	ldrb	r3, [r7, #13]
 8008e20:	2bff      	cmp	r3, #255	@ 0xff
 8008e22:	f000 8174 	beq.w	800910e <USBD_StdEPReq+0x32e>
 8008e26:	7b7b      	ldrb	r3, [r7, #13]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	f040 8170 	bne.w	800910e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008e2e:	7b7a      	ldrb	r2, [r7, #13]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008e36:	7b7a      	ldrb	r2, [r7, #13]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	32ae      	adds	r2, #174	@ 0xae
 8008e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	f000 8163 	beq.w	800910e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008e48:	7b7a      	ldrb	r2, [r7, #13]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	32ae      	adds	r2, #174	@ 0xae
 8008e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	6839      	ldr	r1, [r7, #0]
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	4798      	blx	r3
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008e5e:	e156      	b.n	800910e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	785b      	ldrb	r3, [r3, #1]
 8008e64:	2b03      	cmp	r3, #3
 8008e66:	d008      	beq.n	8008e7a <USBD_StdEPReq+0x9a>
 8008e68:	2b03      	cmp	r3, #3
 8008e6a:	f300 8145 	bgt.w	80090f8 <USBD_StdEPReq+0x318>
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	f000 809b 	beq.w	8008faa <USBD_StdEPReq+0x1ca>
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d03c      	beq.n	8008ef2 <USBD_StdEPReq+0x112>
 8008e78:	e13e      	b.n	80090f8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e80:	b2db      	uxtb	r3, r3
 8008e82:	2b02      	cmp	r3, #2
 8008e84:	d002      	beq.n	8008e8c <USBD_StdEPReq+0xac>
 8008e86:	2b03      	cmp	r3, #3
 8008e88:	d016      	beq.n	8008eb8 <USBD_StdEPReq+0xd8>
 8008e8a:	e02c      	b.n	8008ee6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e8c:	7bbb      	ldrb	r3, [r7, #14]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d00d      	beq.n	8008eae <USBD_StdEPReq+0xce>
 8008e92:	7bbb      	ldrb	r3, [r7, #14]
 8008e94:	2b80      	cmp	r3, #128	@ 0x80
 8008e96:	d00a      	beq.n	8008eae <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e98:	7bbb      	ldrb	r3, [r7, #14]
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f001 f9f5 	bl	800a28c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ea2:	2180      	movs	r1, #128	@ 0x80
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f001 f9f1 	bl	800a28c <USBD_LL_StallEP>
 8008eaa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008eac:	e020      	b.n	8008ef0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008eae:	6839      	ldr	r1, [r7, #0]
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 fca4 	bl	80097fe <USBD_CtlError>
              break;
 8008eb6:	e01b      	b.n	8008ef0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	885b      	ldrh	r3, [r3, #2]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d10e      	bne.n	8008ede <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008ec0:	7bbb      	ldrb	r3, [r7, #14]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d00b      	beq.n	8008ede <USBD_StdEPReq+0xfe>
 8008ec6:	7bbb      	ldrb	r3, [r7, #14]
 8008ec8:	2b80      	cmp	r3, #128	@ 0x80
 8008eca:	d008      	beq.n	8008ede <USBD_StdEPReq+0xfe>
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	88db      	ldrh	r3, [r3, #6]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d104      	bne.n	8008ede <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ed4:	7bbb      	ldrb	r3, [r7, #14]
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f001 f9d7 	bl	800a28c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 fd58 	bl	8009994 <USBD_CtlSendStatus>

              break;
 8008ee4:	e004      	b.n	8008ef0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008ee6:	6839      	ldr	r1, [r7, #0]
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 fc88 	bl	80097fe <USBD_CtlError>
              break;
 8008eee:	bf00      	nop
          }
          break;
 8008ef0:	e107      	b.n	8009102 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	2b02      	cmp	r3, #2
 8008efc:	d002      	beq.n	8008f04 <USBD_StdEPReq+0x124>
 8008efe:	2b03      	cmp	r3, #3
 8008f00:	d016      	beq.n	8008f30 <USBD_StdEPReq+0x150>
 8008f02:	e04b      	b.n	8008f9c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f04:	7bbb      	ldrb	r3, [r7, #14]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d00d      	beq.n	8008f26 <USBD_StdEPReq+0x146>
 8008f0a:	7bbb      	ldrb	r3, [r7, #14]
 8008f0c:	2b80      	cmp	r3, #128	@ 0x80
 8008f0e:	d00a      	beq.n	8008f26 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f10:	7bbb      	ldrb	r3, [r7, #14]
 8008f12:	4619      	mov	r1, r3
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f001 f9b9 	bl	800a28c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f1a:	2180      	movs	r1, #128	@ 0x80
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f001 f9b5 	bl	800a28c <USBD_LL_StallEP>
 8008f22:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f24:	e040      	b.n	8008fa8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008f26:	6839      	ldr	r1, [r7, #0]
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 fc68 	bl	80097fe <USBD_CtlError>
              break;
 8008f2e:	e03b      	b.n	8008fa8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	885b      	ldrh	r3, [r3, #2]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d136      	bne.n	8008fa6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008f38:	7bbb      	ldrb	r3, [r7, #14]
 8008f3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d004      	beq.n	8008f4c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008f42:	7bbb      	ldrb	r3, [r7, #14]
 8008f44:	4619      	mov	r1, r3
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f001 f9bf 	bl	800a2ca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 fd21 	bl	8009994 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008f52:	7bbb      	ldrb	r3, [r7, #14]
 8008f54:	4619      	mov	r1, r3
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f7ff fde4 	bl	8008b24 <USBD_CoreFindEP>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f60:	7b7b      	ldrb	r3, [r7, #13]
 8008f62:	2bff      	cmp	r3, #255	@ 0xff
 8008f64:	d01f      	beq.n	8008fa6 <USBD_StdEPReq+0x1c6>
 8008f66:	7b7b      	ldrb	r3, [r7, #13]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d11c      	bne.n	8008fa6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008f6c:	7b7a      	ldrb	r2, [r7, #13]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008f74:	7b7a      	ldrb	r2, [r7, #13]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	32ae      	adds	r2, #174	@ 0xae
 8008f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d010      	beq.n	8008fa6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008f84:	7b7a      	ldrb	r2, [r7, #13]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	32ae      	adds	r2, #174	@ 0xae
 8008f8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f8e:	689b      	ldr	r3, [r3, #8]
 8008f90:	6839      	ldr	r1, [r7, #0]
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	4798      	blx	r3
 8008f96:	4603      	mov	r3, r0
 8008f98:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008f9a:	e004      	b.n	8008fa6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008f9c:	6839      	ldr	r1, [r7, #0]
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 fc2d 	bl	80097fe <USBD_CtlError>
              break;
 8008fa4:	e000      	b.n	8008fa8 <USBD_StdEPReq+0x1c8>
              break;
 8008fa6:	bf00      	nop
          }
          break;
 8008fa8:	e0ab      	b.n	8009102 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	2b02      	cmp	r3, #2
 8008fb4:	d002      	beq.n	8008fbc <USBD_StdEPReq+0x1dc>
 8008fb6:	2b03      	cmp	r3, #3
 8008fb8:	d032      	beq.n	8009020 <USBD_StdEPReq+0x240>
 8008fba:	e097      	b.n	80090ec <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fbc:	7bbb      	ldrb	r3, [r7, #14]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d007      	beq.n	8008fd2 <USBD_StdEPReq+0x1f2>
 8008fc2:	7bbb      	ldrb	r3, [r7, #14]
 8008fc4:	2b80      	cmp	r3, #128	@ 0x80
 8008fc6:	d004      	beq.n	8008fd2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008fc8:	6839      	ldr	r1, [r7, #0]
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 fc17 	bl	80097fe <USBD_CtlError>
                break;
 8008fd0:	e091      	b.n	80090f6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fd2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	da0b      	bge.n	8008ff2 <USBD_StdEPReq+0x212>
 8008fda:	7bbb      	ldrb	r3, [r7, #14]
 8008fdc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008fe0:	4613      	mov	r3, r2
 8008fe2:	009b      	lsls	r3, r3, #2
 8008fe4:	4413      	add	r3, r2
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	3310      	adds	r3, #16
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	4413      	add	r3, r2
 8008fee:	3304      	adds	r3, #4
 8008ff0:	e00b      	b.n	800900a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ff2:	7bbb      	ldrb	r3, [r7, #14]
 8008ff4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ff8:	4613      	mov	r3, r2
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	4413      	add	r3, r2
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009004:	687a      	ldr	r2, [r7, #4]
 8009006:	4413      	add	r3, r2
 8009008:	3304      	adds	r3, #4
 800900a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	2200      	movs	r2, #0
 8009010:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	2202      	movs	r2, #2
 8009016:	4619      	mov	r1, r3
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 fc61 	bl	80098e0 <USBD_CtlSendData>
              break;
 800901e:	e06a      	b.n	80090f6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009020:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009024:	2b00      	cmp	r3, #0
 8009026:	da11      	bge.n	800904c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009028:	7bbb      	ldrb	r3, [r7, #14]
 800902a:	f003 020f 	and.w	r2, r3, #15
 800902e:	6879      	ldr	r1, [r7, #4]
 8009030:	4613      	mov	r3, r2
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	4413      	add	r3, r2
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	440b      	add	r3, r1
 800903a:	3324      	adds	r3, #36	@ 0x24
 800903c:	881b      	ldrh	r3, [r3, #0]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d117      	bne.n	8009072 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009042:	6839      	ldr	r1, [r7, #0]
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f000 fbda 	bl	80097fe <USBD_CtlError>
                  break;
 800904a:	e054      	b.n	80090f6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800904c:	7bbb      	ldrb	r3, [r7, #14]
 800904e:	f003 020f 	and.w	r2, r3, #15
 8009052:	6879      	ldr	r1, [r7, #4]
 8009054:	4613      	mov	r3, r2
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	4413      	add	r3, r2
 800905a:	009b      	lsls	r3, r3, #2
 800905c:	440b      	add	r3, r1
 800905e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009062:	881b      	ldrh	r3, [r3, #0]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d104      	bne.n	8009072 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009068:	6839      	ldr	r1, [r7, #0]
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 fbc7 	bl	80097fe <USBD_CtlError>
                  break;
 8009070:	e041      	b.n	80090f6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009072:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009076:	2b00      	cmp	r3, #0
 8009078:	da0b      	bge.n	8009092 <USBD_StdEPReq+0x2b2>
 800907a:	7bbb      	ldrb	r3, [r7, #14]
 800907c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009080:	4613      	mov	r3, r2
 8009082:	009b      	lsls	r3, r3, #2
 8009084:	4413      	add	r3, r2
 8009086:	009b      	lsls	r3, r3, #2
 8009088:	3310      	adds	r3, #16
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	4413      	add	r3, r2
 800908e:	3304      	adds	r3, #4
 8009090:	e00b      	b.n	80090aa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009092:	7bbb      	ldrb	r3, [r7, #14]
 8009094:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009098:	4613      	mov	r3, r2
 800909a:	009b      	lsls	r3, r3, #2
 800909c:	4413      	add	r3, r2
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	4413      	add	r3, r2
 80090a8:	3304      	adds	r3, #4
 80090aa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80090ac:	7bbb      	ldrb	r3, [r7, #14]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d002      	beq.n	80090b8 <USBD_StdEPReq+0x2d8>
 80090b2:	7bbb      	ldrb	r3, [r7, #14]
 80090b4:	2b80      	cmp	r3, #128	@ 0x80
 80090b6:	d103      	bne.n	80090c0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	2200      	movs	r2, #0
 80090bc:	601a      	str	r2, [r3, #0]
 80090be:	e00e      	b.n	80090de <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80090c0:	7bbb      	ldrb	r3, [r7, #14]
 80090c2:	4619      	mov	r1, r3
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f001 f91f 	bl	800a308 <USBD_LL_IsStallEP>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d003      	beq.n	80090d8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	2201      	movs	r2, #1
 80090d4:	601a      	str	r2, [r3, #0]
 80090d6:	e002      	b.n	80090de <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	2200      	movs	r2, #0
 80090dc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	2202      	movs	r2, #2
 80090e2:	4619      	mov	r1, r3
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 fbfb 	bl	80098e0 <USBD_CtlSendData>
              break;
 80090ea:	e004      	b.n	80090f6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80090ec:	6839      	ldr	r1, [r7, #0]
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 fb85 	bl	80097fe <USBD_CtlError>
              break;
 80090f4:	bf00      	nop
          }
          break;
 80090f6:	e004      	b.n	8009102 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80090f8:	6839      	ldr	r1, [r7, #0]
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 fb7f 	bl	80097fe <USBD_CtlError>
          break;
 8009100:	bf00      	nop
      }
      break;
 8009102:	e005      	b.n	8009110 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009104:	6839      	ldr	r1, [r7, #0]
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 fb79 	bl	80097fe <USBD_CtlError>
      break;
 800910c:	e000      	b.n	8009110 <USBD_StdEPReq+0x330>
      break;
 800910e:	bf00      	nop
  }

  return ret;
 8009110:	7bfb      	ldrb	r3, [r7, #15]
}
 8009112:	4618      	mov	r0, r3
 8009114:	3710      	adds	r7, #16
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
	...

0800911c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009126:	2300      	movs	r3, #0
 8009128:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800912a:	2300      	movs	r3, #0
 800912c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800912e:	2300      	movs	r3, #0
 8009130:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	885b      	ldrh	r3, [r3, #2]
 8009136:	0a1b      	lsrs	r3, r3, #8
 8009138:	b29b      	uxth	r3, r3
 800913a:	3b01      	subs	r3, #1
 800913c:	2b0e      	cmp	r3, #14
 800913e:	f200 8152 	bhi.w	80093e6 <USBD_GetDescriptor+0x2ca>
 8009142:	a201      	add	r2, pc, #4	@ (adr r2, 8009148 <USBD_GetDescriptor+0x2c>)
 8009144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009148:	080091b9 	.word	0x080091b9
 800914c:	080091d1 	.word	0x080091d1
 8009150:	08009211 	.word	0x08009211
 8009154:	080093e7 	.word	0x080093e7
 8009158:	080093e7 	.word	0x080093e7
 800915c:	08009387 	.word	0x08009387
 8009160:	080093b3 	.word	0x080093b3
 8009164:	080093e7 	.word	0x080093e7
 8009168:	080093e7 	.word	0x080093e7
 800916c:	080093e7 	.word	0x080093e7
 8009170:	080093e7 	.word	0x080093e7
 8009174:	080093e7 	.word	0x080093e7
 8009178:	080093e7 	.word	0x080093e7
 800917c:	080093e7 	.word	0x080093e7
 8009180:	08009185 	.word	0x08009185
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800918a:	69db      	ldr	r3, [r3, #28]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d00b      	beq.n	80091a8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009196:	69db      	ldr	r3, [r3, #28]
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	7c12      	ldrb	r2, [r2, #16]
 800919c:	f107 0108 	add.w	r1, r7, #8
 80091a0:	4610      	mov	r0, r2
 80091a2:	4798      	blx	r3
 80091a4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80091a6:	e126      	b.n	80093f6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80091a8:	6839      	ldr	r1, [r7, #0]
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 fb27 	bl	80097fe <USBD_CtlError>
        err++;
 80091b0:	7afb      	ldrb	r3, [r7, #11]
 80091b2:	3301      	adds	r3, #1
 80091b4:	72fb      	strb	r3, [r7, #11]
      break;
 80091b6:	e11e      	b.n	80093f6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	7c12      	ldrb	r2, [r2, #16]
 80091c4:	f107 0108 	add.w	r1, r7, #8
 80091c8:	4610      	mov	r0, r2
 80091ca:	4798      	blx	r3
 80091cc:	60f8      	str	r0, [r7, #12]
      break;
 80091ce:	e112      	b.n	80093f6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	7c1b      	ldrb	r3, [r3, #16]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d10d      	bne.n	80091f4 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091e0:	f107 0208 	add.w	r2, r7, #8
 80091e4:	4610      	mov	r0, r2
 80091e6:	4798      	blx	r3
 80091e8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	3301      	adds	r3, #1
 80091ee:	2202      	movs	r2, #2
 80091f0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80091f2:	e100      	b.n	80093f6 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091fc:	f107 0208 	add.w	r2, r7, #8
 8009200:	4610      	mov	r0, r2
 8009202:	4798      	blx	r3
 8009204:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	3301      	adds	r3, #1
 800920a:	2202      	movs	r2, #2
 800920c:	701a      	strb	r2, [r3, #0]
      break;
 800920e:	e0f2      	b.n	80093f6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	885b      	ldrh	r3, [r3, #2]
 8009214:	b2db      	uxtb	r3, r3
 8009216:	2b05      	cmp	r3, #5
 8009218:	f200 80ac 	bhi.w	8009374 <USBD_GetDescriptor+0x258>
 800921c:	a201      	add	r2, pc, #4	@ (adr r2, 8009224 <USBD_GetDescriptor+0x108>)
 800921e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009222:	bf00      	nop
 8009224:	0800923d 	.word	0x0800923d
 8009228:	08009271 	.word	0x08009271
 800922c:	080092a5 	.word	0x080092a5
 8009230:	080092d9 	.word	0x080092d9
 8009234:	0800930d 	.word	0x0800930d
 8009238:	08009341 	.word	0x08009341
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d00b      	beq.n	8009260 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	687a      	ldr	r2, [r7, #4]
 8009252:	7c12      	ldrb	r2, [r2, #16]
 8009254:	f107 0108 	add.w	r1, r7, #8
 8009258:	4610      	mov	r0, r2
 800925a:	4798      	blx	r3
 800925c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800925e:	e091      	b.n	8009384 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009260:	6839      	ldr	r1, [r7, #0]
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 facb 	bl	80097fe <USBD_CtlError>
            err++;
 8009268:	7afb      	ldrb	r3, [r7, #11]
 800926a:	3301      	adds	r3, #1
 800926c:	72fb      	strb	r3, [r7, #11]
          break;
 800926e:	e089      	b.n	8009384 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d00b      	beq.n	8009294 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	7c12      	ldrb	r2, [r2, #16]
 8009288:	f107 0108 	add.w	r1, r7, #8
 800928c:	4610      	mov	r0, r2
 800928e:	4798      	blx	r3
 8009290:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009292:	e077      	b.n	8009384 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009294:	6839      	ldr	r1, [r7, #0]
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 fab1 	bl	80097fe <USBD_CtlError>
            err++;
 800929c:	7afb      	ldrb	r3, [r7, #11]
 800929e:	3301      	adds	r3, #1
 80092a0:	72fb      	strb	r3, [r7, #11]
          break;
 80092a2:	e06f      	b.n	8009384 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d00b      	beq.n	80092c8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	7c12      	ldrb	r2, [r2, #16]
 80092bc:	f107 0108 	add.w	r1, r7, #8
 80092c0:	4610      	mov	r0, r2
 80092c2:	4798      	blx	r3
 80092c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092c6:	e05d      	b.n	8009384 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80092c8:	6839      	ldr	r1, [r7, #0]
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 fa97 	bl	80097fe <USBD_CtlError>
            err++;
 80092d0:	7afb      	ldrb	r3, [r7, #11]
 80092d2:	3301      	adds	r3, #1
 80092d4:	72fb      	strb	r3, [r7, #11]
          break;
 80092d6:	e055      	b.n	8009384 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092de:	691b      	ldr	r3, [r3, #16]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d00b      	beq.n	80092fc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092ea:	691b      	ldr	r3, [r3, #16]
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	7c12      	ldrb	r2, [r2, #16]
 80092f0:	f107 0108 	add.w	r1, r7, #8
 80092f4:	4610      	mov	r0, r2
 80092f6:	4798      	blx	r3
 80092f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092fa:	e043      	b.n	8009384 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80092fc:	6839      	ldr	r1, [r7, #0]
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f000 fa7d 	bl	80097fe <USBD_CtlError>
            err++;
 8009304:	7afb      	ldrb	r3, [r7, #11]
 8009306:	3301      	adds	r3, #1
 8009308:	72fb      	strb	r3, [r7, #11]
          break;
 800930a:	e03b      	b.n	8009384 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009312:	695b      	ldr	r3, [r3, #20]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d00b      	beq.n	8009330 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800931e:	695b      	ldr	r3, [r3, #20]
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	7c12      	ldrb	r2, [r2, #16]
 8009324:	f107 0108 	add.w	r1, r7, #8
 8009328:	4610      	mov	r0, r2
 800932a:	4798      	blx	r3
 800932c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800932e:	e029      	b.n	8009384 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009330:	6839      	ldr	r1, [r7, #0]
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 fa63 	bl	80097fe <USBD_CtlError>
            err++;
 8009338:	7afb      	ldrb	r3, [r7, #11]
 800933a:	3301      	adds	r3, #1
 800933c:	72fb      	strb	r3, [r7, #11]
          break;
 800933e:	e021      	b.n	8009384 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009346:	699b      	ldr	r3, [r3, #24]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d00b      	beq.n	8009364 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009352:	699b      	ldr	r3, [r3, #24]
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	7c12      	ldrb	r2, [r2, #16]
 8009358:	f107 0108 	add.w	r1, r7, #8
 800935c:	4610      	mov	r0, r2
 800935e:	4798      	blx	r3
 8009360:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009362:	e00f      	b.n	8009384 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009364:	6839      	ldr	r1, [r7, #0]
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 fa49 	bl	80097fe <USBD_CtlError>
            err++;
 800936c:	7afb      	ldrb	r3, [r7, #11]
 800936e:	3301      	adds	r3, #1
 8009370:	72fb      	strb	r3, [r7, #11]
          break;
 8009372:	e007      	b.n	8009384 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009374:	6839      	ldr	r1, [r7, #0]
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 fa41 	bl	80097fe <USBD_CtlError>
          err++;
 800937c:	7afb      	ldrb	r3, [r7, #11]
 800937e:	3301      	adds	r3, #1
 8009380:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009382:	bf00      	nop
      }
      break;
 8009384:	e037      	b.n	80093f6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	7c1b      	ldrb	r3, [r3, #16]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d109      	bne.n	80093a2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009396:	f107 0208 	add.w	r2, r7, #8
 800939a:	4610      	mov	r0, r2
 800939c:	4798      	blx	r3
 800939e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80093a0:	e029      	b.n	80093f6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80093a2:	6839      	ldr	r1, [r7, #0]
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 fa2a 	bl	80097fe <USBD_CtlError>
        err++;
 80093aa:	7afb      	ldrb	r3, [r7, #11]
 80093ac:	3301      	adds	r3, #1
 80093ae:	72fb      	strb	r3, [r7, #11]
      break;
 80093b0:	e021      	b.n	80093f6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	7c1b      	ldrb	r3, [r3, #16]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d10d      	bne.n	80093d6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093c2:	f107 0208 	add.w	r2, r7, #8
 80093c6:	4610      	mov	r0, r2
 80093c8:	4798      	blx	r3
 80093ca:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	3301      	adds	r3, #1
 80093d0:	2207      	movs	r2, #7
 80093d2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80093d4:	e00f      	b.n	80093f6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80093d6:	6839      	ldr	r1, [r7, #0]
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f000 fa10 	bl	80097fe <USBD_CtlError>
        err++;
 80093de:	7afb      	ldrb	r3, [r7, #11]
 80093e0:	3301      	adds	r3, #1
 80093e2:	72fb      	strb	r3, [r7, #11]
      break;
 80093e4:	e007      	b.n	80093f6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80093e6:	6839      	ldr	r1, [r7, #0]
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 fa08 	bl	80097fe <USBD_CtlError>
      err++;
 80093ee:	7afb      	ldrb	r3, [r7, #11]
 80093f0:	3301      	adds	r3, #1
 80093f2:	72fb      	strb	r3, [r7, #11]
      break;
 80093f4:	bf00      	nop
  }

  if (err != 0U)
 80093f6:	7afb      	ldrb	r3, [r7, #11]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d11e      	bne.n	800943a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	88db      	ldrh	r3, [r3, #6]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d016      	beq.n	8009432 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009404:	893b      	ldrh	r3, [r7, #8]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d00e      	beq.n	8009428 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	88da      	ldrh	r2, [r3, #6]
 800940e:	893b      	ldrh	r3, [r7, #8]
 8009410:	4293      	cmp	r3, r2
 8009412:	bf28      	it	cs
 8009414:	4613      	movcs	r3, r2
 8009416:	b29b      	uxth	r3, r3
 8009418:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800941a:	893b      	ldrh	r3, [r7, #8]
 800941c:	461a      	mov	r2, r3
 800941e:	68f9      	ldr	r1, [r7, #12]
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 fa5d 	bl	80098e0 <USBD_CtlSendData>
 8009426:	e009      	b.n	800943c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009428:	6839      	ldr	r1, [r7, #0]
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 f9e7 	bl	80097fe <USBD_CtlError>
 8009430:	e004      	b.n	800943c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f000 faae 	bl	8009994 <USBD_CtlSendStatus>
 8009438:	e000      	b.n	800943c <USBD_GetDescriptor+0x320>
    return;
 800943a:	bf00      	nop
  }
}
 800943c:	3710      	adds	r7, #16
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}
 8009442:	bf00      	nop

08009444 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b084      	sub	sp, #16
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	889b      	ldrh	r3, [r3, #4]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d131      	bne.n	80094ba <USBD_SetAddress+0x76>
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	88db      	ldrh	r3, [r3, #6]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d12d      	bne.n	80094ba <USBD_SetAddress+0x76>
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	885b      	ldrh	r3, [r3, #2]
 8009462:	2b7f      	cmp	r3, #127	@ 0x7f
 8009464:	d829      	bhi.n	80094ba <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	885b      	ldrh	r3, [r3, #2]
 800946a:	b2db      	uxtb	r3, r3
 800946c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009470:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009478:	b2db      	uxtb	r3, r3
 800947a:	2b03      	cmp	r3, #3
 800947c:	d104      	bne.n	8009488 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800947e:	6839      	ldr	r1, [r7, #0]
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 f9bc 	bl	80097fe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009486:	e01d      	b.n	80094c4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	7bfa      	ldrb	r2, [r7, #15]
 800948c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009490:	7bfb      	ldrb	r3, [r7, #15]
 8009492:	4619      	mov	r1, r3
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 ff63 	bl	800a360 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 fa7a 	bl	8009994 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80094a0:	7bfb      	ldrb	r3, [r7, #15]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d004      	beq.n	80094b0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2202      	movs	r2, #2
 80094aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094ae:	e009      	b.n	80094c4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2201      	movs	r2, #1
 80094b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094b8:	e004      	b.n	80094c4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80094ba:	6839      	ldr	r1, [r7, #0]
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f000 f99e 	bl	80097fe <USBD_CtlError>
  }
}
 80094c2:	bf00      	nop
 80094c4:	bf00      	nop
 80094c6:	3710      	adds	r7, #16
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80094d6:	2300      	movs	r3, #0
 80094d8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	885b      	ldrh	r3, [r3, #2]
 80094de:	b2da      	uxtb	r2, r3
 80094e0:	4b4e      	ldr	r3, [pc, #312]	@ (800961c <USBD_SetConfig+0x150>)
 80094e2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80094e4:	4b4d      	ldr	r3, [pc, #308]	@ (800961c <USBD_SetConfig+0x150>)
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d905      	bls.n	80094f8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80094ec:	6839      	ldr	r1, [r7, #0]
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 f985 	bl	80097fe <USBD_CtlError>
    return USBD_FAIL;
 80094f4:	2303      	movs	r3, #3
 80094f6:	e08c      	b.n	8009612 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094fe:	b2db      	uxtb	r3, r3
 8009500:	2b02      	cmp	r3, #2
 8009502:	d002      	beq.n	800950a <USBD_SetConfig+0x3e>
 8009504:	2b03      	cmp	r3, #3
 8009506:	d029      	beq.n	800955c <USBD_SetConfig+0x90>
 8009508:	e075      	b.n	80095f6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800950a:	4b44      	ldr	r3, [pc, #272]	@ (800961c <USBD_SetConfig+0x150>)
 800950c:	781b      	ldrb	r3, [r3, #0]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d020      	beq.n	8009554 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009512:	4b42      	ldr	r3, [pc, #264]	@ (800961c <USBD_SetConfig+0x150>)
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	461a      	mov	r2, r3
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800951c:	4b3f      	ldr	r3, [pc, #252]	@ (800961c <USBD_SetConfig+0x150>)
 800951e:	781b      	ldrb	r3, [r3, #0]
 8009520:	4619      	mov	r1, r3
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f7fe ffbf 	bl	80084a6 <USBD_SetClassConfig>
 8009528:	4603      	mov	r3, r0
 800952a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800952c:	7bfb      	ldrb	r3, [r7, #15]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d008      	beq.n	8009544 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009532:	6839      	ldr	r1, [r7, #0]
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 f962 	bl	80097fe <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2202      	movs	r2, #2
 800953e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009542:	e065      	b.n	8009610 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f000 fa25 	bl	8009994 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2203      	movs	r2, #3
 800954e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009552:	e05d      	b.n	8009610 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 fa1d 	bl	8009994 <USBD_CtlSendStatus>
      break;
 800955a:	e059      	b.n	8009610 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800955c:	4b2f      	ldr	r3, [pc, #188]	@ (800961c <USBD_SetConfig+0x150>)
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d112      	bne.n	800958a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2202      	movs	r2, #2
 8009568:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800956c:	4b2b      	ldr	r3, [pc, #172]	@ (800961c <USBD_SetConfig+0x150>)
 800956e:	781b      	ldrb	r3, [r3, #0]
 8009570:	461a      	mov	r2, r3
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009576:	4b29      	ldr	r3, [pc, #164]	@ (800961c <USBD_SetConfig+0x150>)
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	4619      	mov	r1, r3
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f7fe ffae 	bl	80084de <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f000 fa06 	bl	8009994 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009588:	e042      	b.n	8009610 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800958a:	4b24      	ldr	r3, [pc, #144]	@ (800961c <USBD_SetConfig+0x150>)
 800958c:	781b      	ldrb	r3, [r3, #0]
 800958e:	461a      	mov	r2, r3
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	429a      	cmp	r2, r3
 8009596:	d02a      	beq.n	80095ee <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	b2db      	uxtb	r3, r3
 800959e:	4619      	mov	r1, r3
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f7fe ff9c 	bl	80084de <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80095a6:	4b1d      	ldr	r3, [pc, #116]	@ (800961c <USBD_SetConfig+0x150>)
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	461a      	mov	r2, r3
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80095b0:	4b1a      	ldr	r3, [pc, #104]	@ (800961c <USBD_SetConfig+0x150>)
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	4619      	mov	r1, r3
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f7fe ff75 	bl	80084a6 <USBD_SetClassConfig>
 80095bc:	4603      	mov	r3, r0
 80095be:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80095c0:	7bfb      	ldrb	r3, [r7, #15]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d00f      	beq.n	80095e6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80095c6:	6839      	ldr	r1, [r7, #0]
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f000 f918 	bl	80097fe <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	4619      	mov	r1, r3
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f7fe ff81 	bl	80084de <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2202      	movs	r2, #2
 80095e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80095e4:	e014      	b.n	8009610 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 f9d4 	bl	8009994 <USBD_CtlSendStatus>
      break;
 80095ec:	e010      	b.n	8009610 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 f9d0 	bl	8009994 <USBD_CtlSendStatus>
      break;
 80095f4:	e00c      	b.n	8009610 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80095f6:	6839      	ldr	r1, [r7, #0]
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 f900 	bl	80097fe <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80095fe:	4b07      	ldr	r3, [pc, #28]	@ (800961c <USBD_SetConfig+0x150>)
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	4619      	mov	r1, r3
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f7fe ff6a 	bl	80084de <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800960a:	2303      	movs	r3, #3
 800960c:	73fb      	strb	r3, [r7, #15]
      break;
 800960e:	bf00      	nop
  }

  return ret;
 8009610:	7bfb      	ldrb	r3, [r7, #15]
}
 8009612:	4618      	mov	r0, r3
 8009614:	3710      	adds	r7, #16
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
 800961a:	bf00      	nop
 800961c:	200004cc 	.word	0x200004cc

08009620 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	88db      	ldrh	r3, [r3, #6]
 800962e:	2b01      	cmp	r3, #1
 8009630:	d004      	beq.n	800963c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009632:	6839      	ldr	r1, [r7, #0]
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f000 f8e2 	bl	80097fe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800963a:	e023      	b.n	8009684 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009642:	b2db      	uxtb	r3, r3
 8009644:	2b02      	cmp	r3, #2
 8009646:	dc02      	bgt.n	800964e <USBD_GetConfig+0x2e>
 8009648:	2b00      	cmp	r3, #0
 800964a:	dc03      	bgt.n	8009654 <USBD_GetConfig+0x34>
 800964c:	e015      	b.n	800967a <USBD_GetConfig+0x5a>
 800964e:	2b03      	cmp	r3, #3
 8009650:	d00b      	beq.n	800966a <USBD_GetConfig+0x4a>
 8009652:	e012      	b.n	800967a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	3308      	adds	r3, #8
 800965e:	2201      	movs	r2, #1
 8009660:	4619      	mov	r1, r3
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 f93c 	bl	80098e0 <USBD_CtlSendData>
        break;
 8009668:	e00c      	b.n	8009684 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	3304      	adds	r3, #4
 800966e:	2201      	movs	r2, #1
 8009670:	4619      	mov	r1, r3
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 f934 	bl	80098e0 <USBD_CtlSendData>
        break;
 8009678:	e004      	b.n	8009684 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800967a:	6839      	ldr	r1, [r7, #0]
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f000 f8be 	bl	80097fe <USBD_CtlError>
        break;
 8009682:	bf00      	nop
}
 8009684:	bf00      	nop
 8009686:	3708      	adds	r7, #8
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b082      	sub	sp, #8
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800969c:	b2db      	uxtb	r3, r3
 800969e:	3b01      	subs	r3, #1
 80096a0:	2b02      	cmp	r3, #2
 80096a2:	d81e      	bhi.n	80096e2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	88db      	ldrh	r3, [r3, #6]
 80096a8:	2b02      	cmp	r3, #2
 80096aa:	d004      	beq.n	80096b6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80096ac:	6839      	ldr	r1, [r7, #0]
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 f8a5 	bl	80097fe <USBD_CtlError>
        break;
 80096b4:	e01a      	b.n	80096ec <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2201      	movs	r2, #1
 80096ba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d005      	beq.n	80096d2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	68db      	ldr	r3, [r3, #12]
 80096ca:	f043 0202 	orr.w	r2, r3, #2
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	330c      	adds	r3, #12
 80096d6:	2202      	movs	r2, #2
 80096d8:	4619      	mov	r1, r3
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f000 f900 	bl	80098e0 <USBD_CtlSendData>
      break;
 80096e0:	e004      	b.n	80096ec <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80096e2:	6839      	ldr	r1, [r7, #0]
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 f88a 	bl	80097fe <USBD_CtlError>
      break;
 80096ea:	bf00      	nop
  }
}
 80096ec:	bf00      	nop
 80096ee:	3708      	adds	r7, #8
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	885b      	ldrh	r3, [r3, #2]
 8009702:	2b01      	cmp	r3, #1
 8009704:	d107      	bne.n	8009716 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2201      	movs	r2, #1
 800970a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 f940 	bl	8009994 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009714:	e013      	b.n	800973e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	885b      	ldrh	r3, [r3, #2]
 800971a:	2b02      	cmp	r3, #2
 800971c:	d10b      	bne.n	8009736 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	889b      	ldrh	r3, [r3, #4]
 8009722:	0a1b      	lsrs	r3, r3, #8
 8009724:	b29b      	uxth	r3, r3
 8009726:	b2da      	uxtb	r2, r3
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 f930 	bl	8009994 <USBD_CtlSendStatus>
}
 8009734:	e003      	b.n	800973e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009736:	6839      	ldr	r1, [r7, #0]
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 f860 	bl	80097fe <USBD_CtlError>
}
 800973e:	bf00      	nop
 8009740:	3708      	adds	r7, #8
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}

08009746 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009746:	b580      	push	{r7, lr}
 8009748:	b082      	sub	sp, #8
 800974a:	af00      	add	r7, sp, #0
 800974c:	6078      	str	r0, [r7, #4]
 800974e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009756:	b2db      	uxtb	r3, r3
 8009758:	3b01      	subs	r3, #1
 800975a:	2b02      	cmp	r3, #2
 800975c:	d80b      	bhi.n	8009776 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	885b      	ldrh	r3, [r3, #2]
 8009762:	2b01      	cmp	r3, #1
 8009764:	d10c      	bne.n	8009780 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2200      	movs	r2, #0
 800976a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 f910 	bl	8009994 <USBD_CtlSendStatus>
      }
      break;
 8009774:	e004      	b.n	8009780 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009776:	6839      	ldr	r1, [r7, #0]
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f000 f840 	bl	80097fe <USBD_CtlError>
      break;
 800977e:	e000      	b.n	8009782 <USBD_ClrFeature+0x3c>
      break;
 8009780:	bf00      	nop
  }
}
 8009782:	bf00      	nop
 8009784:	3708      	adds	r7, #8
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800978a:	b580      	push	{r7, lr}
 800978c:	b084      	sub	sp, #16
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]
 8009792:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	781a      	ldrb	r2, [r3, #0]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	3301      	adds	r3, #1
 80097a4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	781a      	ldrb	r2, [r3, #0]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	3301      	adds	r3, #1
 80097b2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80097b4:	68f8      	ldr	r0, [r7, #12]
 80097b6:	f7ff fa16 	bl	8008be6 <SWAPBYTE>
 80097ba:	4603      	mov	r3, r0
 80097bc:	461a      	mov	r2, r3
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	3301      	adds	r3, #1
 80097c6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	3301      	adds	r3, #1
 80097cc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80097ce:	68f8      	ldr	r0, [r7, #12]
 80097d0:	f7ff fa09 	bl	8008be6 <SWAPBYTE>
 80097d4:	4603      	mov	r3, r0
 80097d6:	461a      	mov	r2, r3
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	3301      	adds	r3, #1
 80097e0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	3301      	adds	r3, #1
 80097e6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80097e8:	68f8      	ldr	r0, [r7, #12]
 80097ea:	f7ff f9fc 	bl	8008be6 <SWAPBYTE>
 80097ee:	4603      	mov	r3, r0
 80097f0:	461a      	mov	r2, r3
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	80da      	strh	r2, [r3, #6]
}
 80097f6:	bf00      	nop
 80097f8:	3710      	adds	r7, #16
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}

080097fe <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097fe:	b580      	push	{r7, lr}
 8009800:	b082      	sub	sp, #8
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
 8009806:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009808:	2180      	movs	r1, #128	@ 0x80
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 fd3e 	bl	800a28c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009810:	2100      	movs	r1, #0
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 fd3a 	bl	800a28c <USBD_LL_StallEP>
}
 8009818:	bf00      	nop
 800981a:	3708      	adds	r7, #8
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b086      	sub	sp, #24
 8009824:	af00      	add	r7, sp, #0
 8009826:	60f8      	str	r0, [r7, #12]
 8009828:	60b9      	str	r1, [r7, #8]
 800982a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800982c:	2300      	movs	r3, #0
 800982e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d036      	beq.n	80098a4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800983a:	6938      	ldr	r0, [r7, #16]
 800983c:	f000 f836 	bl	80098ac <USBD_GetLen>
 8009840:	4603      	mov	r3, r0
 8009842:	3301      	adds	r3, #1
 8009844:	b29b      	uxth	r3, r3
 8009846:	005b      	lsls	r3, r3, #1
 8009848:	b29a      	uxth	r2, r3
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800984e:	7dfb      	ldrb	r3, [r7, #23]
 8009850:	68ba      	ldr	r2, [r7, #8]
 8009852:	4413      	add	r3, r2
 8009854:	687a      	ldr	r2, [r7, #4]
 8009856:	7812      	ldrb	r2, [r2, #0]
 8009858:	701a      	strb	r2, [r3, #0]
  idx++;
 800985a:	7dfb      	ldrb	r3, [r7, #23]
 800985c:	3301      	adds	r3, #1
 800985e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009860:	7dfb      	ldrb	r3, [r7, #23]
 8009862:	68ba      	ldr	r2, [r7, #8]
 8009864:	4413      	add	r3, r2
 8009866:	2203      	movs	r2, #3
 8009868:	701a      	strb	r2, [r3, #0]
  idx++;
 800986a:	7dfb      	ldrb	r3, [r7, #23]
 800986c:	3301      	adds	r3, #1
 800986e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009870:	e013      	b.n	800989a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009872:	7dfb      	ldrb	r3, [r7, #23]
 8009874:	68ba      	ldr	r2, [r7, #8]
 8009876:	4413      	add	r3, r2
 8009878:	693a      	ldr	r2, [r7, #16]
 800987a:	7812      	ldrb	r2, [r2, #0]
 800987c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	3301      	adds	r3, #1
 8009882:	613b      	str	r3, [r7, #16]
    idx++;
 8009884:	7dfb      	ldrb	r3, [r7, #23]
 8009886:	3301      	adds	r3, #1
 8009888:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800988a:	7dfb      	ldrb	r3, [r7, #23]
 800988c:	68ba      	ldr	r2, [r7, #8]
 800988e:	4413      	add	r3, r2
 8009890:	2200      	movs	r2, #0
 8009892:	701a      	strb	r2, [r3, #0]
    idx++;
 8009894:	7dfb      	ldrb	r3, [r7, #23]
 8009896:	3301      	adds	r3, #1
 8009898:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d1e7      	bne.n	8009872 <USBD_GetString+0x52>
 80098a2:	e000      	b.n	80098a6 <USBD_GetString+0x86>
    return;
 80098a4:	bf00      	nop
  }
}
 80098a6:	3718      	adds	r7, #24
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b085      	sub	sp, #20
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80098b4:	2300      	movs	r3, #0
 80098b6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80098bc:	e005      	b.n	80098ca <USBD_GetLen+0x1e>
  {
    len++;
 80098be:	7bfb      	ldrb	r3, [r7, #15]
 80098c0:	3301      	adds	r3, #1
 80098c2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	3301      	adds	r3, #1
 80098c8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d1f5      	bne.n	80098be <USBD_GetLen+0x12>
  }

  return len;
 80098d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3714      	adds	r7, #20
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	60f8      	str	r0, [r7, #12]
 80098e8:	60b9      	str	r1, [r7, #8]
 80098ea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2202      	movs	r2, #2
 80098f0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	687a      	ldr	r2, [r7, #4]
 80098f8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	68ba      	ldr	r2, [r7, #8]
 8009904:	2100      	movs	r1, #0
 8009906:	68f8      	ldr	r0, [r7, #12]
 8009908:	f000 fd49 	bl	800a39e <USBD_LL_Transmit>

  return USBD_OK;
 800990c:	2300      	movs	r3, #0
}
 800990e:	4618      	mov	r0, r3
 8009910:	3710      	adds	r7, #16
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009916:	b580      	push	{r7, lr}
 8009918:	b084      	sub	sp, #16
 800991a:	af00      	add	r7, sp, #0
 800991c:	60f8      	str	r0, [r7, #12]
 800991e:	60b9      	str	r1, [r7, #8]
 8009920:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	68ba      	ldr	r2, [r7, #8]
 8009926:	2100      	movs	r1, #0
 8009928:	68f8      	ldr	r0, [r7, #12]
 800992a:	f000 fd38 	bl	800a39e <USBD_LL_Transmit>

  return USBD_OK;
 800992e:	2300      	movs	r3, #0
}
 8009930:	4618      	mov	r0, r3
 8009932:	3710      	adds	r7, #16
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b084      	sub	sp, #16
 800993c:	af00      	add	r7, sp, #0
 800993e:	60f8      	str	r0, [r7, #12]
 8009940:	60b9      	str	r1, [r7, #8]
 8009942:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2203      	movs	r2, #3
 8009948:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	687a      	ldr	r2, [r7, #4]
 8009950:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	687a      	ldr	r2, [r7, #4]
 8009958:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	68ba      	ldr	r2, [r7, #8]
 8009960:	2100      	movs	r1, #0
 8009962:	68f8      	ldr	r0, [r7, #12]
 8009964:	f000 fd3c 	bl	800a3e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009968:	2300      	movs	r3, #0
}
 800996a:	4618      	mov	r0, r3
 800996c:	3710      	adds	r7, #16
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}

08009972 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009972:	b580      	push	{r7, lr}
 8009974:	b084      	sub	sp, #16
 8009976:	af00      	add	r7, sp, #0
 8009978:	60f8      	str	r0, [r7, #12]
 800997a:	60b9      	str	r1, [r7, #8]
 800997c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	68ba      	ldr	r2, [r7, #8]
 8009982:	2100      	movs	r1, #0
 8009984:	68f8      	ldr	r0, [r7, #12]
 8009986:	f000 fd2b 	bl	800a3e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800998a:	2300      	movs	r3, #0
}
 800998c:	4618      	mov	r0, r3
 800998e:	3710      	adds	r7, #16
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b082      	sub	sp, #8
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2204      	movs	r2, #4
 80099a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80099a4:	2300      	movs	r3, #0
 80099a6:	2200      	movs	r2, #0
 80099a8:	2100      	movs	r1, #0
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 fcf7 	bl	800a39e <USBD_LL_Transmit>

  return USBD_OK;
 80099b0:	2300      	movs	r3, #0
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3708      	adds	r7, #8
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}

080099ba <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b082      	sub	sp, #8
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2205      	movs	r2, #5
 80099c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80099ca:	2300      	movs	r3, #0
 80099cc:	2200      	movs	r2, #0
 80099ce:	2100      	movs	r1, #0
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 fd05 	bl	800a3e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099d6:	2300      	movs	r3, #0
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3708      	adds	r7, #8
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b087      	sub	sp, #28
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	4613      	mov	r3, r2
 80099ec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80099ee:	2301      	movs	r3, #1
 80099f0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80099f2:	2300      	movs	r3, #0
 80099f4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80099f6:	4b1f      	ldr	r3, [pc, #124]	@ (8009a74 <FATFS_LinkDriverEx+0x94>)
 80099f8:	7a5b      	ldrb	r3, [r3, #9]
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d131      	bne.n	8009a64 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009a00:	4b1c      	ldr	r3, [pc, #112]	@ (8009a74 <FATFS_LinkDriverEx+0x94>)
 8009a02:	7a5b      	ldrb	r3, [r3, #9]
 8009a04:	b2db      	uxtb	r3, r3
 8009a06:	461a      	mov	r2, r3
 8009a08:	4b1a      	ldr	r3, [pc, #104]	@ (8009a74 <FATFS_LinkDriverEx+0x94>)
 8009a0a:	2100      	movs	r1, #0
 8009a0c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009a0e:	4b19      	ldr	r3, [pc, #100]	@ (8009a74 <FATFS_LinkDriverEx+0x94>)
 8009a10:	7a5b      	ldrb	r3, [r3, #9]
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	4a17      	ldr	r2, [pc, #92]	@ (8009a74 <FATFS_LinkDriverEx+0x94>)
 8009a16:	009b      	lsls	r3, r3, #2
 8009a18:	4413      	add	r3, r2
 8009a1a:	68fa      	ldr	r2, [r7, #12]
 8009a1c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009a1e:	4b15      	ldr	r3, [pc, #84]	@ (8009a74 <FATFS_LinkDriverEx+0x94>)
 8009a20:	7a5b      	ldrb	r3, [r3, #9]
 8009a22:	b2db      	uxtb	r3, r3
 8009a24:	461a      	mov	r2, r3
 8009a26:	4b13      	ldr	r3, [pc, #76]	@ (8009a74 <FATFS_LinkDriverEx+0x94>)
 8009a28:	4413      	add	r3, r2
 8009a2a:	79fa      	ldrb	r2, [r7, #7]
 8009a2c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009a2e:	4b11      	ldr	r3, [pc, #68]	@ (8009a74 <FATFS_LinkDriverEx+0x94>)
 8009a30:	7a5b      	ldrb	r3, [r3, #9]
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	1c5a      	adds	r2, r3, #1
 8009a36:	b2d1      	uxtb	r1, r2
 8009a38:	4a0e      	ldr	r2, [pc, #56]	@ (8009a74 <FATFS_LinkDriverEx+0x94>)
 8009a3a:	7251      	strb	r1, [r2, #9]
 8009a3c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009a3e:	7dbb      	ldrb	r3, [r7, #22]
 8009a40:	3330      	adds	r3, #48	@ 0x30
 8009a42:	b2da      	uxtb	r2, r3
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	223a      	movs	r2, #58	@ 0x3a
 8009a4e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	3302      	adds	r3, #2
 8009a54:	222f      	movs	r2, #47	@ 0x2f
 8009a56:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	3303      	adds	r3, #3
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009a60:	2300      	movs	r3, #0
 8009a62:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	371c      	adds	r7, #28
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr
 8009a72:	bf00      	nop
 8009a74:	200004d0 	.word	0x200004d0

08009a78 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b082      	sub	sp, #8
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009a82:	2200      	movs	r2, #0
 8009a84:	6839      	ldr	r1, [r7, #0]
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f7ff ffaa 	bl	80099e0 <FATFS_LinkDriverEx>
 8009a8c:	4603      	mov	r3, r0
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3708      	adds	r7, #8
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
	...

08009a98 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	4912      	ldr	r1, [pc, #72]	@ (8009ae8 <MX_USB_DEVICE_Init+0x50>)
 8009aa0:	4812      	ldr	r0, [pc, #72]	@ (8009aec <MX_USB_DEVICE_Init+0x54>)
 8009aa2:	f7fe fc83 	bl	80083ac <USBD_Init>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d001      	beq.n	8009ab0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009aac:	f7f7 fc54 	bl	8001358 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009ab0:	490f      	ldr	r1, [pc, #60]	@ (8009af0 <MX_USB_DEVICE_Init+0x58>)
 8009ab2:	480e      	ldr	r0, [pc, #56]	@ (8009aec <MX_USB_DEVICE_Init+0x54>)
 8009ab4:	f7fe fcaa 	bl	800840c <USBD_RegisterClass>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d001      	beq.n	8009ac2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009abe:	f7f7 fc4b 	bl	8001358 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009ac2:	490c      	ldr	r1, [pc, #48]	@ (8009af4 <MX_USB_DEVICE_Init+0x5c>)
 8009ac4:	4809      	ldr	r0, [pc, #36]	@ (8009aec <MX_USB_DEVICE_Init+0x54>)
 8009ac6:	f7fe fbe1 	bl	800828c <USBD_CDC_RegisterInterface>
 8009aca:	4603      	mov	r3, r0
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d001      	beq.n	8009ad4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009ad0:	f7f7 fc42 	bl	8001358 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009ad4:	4805      	ldr	r0, [pc, #20]	@ (8009aec <MX_USB_DEVICE_Init+0x54>)
 8009ad6:	f7fe fccf 	bl	8008478 <USBD_Start>
 8009ada:	4603      	mov	r3, r0
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d001      	beq.n	8009ae4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009ae0:	f7f7 fc3a 	bl	8001358 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009ae4:	bf00      	nop
 8009ae6:	bd80      	pop	{r7, pc}
 8009ae8:	200000c0 	.word	0x200000c0
 8009aec:	200004dc 	.word	0x200004dc
 8009af0:	2000002c 	.word	0x2000002c
 8009af4:	200000ac 	.word	0x200000ac

08009af8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009afc:	2200      	movs	r2, #0
 8009afe:	4905      	ldr	r1, [pc, #20]	@ (8009b14 <CDC_Init_FS+0x1c>)
 8009b00:	4805      	ldr	r0, [pc, #20]	@ (8009b18 <CDC_Init_FS+0x20>)
 8009b02:	f7fe fbdd 	bl	80082c0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009b06:	4905      	ldr	r1, [pc, #20]	@ (8009b1c <CDC_Init_FS+0x24>)
 8009b08:	4803      	ldr	r0, [pc, #12]	@ (8009b18 <CDC_Init_FS+0x20>)
 8009b0a:	f7fe fbfb 	bl	8008304 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009b0e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	bd80      	pop	{r7, pc}
 8009b14:	20000bb8 	.word	0x20000bb8
 8009b18:	200004dc 	.word	0x200004dc
 8009b1c:	200007b8 	.word	0x200007b8

08009b20 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009b20:	b480      	push	{r7}
 8009b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009b24:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr

08009b30 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	4603      	mov	r3, r0
 8009b38:	6039      	str	r1, [r7, #0]
 8009b3a:	71fb      	strb	r3, [r7, #7]
 8009b3c:	4613      	mov	r3, r2
 8009b3e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009b40:	79fb      	ldrb	r3, [r7, #7]
 8009b42:	2b23      	cmp	r3, #35	@ 0x23
 8009b44:	d84a      	bhi.n	8009bdc <CDC_Control_FS+0xac>
 8009b46:	a201      	add	r2, pc, #4	@ (adr r2, 8009b4c <CDC_Control_FS+0x1c>)
 8009b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b4c:	08009bdd 	.word	0x08009bdd
 8009b50:	08009bdd 	.word	0x08009bdd
 8009b54:	08009bdd 	.word	0x08009bdd
 8009b58:	08009bdd 	.word	0x08009bdd
 8009b5c:	08009bdd 	.word	0x08009bdd
 8009b60:	08009bdd 	.word	0x08009bdd
 8009b64:	08009bdd 	.word	0x08009bdd
 8009b68:	08009bdd 	.word	0x08009bdd
 8009b6c:	08009bdd 	.word	0x08009bdd
 8009b70:	08009bdd 	.word	0x08009bdd
 8009b74:	08009bdd 	.word	0x08009bdd
 8009b78:	08009bdd 	.word	0x08009bdd
 8009b7c:	08009bdd 	.word	0x08009bdd
 8009b80:	08009bdd 	.word	0x08009bdd
 8009b84:	08009bdd 	.word	0x08009bdd
 8009b88:	08009bdd 	.word	0x08009bdd
 8009b8c:	08009bdd 	.word	0x08009bdd
 8009b90:	08009bdd 	.word	0x08009bdd
 8009b94:	08009bdd 	.word	0x08009bdd
 8009b98:	08009bdd 	.word	0x08009bdd
 8009b9c:	08009bdd 	.word	0x08009bdd
 8009ba0:	08009bdd 	.word	0x08009bdd
 8009ba4:	08009bdd 	.word	0x08009bdd
 8009ba8:	08009bdd 	.word	0x08009bdd
 8009bac:	08009bdd 	.word	0x08009bdd
 8009bb0:	08009bdd 	.word	0x08009bdd
 8009bb4:	08009bdd 	.word	0x08009bdd
 8009bb8:	08009bdd 	.word	0x08009bdd
 8009bbc:	08009bdd 	.word	0x08009bdd
 8009bc0:	08009bdd 	.word	0x08009bdd
 8009bc4:	08009bdd 	.word	0x08009bdd
 8009bc8:	08009bdd 	.word	0x08009bdd
 8009bcc:	08009bdd 	.word	0x08009bdd
 8009bd0:	08009bdd 	.word	0x08009bdd
 8009bd4:	08009bdd 	.word	0x08009bdd
 8009bd8:	08009bdd 	.word	0x08009bdd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009bdc:	bf00      	nop
  }

  return (USBD_OK);
 8009bde:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	370c      	adds	r7, #12
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr

08009bec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009bf6:	6879      	ldr	r1, [r7, #4]
 8009bf8:	4805      	ldr	r0, [pc, #20]	@ (8009c10 <CDC_Receive_FS+0x24>)
 8009bfa:	f7fe fb83 	bl	8008304 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009bfe:	4804      	ldr	r0, [pc, #16]	@ (8009c10 <CDC_Receive_FS+0x24>)
 8009c00:	f7fe fb9e 	bl	8008340 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009c04:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3708      	adds	r7, #8
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
 8009c0e:	bf00      	nop
 8009c10:	200004dc 	.word	0x200004dc

08009c14 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b087      	sub	sp, #28
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	60f8      	str	r0, [r7, #12]
 8009c1c:	60b9      	str	r1, [r7, #8]
 8009c1e:	4613      	mov	r3, r2
 8009c20:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009c22:	2300      	movs	r3, #0
 8009c24:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009c26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	371c      	adds	r7, #28
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr
	...

08009c38 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b083      	sub	sp, #12
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	4603      	mov	r3, r0
 8009c40:	6039      	str	r1, [r7, #0]
 8009c42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	2212      	movs	r2, #18
 8009c48:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009c4a:	4b03      	ldr	r3, [pc, #12]	@ (8009c58 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	370c      	adds	r7, #12
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr
 8009c58:	200000e0 	.word	0x200000e0

08009c5c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b083      	sub	sp, #12
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	4603      	mov	r3, r0
 8009c64:	6039      	str	r1, [r7, #0]
 8009c66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	2204      	movs	r2, #4
 8009c6c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009c6e:	4b03      	ldr	r3, [pc, #12]	@ (8009c7c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	370c      	adds	r7, #12
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr
 8009c7c:	20000100 	.word	0x20000100

08009c80 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b082      	sub	sp, #8
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	4603      	mov	r3, r0
 8009c88:	6039      	str	r1, [r7, #0]
 8009c8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c8c:	79fb      	ldrb	r3, [r7, #7]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d105      	bne.n	8009c9e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009c92:	683a      	ldr	r2, [r7, #0]
 8009c94:	4907      	ldr	r1, [pc, #28]	@ (8009cb4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009c96:	4808      	ldr	r0, [pc, #32]	@ (8009cb8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009c98:	f7ff fdc2 	bl	8009820 <USBD_GetString>
 8009c9c:	e004      	b.n	8009ca8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009c9e:	683a      	ldr	r2, [r7, #0]
 8009ca0:	4904      	ldr	r1, [pc, #16]	@ (8009cb4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009ca2:	4805      	ldr	r0, [pc, #20]	@ (8009cb8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009ca4:	f7ff fdbc 	bl	8009820 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ca8:	4b02      	ldr	r3, [pc, #8]	@ (8009cb4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3708      	adds	r7, #8
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	20000fb8 	.word	0x20000fb8
 8009cb8:	0800a5dc 	.word	0x0800a5dc

08009cbc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b082      	sub	sp, #8
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	6039      	str	r1, [r7, #0]
 8009cc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009cc8:	683a      	ldr	r2, [r7, #0]
 8009cca:	4904      	ldr	r1, [pc, #16]	@ (8009cdc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009ccc:	4804      	ldr	r0, [pc, #16]	@ (8009ce0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009cce:	f7ff fda7 	bl	8009820 <USBD_GetString>
  return USBD_StrDesc;
 8009cd2:	4b02      	ldr	r3, [pc, #8]	@ (8009cdc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3708      	adds	r7, #8
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}
 8009cdc:	20000fb8 	.word	0x20000fb8
 8009ce0:	0800a5f4 	.word	0x0800a5f4

08009ce4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b082      	sub	sp, #8
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	4603      	mov	r3, r0
 8009cec:	6039      	str	r1, [r7, #0]
 8009cee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	221a      	movs	r2, #26
 8009cf4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009cf6:	f000 f855 	bl	8009da4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009cfa:	4b02      	ldr	r3, [pc, #8]	@ (8009d04 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3708      	adds	r7, #8
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	20000104 	.word	0x20000104

08009d08 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	4603      	mov	r3, r0
 8009d10:	6039      	str	r1, [r7, #0]
 8009d12:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009d14:	79fb      	ldrb	r3, [r7, #7]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d105      	bne.n	8009d26 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009d1a:	683a      	ldr	r2, [r7, #0]
 8009d1c:	4907      	ldr	r1, [pc, #28]	@ (8009d3c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009d1e:	4808      	ldr	r0, [pc, #32]	@ (8009d40 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009d20:	f7ff fd7e 	bl	8009820 <USBD_GetString>
 8009d24:	e004      	b.n	8009d30 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009d26:	683a      	ldr	r2, [r7, #0]
 8009d28:	4904      	ldr	r1, [pc, #16]	@ (8009d3c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009d2a:	4805      	ldr	r0, [pc, #20]	@ (8009d40 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009d2c:	f7ff fd78 	bl	8009820 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d30:	4b02      	ldr	r3, [pc, #8]	@ (8009d3c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3708      	adds	r7, #8
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	bf00      	nop
 8009d3c:	20000fb8 	.word	0x20000fb8
 8009d40:	0800a608 	.word	0x0800a608

08009d44 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b082      	sub	sp, #8
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	6039      	str	r1, [r7, #0]
 8009d4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d50:	79fb      	ldrb	r3, [r7, #7]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d105      	bne.n	8009d62 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009d56:	683a      	ldr	r2, [r7, #0]
 8009d58:	4907      	ldr	r1, [pc, #28]	@ (8009d78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009d5a:	4808      	ldr	r0, [pc, #32]	@ (8009d7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009d5c:	f7ff fd60 	bl	8009820 <USBD_GetString>
 8009d60:	e004      	b.n	8009d6c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009d62:	683a      	ldr	r2, [r7, #0]
 8009d64:	4904      	ldr	r1, [pc, #16]	@ (8009d78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009d66:	4805      	ldr	r0, [pc, #20]	@ (8009d7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009d68:	f7ff fd5a 	bl	8009820 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d6c:	4b02      	ldr	r3, [pc, #8]	@ (8009d78 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3708      	adds	r7, #8
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
 8009d76:	bf00      	nop
 8009d78:	20000fb8 	.word	0x20000fb8
 8009d7c:	0800a614 	.word	0x0800a614

08009d80 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b083      	sub	sp, #12
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	4603      	mov	r3, r0
 8009d88:	6039      	str	r1, [r7, #0]
 8009d8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	220c      	movs	r2, #12
 8009d90:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8009d92:	4b03      	ldr	r3, [pc, #12]	@ (8009da0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	370c      	adds	r7, #12
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr
 8009da0:	200000f4 	.word	0x200000f4

08009da4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b084      	sub	sp, #16
 8009da8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009daa:	4b0f      	ldr	r3, [pc, #60]	@ (8009de8 <Get_SerialNum+0x44>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009db0:	4b0e      	ldr	r3, [pc, #56]	@ (8009dec <Get_SerialNum+0x48>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009db6:	4b0e      	ldr	r3, [pc, #56]	@ (8009df0 <Get_SerialNum+0x4c>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009dbc:	68fa      	ldr	r2, [r7, #12]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	4413      	add	r3, r2
 8009dc2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d009      	beq.n	8009dde <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009dca:	2208      	movs	r2, #8
 8009dcc:	4909      	ldr	r1, [pc, #36]	@ (8009df4 <Get_SerialNum+0x50>)
 8009dce:	68f8      	ldr	r0, [r7, #12]
 8009dd0:	f000 f814 	bl	8009dfc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009dd4:	2204      	movs	r2, #4
 8009dd6:	4908      	ldr	r1, [pc, #32]	@ (8009df8 <Get_SerialNum+0x54>)
 8009dd8:	68b8      	ldr	r0, [r7, #8]
 8009dda:	f000 f80f 	bl	8009dfc <IntToUnicode>
  }
}
 8009dde:	bf00      	nop
 8009de0:	3710      	adds	r7, #16
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}
 8009de6:	bf00      	nop
 8009de8:	1fff7a10 	.word	0x1fff7a10
 8009dec:	1fff7a14 	.word	0x1fff7a14
 8009df0:	1fff7a18 	.word	0x1fff7a18
 8009df4:	20000106 	.word	0x20000106
 8009df8:	20000116 	.word	0x20000116

08009dfc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b087      	sub	sp, #28
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	60b9      	str	r1, [r7, #8]
 8009e06:	4613      	mov	r3, r2
 8009e08:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009e0e:	2300      	movs	r3, #0
 8009e10:	75fb      	strb	r3, [r7, #23]
 8009e12:	e027      	b.n	8009e64 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	0f1b      	lsrs	r3, r3, #28
 8009e18:	2b09      	cmp	r3, #9
 8009e1a:	d80b      	bhi.n	8009e34 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	0f1b      	lsrs	r3, r3, #28
 8009e20:	b2da      	uxtb	r2, r3
 8009e22:	7dfb      	ldrb	r3, [r7, #23]
 8009e24:	005b      	lsls	r3, r3, #1
 8009e26:	4619      	mov	r1, r3
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	440b      	add	r3, r1
 8009e2c:	3230      	adds	r2, #48	@ 0x30
 8009e2e:	b2d2      	uxtb	r2, r2
 8009e30:	701a      	strb	r2, [r3, #0]
 8009e32:	e00a      	b.n	8009e4a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	0f1b      	lsrs	r3, r3, #28
 8009e38:	b2da      	uxtb	r2, r3
 8009e3a:	7dfb      	ldrb	r3, [r7, #23]
 8009e3c:	005b      	lsls	r3, r3, #1
 8009e3e:	4619      	mov	r1, r3
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	440b      	add	r3, r1
 8009e44:	3237      	adds	r2, #55	@ 0x37
 8009e46:	b2d2      	uxtb	r2, r2
 8009e48:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	011b      	lsls	r3, r3, #4
 8009e4e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009e50:	7dfb      	ldrb	r3, [r7, #23]
 8009e52:	005b      	lsls	r3, r3, #1
 8009e54:	3301      	adds	r3, #1
 8009e56:	68ba      	ldr	r2, [r7, #8]
 8009e58:	4413      	add	r3, r2
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009e5e:	7dfb      	ldrb	r3, [r7, #23]
 8009e60:	3301      	adds	r3, #1
 8009e62:	75fb      	strb	r3, [r7, #23]
 8009e64:	7dfa      	ldrb	r2, [r7, #23]
 8009e66:	79fb      	ldrb	r3, [r7, #7]
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	d3d3      	bcc.n	8009e14 <IntToUnicode+0x18>
  }
}
 8009e6c:	bf00      	nop
 8009e6e:	bf00      	nop
 8009e70:	371c      	adds	r7, #28
 8009e72:	46bd      	mov	sp, r7
 8009e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e78:	4770      	bx	lr
	...

08009e7c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b0a0      	sub	sp, #128	@ 0x80
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e84:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009e88:	2200      	movs	r2, #0
 8009e8a:	601a      	str	r2, [r3, #0]
 8009e8c:	605a      	str	r2, [r3, #4]
 8009e8e:	609a      	str	r2, [r3, #8]
 8009e90:	60da      	str	r2, [r3, #12]
 8009e92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009e94:	f107 0310 	add.w	r3, r7, #16
 8009e98:	225c      	movs	r2, #92	@ 0x5c
 8009e9a:	2100      	movs	r1, #0
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f000 fb65 	bl	800a56c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009eaa:	d149      	bne.n	8009f40 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8009eac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009eb0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009eb6:	f107 0310 	add.w	r3, r7, #16
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f7fa f83c 	bl	8003f38 <HAL_RCCEx_PeriphCLKConfig>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d001      	beq.n	8009eca <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8009ec6:	f7f7 fa47 	bl	8001358 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009eca:	2300      	movs	r3, #0
 8009ecc:	60fb      	str	r3, [r7, #12]
 8009ece:	4b1e      	ldr	r3, [pc, #120]	@ (8009f48 <HAL_PCD_MspInit+0xcc>)
 8009ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ed2:	4a1d      	ldr	r2, [pc, #116]	@ (8009f48 <HAL_PCD_MspInit+0xcc>)
 8009ed4:	f043 0301 	orr.w	r3, r3, #1
 8009ed8:	6313      	str	r3, [r2, #48]	@ 0x30
 8009eda:	4b1b      	ldr	r3, [pc, #108]	@ (8009f48 <HAL_PCD_MspInit+0xcc>)
 8009edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ede:	f003 0301 	and.w	r3, r3, #1
 8009ee2:	60fb      	str	r3, [r7, #12]
 8009ee4:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009ee6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009eea:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009eec:	2302      	movs	r3, #2
 8009eee:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ef4:	2303      	movs	r3, #3
 8009ef6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009ef8:	230a      	movs	r3, #10
 8009efa:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009efc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009f00:	4619      	mov	r1, r3
 8009f02:	4812      	ldr	r0, [pc, #72]	@ (8009f4c <HAL_PCD_MspInit+0xd0>)
 8009f04:	f7f8 f942 	bl	800218c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009f08:	4b0f      	ldr	r3, [pc, #60]	@ (8009f48 <HAL_PCD_MspInit+0xcc>)
 8009f0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f0c:	4a0e      	ldr	r2, [pc, #56]	@ (8009f48 <HAL_PCD_MspInit+0xcc>)
 8009f0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f12:	6353      	str	r3, [r2, #52]	@ 0x34
 8009f14:	2300      	movs	r3, #0
 8009f16:	60bb      	str	r3, [r7, #8]
 8009f18:	4b0b      	ldr	r3, [pc, #44]	@ (8009f48 <HAL_PCD_MspInit+0xcc>)
 8009f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f1c:	4a0a      	ldr	r2, [pc, #40]	@ (8009f48 <HAL_PCD_MspInit+0xcc>)
 8009f1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009f22:	6453      	str	r3, [r2, #68]	@ 0x44
 8009f24:	4b08      	ldr	r3, [pc, #32]	@ (8009f48 <HAL_PCD_MspInit+0xcc>)
 8009f26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009f2c:	60bb      	str	r3, [r7, #8]
 8009f2e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009f30:	2200      	movs	r2, #0
 8009f32:	2100      	movs	r1, #0
 8009f34:	2043      	movs	r0, #67	@ 0x43
 8009f36:	f7f8 f860 	bl	8001ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009f3a:	2043      	movs	r0, #67	@ 0x43
 8009f3c:	f7f8 f879 	bl	8002032 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009f40:	bf00      	nop
 8009f42:	3780      	adds	r7, #128	@ 0x80
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}
 8009f48:	40023800 	.word	0x40023800
 8009f4c:	40020000 	.word	0x40020000

08009f50 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b082      	sub	sp, #8
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8009f64:	4619      	mov	r1, r3
 8009f66:	4610      	mov	r0, r2
 8009f68:	f7fe fad3 	bl	8008512 <USBD_LL_SetupStage>
}
 8009f6c:	bf00      	nop
 8009f6e:	3708      	adds	r7, #8
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b082      	sub	sp, #8
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8009f86:	78fa      	ldrb	r2, [r7, #3]
 8009f88:	6879      	ldr	r1, [r7, #4]
 8009f8a:	4613      	mov	r3, r2
 8009f8c:	00db      	lsls	r3, r3, #3
 8009f8e:	4413      	add	r3, r2
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	440b      	add	r3, r1
 8009f94:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8009f98:	681a      	ldr	r2, [r3, #0]
 8009f9a:	78fb      	ldrb	r3, [r7, #3]
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	f7fe fb0d 	bl	80085bc <USBD_LL_DataOutStage>
}
 8009fa2:	bf00      	nop
 8009fa4:	3708      	adds	r7, #8
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}

08009faa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009faa:	b580      	push	{r7, lr}
 8009fac:	b082      	sub	sp, #8
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	6078      	str	r0, [r7, #4]
 8009fb2:	460b      	mov	r3, r1
 8009fb4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8009fbc:	78fa      	ldrb	r2, [r7, #3]
 8009fbe:	6879      	ldr	r1, [r7, #4]
 8009fc0:	4613      	mov	r3, r2
 8009fc2:	00db      	lsls	r3, r3, #3
 8009fc4:	4413      	add	r3, r2
 8009fc6:	009b      	lsls	r3, r3, #2
 8009fc8:	440b      	add	r3, r1
 8009fca:	334c      	adds	r3, #76	@ 0x4c
 8009fcc:	681a      	ldr	r2, [r3, #0]
 8009fce:	78fb      	ldrb	r3, [r7, #3]
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	f7fe fba6 	bl	8008722 <USBD_LL_DataInStage>
}
 8009fd6:	bf00      	nop
 8009fd8:	3708      	adds	r7, #8
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}

08009fde <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fde:	b580      	push	{r7, lr}
 8009fe0:	b082      	sub	sp, #8
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8009fec:	4618      	mov	r0, r3
 8009fee:	f7fe fcda 	bl	80089a6 <USBD_LL_SOF>
}
 8009ff2:	bf00      	nop
 8009ff4:	3708      	adds	r7, #8
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}

08009ffa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ffa:	b580      	push	{r7, lr}
 8009ffc:	b084      	sub	sp, #16
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a002:	2301      	movs	r3, #1
 800a004:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	68db      	ldr	r3, [r3, #12]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d102      	bne.n	800a014 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a00e:	2300      	movs	r3, #0
 800a010:	73fb      	strb	r3, [r7, #15]
 800a012:	e008      	b.n	800a026 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	68db      	ldr	r3, [r3, #12]
 800a018:	2b02      	cmp	r3, #2
 800a01a:	d102      	bne.n	800a022 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a01c:	2301      	movs	r3, #1
 800a01e:	73fb      	strb	r3, [r7, #15]
 800a020:	e001      	b.n	800a026 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a022:	f7f7 f999 	bl	8001358 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800a02c:	7bfa      	ldrb	r2, [r7, #15]
 800a02e:	4611      	mov	r1, r2
 800a030:	4618      	mov	r0, r3
 800a032:	f7fe fc7a 	bl	800892a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800a03c:	4618      	mov	r0, r3
 800a03e:	f7fe fc22 	bl	8008886 <USBD_LL_Reset>
}
 800a042:	bf00      	nop
 800a044:	3710      	adds	r7, #16
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
	...

0800a04c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b082      	sub	sp, #8
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800a05a:	4618      	mov	r0, r3
 800a05c:	f7fe fc75 	bl	800894a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	6812      	ldr	r2, [r2, #0]
 800a06e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a072:	f043 0301 	orr.w	r3, r3, #1
 800a076:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6a1b      	ldr	r3, [r3, #32]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d005      	beq.n	800a08c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a080:	4b04      	ldr	r3, [pc, #16]	@ (800a094 <HAL_PCD_SuspendCallback+0x48>)
 800a082:	691b      	ldr	r3, [r3, #16]
 800a084:	4a03      	ldr	r2, [pc, #12]	@ (800a094 <HAL_PCD_SuspendCallback+0x48>)
 800a086:	f043 0306 	orr.w	r3, r3, #6
 800a08a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a08c:	bf00      	nop
 800a08e:	3708      	adds	r7, #8
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}
 800a094:	e000ed00 	.word	0xe000ed00

0800a098 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b082      	sub	sp, #8
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7fe fc65 	bl	8008976 <USBD_LL_Resume>
}
 800a0ac:	bf00      	nop
 800a0ae:	3708      	adds	r7, #8
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b082      	sub	sp, #8
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	460b      	mov	r3, r1
 800a0be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800a0c6:	78fa      	ldrb	r2, [r7, #3]
 800a0c8:	4611      	mov	r1, r2
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f7fe fcbd 	bl	8008a4a <USBD_LL_IsoOUTIncomplete>
}
 800a0d0:	bf00      	nop
 800a0d2:	3708      	adds	r7, #8
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	460b      	mov	r3, r1
 800a0e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800a0ea:	78fa      	ldrb	r2, [r7, #3]
 800a0ec:	4611      	mov	r1, r2
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f7fe fc79 	bl	80089e6 <USBD_LL_IsoINIncomplete>
}
 800a0f4:	bf00      	nop
 800a0f6:	3708      	adds	r7, #8
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b082      	sub	sp, #8
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800a10a:	4618      	mov	r0, r3
 800a10c:	f7fe fccf 	bl	8008aae <USBD_LL_DevConnected>
}
 800a110:	bf00      	nop
 800a112:	3708      	adds	r7, #8
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}

0800a118 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b082      	sub	sp, #8
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800a126:	4618      	mov	r0, r3
 800a128:	f7fe fccc 	bl	8008ac4 <USBD_LL_DevDisconnected>
}
 800a12c:	bf00      	nop
 800a12e:	3708      	adds	r7, #8
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}

0800a134 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b082      	sub	sp, #8
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d13c      	bne.n	800a1be <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a144:	4a20      	ldr	r2, [pc, #128]	@ (800a1c8 <USBD_LL_Init+0x94>)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	4a1e      	ldr	r2, [pc, #120]	@ (800a1c8 <USBD_LL_Init+0x94>)
 800a150:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a154:	4b1c      	ldr	r3, [pc, #112]	@ (800a1c8 <USBD_LL_Init+0x94>)
 800a156:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a15a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800a15c:	4b1a      	ldr	r3, [pc, #104]	@ (800a1c8 <USBD_LL_Init+0x94>)
 800a15e:	2206      	movs	r2, #6
 800a160:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a162:	4b19      	ldr	r3, [pc, #100]	@ (800a1c8 <USBD_LL_Init+0x94>)
 800a164:	2202      	movs	r2, #2
 800a166:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a168:	4b17      	ldr	r3, [pc, #92]	@ (800a1c8 <USBD_LL_Init+0x94>)
 800a16a:	2200      	movs	r2, #0
 800a16c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a16e:	4b16      	ldr	r3, [pc, #88]	@ (800a1c8 <USBD_LL_Init+0x94>)
 800a170:	2202      	movs	r2, #2
 800a172:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a174:	4b14      	ldr	r3, [pc, #80]	@ (800a1c8 <USBD_LL_Init+0x94>)
 800a176:	2200      	movs	r2, #0
 800a178:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a17a:	4b13      	ldr	r3, [pc, #76]	@ (800a1c8 <USBD_LL_Init+0x94>)
 800a17c:	2200      	movs	r2, #0
 800a17e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a180:	4b11      	ldr	r3, [pc, #68]	@ (800a1c8 <USBD_LL_Init+0x94>)
 800a182:	2200      	movs	r2, #0
 800a184:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a186:	4b10      	ldr	r3, [pc, #64]	@ (800a1c8 <USBD_LL_Init+0x94>)
 800a188:	2200      	movs	r2, #0
 800a18a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a18c:	4b0e      	ldr	r3, [pc, #56]	@ (800a1c8 <USBD_LL_Init+0x94>)
 800a18e:	2200      	movs	r2, #0
 800a190:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a192:	480d      	ldr	r0, [pc, #52]	@ (800a1c8 <USBD_LL_Init+0x94>)
 800a194:	f7f8 faec 	bl	8002770 <HAL_PCD_Init>
 800a198:	4603      	mov	r3, r0
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d001      	beq.n	800a1a2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a19e:	f7f7 f8db 	bl	8001358 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a1a2:	2180      	movs	r1, #128	@ 0x80
 800a1a4:	4808      	ldr	r0, [pc, #32]	@ (800a1c8 <USBD_LL_Init+0x94>)
 800a1a6:	f7f9 fd78 	bl	8003c9a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a1aa:	2240      	movs	r2, #64	@ 0x40
 800a1ac:	2100      	movs	r1, #0
 800a1ae:	4806      	ldr	r0, [pc, #24]	@ (800a1c8 <USBD_LL_Init+0x94>)
 800a1b0:	f7f9 fd2c 	bl	8003c0c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a1b4:	2280      	movs	r2, #128	@ 0x80
 800a1b6:	2101      	movs	r1, #1
 800a1b8:	4803      	ldr	r0, [pc, #12]	@ (800a1c8 <USBD_LL_Init+0x94>)
 800a1ba:	f7f9 fd27 	bl	8003c0c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a1be:	2300      	movs	r3, #0
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3708      	adds	r7, #8
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}
 800a1c8:	200011b8 	.word	0x200011b8

0800a1cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b084      	sub	sp, #16
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f7f8 fbe8 	bl	80029b8 <HAL_PCD_Start>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1ec:	7bfb      	ldrb	r3, [r7, #15]
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f000 f990 	bl	800a514 <USBD_Get_USB_Status>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3710      	adds	r7, #16
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}

0800a202 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a202:	b580      	push	{r7, lr}
 800a204:	b084      	sub	sp, #16
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]
 800a20a:	4608      	mov	r0, r1
 800a20c:	4611      	mov	r1, r2
 800a20e:	461a      	mov	r2, r3
 800a210:	4603      	mov	r3, r0
 800a212:	70fb      	strb	r3, [r7, #3]
 800a214:	460b      	mov	r3, r1
 800a216:	70bb      	strb	r3, [r7, #2]
 800a218:	4613      	mov	r3, r2
 800a21a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a21c:	2300      	movs	r3, #0
 800a21e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a220:	2300      	movs	r3, #0
 800a222:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a22a:	78bb      	ldrb	r3, [r7, #2]
 800a22c:	883a      	ldrh	r2, [r7, #0]
 800a22e:	78f9      	ldrb	r1, [r7, #3]
 800a230:	f7f9 f8e6 	bl	8003400 <HAL_PCD_EP_Open>
 800a234:	4603      	mov	r3, r0
 800a236:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a238:	7bfb      	ldrb	r3, [r7, #15]
 800a23a:	4618      	mov	r0, r3
 800a23c:	f000 f96a 	bl	800a514 <USBD_Get_USB_Status>
 800a240:	4603      	mov	r3, r0
 800a242:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a244:	7bbb      	ldrb	r3, [r7, #14]
}
 800a246:	4618      	mov	r0, r3
 800a248:	3710      	adds	r7, #16
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}

0800a24e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a24e:	b580      	push	{r7, lr}
 800a250:	b084      	sub	sp, #16
 800a252:	af00      	add	r7, sp, #0
 800a254:	6078      	str	r0, [r7, #4]
 800a256:	460b      	mov	r3, r1
 800a258:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a25a:	2300      	movs	r3, #0
 800a25c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a25e:	2300      	movs	r3, #0
 800a260:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a268:	78fa      	ldrb	r2, [r7, #3]
 800a26a:	4611      	mov	r1, r2
 800a26c:	4618      	mov	r0, r3
 800a26e:	f7f9 f92f 	bl	80034d0 <HAL_PCD_EP_Close>
 800a272:	4603      	mov	r3, r0
 800a274:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a276:	7bfb      	ldrb	r3, [r7, #15]
 800a278:	4618      	mov	r0, r3
 800a27a:	f000 f94b 	bl	800a514 <USBD_Get_USB_Status>
 800a27e:	4603      	mov	r3, r0
 800a280:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a282:	7bbb      	ldrb	r3, [r7, #14]
}
 800a284:	4618      	mov	r0, r3
 800a286:	3710      	adds	r7, #16
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	460b      	mov	r3, r1
 800a296:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a298:	2300      	movs	r3, #0
 800a29a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a29c:	2300      	movs	r3, #0
 800a29e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a2a6:	78fa      	ldrb	r2, [r7, #3]
 800a2a8:	4611      	mov	r1, r2
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f7f9 fa07 	bl	80036be <HAL_PCD_EP_SetStall>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2b4:	7bfb      	ldrb	r3, [r7, #15]
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f000 f92c 	bl	800a514 <USBD_Get_USB_Status>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3710      	adds	r7, #16
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}

0800a2ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2ca:	b580      	push	{r7, lr}
 800a2cc:	b084      	sub	sp, #16
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a2e4:	78fa      	ldrb	r2, [r7, #3]
 800a2e6:	4611      	mov	r1, r2
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f7f9 fa4c 	bl	8003786 <HAL_PCD_EP_ClrStall>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2f2:	7bfb      	ldrb	r3, [r7, #15]
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f000 f90d 	bl	800a514 <USBD_Get_USB_Status>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800a300:	4618      	mov	r0, r3
 800a302:	3710      	adds	r7, #16
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a308:	b480      	push	{r7}
 800a30a:	b085      	sub	sp, #20
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	460b      	mov	r3, r1
 800a312:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a31a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a31c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a320:	2b00      	cmp	r3, #0
 800a322:	da0b      	bge.n	800a33c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a324:	78fb      	ldrb	r3, [r7, #3]
 800a326:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a32a:	68f9      	ldr	r1, [r7, #12]
 800a32c:	4613      	mov	r3, r2
 800a32e:	00db      	lsls	r3, r3, #3
 800a330:	4413      	add	r3, r2
 800a332:	009b      	lsls	r3, r3, #2
 800a334:	440b      	add	r3, r1
 800a336:	333e      	adds	r3, #62	@ 0x3e
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	e00b      	b.n	800a354 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a33c:	78fb      	ldrb	r3, [r7, #3]
 800a33e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a342:	68f9      	ldr	r1, [r7, #12]
 800a344:	4613      	mov	r3, r2
 800a346:	00db      	lsls	r3, r3, #3
 800a348:	4413      	add	r3, r2
 800a34a:	009b      	lsls	r3, r3, #2
 800a34c:	440b      	add	r3, r1
 800a34e:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800a352:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a354:	4618      	mov	r0, r3
 800a356:	3714      	adds	r7, #20
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr

0800a360 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b084      	sub	sp, #16
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	460b      	mov	r3, r1
 800a36a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a36c:	2300      	movs	r3, #0
 800a36e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a370:	2300      	movs	r3, #0
 800a372:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a37a:	78fa      	ldrb	r2, [r7, #3]
 800a37c:	4611      	mov	r1, r2
 800a37e:	4618      	mov	r0, r3
 800a380:	f7f9 f819 	bl	80033b6 <HAL_PCD_SetAddress>
 800a384:	4603      	mov	r3, r0
 800a386:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a388:	7bfb      	ldrb	r3, [r7, #15]
 800a38a:	4618      	mov	r0, r3
 800a38c:	f000 f8c2 	bl	800a514 <USBD_Get_USB_Status>
 800a390:	4603      	mov	r3, r0
 800a392:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a394:	7bbb      	ldrb	r3, [r7, #14]
}
 800a396:	4618      	mov	r0, r3
 800a398:	3710      	adds	r7, #16
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}

0800a39e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a39e:	b580      	push	{r7, lr}
 800a3a0:	b086      	sub	sp, #24
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	60f8      	str	r0, [r7, #12]
 800a3a6:	607a      	str	r2, [r7, #4]
 800a3a8:	603b      	str	r3, [r7, #0]
 800a3aa:	460b      	mov	r3, r1
 800a3ac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a3bc:	7af9      	ldrb	r1, [r7, #11]
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	f7f9 f932 	bl	800362a <HAL_PCD_EP_Transmit>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3ca:	7dfb      	ldrb	r3, [r7, #23]
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f000 f8a1 	bl	800a514 <USBD_Get_USB_Status>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a3d6:	7dbb      	ldrb	r3, [r7, #22]
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3718      	adds	r7, #24
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}

0800a3e0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b086      	sub	sp, #24
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	60f8      	str	r0, [r7, #12]
 800a3e8:	607a      	str	r2, [r7, #4]
 800a3ea:	603b      	str	r3, [r7, #0]
 800a3ec:	460b      	mov	r3, r1
 800a3ee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a3fe:	7af9      	ldrb	r1, [r7, #11]
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	687a      	ldr	r2, [r7, #4]
 800a404:	f7f9 f8ae 	bl	8003564 <HAL_PCD_EP_Receive>
 800a408:	4603      	mov	r3, r0
 800a40a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a40c:	7dfb      	ldrb	r3, [r7, #23]
 800a40e:	4618      	mov	r0, r3
 800a410:	f000 f880 	bl	800a514 <USBD_Get_USB_Status>
 800a414:	4603      	mov	r3, r0
 800a416:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a418:	7dbb      	ldrb	r3, [r7, #22]
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3718      	adds	r7, #24
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}

0800a422 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a422:	b580      	push	{r7, lr}
 800a424:	b082      	sub	sp, #8
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
 800a42a:	460b      	mov	r3, r1
 800a42c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a434:	78fa      	ldrb	r2, [r7, #3]
 800a436:	4611      	mov	r1, r2
 800a438:	4618      	mov	r0, r3
 800a43a:	f7f9 f8de 	bl	80035fa <HAL_PCD_EP_GetRxCount>
 800a43e:	4603      	mov	r3, r0
}
 800a440:	4618      	mov	r0, r3
 800a442:	3708      	adds	r7, #8
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b082      	sub	sp, #8
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
 800a450:	460b      	mov	r3, r1
 800a452:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a454:	78fb      	ldrb	r3, [r7, #3]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d002      	beq.n	800a460 <HAL_PCDEx_LPM_Callback+0x18>
 800a45a:	2b01      	cmp	r3, #1
 800a45c:	d01f      	beq.n	800a49e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a45e:	e03b      	b.n	800a4d8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6a1b      	ldr	r3, [r3, #32]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d007      	beq.n	800a478 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800a468:	f7f6 fc9c 	bl	8000da4 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a46c:	4b1c      	ldr	r3, [pc, #112]	@ (800a4e0 <HAL_PCDEx_LPM_Callback+0x98>)
 800a46e:	691b      	ldr	r3, [r3, #16]
 800a470:	4a1b      	ldr	r2, [pc, #108]	@ (800a4e0 <HAL_PCDEx_LPM_Callback+0x98>)
 800a472:	f023 0306 	bic.w	r3, r3, #6
 800a476:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	687a      	ldr	r2, [r7, #4]
 800a484:	6812      	ldr	r2, [r2, #0]
 800a486:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a48a:	f023 0301 	bic.w	r3, r3, #1
 800a48e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800a496:	4618      	mov	r0, r3
 800a498:	f7fe fa6d 	bl	8008976 <USBD_LL_Resume>
    break;
 800a49c:	e01c      	b.n	800a4d8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	687a      	ldr	r2, [r7, #4]
 800a4aa:	6812      	ldr	r2, [r2, #0]
 800a4ac:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a4b0:	f043 0301 	orr.w	r3, r3, #1
 800a4b4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f7fe fa44 	bl	800894a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6a1b      	ldr	r3, [r3, #32]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d005      	beq.n	800a4d6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a4ca:	4b05      	ldr	r3, [pc, #20]	@ (800a4e0 <HAL_PCDEx_LPM_Callback+0x98>)
 800a4cc:	691b      	ldr	r3, [r3, #16]
 800a4ce:	4a04      	ldr	r2, [pc, #16]	@ (800a4e0 <HAL_PCDEx_LPM_Callback+0x98>)
 800a4d0:	f043 0306 	orr.w	r3, r3, #6
 800a4d4:	6113      	str	r3, [r2, #16]
    break;
 800a4d6:	bf00      	nop
}
 800a4d8:	bf00      	nop
 800a4da:	3708      	adds	r7, #8
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}
 800a4e0:	e000ed00 	.word	0xe000ed00

0800a4e4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b083      	sub	sp, #12
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a4ec:	4b03      	ldr	r3, [pc, #12]	@ (800a4fc <USBD_static_malloc+0x18>)
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	370c      	adds	r7, #12
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr
 800a4fa:	bf00      	nop
 800a4fc:	200016c4 	.word	0x200016c4

0800a500 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a500:	b480      	push	{r7}
 800a502:	b083      	sub	sp, #12
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]

}
 800a508:	bf00      	nop
 800a50a:	370c      	adds	r7, #12
 800a50c:	46bd      	mov	sp, r7
 800a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a512:	4770      	bx	lr

0800a514 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a514:	b480      	push	{r7}
 800a516:	b085      	sub	sp, #20
 800a518:	af00      	add	r7, sp, #0
 800a51a:	4603      	mov	r3, r0
 800a51c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a51e:	2300      	movs	r3, #0
 800a520:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a522:	79fb      	ldrb	r3, [r7, #7]
 800a524:	2b03      	cmp	r3, #3
 800a526:	d817      	bhi.n	800a558 <USBD_Get_USB_Status+0x44>
 800a528:	a201      	add	r2, pc, #4	@ (adr r2, 800a530 <USBD_Get_USB_Status+0x1c>)
 800a52a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a52e:	bf00      	nop
 800a530:	0800a541 	.word	0x0800a541
 800a534:	0800a547 	.word	0x0800a547
 800a538:	0800a54d 	.word	0x0800a54d
 800a53c:	0800a553 	.word	0x0800a553
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a540:	2300      	movs	r3, #0
 800a542:	73fb      	strb	r3, [r7, #15]
    break;
 800a544:	e00b      	b.n	800a55e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a546:	2303      	movs	r3, #3
 800a548:	73fb      	strb	r3, [r7, #15]
    break;
 800a54a:	e008      	b.n	800a55e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a54c:	2301      	movs	r3, #1
 800a54e:	73fb      	strb	r3, [r7, #15]
    break;
 800a550:	e005      	b.n	800a55e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a552:	2303      	movs	r3, #3
 800a554:	73fb      	strb	r3, [r7, #15]
    break;
 800a556:	e002      	b.n	800a55e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a558:	2303      	movs	r3, #3
 800a55a:	73fb      	strb	r3, [r7, #15]
    break;
 800a55c:	bf00      	nop
  }
  return usb_status;
 800a55e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a560:	4618      	mov	r0, r3
 800a562:	3714      	adds	r7, #20
 800a564:	46bd      	mov	sp, r7
 800a566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56a:	4770      	bx	lr

0800a56c <memset>:
 800a56c:	4402      	add	r2, r0
 800a56e:	4603      	mov	r3, r0
 800a570:	4293      	cmp	r3, r2
 800a572:	d100      	bne.n	800a576 <memset+0xa>
 800a574:	4770      	bx	lr
 800a576:	f803 1b01 	strb.w	r1, [r3], #1
 800a57a:	e7f9      	b.n	800a570 <memset+0x4>

0800a57c <__libc_init_array>:
 800a57c:	b570      	push	{r4, r5, r6, lr}
 800a57e:	4d0d      	ldr	r5, [pc, #52]	@ (800a5b4 <__libc_init_array+0x38>)
 800a580:	4c0d      	ldr	r4, [pc, #52]	@ (800a5b8 <__libc_init_array+0x3c>)
 800a582:	1b64      	subs	r4, r4, r5
 800a584:	10a4      	asrs	r4, r4, #2
 800a586:	2600      	movs	r6, #0
 800a588:	42a6      	cmp	r6, r4
 800a58a:	d109      	bne.n	800a5a0 <__libc_init_array+0x24>
 800a58c:	4d0b      	ldr	r5, [pc, #44]	@ (800a5bc <__libc_init_array+0x40>)
 800a58e:	4c0c      	ldr	r4, [pc, #48]	@ (800a5c0 <__libc_init_array+0x44>)
 800a590:	f000 f818 	bl	800a5c4 <_init>
 800a594:	1b64      	subs	r4, r4, r5
 800a596:	10a4      	asrs	r4, r4, #2
 800a598:	2600      	movs	r6, #0
 800a59a:	42a6      	cmp	r6, r4
 800a59c:	d105      	bne.n	800a5aa <__libc_init_array+0x2e>
 800a59e:	bd70      	pop	{r4, r5, r6, pc}
 800a5a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5a4:	4798      	blx	r3
 800a5a6:	3601      	adds	r6, #1
 800a5a8:	e7ee      	b.n	800a588 <__libc_init_array+0xc>
 800a5aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5ae:	4798      	blx	r3
 800a5b0:	3601      	adds	r6, #1
 800a5b2:	e7f2      	b.n	800a59a <__libc_init_array+0x1e>
 800a5b4:	0800a644 	.word	0x0800a644
 800a5b8:	0800a644 	.word	0x0800a644
 800a5bc:	0800a644 	.word	0x0800a644
 800a5c0:	0800a648 	.word	0x0800a648

0800a5c4 <_init>:
 800a5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5c6:	bf00      	nop
 800a5c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5ca:	bc08      	pop	{r3}
 800a5cc:	469e      	mov	lr, r3
 800a5ce:	4770      	bx	lr

0800a5d0 <_fini>:
 800a5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5d2:	bf00      	nop
 800a5d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5d6:	bc08      	pop	{r3}
 800a5d8:	469e      	mov	lr, r3
 800a5da:	4770      	bx	lr
