
max-station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2c8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800a48c  0800a48c  0001a48c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4ec  0800a4ec  00020120  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4ec  0800a4ec  0001a4ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4f4  0800a4f4  00020120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4f4  0800a4f4  0001a4f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4f8  0800a4f8  0001a4f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  20000000  0800a4fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001774  20000120  0800a61c  00020120  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001894  0800a61c  00021894  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ad3d  00000000  00000000  00020193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000420c  00000000  00000000  0003aed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001588  00000000  00000000  0003f0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001098  00000000  00000000  00040668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027743  00000000  00000000  00041700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f3e5  00000000  00000000  00068e43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df303  00000000  00000000  00088228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000059cc  00000000  00000000  0016752c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0016cef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000120 	.word	0x20000120
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800a474 	.word	0x0800a474

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000124 	.word	0x20000124
 8000200:	0800a474 	.word	0x0800a474

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 8000508:	22b0      	movs	r2, #176	; 0xb0
 800050a:	2100      	movs	r1, #0
 800050c:	6878      	ldr	r0, [r7, #4]
 800050e:	f009 ff85 	bl	800a41c <memset>
    return 1;
 8000512:	2301      	movs	r3, #1
}
 8000514:	4618      	mov	r0, r3
 8000516:	3708      	adds	r7, #8
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}

0800051c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	if(huart == &huart3){
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	4a13      	ldr	r2, [pc, #76]	; (8000574 <HAL_UART_RxCpltCallback+0x58>)
 8000528:	4293      	cmp	r3, r2
 800052a:	d11e      	bne.n	800056a <HAL_UART_RxCpltCallback+0x4e>
	if(rx_data_lora != '\n'&& rx_index_lora < LORA_RX_BUFFER_SIZE){
 800052c:	4b12      	ldr	r3, [pc, #72]	; (8000578 <HAL_UART_RxCpltCallback+0x5c>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b0a      	cmp	r3, #10
 8000532:	d00f      	beq.n	8000554 <HAL_UART_RxCpltCallback+0x38>
 8000534:	4b11      	ldr	r3, [pc, #68]	; (800057c <HAL_UART_RxCpltCallback+0x60>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	2b45      	cmp	r3, #69	; 0x45
 800053a:	d80b      	bhi.n	8000554 <HAL_UART_RxCpltCallback+0x38>
	lora_rx_buffer[rx_index_lora++]=rx_data_lora;
 800053c:	4b0f      	ldr	r3, [pc, #60]	; (800057c <HAL_UART_RxCpltCallback+0x60>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	1c5a      	adds	r2, r3, #1
 8000542:	b2d1      	uxtb	r1, r2
 8000544:	4a0d      	ldr	r2, [pc, #52]	; (800057c <HAL_UART_RxCpltCallback+0x60>)
 8000546:	7011      	strb	r1, [r2, #0]
 8000548:	461a      	mov	r2, r3
 800054a:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <HAL_UART_RxCpltCallback+0x5c>)
 800054c:	7819      	ldrb	r1, [r3, #0]
 800054e:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <HAL_UART_RxCpltCallback+0x64>)
 8000550:	5499      	strb	r1, [r3, r2]
 8000552:	e005      	b.n	8000560 <HAL_UART_RxCpltCallback+0x44>

	}
	else{
		rx_data_lora=0;
 8000554:	4b08      	ldr	r3, [pc, #32]	; (8000578 <HAL_UART_RxCpltCallback+0x5c>)
 8000556:	2200      	movs	r2, #0
 8000558:	701a      	strb	r2, [r3, #0]
		rx_index_lora=0;
 800055a:	4b08      	ldr	r3, [pc, #32]	; (800057c <HAL_UART_RxCpltCallback+0x60>)
 800055c:	2200      	movs	r2, #0
 800055e:	701a      	strb	r2, [r3, #0]

		}
HAL_UART_Receive_IT(&huart3, &rx_data_lora, 1);
 8000560:	2201      	movs	r2, #1
 8000562:	4905      	ldr	r1, [pc, #20]	; (8000578 <HAL_UART_RxCpltCallback+0x5c>)
 8000564:	4803      	ldr	r0, [pc, #12]	; (8000574 <HAL_UART_RxCpltCallback+0x58>)
 8000566:	f004 fd9d 	bl	80050a4 <HAL_UART_Receive_IT>
//				rx_index = 0;
//				rx_data = 0;
//			}
//			HAL_UART_Receive_IT(&huart2, &rx_data, 1);
//		}
}
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	200002b8 	.word	0x200002b8
 8000578:	20000343 	.word	0x20000343
 800057c:	20000342 	.word	0x20000342
 8000580:	200002fc 	.word	0x200002fc

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b0a0      	sub	sp, #128	; 0x80
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f001 f8a9 	bl	80016e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 fb95 	bl	8000cbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 fd33 	bl	8000ffc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000596:	f000 fbfd 	bl	8000d94 <MX_ADC1_Init>
  MX_I2C1_Init();
 800059a:	f000 fc4d 	bl	8000e38 <MX_I2C1_Init>
  MX_SPI1_Init();
 800059e:	f000 fc79 	bl	8000e94 <MX_SPI1_Init>
  MX_UART4_Init();
 80005a2:	f000 fcad 	bl	8000f00 <MX_UART4_Init>
  MX_USART2_UART_Init();
 80005a6:	f000 fcd5 	bl	8000f54 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005aa:	f000 fcfd 	bl	8000fa8 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 80005ae:	f009 f9cb 	bl	8009948 <MX_USB_DEVICE_Init>
  MX_FATFS_Init();
 80005b2:	f007 f957 	bl	8007864 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &rx_data_lora, 1);
 80005b6:	2201      	movs	r2, #1
 80005b8:	49b9      	ldr	r1, [pc, #740]	; (80008a0 <main+0x31c>)
 80005ba:	48ba      	ldr	r0, [pc, #744]	; (80008a4 <main+0x320>)
 80005bc:	f004 fd72 	bl	80050a4 <HAL_UART_Receive_IT>
//  HAL_UART_Receive_IT(&huart2,&rx_data, 1);
  E220_CONFIG(0x8,0x2A,0x6,1);
 80005c0:	2301      	movs	r3, #1
 80005c2:	2206      	movs	r2, #6
 80005c4:	212a      	movs	r1, #42	; 0x2a
 80005c6:	2008      	movs	r0, #8
 80005c8:	f000 fdc4 	bl	8001154 <E220_CONFIG>
  lwgps_init(&gps);
 80005cc:	48b6      	ldr	r0, [pc, #728]	; (80008a8 <main+0x324>)
 80005ce:	f7ff ff97 	bl	8000500 <lwgps_init>


  tim1=HAL_GetTick();
 80005d2:	f001 f8eb 	bl	80017ac <HAL_GetTick>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4ab4      	ldr	r2, [pc, #720]	; (80008ac <main+0x328>)
 80005da:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if(HAL_GetTick()-tim1>500)
 80005dc:	f001 f8e6 	bl	80017ac <HAL_GetTick>
 80005e0:	4602      	mov	r2, r0
 80005e2:	4bb2      	ldr	r3, [pc, #712]	; (80008ac <main+0x328>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	1ad3      	subs	r3, r2, r3
 80005e8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005ec:	d9f6      	bls.n	80005dc <main+0x58>
{

	  if(lora_rx_buffer[3]==2){
 80005ee:	4bb0      	ldr	r3, [pc, #704]	; (80008b0 <main+0x32c>)
 80005f0:	78db      	ldrb	r3, [r3, #3]
 80005f2:	2b02      	cmp	r3, #2
 80005f4:	f040 81df 	bne.w	80009b6 <main+0x432>

		  sustgpssatsinview=lora_rx_buffer[4];
 80005f8:	4bad      	ldr	r3, [pc, #692]	; (80008b0 <main+0x32c>)
 80005fa:	791a      	ldrb	r2, [r3, #4]
 80005fc:	4bad      	ldr	r3, [pc, #692]	; (80008b4 <main+0x330>)
 80005fe:	701a      	strb	r2, [r3, #0]

			 float2unit8 f2u8_gpsalt;
				 for(uint8_t i=0;i<4;i++)
 8000600:	2300      	movs	r3, #0
 8000602:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8000606:	e00f      	b.n	8000628 <main+0xa4>
				 {
					 f2u8_gpsalt.array[i]=lora_rx_buffer[i+5];
 8000608:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800060c:	1d5a      	adds	r2, r3, #5
 800060e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000612:	49a7      	ldr	r1, [pc, #668]	; (80008b0 <main+0x32c>)
 8000614:	5c8a      	ldrb	r2, [r1, r2]
 8000616:	3380      	adds	r3, #128	; 0x80
 8000618:	443b      	add	r3, r7
 800061a:	f803 2c20 	strb.w	r2, [r3, #-32]
				 for(uint8_t i=0;i<4;i++)
 800061e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000622:	3301      	adds	r3, #1
 8000624:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8000628:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800062c:	2b03      	cmp	r3, #3
 800062e:	d9eb      	bls.n	8000608 <main+0x84>
				 }
				 sustgpsaltitude=f2u8_gpsalt.fVal;
 8000630:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000632:	4aa1      	ldr	r2, [pc, #644]	; (80008b8 <main+0x334>)
 8000634:	6013      	str	r3, [r2, #0]
			 float2unit8 f2u8_latitude;

				 for(uint8_t i=0;i<4;i++)
 8000636:	2300      	movs	r3, #0
 8000638:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 800063c:	e010      	b.n	8000660 <main+0xdc>
				 {
					f2u8_latitude.array[i]=lora_rx_buffer[i+9];
 800063e:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8000642:	f103 0209 	add.w	r2, r3, #9
 8000646:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800064a:	4999      	ldr	r1, [pc, #612]	; (80008b0 <main+0x32c>)
 800064c:	5c8a      	ldrb	r2, [r1, r2]
 800064e:	3380      	adds	r3, #128	; 0x80
 8000650:	443b      	add	r3, r7
 8000652:	f803 2c24 	strb.w	r2, [r3, #-36]
				 for(uint8_t i=0;i<4;i++)
 8000656:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800065a:	3301      	adds	r3, #1
 800065c:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8000660:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8000664:	2b03      	cmp	r3, #3
 8000666:	d9ea      	bls.n	800063e <main+0xba>
				 }
				 sustgpslatitude=f2u8_latitude.fVal;
 8000668:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800066a:	4a94      	ldr	r2, [pc, #592]	; (80008bc <main+0x338>)
 800066c:	6013      	str	r3, [r2, #0]

			 float2unit8 f2u8_longitude;
				 for(uint8_t i=0;i<4;i++)
 800066e:	2300      	movs	r3, #0
 8000670:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 8000674:	e010      	b.n	8000698 <main+0x114>
				 {
					f2u8_longitude.array[i]=lora_rx_buffer[i+13];
 8000676:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 800067a:	f103 020d 	add.w	r2, r3, #13
 800067e:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8000682:	498b      	ldr	r1, [pc, #556]	; (80008b0 <main+0x32c>)
 8000684:	5c8a      	ldrb	r2, [r1, r2]
 8000686:	3380      	adds	r3, #128	; 0x80
 8000688:	443b      	add	r3, r7
 800068a:	f803 2c28 	strb.w	r2, [r3, #-40]
				 for(uint8_t i=0;i<4;i++)
 800068e:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8000692:	3301      	adds	r3, #1
 8000694:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 8000698:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 800069c:	2b03      	cmp	r3, #3
 800069e:	d9ea      	bls.n	8000676 <main+0xf2>
				 }
				 sustgpslongitude=f2u8_longitude.fVal;
 80006a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80006a2:	4a87      	ldr	r2, [pc, #540]	; (80008c0 <main+0x33c>)
 80006a4:	6013      	str	r3, [r2, #0]

			 float2unit8 f2u8_altitude;
				 for(uint8_t i=0;i<4;i++)
 80006a6:	2300      	movs	r3, #0
 80006a8:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
 80006ac:	e010      	b.n	80006d0 <main+0x14c>
				 {
					f2u8_altitude.array[i]=lora_rx_buffer[i+17];
 80006ae:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80006b2:	f103 0211 	add.w	r2, r3, #17
 80006b6:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80006ba:	497d      	ldr	r1, [pc, #500]	; (80008b0 <main+0x32c>)
 80006bc:	5c8a      	ldrb	r2, [r1, r2]
 80006be:	3380      	adds	r3, #128	; 0x80
 80006c0:	443b      	add	r3, r7
 80006c2:	f803 2c2c 	strb.w	r2, [r3, #-44]
				 for(uint8_t i=0;i<4;i++)
 80006c6:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80006ca:	3301      	adds	r3, #1
 80006cc:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
 80006d0:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80006d4:	2b03      	cmp	r3, #3
 80006d6:	d9ea      	bls.n	80006ae <main+0x12a>
				 }
				 sustaltitude=f2u8_altitude.fVal;
 80006d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80006da:	4a7a      	ldr	r2, [pc, #488]	; (80008c4 <main+0x340>)
 80006dc:	6013      	str	r3, [r2, #0]

			 float2unit8 f2u8_speed;

				 for(uint8_t i=0;i<4;i++)
 80006de:	2300      	movs	r3, #0
 80006e0:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80006e4:	e010      	b.n	8000708 <main+0x184>
				 {
					 f2u8_speed.array[i]=lora_rx_buffer[i+21];
 80006e6:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80006ea:	f103 0215 	add.w	r2, r3, #21
 80006ee:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80006f2:	496f      	ldr	r1, [pc, #444]	; (80008b0 <main+0x32c>)
 80006f4:	5c8a      	ldrb	r2, [r1, r2]
 80006f6:	3380      	adds	r3, #128	; 0x80
 80006f8:	443b      	add	r3, r7
 80006fa:	f803 2c30 	strb.w	r2, [r3, #-48]
				 for(uint8_t i=0;i<4;i++)
 80006fe:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8000702:	3301      	adds	r3, #1
 8000704:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8000708:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800070c:	2b03      	cmp	r3, #3
 800070e:	d9ea      	bls.n	80006e6 <main+0x162>
				 }
				 sustspeed=f2u8_speed.fVal;
 8000710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000712:	4a6d      	ldr	r2, [pc, #436]	; (80008c8 <main+0x344>)
 8000714:	6013      	str	r3, [r2, #0]

			 float2unit8 f2u8_temp;
				 for(uint8_t i=0;i<4;i++)
 8000716:	2300      	movs	r3, #0
 8000718:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
 800071c:	e010      	b.n	8000740 <main+0x1bc>
				 {
					 f2u8_temp.array[i]=lora_rx_buffer[i+25];
 800071e:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8000722:	f103 0219 	add.w	r2, r3, #25
 8000726:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 800072a:	4961      	ldr	r1, [pc, #388]	; (80008b0 <main+0x32c>)
 800072c:	5c8a      	ldrb	r2, [r1, r2]
 800072e:	3380      	adds	r3, #128	; 0x80
 8000730:	443b      	add	r3, r7
 8000732:	f803 2c34 	strb.w	r2, [r3, #-52]
				 for(uint8_t i=0;i<4;i++)
 8000736:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 800073a:	3301      	adds	r3, #1
 800073c:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
 8000740:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8000744:	2b03      	cmp	r3, #3
 8000746:	d9ea      	bls.n	800071e <main+0x19a>
				 }
				 susttemperature=f2u8_temp.fVal;
 8000748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800074a:	4a60      	ldr	r2, [pc, #384]	; (80008cc <main+0x348>)
 800074c:	6013      	str	r3, [r2, #0]

			 float2unit8 f2u8_accx;
				 for(uint8_t i=0;i<4;i++)
 800074e:	2300      	movs	r3, #0
 8000750:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
 8000754:	e010      	b.n	8000778 <main+0x1f4>
				 {
					 f2u8_accx.array[i]=lora_rx_buffer[i+29];
 8000756:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 800075a:	f103 021d 	add.w	r2, r3, #29
 800075e:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8000762:	4953      	ldr	r1, [pc, #332]	; (80008b0 <main+0x32c>)
 8000764:	5c8a      	ldrb	r2, [r1, r2]
 8000766:	3380      	adds	r3, #128	; 0x80
 8000768:	443b      	add	r3, r7
 800076a:	f803 2c38 	strb.w	r2, [r3, #-56]
				 for(uint8_t i=0;i<4;i++)
 800076e:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8000772:	3301      	adds	r3, #1
 8000774:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
 8000778:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 800077c:	2b03      	cmp	r3, #3
 800077e:	d9ea      	bls.n	8000756 <main+0x1d2>
				 }
				 sustaccx=f2u8_accx.fVal;
 8000780:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000782:	4a53      	ldr	r2, [pc, #332]	; (80008d0 <main+0x34c>)
 8000784:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_accy;
				 for(uint8_t i=0;i<4;i++)
 8000786:	2300      	movs	r3, #0
 8000788:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
 800078c:	e010      	b.n	80007b0 <main+0x22c>
				 {
					 f2u8_accy.array[i]=lora_rx_buffer[i+33];
 800078e:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8000792:	f103 0221 	add.w	r2, r3, #33	; 0x21
 8000796:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 800079a:	4945      	ldr	r1, [pc, #276]	; (80008b0 <main+0x32c>)
 800079c:	5c8a      	ldrb	r2, [r1, r2]
 800079e:	3380      	adds	r3, #128	; 0x80
 80007a0:	443b      	add	r3, r7
 80007a2:	f803 2c3c 	strb.w	r2, [r3, #-60]
				 for(uint8_t i=0;i<4;i++)
 80007a6:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 80007aa:	3301      	adds	r3, #1
 80007ac:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
 80007b0:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 80007b4:	2b03      	cmp	r3, #3
 80007b6:	d9ea      	bls.n	800078e <main+0x20a>
				 }
					 sustaccy=f2u8_accy.fVal;
 80007b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007ba:	4a46      	ldr	r2, [pc, #280]	; (80008d4 <main+0x350>)
 80007bc:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_accz;
			      for(uint8_t i=0;i<4;i++)
 80007be:	2300      	movs	r3, #0
 80007c0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80007c4:	e010      	b.n	80007e8 <main+0x264>
				 {
			    	  f2u8_accz.array[i]=lora_rx_buffer[i+37];
 80007c6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80007ca:	f103 0225 	add.w	r2, r3, #37	; 0x25
 80007ce:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80007d2:	4937      	ldr	r1, [pc, #220]	; (80008b0 <main+0x32c>)
 80007d4:	5c8a      	ldrb	r2, [r1, r2]
 80007d6:	3380      	adds	r3, #128	; 0x80
 80007d8:	443b      	add	r3, r7
 80007da:	f803 2c40 	strb.w	r2, [r3, #-64]
			      for(uint8_t i=0;i<4;i++)
 80007de:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80007e2:	3301      	adds	r3, #1
 80007e4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80007e8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80007ec:	2b03      	cmp	r3, #3
 80007ee:	d9ea      	bls.n	80007c6 <main+0x242>
				 }
					 sustaccz=f2u8_accz.fVal;
 80007f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007f2:	4a39      	ldr	r2, [pc, #228]	; (80008d8 <main+0x354>)
 80007f4:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_roll;
				  for(uint8_t i=0;i<4;i++)
 80007f6:	2300      	movs	r3, #0
 80007f8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 80007fc:	e010      	b.n	8000820 <main+0x29c>
				 {
					  f2u8_roll.array[i]=lora_rx_buffer[i+41];
 80007fe:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8000802:	f103 0229 	add.w	r2, r3, #41	; 0x29
 8000806:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800080a:	4929      	ldr	r1, [pc, #164]	; (80008b0 <main+0x32c>)
 800080c:	5c8a      	ldrb	r2, [r1, r2]
 800080e:	3380      	adds	r3, #128	; 0x80
 8000810:	443b      	add	r3, r7
 8000812:	f803 2c44 	strb.w	r2, [r3, #-68]
				  for(uint8_t i=0;i<4;i++)
 8000816:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800081a:	3301      	adds	r3, #1
 800081c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8000820:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8000824:	2b03      	cmp	r3, #3
 8000826:	d9ea      	bls.n	80007fe <main+0x27a>
				 }
					 sustroll=f2u8_roll.fVal;
 8000828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800082a:	4a2c      	ldr	r2, [pc, #176]	; (80008dc <main+0x358>)
 800082c:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_pitch;
				  for(uint8_t i=0;i<4;i++)
 800082e:	2300      	movs	r3, #0
 8000830:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 8000834:	e010      	b.n	8000858 <main+0x2d4>
				 {
					  f2u8_pitch.array[i]=lora_rx_buffer[i+45];
 8000836:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 800083a:	f103 022d 	add.w	r2, r3, #45	; 0x2d
 800083e:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8000842:	491b      	ldr	r1, [pc, #108]	; (80008b0 <main+0x32c>)
 8000844:	5c8a      	ldrb	r2, [r1, r2]
 8000846:	3380      	adds	r3, #128	; 0x80
 8000848:	443b      	add	r3, r7
 800084a:	f803 2c48 	strb.w	r2, [r3, #-72]
				  for(uint8_t i=0;i<4;i++)
 800084e:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8000852:	3301      	adds	r3, #1
 8000854:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 8000858:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 800085c:	2b03      	cmp	r3, #3
 800085e:	d9ea      	bls.n	8000836 <main+0x2b2>
				 }
					 sustpitch=f2u8_pitch.fVal;
 8000860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000862:	4a1f      	ldr	r2, [pc, #124]	; (80008e0 <main+0x35c>)
 8000864:	6013      	str	r3, [r2, #0]

					 sustv4_battery=lora_rx_buffer[49];
 8000866:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <main+0x32c>)
 8000868:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 800086c:	4b1d      	ldr	r3, [pc, #116]	; (80008e4 <main+0x360>)
 800086e:	701a      	strb	r2, [r3, #0]
					 sustv4_mod=lora_rx_buffer[50];
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <main+0x32c>)
 8000872:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8000876:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <main+0x364>)
 8000878:	701a      	strb	r2, [r3, #0]
					 suststage_communication=lora_rx_buffer[51];
 800087a:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <main+0x32c>)
 800087c:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8000880:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <main+0x368>)
 8000882:	701a      	strb	r2, [r3, #0]

					 //EGU PART
					 EGU_ARIZA=lora_rx_buffer[52];
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <main+0x32c>)
 8000886:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800088a:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <main+0x36c>)
 800088c:	701a      	strb	r2, [r3, #0]
					 EGU_AYRILMA_TESPIT=lora_rx_buffer[53];
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <main+0x32c>)
 8000890:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8000894:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <main+0x370>)
 8000896:	701a      	strb	r2, [r3, #0]

			float2unit8 f2u8_EGU_BATTERY;
					for(uint8_t i=0;i<4;i++)
 8000898:	2300      	movs	r3, #0
 800089a:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
 800089e:	e03c      	b.n	800091a <main+0x396>
 80008a0:	20000343 	.word	0x20000343
 80008a4:	200002b8 	.word	0x200002b8
 80008a8:	200003c0 	.word	0x200003c0
 80008ac:	200003b8 	.word	0x200003b8
 80008b0:	200002fc 	.word	0x200002fc
 80008b4:	20000344 	.word	0x20000344
 80008b8:	20000348 	.word	0x20000348
 80008bc:	2000034c 	.word	0x2000034c
 80008c0:	20000350 	.word	0x20000350
 80008c4:	20000358 	.word	0x20000358
 80008c8:	20000354 	.word	0x20000354
 80008cc:	2000035c 	.word	0x2000035c
 80008d0:	20000360 	.word	0x20000360
 80008d4:	20000364 	.word	0x20000364
 80008d8:	20000368 	.word	0x20000368
 80008dc:	2000036c 	.word	0x2000036c
 80008e0:	20000370 	.word	0x20000370
 80008e4:	20000374 	.word	0x20000374
 80008e8:	20000375 	.word	0x20000375
 80008ec:	20000376 	.word	0x20000376
 80008f0:	20000377 	.word	0x20000377
 80008f4:	20000378 	.word	0x20000378
				 {
						f2u8_EGU_BATTERY.array[i]=lora_rx_buffer[i+54];
 80008f8:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 80008fc:	f103 0236 	add.w	r2, r3, #54	; 0x36
 8000900:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8000904:	49be      	ldr	r1, [pc, #760]	; (8000c00 <main+0x67c>)
 8000906:	5c8a      	ldrb	r2, [r1, r2]
 8000908:	3380      	adds	r3, #128	; 0x80
 800090a:	443b      	add	r3, r7
 800090c:	f803 2c4c 	strb.w	r2, [r3, #-76]
					for(uint8_t i=0;i<4;i++)
 8000910:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8000914:	3301      	adds	r3, #1
 8000916:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
 800091a:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800091e:	2b03      	cmp	r3, #3
 8000920:	d9ea      	bls.n	80008f8 <main+0x374>
				 }
					 EGU_BATTERY=f2u8_EGU_BATTERY.fVal;
 8000922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000924:	4ab7      	ldr	r2, [pc, #732]	; (8000c04 <main+0x680>)
 8000926:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_EGU_ANGLE;
					for(uint8_t i=0;i<4;i++)
 8000928:	2300      	movs	r3, #0
 800092a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800092e:	e010      	b.n	8000952 <main+0x3ce>
				{
						f2u8_EGU_ANGLE.array[i]=lora_rx_buffer[i+58];
 8000930:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8000934:	f103 023a 	add.w	r2, r3, #58	; 0x3a
 8000938:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800093c:	49b0      	ldr	r1, [pc, #704]	; (8000c00 <main+0x67c>)
 800093e:	5c8a      	ldrb	r2, [r1, r2]
 8000940:	3380      	adds	r3, #128	; 0x80
 8000942:	443b      	add	r3, r7
 8000944:	f803 2c50 	strb.w	r2, [r3, #-80]
					for(uint8_t i=0;i<4;i++)
 8000948:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800094c:	3301      	adds	r3, #1
 800094e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8000952:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8000956:	2b03      	cmp	r3, #3
 8000958:	d9ea      	bls.n	8000930 <main+0x3ac>
				 }
					  EGU_ANGLE=f2u8_EGU_ANGLE.fVal;
 800095a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800095c:	4aaa      	ldr	r2, [pc, #680]	; (8000c08 <main+0x684>)
 800095e:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_EGU_IRTIFA;
					for(uint8_t i=0;i<4;i++)
 8000960:	2300      	movs	r3, #0
 8000962:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 8000966:	e010      	b.n	800098a <main+0x406>
				{
						f2u8_EGU_IRTIFA.array[i]=lora_rx_buffer[i+62];
 8000968:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800096c:	f103 023e 	add.w	r2, r3, #62	; 0x3e
 8000970:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8000974:	49a2      	ldr	r1, [pc, #648]	; (8000c00 <main+0x67c>)
 8000976:	5c8a      	ldrb	r2, [r1, r2]
 8000978:	3380      	adds	r3, #128	; 0x80
 800097a:	443b      	add	r3, r7
 800097c:	f803 2c54 	strb.w	r2, [r3, #-84]
					for(uint8_t i=0;i<4;i++)
 8000980:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8000984:	3301      	adds	r3, #1
 8000986:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 800098a:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 800098e:	2b03      	cmp	r3, #3
 8000990:	d9ea      	bls.n	8000968 <main+0x3e4>
				}
					  EGU_IRTIFA=f2u8_EGU_IRTIFA.fVal;
 8000992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000994:	4a9d      	ldr	r2, [pc, #628]	; (8000c0c <main+0x688>)
 8000996:	6013      	str	r3, [r2, #0]

					  EGU_UCUS_BASLADIMI=lora_rx_buffer[66];
 8000998:	4b99      	ldr	r3, [pc, #612]	; (8000c00 <main+0x67c>)
 800099a:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800099e:	4b9c      	ldr	r3, [pc, #624]	; (8000c10 <main+0x68c>)
 80009a0:	701a      	strb	r2, [r3, #0]
					  EGU_STAGE_DURUM=lora_rx_buffer[67];
 80009a2:	4b97      	ldr	r3, [pc, #604]	; (8000c00 <main+0x67c>)
 80009a4:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80009a8:	4b9a      	ldr	r3, [pc, #616]	; (8000c14 <main+0x690>)
 80009aa:	701a      	strb	r2, [r3, #0]
					  EGU_MOTOR_ATESLEME_TALEP_IN=lora_rx_buffer[68];
 80009ac:	4b94      	ldr	r3, [pc, #592]	; (8000c00 <main+0x67c>)
 80009ae:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80009b2:	4b99      	ldr	r3, [pc, #612]	; (8000c18 <main+0x694>)
 80009b4:	701a      	strb	r2, [r3, #0]
}

	  if(lora_rx_buffer[3]==1){
 80009b6:	4b92      	ldr	r3, [pc, #584]	; (8000c00 <main+0x67c>)
 80009b8:	78db      	ldrb	r3, [r3, #3]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	f040 816b 	bne.w	8000c96 <main+0x712>

		  boostgpssatsinview=lora_rx_buffer[4];
 80009c0:	4b8f      	ldr	r3, [pc, #572]	; (8000c00 <main+0x67c>)
 80009c2:	791a      	ldrb	r2, [r3, #4]
 80009c4:	4b95      	ldr	r3, [pc, #596]	; (8000c1c <main+0x698>)
 80009c6:	701a      	strb	r2, [r3, #0]

			 float2unit8 f2u8_bgpsalt;
				 for(uint8_t i=0;i<4;i++)
 80009c8:	2300      	movs	r3, #0
 80009ca:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
 80009ce:	e00f      	b.n	80009f0 <main+0x46c>
				 {
					 f2u8_bgpsalt.array[i]=lora_rx_buffer[i+5];
 80009d0:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 80009d4:	1d5a      	adds	r2, r3, #5
 80009d6:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 80009da:	4989      	ldr	r1, [pc, #548]	; (8000c00 <main+0x67c>)
 80009dc:	5c8a      	ldrb	r2, [r1, r2]
 80009de:	3380      	adds	r3, #128	; 0x80
 80009e0:	443b      	add	r3, r7
 80009e2:	f803 2c58 	strb.w	r2, [r3, #-88]
				 for(uint8_t i=0;i<4;i++)
 80009e6:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 80009ea:	3301      	adds	r3, #1
 80009ec:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
 80009f0:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 80009f4:	2b03      	cmp	r3, #3
 80009f6:	d9eb      	bls.n	80009d0 <main+0x44c>
				 }
				 sustgpsaltitude=f2u8_bgpsalt.fVal;
 80009f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009fa:	4a89      	ldr	r2, [pc, #548]	; (8000c20 <main+0x69c>)
 80009fc:	6013      	str	r3, [r2, #0]
			 float2unit8 f2u8_blatitude;

				 for(uint8_t i=0;i<4;i++)
 80009fe:	2300      	movs	r3, #0
 8000a00:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 8000a04:	e010      	b.n	8000a28 <main+0x4a4>
				 {
					 f2u8_blatitude.array[i]=lora_rx_buffer[i+9];
 8000a06:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8000a0a:	f103 0209 	add.w	r2, r3, #9
 8000a0e:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8000a12:	497b      	ldr	r1, [pc, #492]	; (8000c00 <main+0x67c>)
 8000a14:	5c8a      	ldrb	r2, [r1, r2]
 8000a16:	3380      	adds	r3, #128	; 0x80
 8000a18:	443b      	add	r3, r7
 8000a1a:	f803 2c5c 	strb.w	r2, [r3, #-92]
				 for(uint8_t i=0;i<4;i++)
 8000a1e:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8000a22:	3301      	adds	r3, #1
 8000a24:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
 8000a28:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8000a2c:	2b03      	cmp	r3, #3
 8000a2e:	d9ea      	bls.n	8000a06 <main+0x482>
				 }
				 boostgpslatitude=f2u8_blatitude.fVal;
 8000a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a32:	4a7c      	ldr	r2, [pc, #496]	; (8000c24 <main+0x6a0>)
 8000a34:	6013      	str	r3, [r2, #0]

			 float2unit8 f2u8_blongitude;
				 for(uint8_t i=0;i<4;i++)
 8000a36:	2300      	movs	r3, #0
 8000a38:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000a3c:	e010      	b.n	8000a60 <main+0x4dc>
				 {
					 f2u8_blongitude.array[i]=lora_rx_buffer[i+13];
 8000a3e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000a42:	f103 020d 	add.w	r2, r3, #13
 8000a46:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000a4a:	496d      	ldr	r1, [pc, #436]	; (8000c00 <main+0x67c>)
 8000a4c:	5c8a      	ldrb	r2, [r1, r2]
 8000a4e:	3380      	adds	r3, #128	; 0x80
 8000a50:	443b      	add	r3, r7
 8000a52:	f803 2c60 	strb.w	r2, [r3, #-96]
				 for(uint8_t i=0;i<4;i++)
 8000a56:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000a60:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000a64:	2b03      	cmp	r3, #3
 8000a66:	d9ea      	bls.n	8000a3e <main+0x4ba>
				 }
				 boostgpslongitude=f2u8_blongitude.fVal;
 8000a68:	6a3b      	ldr	r3, [r7, #32]
 8000a6a:	4a6f      	ldr	r2, [pc, #444]	; (8000c28 <main+0x6a4>)
 8000a6c:	6013      	str	r3, [r2, #0]

			 float2unit8 f2u8_baltitude;
				 for(uint8_t i=0;i<4;i++)
 8000a6e:	2300      	movs	r3, #0
 8000a70:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8000a74:	e010      	b.n	8000a98 <main+0x514>
				 {
					f2u8_baltitude.array[i]=lora_rx_buffer[i+17];
 8000a76:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000a7a:	f103 0211 	add.w	r2, r3, #17
 8000a7e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000a82:	495f      	ldr	r1, [pc, #380]	; (8000c00 <main+0x67c>)
 8000a84:	5c8a      	ldrb	r2, [r1, r2]
 8000a86:	3380      	adds	r3, #128	; 0x80
 8000a88:	443b      	add	r3, r7
 8000a8a:	f803 2c64 	strb.w	r2, [r3, #-100]
				 for(uint8_t i=0;i<4;i++)
 8000a8e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000a92:	3301      	adds	r3, #1
 8000a94:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8000a98:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000a9c:	2b03      	cmp	r3, #3
 8000a9e:	d9ea      	bls.n	8000a76 <main+0x4f2>
				 }
				 boostaltitude=f2u8_baltitude.fVal;
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	4a62      	ldr	r2, [pc, #392]	; (8000c2c <main+0x6a8>)
 8000aa4:	6013      	str	r3, [r2, #0]

			 float2unit8 f2u8_bspeed;

				 for(uint8_t i=0;i<4;i++)
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 8000aac:	e010      	b.n	8000ad0 <main+0x54c>
				 {
					 f2u8_bspeed.array[i]=lora_rx_buffer[i+21];
 8000aae:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8000ab2:	f103 0215 	add.w	r2, r3, #21
 8000ab6:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8000aba:	4951      	ldr	r1, [pc, #324]	; (8000c00 <main+0x67c>)
 8000abc:	5c8a      	ldrb	r2, [r1, r2]
 8000abe:	3380      	adds	r3, #128	; 0x80
 8000ac0:	443b      	add	r3, r7
 8000ac2:	f803 2c68 	strb.w	r2, [r3, #-104]
				 for(uint8_t i=0;i<4;i++)
 8000ac6:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8000aca:	3301      	adds	r3, #1
 8000acc:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 8000ad0:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8000ad4:	2b03      	cmp	r3, #3
 8000ad6:	d9ea      	bls.n	8000aae <main+0x52a>
				 }
				 boostspeed=f2u8_bspeed.fVal;
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	4a55      	ldr	r2, [pc, #340]	; (8000c30 <main+0x6ac>)
 8000adc:	6013      	str	r3, [r2, #0]

			 float2unit8 f2u8_btemp;
				 for(uint8_t i=0;i<4;i++)
 8000ade:	2300      	movs	r3, #0
 8000ae0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
 8000ae4:	e010      	b.n	8000b08 <main+0x584>
				 {
					 f2u8_btemp.array[i]=lora_rx_buffer[i+25];
 8000ae6:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8000aea:	f103 0219 	add.w	r2, r3, #25
 8000aee:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8000af2:	4943      	ldr	r1, [pc, #268]	; (8000c00 <main+0x67c>)
 8000af4:	5c8a      	ldrb	r2, [r1, r2]
 8000af6:	3380      	adds	r3, #128	; 0x80
 8000af8:	443b      	add	r3, r7
 8000afa:	f803 2c6c 	strb.w	r2, [r3, #-108]
				 for(uint8_t i=0;i<4;i++)
 8000afe:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8000b02:	3301      	adds	r3, #1
 8000b04:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
 8000b08:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8000b0c:	2b03      	cmp	r3, #3
 8000b0e:	d9ea      	bls.n	8000ae6 <main+0x562>
				 }
				 boosttemperature=f2u8_btemp.fVal;
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	4a48      	ldr	r2, [pc, #288]	; (8000c34 <main+0x6b0>)
 8000b14:	6013      	str	r3, [r2, #0]

			 float2unit8 f2u8_baccx;
				 for(uint8_t i=0;i<4;i++)
 8000b16:	2300      	movs	r3, #0
 8000b18:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8000b1c:	e010      	b.n	8000b40 <main+0x5bc>
				 {
					 f2u8_baccx.array[i]=lora_rx_buffer[i+29];
 8000b1e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000b22:	f103 021d 	add.w	r2, r3, #29
 8000b26:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000b2a:	4935      	ldr	r1, [pc, #212]	; (8000c00 <main+0x67c>)
 8000b2c:	5c8a      	ldrb	r2, [r1, r2]
 8000b2e:	3380      	adds	r3, #128	; 0x80
 8000b30:	443b      	add	r3, r7
 8000b32:	f803 2c70 	strb.w	r2, [r3, #-112]
				 for(uint8_t i=0;i<4;i++)
 8000b36:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8000b40:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8000b44:	2b03      	cmp	r3, #3
 8000b46:	d9ea      	bls.n	8000b1e <main+0x59a>
				 }
				 boostaccx=f2u8_baccx.fVal;
 8000b48:	693b      	ldr	r3, [r7, #16]
 8000b4a:	4a3b      	ldr	r2, [pc, #236]	; (8000c38 <main+0x6b4>)
 8000b4c:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_baccy;
				 for(uint8_t i=0;i<4;i++)
 8000b4e:	2300      	movs	r3, #0
 8000b50:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
 8000b54:	e010      	b.n	8000b78 <main+0x5f4>
				 {
					 f2u8_baccy.array[i]=lora_rx_buffer[i+33];
 8000b56:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8000b5a:	f103 0221 	add.w	r2, r3, #33	; 0x21
 8000b5e:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8000b62:	4927      	ldr	r1, [pc, #156]	; (8000c00 <main+0x67c>)
 8000b64:	5c8a      	ldrb	r2, [r1, r2]
 8000b66:	3380      	adds	r3, #128	; 0x80
 8000b68:	443b      	add	r3, r7
 8000b6a:	f803 2c74 	strb.w	r2, [r3, #-116]
				 for(uint8_t i=0;i<4;i++)
 8000b6e:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8000b72:	3301      	adds	r3, #1
 8000b74:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
 8000b78:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8000b7c:	2b03      	cmp	r3, #3
 8000b7e:	d9ea      	bls.n	8000b56 <main+0x5d2>
				 }
					 boostaccy=f2u8_baccy.fVal;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	4a2e      	ldr	r2, [pc, #184]	; (8000c3c <main+0x6b8>)
 8000b84:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_baccz;
			      for(uint8_t i=0;i<4;i++)
 8000b86:	2300      	movs	r3, #0
 8000b88:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
 8000b8c:	e010      	b.n	8000bb0 <main+0x62c>
				 {
			    	  f2u8_baccz.array[i]=lora_rx_buffer[i+37];
 8000b8e:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8000b92:	f103 0225 	add.w	r2, r3, #37	; 0x25
 8000b96:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8000b9a:	4919      	ldr	r1, [pc, #100]	; (8000c00 <main+0x67c>)
 8000b9c:	5c8a      	ldrb	r2, [r1, r2]
 8000b9e:	3380      	adds	r3, #128	; 0x80
 8000ba0:	443b      	add	r3, r7
 8000ba2:	f803 2c78 	strb.w	r2, [r3, #-120]
			      for(uint8_t i=0;i<4;i++)
 8000ba6:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8000baa:	3301      	adds	r3, #1
 8000bac:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
 8000bb0:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8000bb4:	2b03      	cmp	r3, #3
 8000bb6:	d9ea      	bls.n	8000b8e <main+0x60a>
				 }
					 boostaccz=f2u8_baccz.fVal;
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	4a21      	ldr	r2, [pc, #132]	; (8000c40 <main+0x6bc>)
 8000bbc:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_broll;
				  for(uint8_t i=0;i<4;i++)
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 8000bc4:	e010      	b.n	8000be8 <main+0x664>
				 {
					  f2u8_broll.array[i]=lora_rx_buffer[i+41];
 8000bc6:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000bca:	f103 0229 	add.w	r2, r3, #41	; 0x29
 8000bce:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000bd2:	490b      	ldr	r1, [pc, #44]	; (8000c00 <main+0x67c>)
 8000bd4:	5c8a      	ldrb	r2, [r1, r2]
 8000bd6:	3380      	adds	r3, #128	; 0x80
 8000bd8:	443b      	add	r3, r7
 8000bda:	f803 2c7c 	strb.w	r2, [r3, #-124]
				  for(uint8_t i=0;i<4;i++)
 8000bde:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000be2:	3301      	adds	r3, #1
 8000be4:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 8000be8:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8000bec:	2b03      	cmp	r3, #3
 8000bee:	d9ea      	bls.n	8000bc6 <main+0x642>
				 }
					 boostroll=f2u8_broll.fVal;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a14      	ldr	r2, [pc, #80]	; (8000c44 <main+0x6c0>)
 8000bf4:	6013      	str	r3, [r2, #0]

			float2unit8 f2u8_bpitch;
				  for(uint8_t i=0;i<4;i++)
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000bfc:	e035      	b.n	8000c6a <main+0x6e6>
 8000bfe:	bf00      	nop
 8000c00:	200002fc 	.word	0x200002fc
 8000c04:	2000037c 	.word	0x2000037c
 8000c08:	20000384 	.word	0x20000384
 8000c0c:	20000380 	.word	0x20000380
 8000c10:	2000037b 	.word	0x2000037b
 8000c14:	2000037a 	.word	0x2000037a
 8000c18:	20000379 	.word	0x20000379
 8000c1c:	20000388 	.word	0x20000388
 8000c20:	20000348 	.word	0x20000348
 8000c24:	2000038c 	.word	0x2000038c
 8000c28:	20000390 	.word	0x20000390
 8000c2c:	20000398 	.word	0x20000398
 8000c30:	20000394 	.word	0x20000394
 8000c34:	2000039c 	.word	0x2000039c
 8000c38:	200003a0 	.word	0x200003a0
 8000c3c:	200003a4 	.word	0x200003a4
 8000c40:	200003a8 	.word	0x200003a8
 8000c44:	200003ac 	.word	0x200003ac
				 {
					  f2u8_bpitch.array[i]=lora_rx_buffer[i+45];
 8000c48:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c4c:	f103 022d 	add.w	r2, r3, #45	; 0x2d
 8000c50:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c54:	4913      	ldr	r1, [pc, #76]	; (8000ca4 <main+0x720>)
 8000c56:	5c8a      	ldrb	r2, [r1, r2]
 8000c58:	3380      	adds	r3, #128	; 0x80
 8000c5a:	443b      	add	r3, r7
 8000c5c:	f803 2c80 	strb.w	r2, [r3, #-128]
				  for(uint8_t i=0;i<4;i++)
 8000c60:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c64:	3301      	adds	r3, #1
 8000c66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000c6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c6e:	2b03      	cmp	r3, #3
 8000c70:	d9ea      	bls.n	8000c48 <main+0x6c4>
				 }
					 boostpitch=f2u8_bpitch.fVal;
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	4a0c      	ldr	r2, [pc, #48]	; (8000ca8 <main+0x724>)
 8000c76:	6013      	str	r3, [r2, #0]

					 boostv4_battery=lora_rx_buffer[49];
 8000c78:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <main+0x720>)
 8000c7a:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <main+0x728>)
 8000c80:	701a      	strb	r2, [r3, #0]
					 boostv4_mod=lora_rx_buffer[50];
 8000c82:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <main+0x720>)
 8000c84:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8000c88:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <main+0x72c>)
 8000c8a:	701a      	strb	r2, [r3, #0]
					 booststage_communication=lora_rx_buffer[51];
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <main+0x720>)
 8000c8e:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8000c92:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <main+0x730>)
 8000c94:	701a      	strb	r2, [r3, #0]
}




	  tim1=HAL_GetTick();
 8000c96:	f000 fd89 	bl	80017ac <HAL_GetTick>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	4a06      	ldr	r2, [pc, #24]	; (8000cb8 <main+0x734>)
 8000c9e:	6013      	str	r3, [r2, #0]
	  if(HAL_GetTick()-tim1>500)
 8000ca0:	e49c      	b.n	80005dc <main+0x58>
 8000ca2:	bf00      	nop
 8000ca4:	200002fc 	.word	0x200002fc
 8000ca8:	200003b0 	.word	0x200003b0
 8000cac:	200003b4 	.word	0x200003b4
 8000cb0:	200003b5 	.word	0x200003b5
 8000cb4:	200003b6 	.word	0x200003b6
 8000cb8:	200003b8 	.word	0x200003b8

08000cbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b094      	sub	sp, #80	; 0x50
 8000cc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc2:	f107 031c 	add.w	r3, r7, #28
 8000cc6:	2234      	movs	r2, #52	; 0x34
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f009 fba6 	bl	800a41c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd0:	f107 0308 	add.w	r3, r7, #8
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	4b29      	ldr	r3, [pc, #164]	; (8000d8c <SystemClock_Config+0xd0>)
 8000ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce8:	4a28      	ldr	r2, [pc, #160]	; (8000d8c <SystemClock_Config+0xd0>)
 8000cea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cee:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf0:	4b26      	ldr	r3, [pc, #152]	; (8000d8c <SystemClock_Config+0xd0>)
 8000cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	603b      	str	r3, [r7, #0]
 8000d00:	4b23      	ldr	r3, [pc, #140]	; (8000d90 <SystemClock_Config+0xd4>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a22      	ldr	r2, [pc, #136]	; (8000d90 <SystemClock_Config+0xd4>)
 8000d06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d0a:	6013      	str	r3, [r2, #0]
 8000d0c:	4b20      	ldr	r3, [pc, #128]	; (8000d90 <SystemClock_Config+0xd4>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d14:	603b      	str	r3, [r7, #0]
 8000d16:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d20:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d22:	2302      	movs	r3, #2
 8000d24:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d2a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d2c:	2304      	movs	r3, #4
 8000d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000d30:	23a8      	movs	r3, #168	; 0xa8
 8000d32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d34:	2302      	movs	r3, #2
 8000d36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d38:	2307      	movs	r3, #7
 8000d3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d40:	f107 031c 	add.w	r3, r7, #28
 8000d44:	4618      	mov	r0, r3
 8000d46:	f003 fda7 	bl	8004898 <HAL_RCC_OscConfig>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000d50:	f000 fa5e 	bl	8001210 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d54:	230f      	movs	r3, #15
 8000d56:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d60:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d64:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d6a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d6c:	f107 0308 	add.w	r3, r7, #8
 8000d70:	2105      	movs	r1, #5
 8000d72:	4618      	mov	r0, r3
 8000d74:	f002 ff1c 	bl	8003bb0 <HAL_RCC_ClockConfig>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000d7e:	f000 fa47 	bl	8001210 <Error_Handler>
  }
}
 8000d82:	bf00      	nop
 8000d84:	3750      	adds	r7, #80	; 0x50
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40007000 	.word	0x40007000

08000d94 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000da6:	4b21      	ldr	r3, [pc, #132]	; (8000e2c <MX_ADC1_Init+0x98>)
 8000da8:	4a21      	ldr	r2, [pc, #132]	; (8000e30 <MX_ADC1_Init+0x9c>)
 8000daa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000dac:	4b1f      	ldr	r3, [pc, #124]	; (8000e2c <MX_ADC1_Init+0x98>)
 8000dae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000db2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000db4:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <MX_ADC1_Init+0x98>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000dba:	4b1c      	ldr	r3, [pc, #112]	; (8000e2c <MX_ADC1_Init+0x98>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dc0:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <MX_ADC1_Init+0x98>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dc6:	4b19      	ldr	r3, [pc, #100]	; (8000e2c <MX_ADC1_Init+0x98>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dce:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <MX_ADC1_Init+0x98>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dd4:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <MX_ADC1_Init+0x98>)
 8000dd6:	4a17      	ldr	r2, [pc, #92]	; (8000e34 <MX_ADC1_Init+0xa0>)
 8000dd8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dda:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <MX_ADC1_Init+0x98>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <MX_ADC1_Init+0x98>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <MX_ADC1_Init+0x98>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dee:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <MX_ADC1_Init+0x98>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000df4:	480d      	ldr	r0, [pc, #52]	; (8000e2c <MX_ADC1_Init+0x98>)
 8000df6:	f000 fd09 	bl	800180c <HAL_ADC_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e00:	f000 fa06 	bl	8001210 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000e04:	230c      	movs	r3, #12
 8000e06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e10:	463b      	mov	r3, r7
 8000e12:	4619      	mov	r1, r3
 8000e14:	4805      	ldr	r0, [pc, #20]	; (8000e2c <MX_ADC1_Init+0x98>)
 8000e16:	f000 fd3d 	bl	8001894 <HAL_ADC_ConfigChannel>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e20:	f000 f9f6 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e24:	bf00      	nop
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	2000013c 	.word	0x2000013c
 8000e30:	40012000 	.word	0x40012000
 8000e34:	0f000001 	.word	0x0f000001

08000e38 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <MX_I2C1_Init+0x50>)
 8000e3e:	4a13      	ldr	r2, [pc, #76]	; (8000e8c <MX_I2C1_Init+0x54>)
 8000e40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e42:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <MX_I2C1_Init+0x50>)
 8000e44:	4a12      	ldr	r2, [pc, #72]	; (8000e90 <MX_I2C1_Init+0x58>)
 8000e46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e48:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <MX_I2C1_Init+0x50>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <MX_I2C1_Init+0x50>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <MX_I2C1_Init+0x50>)
 8000e56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e5a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e5c:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <MX_I2C1_Init+0x50>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e62:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <MX_I2C1_Init+0x50>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e68:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <MX_I2C1_Init+0x50>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <MX_I2C1_Init+0x50>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e74:	4804      	ldr	r0, [pc, #16]	; (8000e88 <MX_I2C1_Init+0x50>)
 8000e76:	f001 fa8d 	bl	8002394 <HAL_I2C_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e80:	f000 f9c6 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000184 	.word	0x20000184
 8000e8c:	40005400 	.word	0x40005400
 8000e90:	000186a0 	.word	0x000186a0

08000e94 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e98:	4b17      	ldr	r3, [pc, #92]	; (8000ef8 <MX_SPI1_Init+0x64>)
 8000e9a:	4a18      	ldr	r2, [pc, #96]	; (8000efc <MX_SPI1_Init+0x68>)
 8000e9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e9e:	4b16      	ldr	r3, [pc, #88]	; (8000ef8 <MX_SPI1_Init+0x64>)
 8000ea0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ea4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ea6:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <MX_SPI1_Init+0x64>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000eac:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <MX_SPI1_Init+0x64>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eb2:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <MX_SPI1_Init+0x64>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <MX_SPI1_Init+0x64>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <MX_SPI1_Init+0x64>)
 8000ec0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ec4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <MX_SPI1_Init+0x64>)
 8000ec8:	2220      	movs	r2, #32
 8000eca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ecc:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <MX_SPI1_Init+0x64>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ed2:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <MX_SPI1_Init+0x64>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ed8:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <MX_SPI1_Init+0x64>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ede:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <MX_SPI1_Init+0x64>)
 8000ee0:	220a      	movs	r2, #10
 8000ee2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ee4:	4804      	ldr	r0, [pc, #16]	; (8000ef8 <MX_SPI1_Init+0x64>)
 8000ee6:	f003 ff75 	bl	8004dd4 <HAL_SPI_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ef0:	f000 f98e 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	200001d8 	.word	0x200001d8
 8000efc:	40013000 	.word	0x40013000

08000f00 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000f04:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <MX_UART4_Init+0x4c>)
 8000f06:	4a12      	ldr	r2, [pc, #72]	; (8000f50 <MX_UART4_Init+0x50>)
 8000f08:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000f0a:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <MX_UART4_Init+0x4c>)
 8000f0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f10:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <MX_UART4_Init+0x4c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <MX_UART4_Init+0x4c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000f1e:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <MX_UART4_Init+0x4c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000f24:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <MX_UART4_Init+0x4c>)
 8000f26:	220c      	movs	r2, #12
 8000f28:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f2a:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <MX_UART4_Init+0x4c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <MX_UART4_Init+0x4c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000f36:	4805      	ldr	r0, [pc, #20]	; (8000f4c <MX_UART4_Init+0x4c>)
 8000f38:	f003 ffd5 	bl	8004ee6 <HAL_UART_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000f42:	f000 f965 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000230 	.word	0x20000230
 8000f50:	40004c00 	.word	0x40004c00

08000f54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <MX_USART2_UART_Init+0x4c>)
 8000f5a:	4a12      	ldr	r2, [pc, #72]	; (8000fa4 <MX_USART2_UART_Init+0x50>)
 8000f5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000f5e:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <MX_USART2_UART_Init+0x4c>)
 8000f60:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <MX_USART2_UART_Init+0x4c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <MX_USART2_UART_Init+0x4c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f72:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <MX_USART2_UART_Init+0x4c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f78:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <MX_USART2_UART_Init+0x4c>)
 8000f7a:	220c      	movs	r2, #12
 8000f7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f7e:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <MX_USART2_UART_Init+0x4c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <MX_USART2_UART_Init+0x4c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f8a:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <MX_USART2_UART_Init+0x4c>)
 8000f8c:	f003 ffab 	bl	8004ee6 <HAL_UART_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f96:	f000 f93b 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000274 	.word	0x20000274
 8000fa4:	40004400 	.word	0x40004400

08000fa8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <MX_USART3_UART_Init+0x4c>)
 8000fae:	4a12      	ldr	r2, [pc, #72]	; (8000ff8 <MX_USART3_UART_Init+0x50>)
 8000fb0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <MX_USART3_UART_Init+0x4c>)
 8000fb4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fb8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <MX_USART3_UART_Init+0x4c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <MX_USART3_UART_Init+0x4c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <MX_USART3_UART_Init+0x4c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fcc:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <MX_USART3_UART_Init+0x4c>)
 8000fce:	220c      	movs	r2, #12
 8000fd0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <MX_USART3_UART_Init+0x4c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <MX_USART3_UART_Init+0x4c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <MX_USART3_UART_Init+0x4c>)
 8000fe0:	f003 ff81 	bl	8004ee6 <HAL_UART_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000fea:	f000 f911 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200002b8 	.word	0x200002b8
 8000ff8:	40004800 	.word	0x40004800

08000ffc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	; 0x28
 8001000:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	60da      	str	r2, [r3, #12]
 8001010:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	4b4c      	ldr	r3, [pc, #304]	; (8001148 <MX_GPIO_Init+0x14c>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a4b      	ldr	r2, [pc, #300]	; (8001148 <MX_GPIO_Init+0x14c>)
 800101c:	f043 0304 	orr.w	r3, r3, #4
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b49      	ldr	r3, [pc, #292]	; (8001148 <MX_GPIO_Init+0x14c>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0304 	and.w	r3, r3, #4
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	4b45      	ldr	r3, [pc, #276]	; (8001148 <MX_GPIO_Init+0x14c>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a44      	ldr	r2, [pc, #272]	; (8001148 <MX_GPIO_Init+0x14c>)
 8001038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b42      	ldr	r3, [pc, #264]	; (8001148 <MX_GPIO_Init+0x14c>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	4b3e      	ldr	r3, [pc, #248]	; (8001148 <MX_GPIO_Init+0x14c>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a3d      	ldr	r2, [pc, #244]	; (8001148 <MX_GPIO_Init+0x14c>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b3b      	ldr	r3, [pc, #236]	; (8001148 <MX_GPIO_Init+0x14c>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	4b37      	ldr	r3, [pc, #220]	; (8001148 <MX_GPIO_Init+0x14c>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4a36      	ldr	r2, [pc, #216]	; (8001148 <MX_GPIO_Init+0x14c>)
 8001070:	f043 0302 	orr.w	r3, r3, #2
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4b34      	ldr	r3, [pc, #208]	; (8001148 <MX_GPIO_Init+0x14c>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|BUZZER_Pin|GATE_D_Pin|GATE_C_Pin, GPIO_PIN_RESET);
 8001082:	2200      	movs	r2, #0
 8001084:	f640 4112 	movw	r1, #3090	; 0xc12
 8001088:	4830      	ldr	r0, [pc, #192]	; (800114c <MX_GPIO_Init+0x150>)
 800108a:	f001 f969 	bl	8002360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M0_Pin|M1_Pin|FN_Pin|LED2_Pin
 800108e:	2200      	movs	r2, #0
 8001090:	f246 011f 	movw	r1, #24607	; 0x601f
 8001094:	482e      	ldr	r0, [pc, #184]	; (8001150 <MX_GPIO_Init+0x154>)
 8001096:	f001 f963 	bl	8002360 <HAL_GPIO_WritePin>
                          |LED1_Pin|GATE_B_Pin|GATE_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800109a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800109e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	4619      	mov	r1, r3
 80010ae:	4827      	ldr	r0, [pc, #156]	; (800114c <MX_GPIO_Init+0x150>)
 80010b0:	f000 ffc2 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin BUZZER_Pin GATE_D_Pin GATE_C_Pin */
  GPIO_InitStruct.Pin = CS_Pin|BUZZER_Pin|GATE_D_Pin|GATE_C_Pin;
 80010b4:	f640 4312 	movw	r3, #3090	; 0xc12
 80010b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ba:	2301      	movs	r3, #1
 80010bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	2300      	movs	r3, #0
 80010c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	4619      	mov	r1, r3
 80010cc:	481f      	ldr	r0, [pc, #124]	; (800114c <MX_GPIO_Init+0x150>)
 80010ce:	f000 ffb3 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pins : M0_Pin M1_Pin FN_Pin LED2_Pin
                           LED1_Pin GATE_B_Pin GATE_A_Pin */
  GPIO_InitStruct.Pin = M0_Pin|M1_Pin|FN_Pin|LED2_Pin
 80010d2:	f246 031f 	movw	r3, #24607	; 0x601f
 80010d6:	617b      	str	r3, [r7, #20]
                          |LED1_Pin|GATE_B_Pin|GATE_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d8:	2301      	movs	r3, #1
 80010da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e0:	2300      	movs	r3, #0
 80010e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	4619      	mov	r1, r3
 80010ea:	4819      	ldr	r0, [pc, #100]	; (8001150 <MX_GPIO_Init+0x154>)
 80010ec:	f000 ffa4 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pin : SECINP_Pin */
  GPIO_InitStruct.Pin = SECINP_Pin;
 80010f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010fa:	2301      	movs	r3, #1
 80010fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SECINP_GPIO_Port, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	4812      	ldr	r0, [pc, #72]	; (8001150 <MX_GPIO_Init+0x154>)
 8001106:	f000 ff97 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800110a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800110e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001110:	2300      	movs	r3, #0
 8001112:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001114:	2301      	movs	r3, #1
 8001116:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	4619      	mov	r1, r3
 800111e:	480b      	ldr	r0, [pc, #44]	; (800114c <MX_GPIO_Init+0x150>)
 8001120:	f000 ff8a 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|INT2_Pin;
 8001124:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001128:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800112a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800112e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	4619      	mov	r1, r3
 800113a:	4805      	ldr	r0, [pc, #20]	; (8001150 <MX_GPIO_Init+0x154>)
 800113c:	f000 ff7c 	bl	8002038 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001140:	bf00      	nop
 8001142:	3728      	adds	r7, #40	; 0x28
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40023800 	.word	0x40023800
 800114c:	40020800 	.word	0x40020800
 8001150:	40020400 	.word	0x40020400

08001154 <E220_CONFIG>:

/* USER CODE BEGIN 4 */
void E220_CONFIG(uint8_t ADDH, uint8_t ADDL, uint8_t CHN, uint8_t MODE)
{
 8001154:	b590      	push	{r4, r7, lr}
 8001156:	b087      	sub	sp, #28
 8001158:	af00      	add	r7, sp, #0
 800115a:	4604      	mov	r4, r0
 800115c:	4608      	mov	r0, r1
 800115e:	4611      	mov	r1, r2
 8001160:	461a      	mov	r2, r3
 8001162:	4623      	mov	r3, r4
 8001164:	71fb      	strb	r3, [r7, #7]
 8001166:	4603      	mov	r3, r0
 8001168:	71bb      	strb	r3, [r7, #6]
 800116a:	460b      	mov	r3, r1
 800116c:	717b      	strb	r3, [r7, #5]
 800116e:	4613      	mov	r3, r2
 8001170:	713b      	strb	r3, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, SET);
 8001172:	2201      	movs	r2, #1
 8001174:	2104      	movs	r1, #4
 8001176:	4824      	ldr	r0, [pc, #144]	; (8001208 <E220_CONFIG+0xb4>)
 8001178:	f001 f8f2 	bl	8002360 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 800117c:	2201      	movs	r2, #1
 800117e:	2102      	movs	r1, #2
 8001180:	4821      	ldr	r0, [pc, #132]	; (8001208 <E220_CONFIG+0xb4>)
 8001182:	f001 f8ed 	bl	8002360 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8001186:	2032      	movs	r0, #50	; 0x32
 8001188:	f000 fb1c 	bl	80017c4 <HAL_Delay>

    char cfg_buff[8] = {0}; // E220 için 8 elemanlı bir dizi kullanıyoruz
 800118c:	2300      	movs	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	2300      	movs	r3, #0
 8001192:	613b      	str	r3, [r7, #16]
    enum {Transparent, Fixed} mode;
    mode = MODE;
 8001194:	793b      	ldrb	r3, [r7, #4]
 8001196:	75fb      	strb	r3, [r7, #23]

    cfg_buff[0] = ADDH;
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	733b      	strb	r3, [r7, #12]
    cfg_buff[1] = ADDL;
 800119c:	79bb      	ldrb	r3, [r7, #6]
 800119e:	737b      	strb	r3, [r7, #13]
    cfg_buff[2] = 0x62;
 80011a0:	2362      	movs	r3, #98	; 0x62
 80011a2:	73bb      	strb	r3, [r7, #14]
    cfg_buff[3] = 0x00;
 80011a4:	2300      	movs	r3, #0
 80011a6:	73fb      	strb	r3, [r7, #15]
    cfg_buff[4] = CHN;
 80011a8:	797b      	ldrb	r3, [r7, #5]
 80011aa:	743b      	strb	r3, [r7, #16]

    switch(mode){
 80011ac:	7dfb      	ldrb	r3, [r7, #23]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d002      	beq.n	80011b8 <E220_CONFIG+0x64>
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d003      	beq.n	80011be <E220_CONFIG+0x6a>
 80011b6:	e005      	b.n	80011c4 <E220_CONFIG+0x70>
        case Transparent:
            cfg_buff[5] = 0x00;  // opsiyon
 80011b8:	2300      	movs	r3, #0
 80011ba:	747b      	strb	r3, [r7, #17]
            break;
 80011bc:	e004      	b.n	80011c8 <E220_CONFIG+0x74>
        case Fixed:
            cfg_buff[5] = 0x11;
 80011be:	2311      	movs	r3, #17
 80011c0:	747b      	strb	r3, [r7, #17]
            break;
 80011c2:	e001      	b.n	80011c8 <E220_CONFIG+0x74>
        default:
            cfg_buff[5] = 0x11;
 80011c4:	2311      	movs	r3, #17
 80011c6:	747b      	strb	r3, [r7, #17]
     }

     cfg_buff[6] = 0x00;
 80011c8:	2300      	movs	r3, #0
 80011ca:	74bb      	strb	r3, [r7, #18]
     cfg_buff[7] = 0x00;
 80011cc:	2300      	movs	r3, #0
 80011ce:	74fb      	strb	r3, [r7, #19]


    HAL_UART_Transmit(&huart3, (uint8_t*) cfg_buff, 8, 1000);
 80011d0:	f107 010c 	add.w	r1, r7, #12
 80011d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d8:	2208      	movs	r2, #8
 80011da:	480c      	ldr	r0, [pc, #48]	; (800120c <E220_CONFIG+0xb8>)
 80011dc:	f003 fed0 	bl	8004f80 <HAL_UART_Transmit>

    HAL_Delay(25);
 80011e0:	2019      	movs	r0, #25
 80011e2:	f000 faef 	bl	80017c4 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, RESET);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2104      	movs	r1, #4
 80011ea:	4807      	ldr	r0, [pc, #28]	; (8001208 <E220_CONFIG+0xb4>)
 80011ec:	f001 f8b8 	bl	8002360 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 80011f0:	2200      	movs	r2, #0
 80011f2:	2102      	movs	r1, #2
 80011f4:	4804      	ldr	r0, [pc, #16]	; (8001208 <E220_CONFIG+0xb4>)
 80011f6:	f001 f8b3 	bl	8002360 <HAL_GPIO_WritePin>
    HAL_Delay(25);
 80011fa:	2019      	movs	r0, #25
 80011fc:	f000 fae2 	bl	80017c4 <HAL_Delay>
}
 8001200:	bf00      	nop
 8001202:	371c      	adds	r7, #28
 8001204:	46bd      	mov	sp, r7
 8001206:	bd90      	pop	{r4, r7, pc}
 8001208:	40020400 	.word	0x40020400
 800120c:	200002b8 	.word	0x200002b8

08001210 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001214:	b672      	cpsid	i
}
 8001216:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001218:	e7fe      	b.n	8001218 <Error_Handler+0x8>
	...

0800121c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <HAL_MspInit+0x4c>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <HAL_MspInit+0x4c>)
 800122c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001230:	6453      	str	r3, [r2, #68]	; 0x44
 8001232:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <HAL_MspInit+0x4c>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	603b      	str	r3, [r7, #0]
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <HAL_MspInit+0x4c>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	4a08      	ldr	r2, [pc, #32]	; (8001268 <HAL_MspInit+0x4c>)
 8001248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800124c:	6413      	str	r3, [r2, #64]	; 0x40
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <HAL_MspInit+0x4c>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	40023800 	.word	0x40023800

0800126c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	; 0x28
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a17      	ldr	r2, [pc, #92]	; (80012e8 <HAL_ADC_MspInit+0x7c>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d127      	bne.n	80012de <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	4b16      	ldr	r3, [pc, #88]	; (80012ec <HAL_ADC_MspInit+0x80>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	4a15      	ldr	r2, [pc, #84]	; (80012ec <HAL_ADC_MspInit+0x80>)
 8001298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800129c:	6453      	str	r3, [r2, #68]	; 0x44
 800129e:	4b13      	ldr	r3, [pc, #76]	; (80012ec <HAL_ADC_MspInit+0x80>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <HAL_ADC_MspInit+0x80>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a0e      	ldr	r2, [pc, #56]	; (80012ec <HAL_ADC_MspInit+0x80>)
 80012b4:	f043 0304 	orr.w	r3, r3, #4
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <HAL_ADC_MspInit+0x80>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0304 	and.w	r3, r3, #4
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC_VCC_Pin;
 80012c6:	2304      	movs	r3, #4
 80012c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ca:	2303      	movs	r3, #3
 80012cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_VCC_GPIO_Port, &GPIO_InitStruct);
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4619      	mov	r1, r3
 80012d8:	4805      	ldr	r0, [pc, #20]	; (80012f0 <HAL_ADC_MspInit+0x84>)
 80012da:	f000 fead 	bl	8002038 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012de:	bf00      	nop
 80012e0:	3728      	adds	r7, #40	; 0x28
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40012000 	.word	0x40012000
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40020800 	.word	0x40020800

080012f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08a      	sub	sp, #40	; 0x28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a19      	ldr	r2, [pc, #100]	; (8001378 <HAL_I2C_MspInit+0x84>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d12b      	bne.n	800136e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	4b18      	ldr	r3, [pc, #96]	; (800137c <HAL_I2C_MspInit+0x88>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a17      	ldr	r2, [pc, #92]	; (800137c <HAL_I2C_MspInit+0x88>)
 8001320:	f043 0302 	orr.w	r3, r3, #2
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b15      	ldr	r3, [pc, #84]	; (800137c <HAL_I2C_MspInit+0x88>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001332:	23c0      	movs	r3, #192	; 0xc0
 8001334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001336:	2312      	movs	r3, #18
 8001338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133e:	2303      	movs	r3, #3
 8001340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001342:	2304      	movs	r3, #4
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4619      	mov	r1, r3
 800134c:	480c      	ldr	r0, [pc, #48]	; (8001380 <HAL_I2C_MspInit+0x8c>)
 800134e:	f000 fe73 	bl	8002038 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <HAL_I2C_MspInit+0x88>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	4a08      	ldr	r2, [pc, #32]	; (800137c <HAL_I2C_MspInit+0x88>)
 800135c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001360:	6413      	str	r3, [r2, #64]	; 0x40
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_I2C_MspInit+0x88>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800136e:	bf00      	nop
 8001370:	3728      	adds	r7, #40	; 0x28
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40005400 	.word	0x40005400
 800137c:	40023800 	.word	0x40023800
 8001380:	40020400 	.word	0x40020400

08001384 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b08a      	sub	sp, #40	; 0x28
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a19      	ldr	r2, [pc, #100]	; (8001408 <HAL_SPI_MspInit+0x84>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d12b      	bne.n	80013fe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
 80013aa:	4b18      	ldr	r3, [pc, #96]	; (800140c <HAL_SPI_MspInit+0x88>)
 80013ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ae:	4a17      	ldr	r2, [pc, #92]	; (800140c <HAL_SPI_MspInit+0x88>)
 80013b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013b4:	6453      	str	r3, [r2, #68]	; 0x44
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <HAL_SPI_MspInit+0x88>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013be:	613b      	str	r3, [r7, #16]
 80013c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	4b11      	ldr	r3, [pc, #68]	; (800140c <HAL_SPI_MspInit+0x88>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a10      	ldr	r2, [pc, #64]	; (800140c <HAL_SPI_MspInit+0x88>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b0e      	ldr	r3, [pc, #56]	; (800140c <HAL_SPI_MspInit+0x88>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80013de:	23e0      	movs	r3, #224	; 0xe0
 80013e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e2:	2302      	movs	r3, #2
 80013e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ea:	2303      	movs	r3, #3
 80013ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013ee:	2305      	movs	r3, #5
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	4619      	mov	r1, r3
 80013f8:	4805      	ldr	r0, [pc, #20]	; (8001410 <HAL_SPI_MspInit+0x8c>)
 80013fa:	f000 fe1d 	bl	8002038 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80013fe:	bf00      	nop
 8001400:	3728      	adds	r7, #40	; 0x28
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40013000 	.word	0x40013000
 800140c:	40023800 	.word	0x40023800
 8001410:	40020000 	.word	0x40020000

08001414 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08e      	sub	sp, #56	; 0x38
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a62      	ldr	r2, [pc, #392]	; (80015bc <HAL_UART_MspInit+0x1a8>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d12c      	bne.n	8001490 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	623b      	str	r3, [r7, #32]
 800143a:	4b61      	ldr	r3, [pc, #388]	; (80015c0 <HAL_UART_MspInit+0x1ac>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	4a60      	ldr	r2, [pc, #384]	; (80015c0 <HAL_UART_MspInit+0x1ac>)
 8001440:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001444:	6413      	str	r3, [r2, #64]	; 0x40
 8001446:	4b5e      	ldr	r3, [pc, #376]	; (80015c0 <HAL_UART_MspInit+0x1ac>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800144e:	623b      	str	r3, [r7, #32]
 8001450:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	61fb      	str	r3, [r7, #28]
 8001456:	4b5a      	ldr	r3, [pc, #360]	; (80015c0 <HAL_UART_MspInit+0x1ac>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a59      	ldr	r2, [pc, #356]	; (80015c0 <HAL_UART_MspInit+0x1ac>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b57      	ldr	r3, [pc, #348]	; (80015c0 <HAL_UART_MspInit+0x1ac>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	61fb      	str	r3, [r7, #28]
 800146c:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800146e:	2303      	movs	r3, #3
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147a:	2303      	movs	r3, #3
 800147c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800147e:	2308      	movs	r3, #8
 8001480:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001486:	4619      	mov	r1, r3
 8001488:	484e      	ldr	r0, [pc, #312]	; (80015c4 <HAL_UART_MspInit+0x1b0>)
 800148a:	f000 fdd5 	bl	8002038 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800148e:	e091      	b.n	80015b4 <HAL_UART_MspInit+0x1a0>
  else if(huart->Instance==USART2)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a4c      	ldr	r2, [pc, #304]	; (80015c8 <HAL_UART_MspInit+0x1b4>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d134      	bne.n	8001504 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	61bb      	str	r3, [r7, #24]
 800149e:	4b48      	ldr	r3, [pc, #288]	; (80015c0 <HAL_UART_MspInit+0x1ac>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	4a47      	ldr	r2, [pc, #284]	; (80015c0 <HAL_UART_MspInit+0x1ac>)
 80014a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a8:	6413      	str	r3, [r2, #64]	; 0x40
 80014aa:	4b45      	ldr	r3, [pc, #276]	; (80015c0 <HAL_UART_MspInit+0x1ac>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b2:	61bb      	str	r3, [r7, #24]
 80014b4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
 80014ba:	4b41      	ldr	r3, [pc, #260]	; (80015c0 <HAL_UART_MspInit+0x1ac>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a40      	ldr	r2, [pc, #256]	; (80015c0 <HAL_UART_MspInit+0x1ac>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b3e      	ldr	r3, [pc, #248]	; (80015c0 <HAL_UART_MspInit+0x1ac>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TX2_GPS_Pin|RX2_GPS_Pin;
 80014d2:	230c      	movs	r3, #12
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	2302      	movs	r3, #2
 80014d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014de:	2303      	movs	r3, #3
 80014e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014e2:	2307      	movs	r3, #7
 80014e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ea:	4619      	mov	r1, r3
 80014ec:	4835      	ldr	r0, [pc, #212]	; (80015c4 <HAL_UART_MspInit+0x1b0>)
 80014ee:	f000 fda3 	bl	8002038 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2100      	movs	r1, #0
 80014f6:	2026      	movs	r0, #38	; 0x26
 80014f8:	f000 fcd5 	bl	8001ea6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014fc:	2026      	movs	r0, #38	; 0x26
 80014fe:	f000 fcee 	bl	8001ede <HAL_NVIC_EnableIRQ>
}
 8001502:	e057      	b.n	80015b4 <HAL_UART_MspInit+0x1a0>
  else if(huart->Instance==USART3)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a30      	ldr	r2, [pc, #192]	; (80015cc <HAL_UART_MspInit+0x1b8>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d152      	bne.n	80015b4 <HAL_UART_MspInit+0x1a0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
 8001512:	4b2b      	ldr	r3, [pc, #172]	; (80015c0 <HAL_UART_MspInit+0x1ac>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	4a2a      	ldr	r2, [pc, #168]	; (80015c0 <HAL_UART_MspInit+0x1ac>)
 8001518:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800151c:	6413      	str	r3, [r2, #64]	; 0x40
 800151e:	4b28      	ldr	r3, [pc, #160]	; (80015c0 <HAL_UART_MspInit+0x1ac>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	4b24      	ldr	r3, [pc, #144]	; (80015c0 <HAL_UART_MspInit+0x1ac>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a23      	ldr	r2, [pc, #140]	; (80015c0 <HAL_UART_MspInit+0x1ac>)
 8001534:	f043 0304 	orr.w	r3, r3, #4
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4b21      	ldr	r3, [pc, #132]	; (80015c0 <HAL_UART_MspInit+0x1ac>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f003 0304 	and.w	r3, r3, #4
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	4b1d      	ldr	r3, [pc, #116]	; (80015c0 <HAL_UART_MspInit+0x1ac>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a1c      	ldr	r2, [pc, #112]	; (80015c0 <HAL_UART_MspInit+0x1ac>)
 8001550:	f043 0302 	orr.w	r3, r3, #2
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b1a      	ldr	r3, [pc, #104]	; (80015c0 <HAL_UART_MspInit+0x1ac>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RX3_LORA_Pin;
 8001562:	2320      	movs	r3, #32
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001566:	2302      	movs	r3, #2
 8001568:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156e:	2303      	movs	r3, #3
 8001570:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001572:	2307      	movs	r3, #7
 8001574:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RX3_LORA_GPIO_Port, &GPIO_InitStruct);
 8001576:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157a:	4619      	mov	r1, r3
 800157c:	4814      	ldr	r0, [pc, #80]	; (80015d0 <HAL_UART_MspInit+0x1bc>)
 800157e:	f000 fd5b 	bl	8002038 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TX3_LORA_Pin;
 8001582:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001588:	2302      	movs	r3, #2
 800158a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001590:	2303      	movs	r3, #3
 8001592:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001594:	2307      	movs	r3, #7
 8001596:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TX3_LORA_GPIO_Port, &GPIO_InitStruct);
 8001598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159c:	4619      	mov	r1, r3
 800159e:	480d      	ldr	r0, [pc, #52]	; (80015d4 <HAL_UART_MspInit+0x1c0>)
 80015a0:	f000 fd4a 	bl	8002038 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2100      	movs	r1, #0
 80015a8:	2027      	movs	r0, #39	; 0x27
 80015aa:	f000 fc7c 	bl	8001ea6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80015ae:	2027      	movs	r0, #39	; 0x27
 80015b0:	f000 fc95 	bl	8001ede <HAL_NVIC_EnableIRQ>
}
 80015b4:	bf00      	nop
 80015b6:	3738      	adds	r7, #56	; 0x38
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40004c00 	.word	0x40004c00
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40020000 	.word	0x40020000
 80015c8:	40004400 	.word	0x40004400
 80015cc:	40004800 	.word	0x40004800
 80015d0:	40020800 	.word	0x40020800
 80015d4:	40020400 	.word	0x40020400

080015d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015dc:	e7fe      	b.n	80015dc <NMI_Handler+0x4>

080015de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e2:	e7fe      	b.n	80015e2 <HardFault_Handler+0x4>

080015e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <MemManage_Handler+0x4>

080015ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ee:	e7fe      	b.n	80015ee <BusFault_Handler+0x4>

080015f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <UsageFault_Handler+0x4>

080015f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001624:	f000 f8ae 	bl	8001784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}

0800162c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001630:	4802      	ldr	r0, [pc, #8]	; (800163c <USART2_IRQHandler+0x10>)
 8001632:	f003 fd67 	bl	8005104 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000274 	.word	0x20000274

08001640 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001644:	4802      	ldr	r0, [pc, #8]	; (8001650 <USART3_IRQHandler+0x10>)
 8001646:	f003 fd5d 	bl	8005104 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	200002b8 	.word	0x200002b8

08001654 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001658:	4802      	ldr	r0, [pc, #8]	; (8001664 <OTG_FS_IRQHandler+0x10>)
 800165a:	f001 f936 	bl	80028ca <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20001168 	.word	0x20001168

08001668 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <SystemInit+0x20>)
 800166e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001672:	4a05      	ldr	r2, [pc, #20]	; (8001688 <SystemInit+0x20>)
 8001674:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001678:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800168c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001690:	480d      	ldr	r0, [pc, #52]	; (80016c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001692:	490e      	ldr	r1, [pc, #56]	; (80016cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001694:	4a0e      	ldr	r2, [pc, #56]	; (80016d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001698:	e002      	b.n	80016a0 <LoopCopyDataInit>

0800169a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800169c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800169e:	3304      	adds	r3, #4

080016a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a4:	d3f9      	bcc.n	800169a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016a6:	4a0b      	ldr	r2, [pc, #44]	; (80016d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016a8:	4c0b      	ldr	r4, [pc, #44]	; (80016d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016ac:	e001      	b.n	80016b2 <LoopFillZerobss>

080016ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b0:	3204      	adds	r2, #4

080016b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b4:	d3fb      	bcc.n	80016ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016b6:	f7ff ffd7 	bl	8001668 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016ba:	f008 feb7 	bl	800a42c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016be:	f7fe ff61 	bl	8000584 <main>
  bx  lr    
 80016c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016cc:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 80016d0:	0800a4fc 	.word	0x0800a4fc
  ldr r2, =_sbss
 80016d4:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 80016d8:	20001894 	.word	0x20001894

080016dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016dc:	e7fe      	b.n	80016dc <ADC_IRQHandler>
	...

080016e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016e4:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <HAL_Init+0x40>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a0d      	ldr	r2, [pc, #52]	; (8001720 <HAL_Init+0x40>)
 80016ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016f0:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <HAL_Init+0x40>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <HAL_Init+0x40>)
 80016f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <HAL_Init+0x40>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a07      	ldr	r2, [pc, #28]	; (8001720 <HAL_Init+0x40>)
 8001702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001706:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001708:	2003      	movs	r0, #3
 800170a:	f000 fbc1 	bl	8001e90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800170e:	200f      	movs	r0, #15
 8001710:	f000 f808 	bl	8001724 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001714:	f7ff fd82 	bl	800121c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023c00 	.word	0x40023c00

08001724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <HAL_InitTick+0x54>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_InitTick+0x58>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	4619      	mov	r1, r3
 8001736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173a:	fbb3 f3f1 	udiv	r3, r3, r1
 800173e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001742:	4618      	mov	r0, r3
 8001744:	f000 fbd9 	bl	8001efa <HAL_SYSTICK_Config>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e00e      	b.n	8001770 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b0f      	cmp	r3, #15
 8001756:	d80a      	bhi.n	800176e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001758:	2200      	movs	r2, #0
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	f04f 30ff 	mov.w	r0, #4294967295
 8001760:	f000 fba1 	bl	8001ea6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001764:	4a06      	ldr	r2, [pc, #24]	; (8001780 <HAL_InitTick+0x5c>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800176a:	2300      	movs	r3, #0
 800176c:	e000      	b.n	8001770 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
}
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000000 	.word	0x20000000
 800177c:	20000008 	.word	0x20000008
 8001780:	20000004 	.word	0x20000004

08001784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_IncTick+0x20>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_IncTick+0x24>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4413      	add	r3, r2
 8001794:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <HAL_IncTick+0x24>)
 8001796:	6013      	str	r3, [r2, #0]
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	20000008 	.word	0x20000008
 80017a8:	20000470 	.word	0x20000470

080017ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return uwTick;
 80017b0:	4b03      	ldr	r3, [pc, #12]	; (80017c0 <HAL_GetTick+0x14>)
 80017b2:	681b      	ldr	r3, [r3, #0]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	20000470 	.word	0x20000470

080017c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017cc:	f7ff ffee 	bl	80017ac <HAL_GetTick>
 80017d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017dc:	d005      	beq.n	80017ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017de:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <HAL_Delay+0x44>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	461a      	mov	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4413      	add	r3, r2
 80017e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017ea:	bf00      	nop
 80017ec:	f7ff ffde 	bl	80017ac <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d8f7      	bhi.n	80017ec <HAL_Delay+0x28>
  {
  }
}
 80017fc:	bf00      	nop
 80017fe:	bf00      	nop
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000008 	.word	0x20000008

0800180c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001814:	2300      	movs	r3, #0
 8001816:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e033      	b.n	800188a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	2b00      	cmp	r3, #0
 8001828:	d109      	bne.n	800183e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff fd1e 	bl	800126c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	f003 0310 	and.w	r3, r3, #16
 8001846:	2b00      	cmp	r3, #0
 8001848:	d118      	bne.n	800187c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001852:	f023 0302 	bic.w	r3, r3, #2
 8001856:	f043 0202 	orr.w	r2, r3, #2
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 f94a 	bl	8001af8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	f023 0303 	bic.w	r3, r3, #3
 8001872:	f043 0201 	orr.w	r2, r3, #1
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	641a      	str	r2, [r3, #64]	; 0x40
 800187a:	e001      	b.n	8001880 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001888:	7bfb      	ldrb	r3, [r7, #15]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800189e:	2300      	movs	r3, #0
 80018a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d101      	bne.n	80018b0 <HAL_ADC_ConfigChannel+0x1c>
 80018ac:	2302      	movs	r3, #2
 80018ae:	e113      	b.n	8001ad8 <HAL_ADC_ConfigChannel+0x244>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b09      	cmp	r3, #9
 80018be:	d925      	bls.n	800190c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	68d9      	ldr	r1, [r3, #12]
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	461a      	mov	r2, r3
 80018ce:	4613      	mov	r3, r2
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	4413      	add	r3, r2
 80018d4:	3b1e      	subs	r3, #30
 80018d6:	2207      	movs	r2, #7
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43da      	mvns	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	400a      	ands	r2, r1
 80018e4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68d9      	ldr	r1, [r3, #12]
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	4618      	mov	r0, r3
 80018f8:	4603      	mov	r3, r0
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	4403      	add	r3, r0
 80018fe:	3b1e      	subs	r3, #30
 8001900:	409a      	lsls	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	430a      	orrs	r2, r1
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	e022      	b.n	8001952 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6919      	ldr	r1, [r3, #16]
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	b29b      	uxth	r3, r3
 8001918:	461a      	mov	r2, r3
 800191a:	4613      	mov	r3, r2
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	4413      	add	r3, r2
 8001920:	2207      	movs	r2, #7
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43da      	mvns	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	400a      	ands	r2, r1
 800192e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6919      	ldr	r1, [r3, #16]
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	689a      	ldr	r2, [r3, #8]
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	b29b      	uxth	r3, r3
 8001940:	4618      	mov	r0, r3
 8001942:	4603      	mov	r3, r0
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	4403      	add	r3, r0
 8001948:	409a      	lsls	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	430a      	orrs	r2, r1
 8001950:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b06      	cmp	r3, #6
 8001958:	d824      	bhi.n	80019a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	4613      	mov	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	3b05      	subs	r3, #5
 800196c:	221f      	movs	r2, #31
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43da      	mvns	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	400a      	ands	r2, r1
 800197a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	b29b      	uxth	r3, r3
 8001988:	4618      	mov	r0, r3
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685a      	ldr	r2, [r3, #4]
 800198e:	4613      	mov	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	3b05      	subs	r3, #5
 8001996:	fa00 f203 	lsl.w	r2, r0, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	430a      	orrs	r2, r1
 80019a0:	635a      	str	r2, [r3, #52]	; 0x34
 80019a2:	e04c      	b.n	8001a3e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b0c      	cmp	r3, #12
 80019aa:	d824      	bhi.n	80019f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685a      	ldr	r2, [r3, #4]
 80019b6:	4613      	mov	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	3b23      	subs	r3, #35	; 0x23
 80019be:	221f      	movs	r2, #31
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43da      	mvns	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	400a      	ands	r2, r1
 80019cc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	b29b      	uxth	r3, r3
 80019da:	4618      	mov	r0, r3
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	4613      	mov	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	3b23      	subs	r3, #35	; 0x23
 80019e8:	fa00 f203 	lsl.w	r2, r0, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	430a      	orrs	r2, r1
 80019f2:	631a      	str	r2, [r3, #48]	; 0x30
 80019f4:	e023      	b.n	8001a3e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685a      	ldr	r2, [r3, #4]
 8001a00:	4613      	mov	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	3b41      	subs	r3, #65	; 0x41
 8001a08:	221f      	movs	r2, #31
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43da      	mvns	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	400a      	ands	r2, r1
 8001a16:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	4618      	mov	r0, r3
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	3b41      	subs	r3, #65	; 0x41
 8001a32:	fa00 f203 	lsl.w	r2, r0, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a3e:	4b29      	ldr	r3, [pc, #164]	; (8001ae4 <HAL_ADC_ConfigChannel+0x250>)
 8001a40:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a28      	ldr	r2, [pc, #160]	; (8001ae8 <HAL_ADC_ConfigChannel+0x254>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d10f      	bne.n	8001a6c <HAL_ADC_ConfigChannel+0x1d8>
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b12      	cmp	r3, #18
 8001a52:	d10b      	bne.n	8001a6c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a1d      	ldr	r2, [pc, #116]	; (8001ae8 <HAL_ADC_ConfigChannel+0x254>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d12b      	bne.n	8001ace <HAL_ADC_ConfigChannel+0x23a>
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a1c      	ldr	r2, [pc, #112]	; (8001aec <HAL_ADC_ConfigChannel+0x258>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d003      	beq.n	8001a88 <HAL_ADC_ConfigChannel+0x1f4>
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b11      	cmp	r3, #17
 8001a86:	d122      	bne.n	8001ace <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a11      	ldr	r2, [pc, #68]	; (8001aec <HAL_ADC_ConfigChannel+0x258>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d111      	bne.n	8001ace <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001aaa:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <HAL_ADC_ConfigChannel+0x25c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a11      	ldr	r2, [pc, #68]	; (8001af4 <HAL_ADC_ConfigChannel+0x260>)
 8001ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab4:	0c9a      	lsrs	r2, r3, #18
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	4413      	add	r3, r2
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ac0:	e002      	b.n	8001ac8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f9      	bne.n	8001ac2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	40012300 	.word	0x40012300
 8001ae8:	40012000 	.word	0x40012000
 8001aec:	10000012 	.word	0x10000012
 8001af0:	20000000 	.word	0x20000000
 8001af4:	431bde83 	.word	0x431bde83

08001af8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b00:	4b79      	ldr	r3, [pc, #484]	; (8001ce8 <ADC_Init+0x1f0>)
 8001b02:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	431a      	orrs	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6859      	ldr	r1, [r3, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	021a      	lsls	r2, r3, #8
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	685a      	ldr	r2, [r3, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001b50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6859      	ldr	r1, [r3, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	430a      	orrs	r2, r1
 8001b62:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6899      	ldr	r1, [r3, #8]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68da      	ldr	r2, [r3, #12]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	430a      	orrs	r2, r1
 8001b84:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8a:	4a58      	ldr	r2, [pc, #352]	; (8001cec <ADC_Init+0x1f4>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d022      	beq.n	8001bd6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	689a      	ldr	r2, [r3, #8]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b9e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6899      	ldr	r1, [r3, #8]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6899      	ldr	r1, [r3, #8]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	e00f      	b.n	8001bf6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	689a      	ldr	r2, [r3, #8]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001be4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bf4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f022 0202 	bic.w	r2, r2, #2
 8001c04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6899      	ldr	r1, [r3, #8]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	7e1b      	ldrb	r3, [r3, #24]
 8001c10:	005a      	lsls	r2, r3, #1
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	430a      	orrs	r2, r1
 8001c18:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d01b      	beq.n	8001c5c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c32:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001c42:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6859      	ldr	r1, [r3, #4]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	035a      	lsls	r2, r3, #13
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	e007      	b.n	8001c6c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	685a      	ldr	r2, [r3, #4]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c6a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	051a      	lsls	r2, r3, #20
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ca0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6899      	ldr	r1, [r3, #8]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001cae:	025a      	lsls	r2, r3, #9
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	689a      	ldr	r2, [r3, #8]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6899      	ldr	r1, [r3, #8]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	029a      	lsls	r2, r3, #10
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	609a      	str	r2, [r3, #8]
}
 8001cdc:	bf00      	nop
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	40012300 	.word	0x40012300
 8001cec:	0f000001 	.word	0x0f000001

08001cf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d00:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <__NVIC_SetPriorityGrouping+0x44>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d22:	4a04      	ldr	r2, [pc, #16]	; (8001d34 <__NVIC_SetPriorityGrouping+0x44>)
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	60d3      	str	r3, [r2, #12]
}
 8001d28:	bf00      	nop
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d3c:	4b04      	ldr	r3, [pc, #16]	; (8001d50 <__NVIC_GetPriorityGrouping+0x18>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	0a1b      	lsrs	r3, r3, #8
 8001d42:	f003 0307 	and.w	r3, r3, #7
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	db0b      	blt.n	8001d7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	f003 021f 	and.w	r2, r3, #31
 8001d6c:	4907      	ldr	r1, [pc, #28]	; (8001d8c <__NVIC_EnableIRQ+0x38>)
 8001d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d72:	095b      	lsrs	r3, r3, #5
 8001d74:	2001      	movs	r0, #1
 8001d76:	fa00 f202 	lsl.w	r2, r0, r2
 8001d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	e000e100 	.word	0xe000e100

08001d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	6039      	str	r1, [r7, #0]
 8001d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	db0a      	blt.n	8001dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	490c      	ldr	r1, [pc, #48]	; (8001ddc <__NVIC_SetPriority+0x4c>)
 8001daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dae:	0112      	lsls	r2, r2, #4
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	440b      	add	r3, r1
 8001db4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db8:	e00a      	b.n	8001dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	4908      	ldr	r1, [pc, #32]	; (8001de0 <__NVIC_SetPriority+0x50>)
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	3b04      	subs	r3, #4
 8001dc8:	0112      	lsls	r2, r2, #4
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	440b      	add	r3, r1
 8001dce:	761a      	strb	r2, [r3, #24]
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	e000e100 	.word	0xe000e100
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b089      	sub	sp, #36	; 0x24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f1c3 0307 	rsb	r3, r3, #7
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	bf28      	it	cs
 8001e02:	2304      	movcs	r3, #4
 8001e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	3304      	adds	r3, #4
 8001e0a:	2b06      	cmp	r3, #6
 8001e0c:	d902      	bls.n	8001e14 <NVIC_EncodePriority+0x30>
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	3b03      	subs	r3, #3
 8001e12:	e000      	b.n	8001e16 <NVIC_EncodePriority+0x32>
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e18:	f04f 32ff 	mov.w	r2, #4294967295
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43da      	mvns	r2, r3
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	401a      	ands	r2, r3
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	fa01 f303 	lsl.w	r3, r1, r3
 8001e36:	43d9      	mvns	r1, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e3c:	4313      	orrs	r3, r2
         );
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3724      	adds	r7, #36	; 0x24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
	...

08001e4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e5c:	d301      	bcc.n	8001e62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e00f      	b.n	8001e82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e62:	4a0a      	ldr	r2, [pc, #40]	; (8001e8c <SysTick_Config+0x40>)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3b01      	subs	r3, #1
 8001e68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e6a:	210f      	movs	r1, #15
 8001e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e70:	f7ff ff8e 	bl	8001d90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e74:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <SysTick_Config+0x40>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e7a:	4b04      	ldr	r3, [pc, #16]	; (8001e8c <SysTick_Config+0x40>)
 8001e7c:	2207      	movs	r2, #7
 8001e7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	e000e010 	.word	0xe000e010

08001e90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff ff29 	bl	8001cf0 <__NVIC_SetPriorityGrouping>
}
 8001e9e:	bf00      	nop
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b086      	sub	sp, #24
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	4603      	mov	r3, r0
 8001eae:	60b9      	str	r1, [r7, #8]
 8001eb0:	607a      	str	r2, [r7, #4]
 8001eb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eb8:	f7ff ff3e 	bl	8001d38 <__NVIC_GetPriorityGrouping>
 8001ebc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	68b9      	ldr	r1, [r7, #8]
 8001ec2:	6978      	ldr	r0, [r7, #20]
 8001ec4:	f7ff ff8e 	bl	8001de4 <NVIC_EncodePriority>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ece:	4611      	mov	r1, r2
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff ff5d 	bl	8001d90 <__NVIC_SetPriority>
}
 8001ed6:	bf00      	nop
 8001ed8:	3718      	adds	r7, #24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b082      	sub	sp, #8
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff ff31 	bl	8001d54 <__NVIC_EnableIRQ>
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff ffa2 	bl	8001e4c <SysTick_Config>
 8001f08:	4603      	mov	r3, r0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b084      	sub	sp, #16
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f20:	f7ff fc44 	bl	80017ac <HAL_GetTick>
 8001f24:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d008      	beq.n	8001f44 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2280      	movs	r2, #128	; 0x80
 8001f36:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e052      	b.n	8001fea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 0216 	bic.w	r2, r2, #22
 8001f52:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	695a      	ldr	r2, [r3, #20]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f62:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d103      	bne.n	8001f74 <HAL_DMA_Abort+0x62>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d007      	beq.n	8001f84 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0208 	bic.w	r2, r2, #8
 8001f82:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f022 0201 	bic.w	r2, r2, #1
 8001f92:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f94:	e013      	b.n	8001fbe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f96:	f7ff fc09 	bl	80017ac <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b05      	cmp	r3, #5
 8001fa2:	d90c      	bls.n	8001fbe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2220      	movs	r2, #32
 8001fa8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2203      	movs	r2, #3
 8001fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e015      	b.n	8001fea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1e4      	bne.n	8001f96 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd0:	223f      	movs	r2, #63	; 0x3f
 8001fd2:	409a      	lsls	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d004      	beq.n	8002010 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2280      	movs	r2, #128	; 0x80
 800200a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e00c      	b.n	800202a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2205      	movs	r2, #5
 8002014:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f022 0201 	bic.w	r2, r2, #1
 8002026:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
	...

08002038 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002038:	b480      	push	{r7}
 800203a:	b089      	sub	sp, #36	; 0x24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002046:	2300      	movs	r3, #0
 8002048:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800204a:	2300      	movs	r3, #0
 800204c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
 8002052:	e165      	b.n	8002320 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002054:	2201      	movs	r2, #1
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	4013      	ands	r3, r2
 8002066:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	429a      	cmp	r2, r3
 800206e:	f040 8154 	bne.w	800231a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	2b01      	cmp	r3, #1
 800207c:	d005      	beq.n	800208a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002086:	2b02      	cmp	r3, #2
 8002088:	d130      	bne.n	80020ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	2203      	movs	r2, #3
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43db      	mvns	r3, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4013      	ands	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020c0:	2201      	movs	r2, #1
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	091b      	lsrs	r3, r3, #4
 80020d6:	f003 0201 	and.w	r2, r3, #1
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d017      	beq.n	8002128 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	2203      	movs	r2, #3
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d123      	bne.n	800217c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	08da      	lsrs	r2, r3, #3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3208      	adds	r2, #8
 800213c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002140:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	220f      	movs	r2, #15
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	691a      	ldr	r2, [r3, #16]
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	08da      	lsrs	r2, r3, #3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3208      	adds	r2, #8
 8002176:	69b9      	ldr	r1, [r7, #24]
 8002178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	2203      	movs	r2, #3
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 0203 	and.w	r2, r3, #3
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 80ae 	beq.w	800231a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	4b5d      	ldr	r3, [pc, #372]	; (8002338 <HAL_GPIO_Init+0x300>)
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	4a5c      	ldr	r2, [pc, #368]	; (8002338 <HAL_GPIO_Init+0x300>)
 80021c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021cc:	6453      	str	r3, [r2, #68]	; 0x44
 80021ce:	4b5a      	ldr	r3, [pc, #360]	; (8002338 <HAL_GPIO_Init+0x300>)
 80021d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021da:	4a58      	ldr	r2, [pc, #352]	; (800233c <HAL_GPIO_Init+0x304>)
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	089b      	lsrs	r3, r3, #2
 80021e0:	3302      	adds	r3, #2
 80021e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f003 0303 	and.w	r3, r3, #3
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	220f      	movs	r2, #15
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43db      	mvns	r3, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4013      	ands	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a4f      	ldr	r2, [pc, #316]	; (8002340 <HAL_GPIO_Init+0x308>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d025      	beq.n	8002252 <HAL_GPIO_Init+0x21a>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a4e      	ldr	r2, [pc, #312]	; (8002344 <HAL_GPIO_Init+0x30c>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d01f      	beq.n	800224e <HAL_GPIO_Init+0x216>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a4d      	ldr	r2, [pc, #308]	; (8002348 <HAL_GPIO_Init+0x310>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d019      	beq.n	800224a <HAL_GPIO_Init+0x212>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a4c      	ldr	r2, [pc, #304]	; (800234c <HAL_GPIO_Init+0x314>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d013      	beq.n	8002246 <HAL_GPIO_Init+0x20e>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a4b      	ldr	r2, [pc, #300]	; (8002350 <HAL_GPIO_Init+0x318>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d00d      	beq.n	8002242 <HAL_GPIO_Init+0x20a>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a4a      	ldr	r2, [pc, #296]	; (8002354 <HAL_GPIO_Init+0x31c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d007      	beq.n	800223e <HAL_GPIO_Init+0x206>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a49      	ldr	r2, [pc, #292]	; (8002358 <HAL_GPIO_Init+0x320>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d101      	bne.n	800223a <HAL_GPIO_Init+0x202>
 8002236:	2306      	movs	r3, #6
 8002238:	e00c      	b.n	8002254 <HAL_GPIO_Init+0x21c>
 800223a:	2307      	movs	r3, #7
 800223c:	e00a      	b.n	8002254 <HAL_GPIO_Init+0x21c>
 800223e:	2305      	movs	r3, #5
 8002240:	e008      	b.n	8002254 <HAL_GPIO_Init+0x21c>
 8002242:	2304      	movs	r3, #4
 8002244:	e006      	b.n	8002254 <HAL_GPIO_Init+0x21c>
 8002246:	2303      	movs	r3, #3
 8002248:	e004      	b.n	8002254 <HAL_GPIO_Init+0x21c>
 800224a:	2302      	movs	r3, #2
 800224c:	e002      	b.n	8002254 <HAL_GPIO_Init+0x21c>
 800224e:	2301      	movs	r3, #1
 8002250:	e000      	b.n	8002254 <HAL_GPIO_Init+0x21c>
 8002252:	2300      	movs	r3, #0
 8002254:	69fa      	ldr	r2, [r7, #28]
 8002256:	f002 0203 	and.w	r2, r2, #3
 800225a:	0092      	lsls	r2, r2, #2
 800225c:	4093      	lsls	r3, r2
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4313      	orrs	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002264:	4935      	ldr	r1, [pc, #212]	; (800233c <HAL_GPIO_Init+0x304>)
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	089b      	lsrs	r3, r3, #2
 800226a:	3302      	adds	r3, #2
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002272:	4b3a      	ldr	r3, [pc, #232]	; (800235c <HAL_GPIO_Init+0x324>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	43db      	mvns	r3, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4013      	ands	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002296:	4a31      	ldr	r2, [pc, #196]	; (800235c <HAL_GPIO_Init+0x324>)
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800229c:	4b2f      	ldr	r3, [pc, #188]	; (800235c <HAL_GPIO_Init+0x324>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4313      	orrs	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022c0:	4a26      	ldr	r2, [pc, #152]	; (800235c <HAL_GPIO_Init+0x324>)
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022c6:	4b25      	ldr	r3, [pc, #148]	; (800235c <HAL_GPIO_Init+0x324>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	43db      	mvns	r3, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4013      	ands	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022ea:	4a1c      	ldr	r2, [pc, #112]	; (800235c <HAL_GPIO_Init+0x324>)
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022f0:	4b1a      	ldr	r3, [pc, #104]	; (800235c <HAL_GPIO_Init+0x324>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	43db      	mvns	r3, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	4313      	orrs	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002314:	4a11      	ldr	r2, [pc, #68]	; (800235c <HAL_GPIO_Init+0x324>)
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	3301      	adds	r3, #1
 800231e:	61fb      	str	r3, [r7, #28]
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	2b0f      	cmp	r3, #15
 8002324:	f67f ae96 	bls.w	8002054 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002328:	bf00      	nop
 800232a:	bf00      	nop
 800232c:	3724      	adds	r7, #36	; 0x24
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	40023800 	.word	0x40023800
 800233c:	40013800 	.word	0x40013800
 8002340:	40020000 	.word	0x40020000
 8002344:	40020400 	.word	0x40020400
 8002348:	40020800 	.word	0x40020800
 800234c:	40020c00 	.word	0x40020c00
 8002350:	40021000 	.word	0x40021000
 8002354:	40021400 	.word	0x40021400
 8002358:	40021800 	.word	0x40021800
 800235c:	40013c00 	.word	0x40013c00

08002360 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	460b      	mov	r3, r1
 800236a:	807b      	strh	r3, [r7, #2]
 800236c:	4613      	mov	r3, r2
 800236e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002370:	787b      	ldrb	r3, [r7, #1]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002376:	887a      	ldrh	r2, [r7, #2]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800237c:	e003      	b.n	8002386 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800237e:	887b      	ldrh	r3, [r7, #2]
 8002380:	041a      	lsls	r2, r3, #16
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	619a      	str	r2, [r3, #24]
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
	...

08002394 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e12b      	b.n	80025fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d106      	bne.n	80023c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7fe ff9a 	bl	80012f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2224      	movs	r2, #36	; 0x24
 80023c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0201 	bic.w	r2, r2, #1
 80023d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023f8:	f001 fccc 	bl	8003d94 <HAL_RCC_GetPCLK1Freq>
 80023fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	4a81      	ldr	r2, [pc, #516]	; (8002608 <HAL_I2C_Init+0x274>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d807      	bhi.n	8002418 <HAL_I2C_Init+0x84>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4a80      	ldr	r2, [pc, #512]	; (800260c <HAL_I2C_Init+0x278>)
 800240c:	4293      	cmp	r3, r2
 800240e:	bf94      	ite	ls
 8002410:	2301      	movls	r3, #1
 8002412:	2300      	movhi	r3, #0
 8002414:	b2db      	uxtb	r3, r3
 8002416:	e006      	b.n	8002426 <HAL_I2C_Init+0x92>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	4a7d      	ldr	r2, [pc, #500]	; (8002610 <HAL_I2C_Init+0x27c>)
 800241c:	4293      	cmp	r3, r2
 800241e:	bf94      	ite	ls
 8002420:	2301      	movls	r3, #1
 8002422:	2300      	movhi	r3, #0
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e0e7      	b.n	80025fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	4a78      	ldr	r2, [pc, #480]	; (8002614 <HAL_I2C_Init+0x280>)
 8002432:	fba2 2303 	umull	r2, r3, r2, r3
 8002436:	0c9b      	lsrs	r3, r3, #18
 8002438:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68ba      	ldr	r2, [r7, #8]
 800244a:	430a      	orrs	r2, r1
 800244c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	4a6a      	ldr	r2, [pc, #424]	; (8002608 <HAL_I2C_Init+0x274>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d802      	bhi.n	8002468 <HAL_I2C_Init+0xd4>
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	3301      	adds	r3, #1
 8002466:	e009      	b.n	800247c <HAL_I2C_Init+0xe8>
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800246e:	fb02 f303 	mul.w	r3, r2, r3
 8002472:	4a69      	ldr	r2, [pc, #420]	; (8002618 <HAL_I2C_Init+0x284>)
 8002474:	fba2 2303 	umull	r2, r3, r2, r3
 8002478:	099b      	lsrs	r3, r3, #6
 800247a:	3301      	adds	r3, #1
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6812      	ldr	r2, [r2, #0]
 8002480:	430b      	orrs	r3, r1
 8002482:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800248e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	495c      	ldr	r1, [pc, #368]	; (8002608 <HAL_I2C_Init+0x274>)
 8002498:	428b      	cmp	r3, r1
 800249a:	d819      	bhi.n	80024d0 <HAL_I2C_Init+0x13c>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	1e59      	subs	r1, r3, #1
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80024aa:	1c59      	adds	r1, r3, #1
 80024ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80024b0:	400b      	ands	r3, r1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00a      	beq.n	80024cc <HAL_I2C_Init+0x138>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	1e59      	subs	r1, r3, #1
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80024c4:	3301      	adds	r3, #1
 80024c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ca:	e051      	b.n	8002570 <HAL_I2C_Init+0x1dc>
 80024cc:	2304      	movs	r3, #4
 80024ce:	e04f      	b.n	8002570 <HAL_I2C_Init+0x1dc>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d111      	bne.n	80024fc <HAL_I2C_Init+0x168>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	1e58      	subs	r0, r3, #1
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6859      	ldr	r1, [r3, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	440b      	add	r3, r1
 80024e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ea:	3301      	adds	r3, #1
 80024ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	bf0c      	ite	eq
 80024f4:	2301      	moveq	r3, #1
 80024f6:	2300      	movne	r3, #0
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	e012      	b.n	8002522 <HAL_I2C_Init+0x18e>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	1e58      	subs	r0, r3, #1
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6859      	ldr	r1, [r3, #4]
 8002504:	460b      	mov	r3, r1
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	0099      	lsls	r1, r3, #2
 800250c:	440b      	add	r3, r1
 800250e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002512:	3301      	adds	r3, #1
 8002514:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002518:	2b00      	cmp	r3, #0
 800251a:	bf0c      	ite	eq
 800251c:	2301      	moveq	r3, #1
 800251e:	2300      	movne	r3, #0
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <HAL_I2C_Init+0x196>
 8002526:	2301      	movs	r3, #1
 8002528:	e022      	b.n	8002570 <HAL_I2C_Init+0x1dc>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10e      	bne.n	8002550 <HAL_I2C_Init+0x1bc>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	1e58      	subs	r0, r3, #1
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6859      	ldr	r1, [r3, #4]
 800253a:	460b      	mov	r3, r1
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	440b      	add	r3, r1
 8002540:	fbb0 f3f3 	udiv	r3, r0, r3
 8002544:	3301      	adds	r3, #1
 8002546:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800254a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800254e:	e00f      	b.n	8002570 <HAL_I2C_Init+0x1dc>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	1e58      	subs	r0, r3, #1
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6859      	ldr	r1, [r3, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	0099      	lsls	r1, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	fbb0 f3f3 	udiv	r3, r0, r3
 8002566:	3301      	adds	r3, #1
 8002568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800256c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	6809      	ldr	r1, [r1, #0]
 8002574:	4313      	orrs	r3, r2
 8002576:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69da      	ldr	r2, [r3, #28]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	431a      	orrs	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800259e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	6911      	ldr	r1, [r2, #16]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	68d2      	ldr	r2, [r2, #12]
 80025aa:	4311      	orrs	r1, r2
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6812      	ldr	r2, [r2, #0]
 80025b0:	430b      	orrs	r3, r1
 80025b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695a      	ldr	r2, [r3, #20]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0201 	orr.w	r2, r2, #1
 80025de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2220      	movs	r2, #32
 80025ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	000186a0 	.word	0x000186a0
 800260c:	001e847f 	.word	0x001e847f
 8002610:	003d08ff 	.word	0x003d08ff
 8002614:	431bde83 	.word	0x431bde83
 8002618:	10624dd3 	.word	0x10624dd3

0800261c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800261c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800261e:	b08f      	sub	sp, #60	; 0x3c
 8002620:	af0a      	add	r7, sp, #40	; 0x28
 8002622:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e116      	b.n	800285c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b00      	cmp	r3, #0
 800263e:	d106      	bne.n	800264e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f007 fb6f 	bl	8009d2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2203      	movs	r2, #3
 8002652:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800265a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265e:	2b00      	cmp	r3, #0
 8002660:	d102      	bne.n	8002668 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f003 fdc6 	bl	80061fe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	603b      	str	r3, [r7, #0]
 8002678:	687e      	ldr	r6, [r7, #4]
 800267a:	466d      	mov	r5, sp
 800267c:	f106 0410 	add.w	r4, r6, #16
 8002680:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002682:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002684:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002686:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002688:	e894 0003 	ldmia.w	r4, {r0, r1}
 800268c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002690:	1d33      	adds	r3, r6, #4
 8002692:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002694:	6838      	ldr	r0, [r7, #0]
 8002696:	f003 fc9d 	bl	8005fd4 <USB_CoreInit>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d005      	beq.n	80026ac <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2202      	movs	r2, #2
 80026a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e0d7      	b.n	800285c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2100      	movs	r1, #0
 80026b2:	4618      	mov	r0, r3
 80026b4:	f003 fdb4 	bl	8006220 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026b8:	2300      	movs	r3, #0
 80026ba:	73fb      	strb	r3, [r7, #15]
 80026bc:	e04a      	b.n	8002754 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026be:	7bfa      	ldrb	r2, [r7, #15]
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	4613      	mov	r3, r2
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	4413      	add	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	440b      	add	r3, r1
 80026cc:	333d      	adds	r3, #61	; 0x3d
 80026ce:	2201      	movs	r2, #1
 80026d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026d2:	7bfa      	ldrb	r2, [r7, #15]
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	4613      	mov	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	4413      	add	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	440b      	add	r3, r1
 80026e0:	333c      	adds	r3, #60	; 0x3c
 80026e2:	7bfa      	ldrb	r2, [r7, #15]
 80026e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026e6:	7bfa      	ldrb	r2, [r7, #15]
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
 80026ea:	b298      	uxth	r0, r3
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	4613      	mov	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	4413      	add	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	440b      	add	r3, r1
 80026f8:	3344      	adds	r3, #68	; 0x44
 80026fa:	4602      	mov	r2, r0
 80026fc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026fe:	7bfa      	ldrb	r2, [r7, #15]
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	4613      	mov	r3, r2
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	4413      	add	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	440b      	add	r3, r1
 800270c:	3340      	adds	r3, #64	; 0x40
 800270e:	2200      	movs	r2, #0
 8002710:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002712:	7bfa      	ldrb	r2, [r7, #15]
 8002714:	6879      	ldr	r1, [r7, #4]
 8002716:	4613      	mov	r3, r2
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	4413      	add	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	440b      	add	r3, r1
 8002720:	3348      	adds	r3, #72	; 0x48
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002726:	7bfa      	ldrb	r2, [r7, #15]
 8002728:	6879      	ldr	r1, [r7, #4]
 800272a:	4613      	mov	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	4413      	add	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	440b      	add	r3, r1
 8002734:	334c      	adds	r3, #76	; 0x4c
 8002736:	2200      	movs	r2, #0
 8002738:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800273a:	7bfa      	ldrb	r2, [r7, #15]
 800273c:	6879      	ldr	r1, [r7, #4]
 800273e:	4613      	mov	r3, r2
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	4413      	add	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	440b      	add	r3, r1
 8002748:	3354      	adds	r3, #84	; 0x54
 800274a:	2200      	movs	r2, #0
 800274c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800274e:	7bfb      	ldrb	r3, [r7, #15]
 8002750:	3301      	adds	r3, #1
 8002752:	73fb      	strb	r3, [r7, #15]
 8002754:	7bfa      	ldrb	r2, [r7, #15]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	429a      	cmp	r2, r3
 800275c:	d3af      	bcc.n	80026be <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800275e:	2300      	movs	r3, #0
 8002760:	73fb      	strb	r3, [r7, #15]
 8002762:	e044      	b.n	80027ee <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002764:	7bfa      	ldrb	r2, [r7, #15]
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	4413      	add	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002776:	2200      	movs	r2, #0
 8002778:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800277a:	7bfa      	ldrb	r2, [r7, #15]
 800277c:	6879      	ldr	r1, [r7, #4]
 800277e:	4613      	mov	r3, r2
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	4413      	add	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	440b      	add	r3, r1
 8002788:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800278c:	7bfa      	ldrb	r2, [r7, #15]
 800278e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002790:	7bfa      	ldrb	r2, [r7, #15]
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	4613      	mov	r3, r2
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	4413      	add	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	440b      	add	r3, r1
 800279e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80027a2:	2200      	movs	r2, #0
 80027a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027a6:	7bfa      	ldrb	r2, [r7, #15]
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	4613      	mov	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	4413      	add	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	440b      	add	r3, r1
 80027b4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027bc:	7bfa      	ldrb	r2, [r7, #15]
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	4613      	mov	r3, r2
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	4413      	add	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027d2:	7bfa      	ldrb	r2, [r7, #15]
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	4613      	mov	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	4413      	add	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	440b      	add	r3, r1
 80027e0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027e8:	7bfb      	ldrb	r3, [r7, #15]
 80027ea:	3301      	adds	r3, #1
 80027ec:	73fb      	strb	r3, [r7, #15]
 80027ee:	7bfa      	ldrb	r2, [r7, #15]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d3b5      	bcc.n	8002764 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	603b      	str	r3, [r7, #0]
 80027fe:	687e      	ldr	r6, [r7, #4]
 8002800:	466d      	mov	r5, sp
 8002802:	f106 0410 	add.w	r4, r6, #16
 8002806:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002808:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800280a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800280c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800280e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002812:	e885 0003 	stmia.w	r5, {r0, r1}
 8002816:	1d33      	adds	r3, r6, #4
 8002818:	cb0e      	ldmia	r3, {r1, r2, r3}
 800281a:	6838      	ldr	r0, [r7, #0]
 800281c:	f003 fd4c 	bl	80062b8 <USB_DevInit>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d005      	beq.n	8002832 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2202      	movs	r2, #2
 800282a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e014      	b.n	800285c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	2b01      	cmp	r3, #1
 8002848:	d102      	bne.n	8002850 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f001 f98c 	bl	8003b68 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	f004 fe8e 	bl	8007576 <USB_DevDisconnect>

  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002864 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002878:	2b01      	cmp	r3, #1
 800287a:	d101      	bne.n	8002880 <HAL_PCD_Start+0x1c>
 800287c:	2302      	movs	r3, #2
 800287e:	e020      	b.n	80028c2 <HAL_PCD_Start+0x5e>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288c:	2b01      	cmp	r3, #1
 800288e:	d109      	bne.n	80028a4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002894:	2b01      	cmp	r3, #1
 8002896:	d005      	beq.n	80028a4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f003 fc97 	bl	80061dc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f004 fe3e 	bl	8007534 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80028ca:	b590      	push	{r4, r7, lr}
 80028cc:	b08d      	sub	sp, #52	; 0x34
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028d8:	6a3b      	ldr	r3, [r7, #32]
 80028da:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f004 fefc 	bl	80076de <USB_GetMode>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f040 84b7 	bne.w	800325c <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f004 fe60 	bl	80075b8 <USB_ReadInterrupts>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f000 84ad 	beq.w	800325a <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	0a1b      	lsrs	r3, r3, #8
 800290a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f004 fe4d 	bl	80075b8 <USB_ReadInterrupts>
 800291e:	4603      	mov	r3, r0
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b02      	cmp	r3, #2
 8002926:	d107      	bne.n	8002938 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	695a      	ldr	r2, [r3, #20]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f002 0202 	and.w	r2, r2, #2
 8002936:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f004 fe3b 	bl	80075b8 <USB_ReadInterrupts>
 8002942:	4603      	mov	r3, r0
 8002944:	f003 0310 	and.w	r3, r3, #16
 8002948:	2b10      	cmp	r3, #16
 800294a:	d161      	bne.n	8002a10 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	699a      	ldr	r2, [r3, #24]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 0210 	bic.w	r2, r2, #16
 800295a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800295c:	6a3b      	ldr	r3, [r7, #32]
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	f003 020f 	and.w	r2, r3, #15
 8002968:	4613      	mov	r3, r2
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	4413      	add	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	4413      	add	r3, r2
 8002978:	3304      	adds	r3, #4
 800297a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	0c5b      	lsrs	r3, r3, #17
 8002980:	f003 030f 	and.w	r3, r3, #15
 8002984:	2b02      	cmp	r3, #2
 8002986:	d124      	bne.n	80029d2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800298e:	4013      	ands	r3, r2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d035      	beq.n	8002a00 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	091b      	lsrs	r3, r3, #4
 800299c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800299e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	461a      	mov	r2, r3
 80029a6:	6a38      	ldr	r0, [r7, #32]
 80029a8:	f004 fc72 	bl	8007290 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	691a      	ldr	r2, [r3, #16]
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	091b      	lsrs	r3, r3, #4
 80029b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029b8:	441a      	add	r2, r3
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	6a1a      	ldr	r2, [r3, #32]
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	091b      	lsrs	r3, r3, #4
 80029c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029ca:	441a      	add	r2, r3
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	621a      	str	r2, [r3, #32]
 80029d0:	e016      	b.n	8002a00 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	0c5b      	lsrs	r3, r3, #17
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	2b06      	cmp	r3, #6
 80029dc:	d110      	bne.n	8002a00 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80029e4:	2208      	movs	r2, #8
 80029e6:	4619      	mov	r1, r3
 80029e8:	6a38      	ldr	r0, [r7, #32]
 80029ea:	f004 fc51 	bl	8007290 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	6a1a      	ldr	r2, [r3, #32]
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	091b      	lsrs	r3, r3, #4
 80029f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029fa:	441a      	add	r2, r3
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	699a      	ldr	r2, [r3, #24]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f042 0210 	orr.w	r2, r2, #16
 8002a0e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f004 fdcf 	bl	80075b8 <USB_ReadInterrupts>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a20:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a24:	f040 80a7 	bne.w	8002b76 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f004 fdd4 	bl	80075de <USB_ReadDevAllOutEpInterrupt>
 8002a36:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002a38:	e099      	b.n	8002b6e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f000 808e 	beq.w	8002b62 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a4c:	b2d2      	uxtb	r2, r2
 8002a4e:	4611      	mov	r1, r2
 8002a50:	4618      	mov	r0, r3
 8002a52:	f004 fdf8 	bl	8007646 <USB_ReadDevOutEPInterrupt>
 8002a56:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00c      	beq.n	8002a7c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	015a      	lsls	r2, r3, #5
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	4413      	add	r3, r2
 8002a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a6e:	461a      	mov	r2, r3
 8002a70:	2301      	movs	r3, #1
 8002a72:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002a74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 fef0 	bl	800385c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00c      	beq.n	8002aa0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a88:	015a      	lsls	r2, r3, #5
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a92:	461a      	mov	r2, r3
 8002a94:	2308      	movs	r3, #8
 8002a96:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002a98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 ffc6 	bl	8003a2c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	f003 0310 	and.w	r3, r3, #16
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d008      	beq.n	8002abc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	015a      	lsls	r2, r3, #5
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	2310      	movs	r3, #16
 8002aba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d030      	beq.n	8002b28 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002ac6:	6a3b      	ldr	r3, [r7, #32]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ace:	2b80      	cmp	r3, #128	; 0x80
 8002ad0:	d109      	bne.n	8002ae6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	69fa      	ldr	r2, [r7, #28]
 8002adc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ae0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ae4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ae8:	4613      	mov	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	4413      	add	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	4413      	add	r3, r2
 8002af8:	3304      	adds	r3, #4
 8002afa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	78db      	ldrb	r3, [r3, #3]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d108      	bne.n	8002b16 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	2200      	movs	r2, #0
 8002b08:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	4619      	mov	r1, r3
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f007 fa27 	bl	8009f64 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	015a      	lsls	r2, r3, #5
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b22:	461a      	mov	r2, r3
 8002b24:	2302      	movs	r3, #2
 8002b26:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	f003 0320 	and.w	r3, r3, #32
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d008      	beq.n	8002b44 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	015a      	lsls	r2, r3, #5
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	4413      	add	r3, r2
 8002b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b3e:	461a      	mov	r2, r3
 8002b40:	2320      	movs	r3, #32
 8002b42:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d009      	beq.n	8002b62 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	015a      	lsls	r2, r3, #5
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	4413      	add	r3, r2
 8002b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b60:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	3301      	adds	r3, #1
 8002b66:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6a:	085b      	lsrs	r3, r3, #1
 8002b6c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f47f af62 	bne.w	8002a3a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f004 fd1c 	bl	80075b8 <USB_ReadInterrupts>
 8002b80:	4603      	mov	r3, r0
 8002b82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b86:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b8a:	f040 80db 	bne.w	8002d44 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f004 fd3d 	bl	8007612 <USB_ReadDevAllInEpInterrupt>
 8002b98:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002b9e:	e0cd      	b.n	8002d3c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f000 80c2 	beq.w	8002d30 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	4611      	mov	r1, r2
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f004 fd63 	bl	8007682 <USB_ReadDevInEPInterrupt>
 8002bbc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d057      	beq.n	8002c78 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	2201      	movs	r2, #1
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	43db      	mvns	r3, r3
 8002be2:	69f9      	ldr	r1, [r7, #28]
 8002be4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002be8:	4013      	ands	r3, r2
 8002bea:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bee:	015a      	lsls	r2, r3, #5
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d132      	bne.n	8002c6c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	4413      	add	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	440b      	add	r3, r1
 8002c14:	334c      	adds	r3, #76	; 0x4c
 8002c16:	6819      	ldr	r1, [r3, #0]
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4403      	add	r3, r0
 8002c26:	3348      	adds	r3, #72	; 0x48
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4419      	add	r1, r3
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c30:	4613      	mov	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	4413      	add	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4403      	add	r3, r0
 8002c3a:	334c      	adds	r3, #76	; 0x4c
 8002c3c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d113      	bne.n	8002c6c <HAL_PCD_IRQHandler+0x3a2>
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c48:	4613      	mov	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	4413      	add	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	3354      	adds	r3, #84	; 0x54
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d108      	bne.n	8002c6c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6818      	ldr	r0, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c64:	461a      	mov	r2, r3
 8002c66:	2101      	movs	r1, #1
 8002c68:	f004 fd6a 	bl	8007740 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	4619      	mov	r1, r3
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f007 f8f1 	bl	8009e5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	f003 0308 	and.w	r3, r3, #8
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d008      	beq.n	8002c94 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	015a      	lsls	r2, r3, #5
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	4413      	add	r3, r2
 8002c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c8e:	461a      	mov	r2, r3
 8002c90:	2308      	movs	r3, #8
 8002c92:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	f003 0310 	and.w	r3, r3, #16
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d008      	beq.n	8002cb0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	015a      	lsls	r2, r3, #5
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002caa:	461a      	mov	r2, r3
 8002cac:	2310      	movs	r3, #16
 8002cae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d008      	beq.n	8002ccc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	015a      	lsls	r2, r3, #5
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	2340      	movs	r3, #64	; 0x40
 8002cca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d023      	beq.n	8002d1e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002cd6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cd8:	6a38      	ldr	r0, [r7, #32]
 8002cda:	f003 fc4b 	bl	8006574 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	3338      	adds	r3, #56	; 0x38
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	4413      	add	r3, r2
 8002cee:	3304      	adds	r3, #4
 8002cf0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	78db      	ldrb	r3, [r3, #3]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d108      	bne.n	8002d0c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	4619      	mov	r1, r3
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f007 f93e 	bl	8009f88 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	015a      	lsls	r2, r3, #5
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	4413      	add	r3, r2
 8002d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d18:	461a      	mov	r2, r3
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d003      	beq.n	8002d30 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002d28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 fd08 	bl	8003740 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d32:	3301      	adds	r3, #1
 8002d34:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d38:	085b      	lsrs	r3, r3, #1
 8002d3a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f47f af2e 	bne.w	8002ba0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f004 fc35 	bl	80075b8 <USB_ReadInterrupts>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d58:	d122      	bne.n	8002da0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	69fa      	ldr	r2, [r7, #28]
 8002d64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d68:	f023 0301 	bic.w	r3, r3, #1
 8002d6c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d108      	bne.n	8002d8a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002d80:	2100      	movs	r1, #0
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f007 fab8 	bl	800a2f8 <HAL_PCDEx_LPM_Callback>
 8002d88:	e002      	b.n	8002d90 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f007 f8dc 	bl	8009f48 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	695a      	ldr	r2, [r3, #20]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002d9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f004 fc07 	bl	80075b8 <USB_ReadInterrupts>
 8002daa:	4603      	mov	r3, r0
 8002dac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002db0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002db4:	d112      	bne.n	8002ddc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d102      	bne.n	8002dcc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f007 f898 	bl	8009efc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	695a      	ldr	r2, [r3, #20]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002dda:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f004 fbe9 	bl	80075b8 <USB_ReadInterrupts>
 8002de6:	4603      	mov	r3, r0
 8002de8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002df0:	d121      	bne.n	8002e36 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	695a      	ldr	r2, [r3, #20]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002e00:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d111      	bne.n	8002e30 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1a:	089b      	lsrs	r3, r3, #2
 8002e1c:	f003 020f 	and.w	r2, r3, #15
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002e26:	2101      	movs	r1, #1
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f007 fa65 	bl	800a2f8 <HAL_PCDEx_LPM_Callback>
 8002e2e:	e002      	b.n	8002e36 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f007 f863 	bl	8009efc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f004 fbbc 	bl	80075b8 <USB_ReadInterrupts>
 8002e40:	4603      	mov	r3, r0
 8002e42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e4a:	f040 80b7 	bne.w	8002fbc <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	69fa      	ldr	r2, [r7, #28]
 8002e58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e5c:	f023 0301 	bic.w	r3, r3, #1
 8002e60:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2110      	movs	r1, #16
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f003 fb83 	bl	8006574 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e6e:	2300      	movs	r3, #0
 8002e70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e72:	e046      	b.n	8002f02 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e76:	015a      	lsls	r2, r3, #5
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e80:	461a      	mov	r2, r3
 8002e82:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e86:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8a:	015a      	lsls	r2, r3, #5
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	4413      	add	r3, r2
 8002e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e98:	0151      	lsls	r1, r2, #5
 8002e9a:	69fa      	ldr	r2, [r7, #28]
 8002e9c:	440a      	add	r2, r1
 8002e9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002ea2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ea6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eaa:	015a      	lsls	r2, r3, #5
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	4413      	add	r3, r2
 8002eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002eba:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ebe:	015a      	lsls	r2, r3, #5
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ecc:	0151      	lsls	r1, r2, #5
 8002ece:	69fa      	ldr	r2, [r7, #28]
 8002ed0:	440a      	add	r2, r1
 8002ed2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ed6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002eda:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ede:	015a      	lsls	r2, r3, #5
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eec:	0151      	lsls	r1, r2, #5
 8002eee:	69fa      	ldr	r2, [r7, #28]
 8002ef0:	440a      	add	r2, r1
 8002ef2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ef6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002efa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002efe:	3301      	adds	r3, #1
 8002f00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d3b3      	bcc.n	8002e74 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	69fa      	ldr	r2, [r7, #28]
 8002f16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f1a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002f1e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d016      	beq.n	8002f56 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f32:	69fa      	ldr	r2, [r7, #28]
 8002f34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f38:	f043 030b 	orr.w	r3, r3, #11
 8002f3c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f48:	69fa      	ldr	r2, [r7, #28]
 8002f4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f4e:	f043 030b 	orr.w	r3, r3, #11
 8002f52:	6453      	str	r3, [r2, #68]	; 0x44
 8002f54:	e015      	b.n	8002f82 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	69fa      	ldr	r2, [r7, #28]
 8002f60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f68:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002f6c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	69fa      	ldr	r2, [r7, #28]
 8002f78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f7c:	f043 030b 	orr.w	r3, r3, #11
 8002f80:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	69fa      	ldr	r2, [r7, #28]
 8002f8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f90:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002f94:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6818      	ldr	r0, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	f004 fbca 	bl	8007740 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695a      	ldr	r2, [r3, #20]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002fba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f004 faf9 	bl	80075b8 <USB_ReadInterrupts>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fd0:	d124      	bne.n	800301c <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f004 fb8f 	bl	80076fa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f003 fb44 	bl	800666e <USB_GetDevSpeed>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	461a      	mov	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681c      	ldr	r4, [r3, #0]
 8002ff2:	f000 fec3 	bl	8003d7c <HAL_RCC_GetHCLKFreq>
 8002ff6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	461a      	mov	r2, r3
 8003000:	4620      	mov	r0, r4
 8003002:	f003 f849 	bl	8006098 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f006 ff4f 	bl	8009eaa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	695a      	ldr	r2, [r3, #20]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800301a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4618      	mov	r0, r3
 8003022:	f004 fac9 	bl	80075b8 <USB_ReadInterrupts>
 8003026:	4603      	mov	r3, r0
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	2b08      	cmp	r3, #8
 800302e:	d10a      	bne.n	8003046 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f006 ff2c 	bl	8009e8e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	695a      	ldr	r2, [r3, #20]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f002 0208 	and.w	r2, r2, #8
 8003044:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f004 fab4 	bl	80075b8 <USB_ReadInterrupts>
 8003050:	4603      	mov	r3, r0
 8003052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003056:	2b80      	cmp	r3, #128	; 0x80
 8003058:	d122      	bne.n	80030a0 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800305a:	6a3b      	ldr	r3, [r7, #32]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003062:	6a3b      	ldr	r3, [r7, #32]
 8003064:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003066:	2301      	movs	r3, #1
 8003068:	627b      	str	r3, [r7, #36]	; 0x24
 800306a:	e014      	b.n	8003096 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003070:	4613      	mov	r3, r2
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	4413      	add	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d105      	bne.n	8003090 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003086:	b2db      	uxtb	r3, r3
 8003088:	4619      	mov	r1, r3
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 fb27 	bl	80036de <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003092:	3301      	adds	r3, #1
 8003094:	627b      	str	r3, [r7, #36]	; 0x24
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800309c:	429a      	cmp	r2, r3
 800309e:	d3e5      	bcc.n	800306c <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f004 fa87 	bl	80075b8 <USB_ReadInterrupts>
 80030aa:	4603      	mov	r3, r0
 80030ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030b4:	d13b      	bne.n	800312e <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030b6:	2301      	movs	r3, #1
 80030b8:	627b      	str	r3, [r7, #36]	; 0x24
 80030ba:	e02b      	b.n	8003114 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	015a      	lsls	r2, r3, #5
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	4413      	add	r3, r2
 80030c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d0:	4613      	mov	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	4413      	add	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	3340      	adds	r3, #64	; 0x40
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d115      	bne.n	800310e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80030e2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	da12      	bge.n	800310e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ec:	4613      	mov	r3, r2
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	333f      	adds	r3, #63	; 0x3f
 80030f8:	2201      	movs	r2, #1
 80030fa:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003104:	b2db      	uxtb	r3, r3
 8003106:	4619      	mov	r1, r3
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 fae8 	bl	80036de <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	3301      	adds	r3, #1
 8003112:	627b      	str	r3, [r7, #36]	; 0x24
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800311a:	429a      	cmp	r2, r3
 800311c:	d3ce      	bcc.n	80030bc <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	695a      	ldr	r2, [r3, #20]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800312c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f004 fa40 	bl	80075b8 <USB_ReadInterrupts>
 8003138:	4603      	mov	r3, r0
 800313a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800313e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003142:	d155      	bne.n	80031f0 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003144:	2301      	movs	r3, #1
 8003146:	627b      	str	r3, [r7, #36]	; 0x24
 8003148:	e045      	b.n	80031d6 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	015a      	lsls	r2, r3, #5
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	4413      	add	r3, r2
 8003152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800315e:	4613      	mov	r3, r2
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	4413      	add	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	440b      	add	r3, r1
 8003168:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d12e      	bne.n	80031d0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003172:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003174:	2b00      	cmp	r3, #0
 8003176:	da2b      	bge.n	80031d0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003184:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003188:	429a      	cmp	r2, r3
 800318a:	d121      	bne.n	80031d0 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800318c:	6879      	ldr	r1, [r7, #4]
 800318e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003190:	4613      	mov	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	4413      	add	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800319e:	2201      	movs	r2, #1
 80031a0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80031aa:	6a3b      	ldr	r3, [r7, #32]
 80031ac:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80031ae:	6a3b      	ldr	r3, [r7, #32]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10a      	bne.n	80031d0 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	69fa      	ldr	r2, [r7, #28]
 80031c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031cc:	6053      	str	r3, [r2, #4]
            break;
 80031ce:	e007      	b.n	80031e0 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	3301      	adds	r3, #1
 80031d4:	627b      	str	r3, [r7, #36]	; 0x24
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031dc:	429a      	cmp	r2, r3
 80031de:	d3b4      	bcc.n	800314a <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	695a      	ldr	r2, [r3, #20]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80031ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f004 f9df 	bl	80075b8 <USB_ReadInterrupts>
 80031fa:	4603      	mov	r3, r0
 80031fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003204:	d10a      	bne.n	800321c <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f006 fed0 	bl	8009fac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	695a      	ldr	r2, [r3, #20]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800321a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4618      	mov	r0, r3
 8003222:	f004 f9c9 	bl	80075b8 <USB_ReadInterrupts>
 8003226:	4603      	mov	r3, r0
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b04      	cmp	r3, #4
 800322e:	d115      	bne.n	800325c <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	f003 0304 	and.w	r3, r3, #4
 800323e:	2b00      	cmp	r3, #0
 8003240:	d002      	beq.n	8003248 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f006 fec0 	bl	8009fc8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6859      	ldr	r1, [r3, #4]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	430a      	orrs	r2, r1
 8003256:	605a      	str	r2, [r3, #4]
 8003258:	e000      	b.n	800325c <HAL_PCD_IRQHandler+0x992>
      return;
 800325a:	bf00      	nop
    }
  }
}
 800325c:	3734      	adds	r7, #52	; 0x34
 800325e:	46bd      	mov	sp, r7
 8003260:	bd90      	pop	{r4, r7, pc}

08003262 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b082      	sub	sp, #8
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
 800326a:	460b      	mov	r3, r1
 800326c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003274:	2b01      	cmp	r3, #1
 8003276:	d101      	bne.n	800327c <HAL_PCD_SetAddress+0x1a>
 8003278:	2302      	movs	r3, #2
 800327a:	e013      	b.n	80032a4 <HAL_PCD_SetAddress+0x42>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	78fa      	ldrb	r2, [r7, #3]
 8003288:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	78fa      	ldrb	r2, [r7, #3]
 8003292:	4611      	mov	r1, r2
 8003294:	4618      	mov	r0, r3
 8003296:	f004 f927 	bl	80074e8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	4608      	mov	r0, r1
 80032b6:	4611      	mov	r1, r2
 80032b8:	461a      	mov	r2, r3
 80032ba:	4603      	mov	r3, r0
 80032bc:	70fb      	strb	r3, [r7, #3]
 80032be:	460b      	mov	r3, r1
 80032c0:	803b      	strh	r3, [r7, #0]
 80032c2:	4613      	mov	r3, r2
 80032c4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80032c6:	2300      	movs	r3, #0
 80032c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	da0f      	bge.n	80032f2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032d2:	78fb      	ldrb	r3, [r7, #3]
 80032d4:	f003 020f 	and.w	r2, r3, #15
 80032d8:	4613      	mov	r3, r2
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	4413      	add	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	3338      	adds	r3, #56	; 0x38
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	4413      	add	r3, r2
 80032e6:	3304      	adds	r3, #4
 80032e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2201      	movs	r2, #1
 80032ee:	705a      	strb	r2, [r3, #1]
 80032f0:	e00f      	b.n	8003312 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032f2:	78fb      	ldrb	r3, [r7, #3]
 80032f4:	f003 020f 	and.w	r2, r3, #15
 80032f8:	4613      	mov	r3, r2
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	4413      	add	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	4413      	add	r3, r2
 8003308:	3304      	adds	r3, #4
 800330a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003312:	78fb      	ldrb	r3, [r7, #3]
 8003314:	f003 030f 	and.w	r3, r3, #15
 8003318:	b2da      	uxtb	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800331e:	883a      	ldrh	r2, [r7, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	78ba      	ldrb	r2, [r7, #2]
 8003328:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	785b      	ldrb	r3, [r3, #1]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d004      	beq.n	800333c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	b29a      	uxth	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800333c:	78bb      	ldrb	r3, [r7, #2]
 800333e:	2b02      	cmp	r3, #2
 8003340:	d102      	bne.n	8003348 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800334e:	2b01      	cmp	r3, #1
 8003350:	d101      	bne.n	8003356 <HAL_PCD_EP_Open+0xaa>
 8003352:	2302      	movs	r3, #2
 8003354:	e00e      	b.n	8003374 <HAL_PCD_EP_Open+0xc8>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68f9      	ldr	r1, [r7, #12]
 8003364:	4618      	mov	r0, r3
 8003366:	f003 f9a7 	bl	80066b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003372:	7afb      	ldrb	r3, [r7, #11]
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	460b      	mov	r3, r1
 8003386:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003388:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800338c:	2b00      	cmp	r3, #0
 800338e:	da0f      	bge.n	80033b0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003390:	78fb      	ldrb	r3, [r7, #3]
 8003392:	f003 020f 	and.w	r2, r3, #15
 8003396:	4613      	mov	r3, r2
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	4413      	add	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	3338      	adds	r3, #56	; 0x38
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	4413      	add	r3, r2
 80033a4:	3304      	adds	r3, #4
 80033a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2201      	movs	r2, #1
 80033ac:	705a      	strb	r2, [r3, #1]
 80033ae:	e00f      	b.n	80033d0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033b0:	78fb      	ldrb	r3, [r7, #3]
 80033b2:	f003 020f 	and.w	r2, r3, #15
 80033b6:	4613      	mov	r3, r2
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	4413      	add	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	4413      	add	r3, r2
 80033c6:	3304      	adds	r3, #4
 80033c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80033d0:	78fb      	ldrb	r3, [r7, #3]
 80033d2:	f003 030f 	and.w	r3, r3, #15
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d101      	bne.n	80033ea <HAL_PCD_EP_Close+0x6e>
 80033e6:	2302      	movs	r3, #2
 80033e8:	e00e      	b.n	8003408 <HAL_PCD_EP_Close+0x8c>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68f9      	ldr	r1, [r7, #12]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f003 f9e5 	bl	80067c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	607a      	str	r2, [r7, #4]
 800341a:	603b      	str	r3, [r7, #0]
 800341c:	460b      	mov	r3, r1
 800341e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003420:	7afb      	ldrb	r3, [r7, #11]
 8003422:	f003 020f 	and.w	r2, r3, #15
 8003426:	4613      	mov	r3, r2
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	4413      	add	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	4413      	add	r3, r2
 8003436:	3304      	adds	r3, #4
 8003438:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	2200      	movs	r2, #0
 800344a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	2200      	movs	r2, #0
 8003450:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003452:	7afb      	ldrb	r3, [r7, #11]
 8003454:	f003 030f 	and.w	r3, r3, #15
 8003458:	b2da      	uxtb	r2, r3
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d102      	bne.n	800346c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800346c:	7afb      	ldrb	r3, [r7, #11]
 800346e:	f003 030f 	and.w	r3, r3, #15
 8003472:	2b00      	cmp	r3, #0
 8003474:	d109      	bne.n	800348a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6818      	ldr	r0, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	b2db      	uxtb	r3, r3
 8003480:	461a      	mov	r2, r3
 8003482:	6979      	ldr	r1, [r7, #20]
 8003484:	f003 fcc4 	bl	8006e10 <USB_EP0StartXfer>
 8003488:	e008      	b.n	800349c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6818      	ldr	r0, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	b2db      	uxtb	r3, r3
 8003494:	461a      	mov	r2, r3
 8003496:	6979      	ldr	r1, [r7, #20]
 8003498:	f003 fa72 	bl	8006980 <USB_EPStartXfer>
  }

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
 80034ae:	460b      	mov	r3, r1
 80034b0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80034b2:	78fb      	ldrb	r3, [r7, #3]
 80034b4:	f003 020f 	and.w	r2, r3, #15
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	4613      	mov	r3, r2
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	4413      	add	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	440b      	add	r3, r1
 80034c4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80034c8:	681b      	ldr	r3, [r3, #0]
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b086      	sub	sp, #24
 80034da:	af00      	add	r7, sp, #0
 80034dc:	60f8      	str	r0, [r7, #12]
 80034de:	607a      	str	r2, [r7, #4]
 80034e0:	603b      	str	r3, [r7, #0]
 80034e2:	460b      	mov	r3, r1
 80034e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034e6:	7afb      	ldrb	r3, [r7, #11]
 80034e8:	f003 020f 	and.w	r2, r3, #15
 80034ec:	4613      	mov	r3, r2
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	4413      	add	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	3338      	adds	r3, #56	; 0x38
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	4413      	add	r3, r2
 80034fa:	3304      	adds	r3, #4
 80034fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	2200      	movs	r2, #0
 800350e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	2201      	movs	r2, #1
 8003514:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003516:	7afb      	ldrb	r3, [r7, #11]
 8003518:	f003 030f 	and.w	r3, r3, #15
 800351c:	b2da      	uxtb	r2, r3
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d102      	bne.n	8003530 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003530:	7afb      	ldrb	r3, [r7, #11]
 8003532:	f003 030f 	and.w	r3, r3, #15
 8003536:	2b00      	cmp	r3, #0
 8003538:	d109      	bne.n	800354e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6818      	ldr	r0, [r3, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	b2db      	uxtb	r3, r3
 8003544:	461a      	mov	r2, r3
 8003546:	6979      	ldr	r1, [r7, #20]
 8003548:	f003 fc62 	bl	8006e10 <USB_EP0StartXfer>
 800354c:	e008      	b.n	8003560 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6818      	ldr	r0, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	b2db      	uxtb	r3, r3
 8003558:	461a      	mov	r2, r3
 800355a:	6979      	ldr	r1, [r7, #20]
 800355c:	f003 fa10 	bl	8006980 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3718      	adds	r7, #24
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b084      	sub	sp, #16
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
 8003572:	460b      	mov	r3, r1
 8003574:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003576:	78fb      	ldrb	r3, [r7, #3]
 8003578:	f003 020f 	and.w	r2, r3, #15
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	429a      	cmp	r2, r3
 8003582:	d901      	bls.n	8003588 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e050      	b.n	800362a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003588:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800358c:	2b00      	cmp	r3, #0
 800358e:	da0f      	bge.n	80035b0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003590:	78fb      	ldrb	r3, [r7, #3]
 8003592:	f003 020f 	and.w	r2, r3, #15
 8003596:	4613      	mov	r3, r2
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	4413      	add	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	3338      	adds	r3, #56	; 0x38
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	4413      	add	r3, r2
 80035a4:	3304      	adds	r3, #4
 80035a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2201      	movs	r2, #1
 80035ac:	705a      	strb	r2, [r3, #1]
 80035ae:	e00d      	b.n	80035cc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80035b0:	78fa      	ldrb	r2, [r7, #3]
 80035b2:	4613      	mov	r3, r2
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	4413      	add	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	4413      	add	r3, r2
 80035c2:	3304      	adds	r3, #4
 80035c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2201      	movs	r2, #1
 80035d0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035d2:	78fb      	ldrb	r3, [r7, #3]
 80035d4:	f003 030f 	and.w	r3, r3, #15
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d101      	bne.n	80035ec <HAL_PCD_EP_SetStall+0x82>
 80035e8:	2302      	movs	r3, #2
 80035ea:	e01e      	b.n	800362a <HAL_PCD_EP_SetStall+0xc0>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68f9      	ldr	r1, [r7, #12]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f003 fea0 	bl	8007340 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003600:	78fb      	ldrb	r3, [r7, #3]
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10a      	bne.n	8003620 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6818      	ldr	r0, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	b2d9      	uxtb	r1, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800361a:	461a      	mov	r2, r3
 800361c:	f004 f890 	bl	8007740 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003632:	b580      	push	{r7, lr}
 8003634:	b084      	sub	sp, #16
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
 800363a:	460b      	mov	r3, r1
 800363c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800363e:	78fb      	ldrb	r3, [r7, #3]
 8003640:	f003 020f 	and.w	r2, r3, #15
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	429a      	cmp	r2, r3
 800364a:	d901      	bls.n	8003650 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e042      	b.n	80036d6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003650:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003654:	2b00      	cmp	r3, #0
 8003656:	da0f      	bge.n	8003678 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003658:	78fb      	ldrb	r3, [r7, #3]
 800365a:	f003 020f 	and.w	r2, r3, #15
 800365e:	4613      	mov	r3, r2
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	4413      	add	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	3338      	adds	r3, #56	; 0x38
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	4413      	add	r3, r2
 800366c:	3304      	adds	r3, #4
 800366e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2201      	movs	r2, #1
 8003674:	705a      	strb	r2, [r3, #1]
 8003676:	e00f      	b.n	8003698 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003678:	78fb      	ldrb	r3, [r7, #3]
 800367a:	f003 020f 	and.w	r2, r3, #15
 800367e:	4613      	mov	r3, r2
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	4413      	add	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	4413      	add	r3, r2
 800368e:	3304      	adds	r3, #4
 8003690:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800369e:	78fb      	ldrb	r3, [r7, #3]
 80036a0:	f003 030f 	and.w	r3, r3, #15
 80036a4:	b2da      	uxtb	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d101      	bne.n	80036b8 <HAL_PCD_EP_ClrStall+0x86>
 80036b4:	2302      	movs	r3, #2
 80036b6:	e00e      	b.n	80036d6 <HAL_PCD_EP_ClrStall+0xa4>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68f9      	ldr	r1, [r7, #12]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f003 fea8 	bl	800741c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b084      	sub	sp, #16
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
 80036e6:	460b      	mov	r3, r1
 80036e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80036ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	da0c      	bge.n	800370c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036f2:	78fb      	ldrb	r3, [r7, #3]
 80036f4:	f003 020f 	and.w	r2, r3, #15
 80036f8:	4613      	mov	r3, r2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	4413      	add	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	3338      	adds	r3, #56	; 0x38
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	4413      	add	r3, r2
 8003706:	3304      	adds	r3, #4
 8003708:	60fb      	str	r3, [r7, #12]
 800370a:	e00c      	b.n	8003726 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800370c:	78fb      	ldrb	r3, [r7, #3]
 800370e:	f003 020f 	and.w	r2, r3, #15
 8003712:	4613      	mov	r3, r2
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	4413      	add	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	4413      	add	r3, r2
 8003722:	3304      	adds	r3, #4
 8003724:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68f9      	ldr	r1, [r7, #12]
 800372c:	4618      	mov	r0, r3
 800372e:	f003 fcc7 	bl	80070c0 <USB_EPStopXfer>
 8003732:	4603      	mov	r3, r0
 8003734:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003736:	7afb      	ldrb	r3, [r7, #11]
}
 8003738:	4618      	mov	r0, r3
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b08a      	sub	sp, #40	; 0x28
 8003744:	af02      	add	r7, sp, #8
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003754:	683a      	ldr	r2, [r7, #0]
 8003756:	4613      	mov	r3, r2
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	4413      	add	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	3338      	adds	r3, #56	; 0x38
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	4413      	add	r3, r2
 8003764:	3304      	adds	r3, #4
 8003766:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6a1a      	ldr	r2, [r3, #32]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	429a      	cmp	r2, r3
 8003772:	d901      	bls.n	8003778 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e06c      	b.n	8003852 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	699a      	ldr	r2, [r3, #24]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	69fa      	ldr	r2, [r7, #28]
 800378a:	429a      	cmp	r2, r3
 800378c:	d902      	bls.n	8003794 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	3303      	adds	r3, #3
 8003798:	089b      	lsrs	r3, r3, #2
 800379a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800379c:	e02b      	b.n	80037f6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	699a      	ldr	r2, [r3, #24]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	69fa      	ldr	r2, [r7, #28]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d902      	bls.n	80037ba <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	3303      	adds	r3, #3
 80037be:	089b      	lsrs	r3, r3, #2
 80037c0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6919      	ldr	r1, [r3, #16]
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	b2da      	uxtb	r2, r3
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	4603      	mov	r3, r0
 80037d8:	6978      	ldr	r0, [r7, #20]
 80037da:	f003 fd1b 	bl	8007214 <USB_WritePacket>

    ep->xfer_buff  += len;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	691a      	ldr	r2, [r3, #16]
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	441a      	add	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6a1a      	ldr	r2, [r3, #32]
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	441a      	add	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	015a      	lsls	r2, r3, #5
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	4413      	add	r3, r2
 80037fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	429a      	cmp	r2, r3
 800380a:	d809      	bhi.n	8003820 <PCD_WriteEmptyTxFifo+0xe0>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6a1a      	ldr	r2, [r3, #32]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003814:	429a      	cmp	r2, r3
 8003816:	d203      	bcs.n	8003820 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1be      	bne.n	800379e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	699a      	ldr	r2, [r3, #24]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	429a      	cmp	r2, r3
 800382a:	d811      	bhi.n	8003850 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	f003 030f 	and.w	r3, r3, #15
 8003832:	2201      	movs	r2, #1
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003840:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	43db      	mvns	r3, r3
 8003846:	6939      	ldr	r1, [r7, #16]
 8003848:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800384c:	4013      	ands	r3, r2
 800384e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3720      	adds	r7, #32
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
	...

0800385c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b088      	sub	sp, #32
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	333c      	adds	r3, #60	; 0x3c
 8003874:	3304      	adds	r3, #4
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	015a      	lsls	r2, r3, #5
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	4413      	add	r3, r2
 8003882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d17b      	bne.n	800398a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	f003 0308 	and.w	r3, r3, #8
 8003898:	2b00      	cmp	r3, #0
 800389a:	d015      	beq.n	80038c8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	4a61      	ldr	r2, [pc, #388]	; (8003a24 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	f240 80b9 	bls.w	8003a18 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 80b3 	beq.w	8003a18 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	015a      	lsls	r2, r3, #5
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	4413      	add	r3, r2
 80038ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038be:	461a      	mov	r2, r3
 80038c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038c4:	6093      	str	r3, [r2, #8]
 80038c6:	e0a7      	b.n	8003a18 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	f003 0320 	and.w	r3, r3, #32
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d009      	beq.n	80038e6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	015a      	lsls	r2, r3, #5
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	4413      	add	r3, r2
 80038da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038de:	461a      	mov	r2, r3
 80038e0:	2320      	movs	r3, #32
 80038e2:	6093      	str	r3, [r2, #8]
 80038e4:	e098      	b.n	8003a18 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f040 8093 	bne.w	8003a18 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	4a4b      	ldr	r2, [pc, #300]	; (8003a24 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d90f      	bls.n	800391a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00a      	beq.n	800391a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	015a      	lsls	r2, r3, #5
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	4413      	add	r3, r2
 800390c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003910:	461a      	mov	r2, r3
 8003912:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003916:	6093      	str	r3, [r2, #8]
 8003918:	e07e      	b.n	8003a18 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	4613      	mov	r3, r2
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	4413      	add	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	4413      	add	r3, r2
 800392c:	3304      	adds	r3, #4
 800392e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	69da      	ldr	r2, [r3, #28]
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	0159      	lsls	r1, r3, #5
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	440b      	add	r3, r1
 800393c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003946:	1ad2      	subs	r2, r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d114      	bne.n	800397c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d109      	bne.n	800396e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6818      	ldr	r0, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003964:	461a      	mov	r2, r3
 8003966:	2101      	movs	r1, #1
 8003968:	f003 feea 	bl	8007740 <USB_EP0_OutStart>
 800396c:	e006      	b.n	800397c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	691a      	ldr	r2, [r3, #16]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	441a      	add	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	b2db      	uxtb	r3, r3
 8003980:	4619      	mov	r1, r3
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f006 fa4e 	bl	8009e24 <HAL_PCD_DataOutStageCallback>
 8003988:	e046      	b.n	8003a18 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	4a26      	ldr	r2, [pc, #152]	; (8003a28 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d124      	bne.n	80039dc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00a      	beq.n	80039b2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	015a      	lsls	r2, r3, #5
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	4413      	add	r3, r2
 80039a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a8:	461a      	mov	r2, r3
 80039aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039ae:	6093      	str	r3, [r2, #8]
 80039b0:	e032      	b.n	8003a18 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	f003 0320 	and.w	r3, r3, #32
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d008      	beq.n	80039ce <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	015a      	lsls	r2, r3, #5
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	4413      	add	r3, r2
 80039c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039c8:	461a      	mov	r2, r3
 80039ca:	2320      	movs	r3, #32
 80039cc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	4619      	mov	r1, r3
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f006 fa25 	bl	8009e24 <HAL_PCD_DataOutStageCallback>
 80039da:	e01d      	b.n	8003a18 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d114      	bne.n	8003a0c <PCD_EP_OutXfrComplete_int+0x1b0>
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	4613      	mov	r3, r2
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	4413      	add	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	440b      	add	r3, r1
 80039f0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d108      	bne.n	8003a0c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6818      	ldr	r0, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a04:	461a      	mov	r2, r3
 8003a06:	2100      	movs	r1, #0
 8003a08:	f003 fe9a 	bl	8007740 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	4619      	mov	r1, r3
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f006 fa06 	bl	8009e24 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3720      	adds	r7, #32
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	4f54300a 	.word	0x4f54300a
 8003a28:	4f54310a 	.word	0x4f54310a

08003a2c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	333c      	adds	r3, #60	; 0x3c
 8003a44:	3304      	adds	r3, #4
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	015a      	lsls	r2, r3, #5
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	4413      	add	r3, r2
 8003a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	4a15      	ldr	r2, [pc, #84]	; (8003ab4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d90e      	bls.n	8003a80 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d009      	beq.n	8003a80 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a78:	461a      	mov	r2, r3
 8003a7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a7e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f006 f9bd 	bl	8009e00 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	4a0a      	ldr	r2, [pc, #40]	; (8003ab4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d90c      	bls.n	8003aa8 <PCD_EP_OutSetupPacket_int+0x7c>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d108      	bne.n	8003aa8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6818      	ldr	r0, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	f003 fe4c 	bl	8007740 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3718      	adds	r7, #24
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	4f54300a 	.word	0x4f54300a

08003ab8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	70fb      	strb	r3, [r7, #3]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ace:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003ad0:	78fb      	ldrb	r3, [r7, #3]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d107      	bne.n	8003ae6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003ad6:	883b      	ldrh	r3, [r7, #0]
 8003ad8:	0419      	lsls	r1, r3, #16
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	629a      	str	r2, [r3, #40]	; 0x28
 8003ae4:	e028      	b.n	8003b38 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aec:	0c1b      	lsrs	r3, r3, #16
 8003aee:	68ba      	ldr	r2, [r7, #8]
 8003af0:	4413      	add	r3, r2
 8003af2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003af4:	2300      	movs	r3, #0
 8003af6:	73fb      	strb	r3, [r7, #15]
 8003af8:	e00d      	b.n	8003b16 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	7bfb      	ldrb	r3, [r7, #15]
 8003b00:	3340      	adds	r3, #64	; 0x40
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4413      	add	r3, r2
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	0c1b      	lsrs	r3, r3, #16
 8003b0a:	68ba      	ldr	r2, [r7, #8]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b10:	7bfb      	ldrb	r3, [r7, #15]
 8003b12:	3301      	adds	r3, #1
 8003b14:	73fb      	strb	r3, [r7, #15]
 8003b16:	7bfa      	ldrb	r2, [r7, #15]
 8003b18:	78fb      	ldrb	r3, [r7, #3]
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d3ec      	bcc.n	8003afa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003b20:	883b      	ldrh	r3, [r7, #0]
 8003b22:	0418      	lsls	r0, r3, #16
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6819      	ldr	r1, [r3, #0]
 8003b28:	78fb      	ldrb	r3, [r7, #3]
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	4302      	orrs	r2, r0
 8003b30:	3340      	adds	r3, #64	; 0x40
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3714      	adds	r7, #20
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
 8003b4e:	460b      	mov	r3, r1
 8003b50:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	887a      	ldrh	r2, [r7, #2]
 8003b58:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b9a:	f043 0303 	orr.w	r3, r3, #3
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3714      	adds	r7, #20
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e0cc      	b.n	8003d5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bc4:	4b68      	ldr	r3, [pc, #416]	; (8003d68 <HAL_RCC_ClockConfig+0x1b8>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 030f 	and.w	r3, r3, #15
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d90c      	bls.n	8003bec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd2:	4b65      	ldr	r3, [pc, #404]	; (8003d68 <HAL_RCC_ClockConfig+0x1b8>)
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	b2d2      	uxtb	r2, r2
 8003bd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bda:	4b63      	ldr	r3, [pc, #396]	; (8003d68 <HAL_RCC_ClockConfig+0x1b8>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 030f 	and.w	r3, r3, #15
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d001      	beq.n	8003bec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e0b8      	b.n	8003d5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d020      	beq.n	8003c3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0304 	and.w	r3, r3, #4
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d005      	beq.n	8003c10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c04:	4b59      	ldr	r3, [pc, #356]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	4a58      	ldr	r2, [pc, #352]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0308 	and.w	r3, r3, #8
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d005      	beq.n	8003c28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c1c:	4b53      	ldr	r3, [pc, #332]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	4a52      	ldr	r2, [pc, #328]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c28:	4b50      	ldr	r3, [pc, #320]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	494d      	ldr	r1, [pc, #308]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d044      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d107      	bne.n	8003c5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c4e:	4b47      	ldr	r3, [pc, #284]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d119      	bne.n	8003c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e07f      	b.n	8003d5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d003      	beq.n	8003c6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c6a:	2b03      	cmp	r3, #3
 8003c6c:	d107      	bne.n	8003c7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c6e:	4b3f      	ldr	r3, [pc, #252]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d109      	bne.n	8003c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e06f      	b.n	8003d5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c7e:	4b3b      	ldr	r3, [pc, #236]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e067      	b.n	8003d5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c8e:	4b37      	ldr	r3, [pc, #220]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f023 0203 	bic.w	r2, r3, #3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	4934      	ldr	r1, [pc, #208]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ca0:	f7fd fd84 	bl	80017ac <HAL_GetTick>
 8003ca4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ca6:	e00a      	b.n	8003cbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ca8:	f7fd fd80 	bl	80017ac <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e04f      	b.n	8003d5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cbe:	4b2b      	ldr	r3, [pc, #172]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f003 020c 	and.w	r2, r3, #12
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d1eb      	bne.n	8003ca8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cd0:	4b25      	ldr	r3, [pc, #148]	; (8003d68 <HAL_RCC_ClockConfig+0x1b8>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 030f 	and.w	r3, r3, #15
 8003cd8:	683a      	ldr	r2, [r7, #0]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d20c      	bcs.n	8003cf8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cde:	4b22      	ldr	r3, [pc, #136]	; (8003d68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ce0:	683a      	ldr	r2, [r7, #0]
 8003ce2:	b2d2      	uxtb	r2, r2
 8003ce4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ce6:	4b20      	ldr	r3, [pc, #128]	; (8003d68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 030f 	and.w	r3, r3, #15
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d001      	beq.n	8003cf8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e032      	b.n	8003d5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d008      	beq.n	8003d16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d04:	4b19      	ldr	r3, [pc, #100]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	4916      	ldr	r1, [pc, #88]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0308 	and.w	r3, r3, #8
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d009      	beq.n	8003d36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d22:	4b12      	ldr	r3, [pc, #72]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	490e      	ldr	r1, [pc, #56]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d36:	f000 fb7f 	bl	8004438 <HAL_RCC_GetSysClockFreq>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <HAL_RCC_ClockConfig+0x1bc>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	091b      	lsrs	r3, r3, #4
 8003d42:	f003 030f 	and.w	r3, r3, #15
 8003d46:	490a      	ldr	r1, [pc, #40]	; (8003d70 <HAL_RCC_ClockConfig+0x1c0>)
 8003d48:	5ccb      	ldrb	r3, [r1, r3]
 8003d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d4e:	4a09      	ldr	r2, [pc, #36]	; (8003d74 <HAL_RCC_ClockConfig+0x1c4>)
 8003d50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d52:	4b09      	ldr	r3, [pc, #36]	; (8003d78 <HAL_RCC_ClockConfig+0x1c8>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7fd fce4 	bl	8001724 <HAL_InitTick>

  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	40023c00 	.word	0x40023c00
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	0800a4d4 	.word	0x0800a4d4
 8003d74:	20000000 	.word	0x20000000
 8003d78:	20000004 	.word	0x20000004

08003d7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d80:	4b03      	ldr	r3, [pc, #12]	; (8003d90 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d82:	681b      	ldr	r3, [r3, #0]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	20000000 	.word	0x20000000

08003d94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d98:	f7ff fff0 	bl	8003d7c <HAL_RCC_GetHCLKFreq>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	4b05      	ldr	r3, [pc, #20]	; (8003db4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	0a9b      	lsrs	r3, r3, #10
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	4903      	ldr	r1, [pc, #12]	; (8003db8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003daa:	5ccb      	ldrb	r3, [r1, r3]
 8003dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40023800 	.word	0x40023800
 8003db8:	0800a4e4 	.word	0x0800a4e4

08003dbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003dc0:	f7ff ffdc 	bl	8003d7c <HAL_RCC_GetHCLKFreq>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	4b05      	ldr	r3, [pc, #20]	; (8003ddc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	0b5b      	lsrs	r3, r3, #13
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	4903      	ldr	r1, [pc, #12]	; (8003de0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dd2:	5ccb      	ldrb	r3, [r1, r3]
 8003dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	0800a4e4 	.word	0x0800a4e4

08003de4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b08c      	sub	sp, #48	; 0x30
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003dec:	2300      	movs	r3, #0
 8003dee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003df0:	2300      	movs	r3, #0
 8003df2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003df4:	2300      	movs	r3, #0
 8003df6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003e04:	2300      	movs	r3, #0
 8003e06:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d010      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003e1c:	4b6f      	ldr	r3, [pc, #444]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e22:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2a:	496c      	ldr	r1, [pc, #432]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d010      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003e4a:	4b64      	ldr	r3, [pc, #400]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e50:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e58:	4960      	ldr	r1, [pc, #384]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d101      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d017      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e78:	4b58      	ldr	r3, [pc, #352]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e86:	4955      	ldr	r1, [pc, #340]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e96:	d101      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d101      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0308 	and.w	r3, r3, #8
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d017      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003eb4:	4b49      	ldr	r3, [pc, #292]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003eb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec2:	4946      	ldr	r1, [pc, #280]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ece:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ed2:	d101      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d101      	bne.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0320 	and.w	r3, r3, #32
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f000 808a 	beq.w	8004006 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60bb      	str	r3, [r7, #8]
 8003ef6:	4b39      	ldr	r3, [pc, #228]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	4a38      	ldr	r2, [pc, #224]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f00:	6413      	str	r3, [r2, #64]	; 0x40
 8003f02:	4b36      	ldr	r3, [pc, #216]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f0a:	60bb      	str	r3, [r7, #8]
 8003f0c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003f0e:	4b34      	ldr	r3, [pc, #208]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a33      	ldr	r2, [pc, #204]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f18:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f1a:	f7fd fc47 	bl	80017ac <HAL_GetTick>
 8003f1e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f20:	e008      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003f22:	f7fd fc43 	bl	80017ac <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e278      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f34:	4b2a      	ldr	r3, [pc, #168]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d0f0      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f40:	4b26      	ldr	r3, [pc, #152]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f48:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d02f      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f58:	6a3a      	ldr	r2, [r7, #32]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d028      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f5e:	4b1f      	ldr	r3, [pc, #124]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f66:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f68:	4b1e      	ldr	r3, [pc, #120]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f6e:	4b1d      	ldr	r3, [pc, #116]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003f74:	4a19      	ldr	r2, [pc, #100]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f7a:	4b18      	ldr	r3, [pc, #96]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d114      	bne.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003f86:	f7fd fc11 	bl	80017ac <HAL_GetTick>
 8003f8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f8c:	e00a      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f8e:	f7fd fc0d 	bl	80017ac <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e240      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fa4:	4b0d      	ldr	r3, [pc, #52]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0ee      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fbc:	d114      	bne.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003fbe:	4b07      	ldr	r3, [pc, #28]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003fce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd2:	4902      	ldr	r1, [pc, #8]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	608b      	str	r3, [r1, #8]
 8003fd8:	e00c      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003fda:	bf00      	nop
 8003fdc:	40023800 	.word	0x40023800
 8003fe0:	40007000 	.word	0x40007000
 8003fe4:	42470e40 	.word	0x42470e40
 8003fe8:	4b4a      	ldr	r3, [pc, #296]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	4a49      	ldr	r2, [pc, #292]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003fee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003ff2:	6093      	str	r3, [r2, #8]
 8003ff4:	4b47      	ldr	r3, [pc, #284]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ff6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004000:	4944      	ldr	r1, [pc, #272]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004002:	4313      	orrs	r3, r2
 8004004:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0310 	and.w	r3, r3, #16
 800400e:	2b00      	cmp	r3, #0
 8004010:	d004      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8004018:	4b3f      	ldr	r3, [pc, #252]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800401a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00a      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004028:	4b3a      	ldr	r3, [pc, #232]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800402a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800402e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004036:	4937      	ldr	r1, [pc, #220]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004038:	4313      	orrs	r3, r2
 800403a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00a      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800404a:	4b32      	ldr	r3, [pc, #200]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800404c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004050:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004058:	492e      	ldr	r1, [pc, #184]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800405a:	4313      	orrs	r3, r2
 800405c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004068:	2b00      	cmp	r3, #0
 800406a:	d011      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800406c:	4b29      	ldr	r3, [pc, #164]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800406e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004072:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800407a:	4926      	ldr	r1, [pc, #152]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800407c:	4313      	orrs	r3, r2
 800407e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004086:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800408a:	d101      	bne.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800408c:	2301      	movs	r3, #1
 800408e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00a      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800409c:	4b1d      	ldr	r3, [pc, #116]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800409e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040a2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040aa:	491a      	ldr	r1, [pc, #104]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d011      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80040be:	4b15      	ldr	r3, [pc, #84]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80040c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040c4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040cc:	4911      	ldr	r1, [pc, #68]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040dc:	d101      	bne.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80040de:	2301      	movs	r3, #1
 80040e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80040e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d005      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040f0:	f040 80ff 	bne.w	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80040f4:	4b09      	ldr	r3, [pc, #36]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040fa:	f7fd fb57 	bl	80017ac <HAL_GetTick>
 80040fe:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004100:	e00e      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004102:	f7fd fb53 	bl	80017ac <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b02      	cmp	r3, #2
 800410e:	d907      	bls.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e188      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004114:	40023800 	.word	0x40023800
 8004118:	424711e0 	.word	0x424711e0
 800411c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004120:	4b7e      	ldr	r3, [pc, #504]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1ea      	bne.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	2b00      	cmp	r3, #0
 8004136:	d003      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413c:	2b00      	cmp	r3, #0
 800413e:	d009      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004148:	2b00      	cmp	r3, #0
 800414a:	d028      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004150:	2b00      	cmp	r3, #0
 8004152:	d124      	bne.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004154:	4b71      	ldr	r3, [pc, #452]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004156:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800415a:	0c1b      	lsrs	r3, r3, #16
 800415c:	f003 0303 	and.w	r3, r3, #3
 8004160:	3301      	adds	r3, #1
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004166:	4b6d      	ldr	r3, [pc, #436]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004168:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800416c:	0e1b      	lsrs	r3, r3, #24
 800416e:	f003 030f 	and.w	r3, r3, #15
 8004172:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	019b      	lsls	r3, r3, #6
 800417e:	431a      	orrs	r2, r3
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	085b      	lsrs	r3, r3, #1
 8004184:	3b01      	subs	r3, #1
 8004186:	041b      	lsls	r3, r3, #16
 8004188:	431a      	orrs	r2, r3
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	061b      	lsls	r3, r3, #24
 800418e:	431a      	orrs	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	071b      	lsls	r3, r3, #28
 8004196:	4961      	ldr	r1, [pc, #388]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004198:	4313      	orrs	r3, r2
 800419a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0304 	and.w	r3, r3, #4
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d004      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041b2:	d00a      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d035      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041c8:	d130      	bne.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80041ca:	4b54      	ldr	r3, [pc, #336]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80041cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041d0:	0c1b      	lsrs	r3, r3, #16
 80041d2:	f003 0303 	and.w	r3, r3, #3
 80041d6:	3301      	adds	r3, #1
 80041d8:	005b      	lsls	r3, r3, #1
 80041da:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80041dc:	4b4f      	ldr	r3, [pc, #316]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80041de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041e2:	0f1b      	lsrs	r3, r3, #28
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	019b      	lsls	r3, r3, #6
 80041f4:	431a      	orrs	r2, r3
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	085b      	lsrs	r3, r3, #1
 80041fa:	3b01      	subs	r3, #1
 80041fc:	041b      	lsls	r3, r3, #16
 80041fe:	431a      	orrs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	061b      	lsls	r3, r3, #24
 8004206:	431a      	orrs	r2, r3
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	071b      	lsls	r3, r3, #28
 800420c:	4943      	ldr	r1, [pc, #268]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800420e:	4313      	orrs	r3, r2
 8004210:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004214:	4b41      	ldr	r3, [pc, #260]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004216:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800421a:	f023 021f 	bic.w	r2, r3, #31
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004222:	3b01      	subs	r3, #1
 8004224:	493d      	ldr	r1, [pc, #244]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004226:	4313      	orrs	r3, r2
 8004228:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004234:	2b00      	cmp	r3, #0
 8004236:	d029      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800423c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004240:	d124      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004242:	4b36      	ldr	r3, [pc, #216]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004244:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004248:	0c1b      	lsrs	r3, r3, #16
 800424a:	f003 0303 	and.w	r3, r3, #3
 800424e:	3301      	adds	r3, #1
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004254:	4b31      	ldr	r3, [pc, #196]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004256:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800425a:	0f1b      	lsrs	r3, r3, #28
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	019b      	lsls	r3, r3, #6
 800426c:	431a      	orrs	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	085b      	lsrs	r3, r3, #1
 8004274:	3b01      	subs	r3, #1
 8004276:	041b      	lsls	r3, r3, #16
 8004278:	431a      	orrs	r2, r3
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	061b      	lsls	r3, r3, #24
 800427e:	431a      	orrs	r2, r3
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	071b      	lsls	r3, r3, #28
 8004284:	4925      	ldr	r1, [pc, #148]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004286:	4313      	orrs	r3, r2
 8004288:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004294:	2b00      	cmp	r3, #0
 8004296:	d016      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	019b      	lsls	r3, r3, #6
 80042a2:	431a      	orrs	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	085b      	lsrs	r3, r3, #1
 80042aa:	3b01      	subs	r3, #1
 80042ac:	041b      	lsls	r3, r3, #16
 80042ae:	431a      	orrs	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	061b      	lsls	r3, r3, #24
 80042b6:	431a      	orrs	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	071b      	lsls	r3, r3, #28
 80042be:	4917      	ldr	r1, [pc, #92]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80042c6:	4b16      	ldr	r3, [pc, #88]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80042c8:	2201      	movs	r2, #1
 80042ca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042cc:	f7fd fa6e 	bl	80017ac <HAL_GetTick>
 80042d0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042d2:	e008      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80042d4:	f7fd fa6a 	bl	80017ac <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e09f      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80042e6:	4b0d      	ldr	r3, [pc, #52]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d0f0      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80042f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	f040 8095 	bne.w	8004424 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80042fa:	4b0a      	ldr	r3, [pc, #40]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004300:	f7fd fa54 	bl	80017ac <HAL_GetTick>
 8004304:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004306:	e00f      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004308:	f7fd fa50 	bl	80017ac <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d908      	bls.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e085      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800431a:	bf00      	nop
 800431c:	40023800 	.word	0x40023800
 8004320:	42470068 	.word	0x42470068
 8004324:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004328:	4b41      	ldr	r3, [pc, #260]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004330:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004334:	d0e8      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0304 	and.w	r3, r3, #4
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004346:	2b00      	cmp	r3, #0
 8004348:	d009      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004352:	2b00      	cmp	r3, #0
 8004354:	d02b      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800435a:	2b00      	cmp	r3, #0
 800435c:	d127      	bne.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800435e:	4b34      	ldr	r3, [pc, #208]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004364:	0c1b      	lsrs	r3, r3, #16
 8004366:	f003 0303 	and.w	r3, r3, #3
 800436a:	3301      	adds	r3, #1
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	699a      	ldr	r2, [r3, #24]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	69db      	ldr	r3, [r3, #28]
 8004378:	019b      	lsls	r3, r3, #6
 800437a:	431a      	orrs	r2, r3
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	085b      	lsrs	r3, r3, #1
 8004380:	3b01      	subs	r3, #1
 8004382:	041b      	lsls	r3, r3, #16
 8004384:	431a      	orrs	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438a:	061b      	lsls	r3, r3, #24
 800438c:	4928      	ldr	r1, [pc, #160]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800438e:	4313      	orrs	r3, r2
 8004390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004394:	4b26      	ldr	r3, [pc, #152]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004396:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800439a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a2:	3b01      	subs	r3, #1
 80043a4:	021b      	lsls	r3, r3, #8
 80043a6:	4922      	ldr	r1, [pc, #136]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d01d      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043c2:	d118      	bne.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80043c4:	4b1a      	ldr	r3, [pc, #104]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80043c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ca:	0e1b      	lsrs	r3, r3, #24
 80043cc:	f003 030f 	and.w	r3, r3, #15
 80043d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	699a      	ldr	r2, [r3, #24]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	019b      	lsls	r3, r3, #6
 80043dc:	431a      	orrs	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	085b      	lsrs	r3, r3, #1
 80043e4:	3b01      	subs	r3, #1
 80043e6:	041b      	lsls	r3, r3, #16
 80043e8:	431a      	orrs	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	061b      	lsls	r3, r3, #24
 80043ee:	4910      	ldr	r1, [pc, #64]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80043f6:	4b0f      	ldr	r3, [pc, #60]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80043f8:	2201      	movs	r2, #1
 80043fa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043fc:	f7fd f9d6 	bl	80017ac <HAL_GetTick>
 8004400:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004402:	e008      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004404:	f7fd f9d2 	bl	80017ac <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d901      	bls.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e007      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004416:	4b06      	ldr	r3, [pc, #24]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800441e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004422:	d1ef      	bne.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3730      	adds	r7, #48	; 0x30
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	40023800 	.word	0x40023800
 8004434:	42470070 	.word	0x42470070

08004438 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800443c:	b0ae      	sub	sp, #184	; 0xb8
 800443e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004446:	2300      	movs	r3, #0
 8004448:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004452:	2300      	movs	r3, #0
 8004454:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004458:	2300      	movs	r3, #0
 800445a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800445e:	4bcb      	ldr	r3, [pc, #812]	; (800478c <HAL_RCC_GetSysClockFreq+0x354>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f003 030c 	and.w	r3, r3, #12
 8004466:	2b0c      	cmp	r3, #12
 8004468:	f200 8206 	bhi.w	8004878 <HAL_RCC_GetSysClockFreq+0x440>
 800446c:	a201      	add	r2, pc, #4	; (adr r2, 8004474 <HAL_RCC_GetSysClockFreq+0x3c>)
 800446e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004472:	bf00      	nop
 8004474:	080044a9 	.word	0x080044a9
 8004478:	08004879 	.word	0x08004879
 800447c:	08004879 	.word	0x08004879
 8004480:	08004879 	.word	0x08004879
 8004484:	080044b1 	.word	0x080044b1
 8004488:	08004879 	.word	0x08004879
 800448c:	08004879 	.word	0x08004879
 8004490:	08004879 	.word	0x08004879
 8004494:	080044b9 	.word	0x080044b9
 8004498:	08004879 	.word	0x08004879
 800449c:	08004879 	.word	0x08004879
 80044a0:	08004879 	.word	0x08004879
 80044a4:	080046a9 	.word	0x080046a9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044a8:	4bb9      	ldr	r3, [pc, #740]	; (8004790 <HAL_RCC_GetSysClockFreq+0x358>)
 80044aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80044ae:	e1e7      	b.n	8004880 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044b0:	4bb8      	ldr	r3, [pc, #736]	; (8004794 <HAL_RCC_GetSysClockFreq+0x35c>)
 80044b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80044b6:	e1e3      	b.n	8004880 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044b8:	4bb4      	ldr	r3, [pc, #720]	; (800478c <HAL_RCC_GetSysClockFreq+0x354>)
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044c4:	4bb1      	ldr	r3, [pc, #708]	; (800478c <HAL_RCC_GetSysClockFreq+0x354>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d071      	beq.n	80045b4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044d0:	4bae      	ldr	r3, [pc, #696]	; (800478c <HAL_RCC_GetSysClockFreq+0x354>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	099b      	lsrs	r3, r3, #6
 80044d6:	2200      	movs	r2, #0
 80044d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80044dc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80044e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80044ec:	2300      	movs	r3, #0
 80044ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80044f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80044f6:	4622      	mov	r2, r4
 80044f8:	462b      	mov	r3, r5
 80044fa:	f04f 0000 	mov.w	r0, #0
 80044fe:	f04f 0100 	mov.w	r1, #0
 8004502:	0159      	lsls	r1, r3, #5
 8004504:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004508:	0150      	lsls	r0, r2, #5
 800450a:	4602      	mov	r2, r0
 800450c:	460b      	mov	r3, r1
 800450e:	4621      	mov	r1, r4
 8004510:	1a51      	subs	r1, r2, r1
 8004512:	6439      	str	r1, [r7, #64]	; 0x40
 8004514:	4629      	mov	r1, r5
 8004516:	eb63 0301 	sbc.w	r3, r3, r1
 800451a:	647b      	str	r3, [r7, #68]	; 0x44
 800451c:	f04f 0200 	mov.w	r2, #0
 8004520:	f04f 0300 	mov.w	r3, #0
 8004524:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004528:	4649      	mov	r1, r9
 800452a:	018b      	lsls	r3, r1, #6
 800452c:	4641      	mov	r1, r8
 800452e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004532:	4641      	mov	r1, r8
 8004534:	018a      	lsls	r2, r1, #6
 8004536:	4641      	mov	r1, r8
 8004538:	1a51      	subs	r1, r2, r1
 800453a:	63b9      	str	r1, [r7, #56]	; 0x38
 800453c:	4649      	mov	r1, r9
 800453e:	eb63 0301 	sbc.w	r3, r3, r1
 8004542:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004544:	f04f 0200 	mov.w	r2, #0
 8004548:	f04f 0300 	mov.w	r3, #0
 800454c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004550:	4649      	mov	r1, r9
 8004552:	00cb      	lsls	r3, r1, #3
 8004554:	4641      	mov	r1, r8
 8004556:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800455a:	4641      	mov	r1, r8
 800455c:	00ca      	lsls	r2, r1, #3
 800455e:	4610      	mov	r0, r2
 8004560:	4619      	mov	r1, r3
 8004562:	4603      	mov	r3, r0
 8004564:	4622      	mov	r2, r4
 8004566:	189b      	adds	r3, r3, r2
 8004568:	633b      	str	r3, [r7, #48]	; 0x30
 800456a:	462b      	mov	r3, r5
 800456c:	460a      	mov	r2, r1
 800456e:	eb42 0303 	adc.w	r3, r2, r3
 8004572:	637b      	str	r3, [r7, #52]	; 0x34
 8004574:	f04f 0200 	mov.w	r2, #0
 8004578:	f04f 0300 	mov.w	r3, #0
 800457c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004580:	4629      	mov	r1, r5
 8004582:	024b      	lsls	r3, r1, #9
 8004584:	4621      	mov	r1, r4
 8004586:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800458a:	4621      	mov	r1, r4
 800458c:	024a      	lsls	r2, r1, #9
 800458e:	4610      	mov	r0, r2
 8004590:	4619      	mov	r1, r3
 8004592:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004596:	2200      	movs	r2, #0
 8004598:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800459c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80045a0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80045a4:	f7fb fe2e 	bl	8000204 <__aeabi_uldivmod>
 80045a8:	4602      	mov	r2, r0
 80045aa:	460b      	mov	r3, r1
 80045ac:	4613      	mov	r3, r2
 80045ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045b2:	e067      	b.n	8004684 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045b4:	4b75      	ldr	r3, [pc, #468]	; (800478c <HAL_RCC_GetSysClockFreq+0x354>)
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	099b      	lsrs	r3, r3, #6
 80045ba:	2200      	movs	r2, #0
 80045bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80045c0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80045c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80045c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80045ce:	2300      	movs	r3, #0
 80045d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80045d2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80045d6:	4622      	mov	r2, r4
 80045d8:	462b      	mov	r3, r5
 80045da:	f04f 0000 	mov.w	r0, #0
 80045de:	f04f 0100 	mov.w	r1, #0
 80045e2:	0159      	lsls	r1, r3, #5
 80045e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045e8:	0150      	lsls	r0, r2, #5
 80045ea:	4602      	mov	r2, r0
 80045ec:	460b      	mov	r3, r1
 80045ee:	4621      	mov	r1, r4
 80045f0:	1a51      	subs	r1, r2, r1
 80045f2:	62b9      	str	r1, [r7, #40]	; 0x28
 80045f4:	4629      	mov	r1, r5
 80045f6:	eb63 0301 	sbc.w	r3, r3, r1
 80045fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045fc:	f04f 0200 	mov.w	r2, #0
 8004600:	f04f 0300 	mov.w	r3, #0
 8004604:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004608:	4649      	mov	r1, r9
 800460a:	018b      	lsls	r3, r1, #6
 800460c:	4641      	mov	r1, r8
 800460e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004612:	4641      	mov	r1, r8
 8004614:	018a      	lsls	r2, r1, #6
 8004616:	4641      	mov	r1, r8
 8004618:	ebb2 0a01 	subs.w	sl, r2, r1
 800461c:	4649      	mov	r1, r9
 800461e:	eb63 0b01 	sbc.w	fp, r3, r1
 8004622:	f04f 0200 	mov.w	r2, #0
 8004626:	f04f 0300 	mov.w	r3, #0
 800462a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800462e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004632:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004636:	4692      	mov	sl, r2
 8004638:	469b      	mov	fp, r3
 800463a:	4623      	mov	r3, r4
 800463c:	eb1a 0303 	adds.w	r3, sl, r3
 8004640:	623b      	str	r3, [r7, #32]
 8004642:	462b      	mov	r3, r5
 8004644:	eb4b 0303 	adc.w	r3, fp, r3
 8004648:	627b      	str	r3, [r7, #36]	; 0x24
 800464a:	f04f 0200 	mov.w	r2, #0
 800464e:	f04f 0300 	mov.w	r3, #0
 8004652:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004656:	4629      	mov	r1, r5
 8004658:	028b      	lsls	r3, r1, #10
 800465a:	4621      	mov	r1, r4
 800465c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004660:	4621      	mov	r1, r4
 8004662:	028a      	lsls	r2, r1, #10
 8004664:	4610      	mov	r0, r2
 8004666:	4619      	mov	r1, r3
 8004668:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800466c:	2200      	movs	r2, #0
 800466e:	673b      	str	r3, [r7, #112]	; 0x70
 8004670:	677a      	str	r2, [r7, #116]	; 0x74
 8004672:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004676:	f7fb fdc5 	bl	8000204 <__aeabi_uldivmod>
 800467a:	4602      	mov	r2, r0
 800467c:	460b      	mov	r3, r1
 800467e:	4613      	mov	r3, r2
 8004680:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004684:	4b41      	ldr	r3, [pc, #260]	; (800478c <HAL_RCC_GetSysClockFreq+0x354>)
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	0c1b      	lsrs	r3, r3, #16
 800468a:	f003 0303 	and.w	r3, r3, #3
 800468e:	3301      	adds	r3, #1
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004696:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800469a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800469e:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80046a6:	e0eb      	b.n	8004880 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046a8:	4b38      	ldr	r3, [pc, #224]	; (800478c <HAL_RCC_GetSysClockFreq+0x354>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046b4:	4b35      	ldr	r3, [pc, #212]	; (800478c <HAL_RCC_GetSysClockFreq+0x354>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d06b      	beq.n	8004798 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046c0:	4b32      	ldr	r3, [pc, #200]	; (800478c <HAL_RCC_GetSysClockFreq+0x354>)
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	099b      	lsrs	r3, r3, #6
 80046c6:	2200      	movs	r2, #0
 80046c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80046ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80046cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046d2:	663b      	str	r3, [r7, #96]	; 0x60
 80046d4:	2300      	movs	r3, #0
 80046d6:	667b      	str	r3, [r7, #100]	; 0x64
 80046d8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80046dc:	4622      	mov	r2, r4
 80046de:	462b      	mov	r3, r5
 80046e0:	f04f 0000 	mov.w	r0, #0
 80046e4:	f04f 0100 	mov.w	r1, #0
 80046e8:	0159      	lsls	r1, r3, #5
 80046ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046ee:	0150      	lsls	r0, r2, #5
 80046f0:	4602      	mov	r2, r0
 80046f2:	460b      	mov	r3, r1
 80046f4:	4621      	mov	r1, r4
 80046f6:	1a51      	subs	r1, r2, r1
 80046f8:	61b9      	str	r1, [r7, #24]
 80046fa:	4629      	mov	r1, r5
 80046fc:	eb63 0301 	sbc.w	r3, r3, r1
 8004700:	61fb      	str	r3, [r7, #28]
 8004702:	f04f 0200 	mov.w	r2, #0
 8004706:	f04f 0300 	mov.w	r3, #0
 800470a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800470e:	4659      	mov	r1, fp
 8004710:	018b      	lsls	r3, r1, #6
 8004712:	4651      	mov	r1, sl
 8004714:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004718:	4651      	mov	r1, sl
 800471a:	018a      	lsls	r2, r1, #6
 800471c:	4651      	mov	r1, sl
 800471e:	ebb2 0801 	subs.w	r8, r2, r1
 8004722:	4659      	mov	r1, fp
 8004724:	eb63 0901 	sbc.w	r9, r3, r1
 8004728:	f04f 0200 	mov.w	r2, #0
 800472c:	f04f 0300 	mov.w	r3, #0
 8004730:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004734:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004738:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800473c:	4690      	mov	r8, r2
 800473e:	4699      	mov	r9, r3
 8004740:	4623      	mov	r3, r4
 8004742:	eb18 0303 	adds.w	r3, r8, r3
 8004746:	613b      	str	r3, [r7, #16]
 8004748:	462b      	mov	r3, r5
 800474a:	eb49 0303 	adc.w	r3, r9, r3
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	f04f 0200 	mov.w	r2, #0
 8004754:	f04f 0300 	mov.w	r3, #0
 8004758:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800475c:	4629      	mov	r1, r5
 800475e:	024b      	lsls	r3, r1, #9
 8004760:	4621      	mov	r1, r4
 8004762:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004766:	4621      	mov	r1, r4
 8004768:	024a      	lsls	r2, r1, #9
 800476a:	4610      	mov	r0, r2
 800476c:	4619      	mov	r1, r3
 800476e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004772:	2200      	movs	r2, #0
 8004774:	65bb      	str	r3, [r7, #88]	; 0x58
 8004776:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004778:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800477c:	f7fb fd42 	bl	8000204 <__aeabi_uldivmod>
 8004780:	4602      	mov	r2, r0
 8004782:	460b      	mov	r3, r1
 8004784:	4613      	mov	r3, r2
 8004786:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800478a:	e065      	b.n	8004858 <HAL_RCC_GetSysClockFreq+0x420>
 800478c:	40023800 	.word	0x40023800
 8004790:	00f42400 	.word	0x00f42400
 8004794:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004798:	4b3d      	ldr	r3, [pc, #244]	; (8004890 <HAL_RCC_GetSysClockFreq+0x458>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	099b      	lsrs	r3, r3, #6
 800479e:	2200      	movs	r2, #0
 80047a0:	4618      	mov	r0, r3
 80047a2:	4611      	mov	r1, r2
 80047a4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80047a8:	653b      	str	r3, [r7, #80]	; 0x50
 80047aa:	2300      	movs	r3, #0
 80047ac:	657b      	str	r3, [r7, #84]	; 0x54
 80047ae:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80047b2:	4642      	mov	r2, r8
 80047b4:	464b      	mov	r3, r9
 80047b6:	f04f 0000 	mov.w	r0, #0
 80047ba:	f04f 0100 	mov.w	r1, #0
 80047be:	0159      	lsls	r1, r3, #5
 80047c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047c4:	0150      	lsls	r0, r2, #5
 80047c6:	4602      	mov	r2, r0
 80047c8:	460b      	mov	r3, r1
 80047ca:	4641      	mov	r1, r8
 80047cc:	1a51      	subs	r1, r2, r1
 80047ce:	60b9      	str	r1, [r7, #8]
 80047d0:	4649      	mov	r1, r9
 80047d2:	eb63 0301 	sbc.w	r3, r3, r1
 80047d6:	60fb      	str	r3, [r7, #12]
 80047d8:	f04f 0200 	mov.w	r2, #0
 80047dc:	f04f 0300 	mov.w	r3, #0
 80047e0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80047e4:	4659      	mov	r1, fp
 80047e6:	018b      	lsls	r3, r1, #6
 80047e8:	4651      	mov	r1, sl
 80047ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047ee:	4651      	mov	r1, sl
 80047f0:	018a      	lsls	r2, r1, #6
 80047f2:	4651      	mov	r1, sl
 80047f4:	1a54      	subs	r4, r2, r1
 80047f6:	4659      	mov	r1, fp
 80047f8:	eb63 0501 	sbc.w	r5, r3, r1
 80047fc:	f04f 0200 	mov.w	r2, #0
 8004800:	f04f 0300 	mov.w	r3, #0
 8004804:	00eb      	lsls	r3, r5, #3
 8004806:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800480a:	00e2      	lsls	r2, r4, #3
 800480c:	4614      	mov	r4, r2
 800480e:	461d      	mov	r5, r3
 8004810:	4643      	mov	r3, r8
 8004812:	18e3      	adds	r3, r4, r3
 8004814:	603b      	str	r3, [r7, #0]
 8004816:	464b      	mov	r3, r9
 8004818:	eb45 0303 	adc.w	r3, r5, r3
 800481c:	607b      	str	r3, [r7, #4]
 800481e:	f04f 0200 	mov.w	r2, #0
 8004822:	f04f 0300 	mov.w	r3, #0
 8004826:	e9d7 4500 	ldrd	r4, r5, [r7]
 800482a:	4629      	mov	r1, r5
 800482c:	028b      	lsls	r3, r1, #10
 800482e:	4621      	mov	r1, r4
 8004830:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004834:	4621      	mov	r1, r4
 8004836:	028a      	lsls	r2, r1, #10
 8004838:	4610      	mov	r0, r2
 800483a:	4619      	mov	r1, r3
 800483c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004840:	2200      	movs	r2, #0
 8004842:	64bb      	str	r3, [r7, #72]	; 0x48
 8004844:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004846:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800484a:	f7fb fcdb 	bl	8000204 <__aeabi_uldivmod>
 800484e:	4602      	mov	r2, r0
 8004850:	460b      	mov	r3, r1
 8004852:	4613      	mov	r3, r2
 8004854:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004858:	4b0d      	ldr	r3, [pc, #52]	; (8004890 <HAL_RCC_GetSysClockFreq+0x458>)
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	0f1b      	lsrs	r3, r3, #28
 800485e:	f003 0307 	and.w	r3, r3, #7
 8004862:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004866:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800486a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800486e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004872:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004876:	e003      	b.n	8004880 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004878:	4b06      	ldr	r3, [pc, #24]	; (8004894 <HAL_RCC_GetSysClockFreq+0x45c>)
 800487a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800487e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004880:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004884:	4618      	mov	r0, r3
 8004886:	37b8      	adds	r7, #184	; 0xb8
 8004888:	46bd      	mov	sp, r7
 800488a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800488e:	bf00      	nop
 8004890:	40023800 	.word	0x40023800
 8004894:	00f42400 	.word	0x00f42400

08004898 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e28d      	b.n	8004dc6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f000 8083 	beq.w	80049be <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80048b8:	4b94      	ldr	r3, [pc, #592]	; (8004b0c <HAL_RCC_OscConfig+0x274>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f003 030c 	and.w	r3, r3, #12
 80048c0:	2b04      	cmp	r3, #4
 80048c2:	d019      	beq.n	80048f8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80048c4:	4b91      	ldr	r3, [pc, #580]	; (8004b0c <HAL_RCC_OscConfig+0x274>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d106      	bne.n	80048de <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80048d0:	4b8e      	ldr	r3, [pc, #568]	; (8004b0c <HAL_RCC_OscConfig+0x274>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048dc:	d00c      	beq.n	80048f8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048de:	4b8b      	ldr	r3, [pc, #556]	; (8004b0c <HAL_RCC_OscConfig+0x274>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80048e6:	2b0c      	cmp	r3, #12
 80048e8:	d112      	bne.n	8004910 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048ea:	4b88      	ldr	r3, [pc, #544]	; (8004b0c <HAL_RCC_OscConfig+0x274>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048f6:	d10b      	bne.n	8004910 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048f8:	4b84      	ldr	r3, [pc, #528]	; (8004b0c <HAL_RCC_OscConfig+0x274>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d05b      	beq.n	80049bc <HAL_RCC_OscConfig+0x124>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d157      	bne.n	80049bc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e25a      	b.n	8004dc6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004918:	d106      	bne.n	8004928 <HAL_RCC_OscConfig+0x90>
 800491a:	4b7c      	ldr	r3, [pc, #496]	; (8004b0c <HAL_RCC_OscConfig+0x274>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a7b      	ldr	r2, [pc, #492]	; (8004b0c <HAL_RCC_OscConfig+0x274>)
 8004920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	e01d      	b.n	8004964 <HAL_RCC_OscConfig+0xcc>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004930:	d10c      	bne.n	800494c <HAL_RCC_OscConfig+0xb4>
 8004932:	4b76      	ldr	r3, [pc, #472]	; (8004b0c <HAL_RCC_OscConfig+0x274>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a75      	ldr	r2, [pc, #468]	; (8004b0c <HAL_RCC_OscConfig+0x274>)
 8004938:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800493c:	6013      	str	r3, [r2, #0]
 800493e:	4b73      	ldr	r3, [pc, #460]	; (8004b0c <HAL_RCC_OscConfig+0x274>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a72      	ldr	r2, [pc, #456]	; (8004b0c <HAL_RCC_OscConfig+0x274>)
 8004944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004948:	6013      	str	r3, [r2, #0]
 800494a:	e00b      	b.n	8004964 <HAL_RCC_OscConfig+0xcc>
 800494c:	4b6f      	ldr	r3, [pc, #444]	; (8004b0c <HAL_RCC_OscConfig+0x274>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a6e      	ldr	r2, [pc, #440]	; (8004b0c <HAL_RCC_OscConfig+0x274>)
 8004952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004956:	6013      	str	r3, [r2, #0]
 8004958:	4b6c      	ldr	r3, [pc, #432]	; (8004b0c <HAL_RCC_OscConfig+0x274>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a6b      	ldr	r2, [pc, #428]	; (8004b0c <HAL_RCC_OscConfig+0x274>)
 800495e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004962:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d013      	beq.n	8004994 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800496c:	f7fc ff1e 	bl	80017ac <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004974:	f7fc ff1a 	bl	80017ac <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b64      	cmp	r3, #100	; 0x64
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e21f      	b.n	8004dc6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004986:	4b61      	ldr	r3, [pc, #388]	; (8004b0c <HAL_RCC_OscConfig+0x274>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d0f0      	beq.n	8004974 <HAL_RCC_OscConfig+0xdc>
 8004992:	e014      	b.n	80049be <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004994:	f7fc ff0a 	bl	80017ac <HAL_GetTick>
 8004998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800499a:	e008      	b.n	80049ae <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800499c:	f7fc ff06 	bl	80017ac <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b64      	cmp	r3, #100	; 0x64
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e20b      	b.n	8004dc6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ae:	4b57      	ldr	r3, [pc, #348]	; (8004b0c <HAL_RCC_OscConfig+0x274>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1f0      	bne.n	800499c <HAL_RCC_OscConfig+0x104>
 80049ba:	e000      	b.n	80049be <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d06f      	beq.n	8004aaa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80049ca:	4b50      	ldr	r3, [pc, #320]	; (8004b0c <HAL_RCC_OscConfig+0x274>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f003 030c 	and.w	r3, r3, #12
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d017      	beq.n	8004a06 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80049d6:	4b4d      	ldr	r3, [pc, #308]	; (8004b0c <HAL_RCC_OscConfig+0x274>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80049de:	2b08      	cmp	r3, #8
 80049e0:	d105      	bne.n	80049ee <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80049e2:	4b4a      	ldr	r3, [pc, #296]	; (8004b0c <HAL_RCC_OscConfig+0x274>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00b      	beq.n	8004a06 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ee:	4b47      	ldr	r3, [pc, #284]	; (8004b0c <HAL_RCC_OscConfig+0x274>)
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80049f6:	2b0c      	cmp	r3, #12
 80049f8:	d11c      	bne.n	8004a34 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049fa:	4b44      	ldr	r3, [pc, #272]	; (8004b0c <HAL_RCC_OscConfig+0x274>)
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d116      	bne.n	8004a34 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a06:	4b41      	ldr	r3, [pc, #260]	; (8004b0c <HAL_RCC_OscConfig+0x274>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d005      	beq.n	8004a1e <HAL_RCC_OscConfig+0x186>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d001      	beq.n	8004a1e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e1d3      	b.n	8004dc6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a1e:	4b3b      	ldr	r3, [pc, #236]	; (8004b0c <HAL_RCC_OscConfig+0x274>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	4937      	ldr	r1, [pc, #220]	; (8004b0c <HAL_RCC_OscConfig+0x274>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a32:	e03a      	b.n	8004aaa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d020      	beq.n	8004a7e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a3c:	4b34      	ldr	r3, [pc, #208]	; (8004b10 <HAL_RCC_OscConfig+0x278>)
 8004a3e:	2201      	movs	r2, #1
 8004a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a42:	f7fc feb3 	bl	80017ac <HAL_GetTick>
 8004a46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a48:	e008      	b.n	8004a5c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a4a:	f7fc feaf 	bl	80017ac <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d901      	bls.n	8004a5c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e1b4      	b.n	8004dc6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a5c:	4b2b      	ldr	r3, [pc, #172]	; (8004b0c <HAL_RCC_OscConfig+0x274>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0302 	and.w	r3, r3, #2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d0f0      	beq.n	8004a4a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a68:	4b28      	ldr	r3, [pc, #160]	; (8004b0c <HAL_RCC_OscConfig+0x274>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	00db      	lsls	r3, r3, #3
 8004a76:	4925      	ldr	r1, [pc, #148]	; (8004b0c <HAL_RCC_OscConfig+0x274>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	600b      	str	r3, [r1, #0]
 8004a7c:	e015      	b.n	8004aaa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a7e:	4b24      	ldr	r3, [pc, #144]	; (8004b10 <HAL_RCC_OscConfig+0x278>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a84:	f7fc fe92 	bl	80017ac <HAL_GetTick>
 8004a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a8a:	e008      	b.n	8004a9e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a8c:	f7fc fe8e 	bl	80017ac <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e193      	b.n	8004dc6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a9e:	4b1b      	ldr	r3, [pc, #108]	; (8004b0c <HAL_RCC_OscConfig+0x274>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1f0      	bne.n	8004a8c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0308 	and.w	r3, r3, #8
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d036      	beq.n	8004b24 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d016      	beq.n	8004aec <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004abe:	4b15      	ldr	r3, [pc, #84]	; (8004b14 <HAL_RCC_OscConfig+0x27c>)
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac4:	f7fc fe72 	bl	80017ac <HAL_GetTick>
 8004ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aca:	e008      	b.n	8004ade <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004acc:	f7fc fe6e 	bl	80017ac <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e173      	b.n	8004dc6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ade:	4b0b      	ldr	r3, [pc, #44]	; (8004b0c <HAL_RCC_OscConfig+0x274>)
 8004ae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d0f0      	beq.n	8004acc <HAL_RCC_OscConfig+0x234>
 8004aea:	e01b      	b.n	8004b24 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004aec:	4b09      	ldr	r3, [pc, #36]	; (8004b14 <HAL_RCC_OscConfig+0x27c>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af2:	f7fc fe5b 	bl	80017ac <HAL_GetTick>
 8004af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004af8:	e00e      	b.n	8004b18 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004afa:	f7fc fe57 	bl	80017ac <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d907      	bls.n	8004b18 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e15c      	b.n	8004dc6 <HAL_RCC_OscConfig+0x52e>
 8004b0c:	40023800 	.word	0x40023800
 8004b10:	42470000 	.word	0x42470000
 8004b14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b18:	4b8a      	ldr	r3, [pc, #552]	; (8004d44 <HAL_RCC_OscConfig+0x4ac>)
 8004b1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b1c:	f003 0302 	and.w	r3, r3, #2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1ea      	bne.n	8004afa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0304 	and.w	r3, r3, #4
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 8097 	beq.w	8004c60 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b32:	2300      	movs	r3, #0
 8004b34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b36:	4b83      	ldr	r3, [pc, #524]	; (8004d44 <HAL_RCC_OscConfig+0x4ac>)
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10f      	bne.n	8004b62 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b42:	2300      	movs	r3, #0
 8004b44:	60bb      	str	r3, [r7, #8]
 8004b46:	4b7f      	ldr	r3, [pc, #508]	; (8004d44 <HAL_RCC_OscConfig+0x4ac>)
 8004b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4a:	4a7e      	ldr	r2, [pc, #504]	; (8004d44 <HAL_RCC_OscConfig+0x4ac>)
 8004b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b50:	6413      	str	r3, [r2, #64]	; 0x40
 8004b52:	4b7c      	ldr	r3, [pc, #496]	; (8004d44 <HAL_RCC_OscConfig+0x4ac>)
 8004b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b5a:	60bb      	str	r3, [r7, #8]
 8004b5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b62:	4b79      	ldr	r3, [pc, #484]	; (8004d48 <HAL_RCC_OscConfig+0x4b0>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d118      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b6e:	4b76      	ldr	r3, [pc, #472]	; (8004d48 <HAL_RCC_OscConfig+0x4b0>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a75      	ldr	r2, [pc, #468]	; (8004d48 <HAL_RCC_OscConfig+0x4b0>)
 8004b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b7a:	f7fc fe17 	bl	80017ac <HAL_GetTick>
 8004b7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b80:	e008      	b.n	8004b94 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b82:	f7fc fe13 	bl	80017ac <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d901      	bls.n	8004b94 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e118      	b.n	8004dc6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b94:	4b6c      	ldr	r3, [pc, #432]	; (8004d48 <HAL_RCC_OscConfig+0x4b0>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d0f0      	beq.n	8004b82 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d106      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x31e>
 8004ba8:	4b66      	ldr	r3, [pc, #408]	; (8004d44 <HAL_RCC_OscConfig+0x4ac>)
 8004baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bac:	4a65      	ldr	r2, [pc, #404]	; (8004d44 <HAL_RCC_OscConfig+0x4ac>)
 8004bae:	f043 0301 	orr.w	r3, r3, #1
 8004bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8004bb4:	e01c      	b.n	8004bf0 <HAL_RCC_OscConfig+0x358>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	2b05      	cmp	r3, #5
 8004bbc:	d10c      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x340>
 8004bbe:	4b61      	ldr	r3, [pc, #388]	; (8004d44 <HAL_RCC_OscConfig+0x4ac>)
 8004bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc2:	4a60      	ldr	r2, [pc, #384]	; (8004d44 <HAL_RCC_OscConfig+0x4ac>)
 8004bc4:	f043 0304 	orr.w	r3, r3, #4
 8004bc8:	6713      	str	r3, [r2, #112]	; 0x70
 8004bca:	4b5e      	ldr	r3, [pc, #376]	; (8004d44 <HAL_RCC_OscConfig+0x4ac>)
 8004bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bce:	4a5d      	ldr	r2, [pc, #372]	; (8004d44 <HAL_RCC_OscConfig+0x4ac>)
 8004bd0:	f043 0301 	orr.w	r3, r3, #1
 8004bd4:	6713      	str	r3, [r2, #112]	; 0x70
 8004bd6:	e00b      	b.n	8004bf0 <HAL_RCC_OscConfig+0x358>
 8004bd8:	4b5a      	ldr	r3, [pc, #360]	; (8004d44 <HAL_RCC_OscConfig+0x4ac>)
 8004bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bdc:	4a59      	ldr	r2, [pc, #356]	; (8004d44 <HAL_RCC_OscConfig+0x4ac>)
 8004bde:	f023 0301 	bic.w	r3, r3, #1
 8004be2:	6713      	str	r3, [r2, #112]	; 0x70
 8004be4:	4b57      	ldr	r3, [pc, #348]	; (8004d44 <HAL_RCC_OscConfig+0x4ac>)
 8004be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be8:	4a56      	ldr	r2, [pc, #344]	; (8004d44 <HAL_RCC_OscConfig+0x4ac>)
 8004bea:	f023 0304 	bic.w	r3, r3, #4
 8004bee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d015      	beq.n	8004c24 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf8:	f7fc fdd8 	bl	80017ac <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bfe:	e00a      	b.n	8004c16 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c00:	f7fc fdd4 	bl	80017ac <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e0d7      	b.n	8004dc6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c16:	4b4b      	ldr	r3, [pc, #300]	; (8004d44 <HAL_RCC_OscConfig+0x4ac>)
 8004c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d0ee      	beq.n	8004c00 <HAL_RCC_OscConfig+0x368>
 8004c22:	e014      	b.n	8004c4e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c24:	f7fc fdc2 	bl	80017ac <HAL_GetTick>
 8004c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c2a:	e00a      	b.n	8004c42 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c2c:	f7fc fdbe 	bl	80017ac <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e0c1      	b.n	8004dc6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c42:	4b40      	ldr	r3, [pc, #256]	; (8004d44 <HAL_RCC_OscConfig+0x4ac>)
 8004c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1ee      	bne.n	8004c2c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c4e:	7dfb      	ldrb	r3, [r7, #23]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d105      	bne.n	8004c60 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c54:	4b3b      	ldr	r3, [pc, #236]	; (8004d44 <HAL_RCC_OscConfig+0x4ac>)
 8004c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c58:	4a3a      	ldr	r2, [pc, #232]	; (8004d44 <HAL_RCC_OscConfig+0x4ac>)
 8004c5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c5e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f000 80ad 	beq.w	8004dc4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c6a:	4b36      	ldr	r3, [pc, #216]	; (8004d44 <HAL_RCC_OscConfig+0x4ac>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f003 030c 	and.w	r3, r3, #12
 8004c72:	2b08      	cmp	r3, #8
 8004c74:	d060      	beq.n	8004d38 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d145      	bne.n	8004d0a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c7e:	4b33      	ldr	r3, [pc, #204]	; (8004d4c <HAL_RCC_OscConfig+0x4b4>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c84:	f7fc fd92 	bl	80017ac <HAL_GetTick>
 8004c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c8a:	e008      	b.n	8004c9e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c8c:	f7fc fd8e 	bl	80017ac <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e093      	b.n	8004dc6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c9e:	4b29      	ldr	r3, [pc, #164]	; (8004d44 <HAL_RCC_OscConfig+0x4ac>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1f0      	bne.n	8004c8c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	69da      	ldr	r2, [r3, #28]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb8:	019b      	lsls	r3, r3, #6
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc0:	085b      	lsrs	r3, r3, #1
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	041b      	lsls	r3, r3, #16
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ccc:	061b      	lsls	r3, r3, #24
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd4:	071b      	lsls	r3, r3, #28
 8004cd6:	491b      	ldr	r1, [pc, #108]	; (8004d44 <HAL_RCC_OscConfig+0x4ac>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cdc:	4b1b      	ldr	r3, [pc, #108]	; (8004d4c <HAL_RCC_OscConfig+0x4b4>)
 8004cde:	2201      	movs	r2, #1
 8004ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce2:	f7fc fd63 	bl	80017ac <HAL_GetTick>
 8004ce6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ce8:	e008      	b.n	8004cfc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cea:	f7fc fd5f 	bl	80017ac <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d901      	bls.n	8004cfc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e064      	b.n	8004dc6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cfc:	4b11      	ldr	r3, [pc, #68]	; (8004d44 <HAL_RCC_OscConfig+0x4ac>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d0f0      	beq.n	8004cea <HAL_RCC_OscConfig+0x452>
 8004d08:	e05c      	b.n	8004dc4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d0a:	4b10      	ldr	r3, [pc, #64]	; (8004d4c <HAL_RCC_OscConfig+0x4b4>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d10:	f7fc fd4c 	bl	80017ac <HAL_GetTick>
 8004d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d16:	e008      	b.n	8004d2a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d18:	f7fc fd48 	bl	80017ac <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e04d      	b.n	8004dc6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d2a:	4b06      	ldr	r3, [pc, #24]	; (8004d44 <HAL_RCC_OscConfig+0x4ac>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1f0      	bne.n	8004d18 <HAL_RCC_OscConfig+0x480>
 8004d36:	e045      	b.n	8004dc4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d107      	bne.n	8004d50 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e040      	b.n	8004dc6 <HAL_RCC_OscConfig+0x52e>
 8004d44:	40023800 	.word	0x40023800
 8004d48:	40007000 	.word	0x40007000
 8004d4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d50:	4b1f      	ldr	r3, [pc, #124]	; (8004dd0 <HAL_RCC_OscConfig+0x538>)
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d030      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d129      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d122      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d80:	4013      	ands	r3, r2
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d119      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d96:	085b      	lsrs	r3, r3, #1
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d10f      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004daa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d107      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dba:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d001      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e000      	b.n	8004dc6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3718      	adds	r7, #24
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	40023800 	.word	0x40023800

08004dd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d101      	bne.n	8004de6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e07b      	b.n	8004ede <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d108      	bne.n	8004e00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004df6:	d009      	beq.n	8004e0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	61da      	str	r2, [r3, #28]
 8004dfe:	e005      	b.n	8004e0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d106      	bne.n	8004e2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7fc faac 	bl	8001384 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2202      	movs	r2, #2
 8004e30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e42:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e54:	431a      	orrs	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	f003 0302 	and.w	r3, r3, #2
 8004e68:	431a      	orrs	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	f003 0301 	and.w	r3, r3, #1
 8004e72:	431a      	orrs	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e7c:	431a      	orrs	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e86:	431a      	orrs	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
 8004e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e90:	ea42 0103 	orr.w	r1, r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e98:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	0c1b      	lsrs	r3, r3, #16
 8004eaa:	f003 0104 	and.w	r1, r3, #4
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb2:	f003 0210 	and.w	r2, r3, #16
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	69da      	ldr	r2, [r3, #28]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ecc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3708      	adds	r7, #8
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b082      	sub	sp, #8
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d101      	bne.n	8004ef8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e03f      	b.n	8004f78 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d106      	bne.n	8004f12 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f7fc fa81 	bl	8001414 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2224      	movs	r2, #36	; 0x24
 8004f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68da      	ldr	r2, [r3, #12]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f28:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 fdde 	bl	8005aec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	691a      	ldr	r2, [r3, #16]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f3e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	695a      	ldr	r2, [r3, #20]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f4e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68da      	ldr	r2, [r3, #12]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f5e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2220      	movs	r2, #32
 8004f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2220      	movs	r2, #32
 8004f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3708      	adds	r7, #8
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b08a      	sub	sp, #40	; 0x28
 8004f84:	af02      	add	r7, sp, #8
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	603b      	str	r3, [r7, #0]
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f90:	2300      	movs	r3, #0
 8004f92:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	2b20      	cmp	r3, #32
 8004f9e:	d17c      	bne.n	800509a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d002      	beq.n	8004fac <HAL_UART_Transmit+0x2c>
 8004fa6:	88fb      	ldrh	r3, [r7, #6]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d101      	bne.n	8004fb0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e075      	b.n	800509c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d101      	bne.n	8004fbe <HAL_UART_Transmit+0x3e>
 8004fba:	2302      	movs	r3, #2
 8004fbc:	e06e      	b.n	800509c <HAL_UART_Transmit+0x11c>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2221      	movs	r2, #33	; 0x21
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004fd4:	f7fc fbea 	bl	80017ac <HAL_GetTick>
 8004fd8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	88fa      	ldrh	r2, [r7, #6]
 8004fde:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	88fa      	ldrh	r2, [r7, #6]
 8004fe4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fee:	d108      	bne.n	8005002 <HAL_UART_Transmit+0x82>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d104      	bne.n	8005002 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	61bb      	str	r3, [r7, #24]
 8005000:	e003      	b.n	800500a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005006:	2300      	movs	r3, #0
 8005008:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005012:	e02a      	b.n	800506a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	9300      	str	r3, [sp, #0]
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	2200      	movs	r2, #0
 800501c:	2180      	movs	r1, #128	; 0x80
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	f000 fb1e 	bl	8005660 <UART_WaitOnFlagUntilTimeout>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d001      	beq.n	800502e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e036      	b.n	800509c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d10b      	bne.n	800504c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	881b      	ldrh	r3, [r3, #0]
 8005038:	461a      	mov	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005042:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	3302      	adds	r3, #2
 8005048:	61bb      	str	r3, [r7, #24]
 800504a:	e007      	b.n	800505c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	781a      	ldrb	r2, [r3, #0]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	3301      	adds	r3, #1
 800505a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005060:	b29b      	uxth	r3, r3
 8005062:	3b01      	subs	r3, #1
 8005064:	b29a      	uxth	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800506e:	b29b      	uxth	r3, r3
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1cf      	bne.n	8005014 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	9300      	str	r3, [sp, #0]
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	2200      	movs	r2, #0
 800507c:	2140      	movs	r1, #64	; 0x40
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f000 faee 	bl	8005660 <UART_WaitOnFlagUntilTimeout>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e006      	b.n	800509c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2220      	movs	r2, #32
 8005092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005096:	2300      	movs	r3, #0
 8005098:	e000      	b.n	800509c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800509a:	2302      	movs	r3, #2
  }
}
 800509c:	4618      	mov	r0, r3
 800509e:	3720      	adds	r7, #32
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	4613      	mov	r3, r2
 80050b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b20      	cmp	r3, #32
 80050bc:	d11d      	bne.n	80050fa <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d002      	beq.n	80050ca <HAL_UART_Receive_IT+0x26>
 80050c4:	88fb      	ldrh	r3, [r7, #6]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e016      	b.n	80050fc <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d101      	bne.n	80050dc <HAL_UART_Receive_IT+0x38>
 80050d8:	2302      	movs	r3, #2
 80050da:	e00f      	b.n	80050fc <HAL_UART_Receive_IT+0x58>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80050ea:	88fb      	ldrh	r3, [r7, #6]
 80050ec:	461a      	mov	r2, r3
 80050ee:	68b9      	ldr	r1, [r7, #8]
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f000 fb23 	bl	800573c <UART_Start_Receive_IT>
 80050f6:	4603      	mov	r3, r0
 80050f8:	e000      	b.n	80050fc <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80050fa:	2302      	movs	r3, #2
  }
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b0ba      	sub	sp, #232	; 0xe8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800512a:	2300      	movs	r3, #0
 800512c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005130:	2300      	movs	r3, #0
 8005132:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800513a:	f003 030f 	and.w	r3, r3, #15
 800513e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005142:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10f      	bne.n	800516a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800514a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800514e:	f003 0320 	and.w	r3, r3, #32
 8005152:	2b00      	cmp	r3, #0
 8005154:	d009      	beq.n	800516a <HAL_UART_IRQHandler+0x66>
 8005156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800515a:	f003 0320 	and.w	r3, r3, #32
 800515e:	2b00      	cmp	r3, #0
 8005160:	d003      	beq.n	800516a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 fc07 	bl	8005976 <UART_Receive_IT>
      return;
 8005168:	e256      	b.n	8005618 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800516a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800516e:	2b00      	cmp	r3, #0
 8005170:	f000 80de 	beq.w	8005330 <HAL_UART_IRQHandler+0x22c>
 8005174:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	2b00      	cmp	r3, #0
 800517e:	d106      	bne.n	800518e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005184:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005188:	2b00      	cmp	r3, #0
 800518a:	f000 80d1 	beq.w	8005330 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800518e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005192:	f003 0301 	and.w	r3, r3, #1
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00b      	beq.n	80051b2 <HAL_UART_IRQHandler+0xae>
 800519a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800519e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d005      	beq.n	80051b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051aa:	f043 0201 	orr.w	r2, r3, #1
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051b6:	f003 0304 	and.w	r3, r3, #4
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00b      	beq.n	80051d6 <HAL_UART_IRQHandler+0xd2>
 80051be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d005      	beq.n	80051d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ce:	f043 0202 	orr.w	r2, r3, #2
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00b      	beq.n	80051fa <HAL_UART_IRQHandler+0xf6>
 80051e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d005      	beq.n	80051fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f2:	f043 0204 	orr.w	r2, r3, #4
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80051fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051fe:	f003 0308 	and.w	r3, r3, #8
 8005202:	2b00      	cmp	r3, #0
 8005204:	d011      	beq.n	800522a <HAL_UART_IRQHandler+0x126>
 8005206:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800520a:	f003 0320 	and.w	r3, r3, #32
 800520e:	2b00      	cmp	r3, #0
 8005210:	d105      	bne.n	800521e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005212:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b00      	cmp	r3, #0
 800521c:	d005      	beq.n	800522a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005222:	f043 0208 	orr.w	r2, r3, #8
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522e:	2b00      	cmp	r3, #0
 8005230:	f000 81ed 	beq.w	800560e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005238:	f003 0320 	and.w	r3, r3, #32
 800523c:	2b00      	cmp	r3, #0
 800523e:	d008      	beq.n	8005252 <HAL_UART_IRQHandler+0x14e>
 8005240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005244:	f003 0320 	and.w	r3, r3, #32
 8005248:	2b00      	cmp	r3, #0
 800524a:	d002      	beq.n	8005252 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 fb92 	bl	8005976 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	695b      	ldr	r3, [r3, #20]
 8005258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800525c:	2b40      	cmp	r3, #64	; 0x40
 800525e:	bf0c      	ite	eq
 8005260:	2301      	moveq	r3, #1
 8005262:	2300      	movne	r3, #0
 8005264:	b2db      	uxtb	r3, r3
 8005266:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	f003 0308 	and.w	r3, r3, #8
 8005272:	2b00      	cmp	r3, #0
 8005274:	d103      	bne.n	800527e <HAL_UART_IRQHandler+0x17a>
 8005276:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800527a:	2b00      	cmp	r3, #0
 800527c:	d04f      	beq.n	800531e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 fa9a 	bl	80057b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800528e:	2b40      	cmp	r3, #64	; 0x40
 8005290:	d141      	bne.n	8005316 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	3314      	adds	r3, #20
 8005298:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80052a0:	e853 3f00 	ldrex	r3, [r3]
 80052a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80052a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	3314      	adds	r3, #20
 80052ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80052be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80052c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80052ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80052ce:	e841 2300 	strex	r3, r2, [r1]
 80052d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80052d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1d9      	bne.n	8005292 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d013      	beq.n	800530e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ea:	4a7d      	ldr	r2, [pc, #500]	; (80054e0 <HAL_UART_IRQHandler+0x3dc>)
 80052ec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fc fe7d 	bl	8001ff2 <HAL_DMA_Abort_IT>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d016      	beq.n	800532c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005308:	4610      	mov	r0, r2
 800530a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800530c:	e00e      	b.n	800532c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f990 	bl	8005634 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005314:	e00a      	b.n	800532c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 f98c 	bl	8005634 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800531c:	e006      	b.n	800532c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f988 	bl	8005634 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800532a:	e170      	b.n	800560e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800532c:	bf00      	nop
    return;
 800532e:	e16e      	b.n	800560e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005334:	2b01      	cmp	r3, #1
 8005336:	f040 814a 	bne.w	80055ce <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800533a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800533e:	f003 0310 	and.w	r3, r3, #16
 8005342:	2b00      	cmp	r3, #0
 8005344:	f000 8143 	beq.w	80055ce <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800534c:	f003 0310 	and.w	r3, r3, #16
 8005350:	2b00      	cmp	r3, #0
 8005352:	f000 813c 	beq.w	80055ce <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005356:	2300      	movs	r3, #0
 8005358:	60bb      	str	r3, [r7, #8]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	60bb      	str	r3, [r7, #8]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	60bb      	str	r3, [r7, #8]
 800536a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005376:	2b40      	cmp	r3, #64	; 0x40
 8005378:	f040 80b4 	bne.w	80054e4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005388:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800538c:	2b00      	cmp	r3, #0
 800538e:	f000 8140 	beq.w	8005612 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005396:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800539a:	429a      	cmp	r2, r3
 800539c:	f080 8139 	bcs.w	8005612 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80053a6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053b2:	f000 8088 	beq.w	80054c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	330c      	adds	r3, #12
 80053bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053c4:	e853 3f00 	ldrex	r3, [r3]
 80053c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80053cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80053d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	330c      	adds	r3, #12
 80053de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80053e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80053e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80053ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80053f2:	e841 2300 	strex	r3, r2, [r1]
 80053f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80053fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1d9      	bne.n	80053b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	3314      	adds	r3, #20
 8005408:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800540c:	e853 3f00 	ldrex	r3, [r3]
 8005410:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005412:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005414:	f023 0301 	bic.w	r3, r3, #1
 8005418:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	3314      	adds	r3, #20
 8005422:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005426:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800542a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800542e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005432:	e841 2300 	strex	r3, r2, [r1]
 8005436:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005438:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1e1      	bne.n	8005402 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	3314      	adds	r3, #20
 8005444:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005446:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005448:	e853 3f00 	ldrex	r3, [r3]
 800544c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800544e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005450:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005454:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	3314      	adds	r3, #20
 800545e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005462:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005464:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005466:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005468:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800546a:	e841 2300 	strex	r3, r2, [r1]
 800546e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005470:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1e3      	bne.n	800543e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2220      	movs	r2, #32
 800547a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	330c      	adds	r3, #12
 800548a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800548e:	e853 3f00 	ldrex	r3, [r3]
 8005492:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005494:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005496:	f023 0310 	bic.w	r3, r3, #16
 800549a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	330c      	adds	r3, #12
 80054a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80054a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80054aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80054ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054b0:	e841 2300 	strex	r3, r2, [r1]
 80054b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80054b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1e3      	bne.n	8005484 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7fc fd26 	bl	8001f12 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	4619      	mov	r1, r3
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 f8b6 	bl	8005648 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80054dc:	e099      	b.n	8005612 <HAL_UART_IRQHandler+0x50e>
 80054de:	bf00      	nop
 80054e0:	0800587f 	.word	0x0800587f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f000 808b 	beq.w	8005616 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005500:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005504:	2b00      	cmp	r3, #0
 8005506:	f000 8086 	beq.w	8005616 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	330c      	adds	r3, #12
 8005510:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005514:	e853 3f00 	ldrex	r3, [r3]
 8005518:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800551a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800551c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005520:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	330c      	adds	r3, #12
 800552a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800552e:	647a      	str	r2, [r7, #68]	; 0x44
 8005530:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005532:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005534:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005536:	e841 2300 	strex	r3, r2, [r1]
 800553a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800553c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1e3      	bne.n	800550a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	3314      	adds	r3, #20
 8005548:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554c:	e853 3f00 	ldrex	r3, [r3]
 8005550:	623b      	str	r3, [r7, #32]
   return(result);
 8005552:	6a3b      	ldr	r3, [r7, #32]
 8005554:	f023 0301 	bic.w	r3, r3, #1
 8005558:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	3314      	adds	r3, #20
 8005562:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005566:	633a      	str	r2, [r7, #48]	; 0x30
 8005568:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800556c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800556e:	e841 2300 	strex	r3, r2, [r1]
 8005572:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1e3      	bne.n	8005542 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2220      	movs	r2, #32
 800557e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	330c      	adds	r3, #12
 800558e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	e853 3f00 	ldrex	r3, [r3]
 8005596:	60fb      	str	r3, [r7, #12]
   return(result);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f023 0310 	bic.w	r3, r3, #16
 800559e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	330c      	adds	r3, #12
 80055a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80055ac:	61fa      	str	r2, [r7, #28]
 80055ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b0:	69b9      	ldr	r1, [r7, #24]
 80055b2:	69fa      	ldr	r2, [r7, #28]
 80055b4:	e841 2300 	strex	r3, r2, [r1]
 80055b8:	617b      	str	r3, [r7, #20]
   return(result);
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1e3      	bne.n	8005588 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80055c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80055c4:	4619      	mov	r1, r3
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 f83e 	bl	8005648 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80055cc:	e023      	b.n	8005616 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80055ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d009      	beq.n	80055ee <HAL_UART_IRQHandler+0x4ea>
 80055da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d003      	beq.n	80055ee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f95d 	bl	80058a6 <UART_Transmit_IT>
    return;
 80055ec:	e014      	b.n	8005618 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80055ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00e      	beq.n	8005618 <HAL_UART_IRQHandler+0x514>
 80055fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005602:	2b00      	cmp	r3, #0
 8005604:	d008      	beq.n	8005618 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 f99d 	bl	8005946 <UART_EndTransmit_IT>
    return;
 800560c:	e004      	b.n	8005618 <HAL_UART_IRQHandler+0x514>
    return;
 800560e:	bf00      	nop
 8005610:	e002      	b.n	8005618 <HAL_UART_IRQHandler+0x514>
      return;
 8005612:	bf00      	nop
 8005614:	e000      	b.n	8005618 <HAL_UART_IRQHandler+0x514>
      return;
 8005616:	bf00      	nop
  }
}
 8005618:	37e8      	adds	r7, #232	; 0xe8
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop

08005620 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	460b      	mov	r3, r1
 8005652:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b090      	sub	sp, #64	; 0x40
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	603b      	str	r3, [r7, #0]
 800566c:	4613      	mov	r3, r2
 800566e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005670:	e050      	b.n	8005714 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005672:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005678:	d04c      	beq.n	8005714 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800567a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800567c:	2b00      	cmp	r3, #0
 800567e:	d007      	beq.n	8005690 <UART_WaitOnFlagUntilTimeout+0x30>
 8005680:	f7fc f894 	bl	80017ac <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800568c:	429a      	cmp	r2, r3
 800568e:	d241      	bcs.n	8005714 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	330c      	adds	r3, #12
 8005696:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569a:	e853 3f00 	ldrex	r3, [r3]
 800569e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	330c      	adds	r3, #12
 80056ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80056b0:	637a      	str	r2, [r7, #52]	; 0x34
 80056b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056b8:	e841 2300 	strex	r3, r2, [r1]
 80056bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1e5      	bne.n	8005690 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	3314      	adds	r3, #20
 80056ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	e853 3f00 	ldrex	r3, [r3]
 80056d2:	613b      	str	r3, [r7, #16]
   return(result);
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	f023 0301 	bic.w	r3, r3, #1
 80056da:	63bb      	str	r3, [r7, #56]	; 0x38
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	3314      	adds	r3, #20
 80056e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056e4:	623a      	str	r2, [r7, #32]
 80056e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e8:	69f9      	ldr	r1, [r7, #28]
 80056ea:	6a3a      	ldr	r2, [r7, #32]
 80056ec:	e841 2300 	strex	r3, r2, [r1]
 80056f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1e5      	bne.n	80056c4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2220      	movs	r2, #32
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2220      	movs	r2, #32
 8005704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e00f      	b.n	8005734 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	4013      	ands	r3, r2
 800571e:	68ba      	ldr	r2, [r7, #8]
 8005720:	429a      	cmp	r2, r3
 8005722:	bf0c      	ite	eq
 8005724:	2301      	moveq	r3, #1
 8005726:	2300      	movne	r3, #0
 8005728:	b2db      	uxtb	r3, r3
 800572a:	461a      	mov	r2, r3
 800572c:	79fb      	ldrb	r3, [r7, #7]
 800572e:	429a      	cmp	r2, r3
 8005730:	d09f      	beq.n	8005672 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3740      	adds	r7, #64	; 0x40
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800573c:	b480      	push	{r7}
 800573e:	b085      	sub	sp, #20
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	4613      	mov	r3, r2
 8005748:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	68ba      	ldr	r2, [r7, #8]
 800574e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	88fa      	ldrh	r2, [r7, #6]
 8005754:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	88fa      	ldrh	r2, [r7, #6]
 800575a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2200      	movs	r2, #0
 8005760:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2222      	movs	r2, #34	; 0x22
 8005766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d007      	beq.n	800578a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68da      	ldr	r2, [r3, #12]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005788:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	695a      	ldr	r2, [r3, #20]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f042 0201 	orr.w	r2, r2, #1
 8005798:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68da      	ldr	r2, [r3, #12]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f042 0220 	orr.w	r2, r2, #32
 80057a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3714      	adds	r7, #20
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b095      	sub	sp, #84	; 0x54
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	330c      	adds	r3, #12
 80057c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ca:	e853 3f00 	ldrex	r3, [r3]
 80057ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80057d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	330c      	adds	r3, #12
 80057de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057e0:	643a      	str	r2, [r7, #64]	; 0x40
 80057e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80057e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057e8:	e841 2300 	strex	r3, r2, [r1]
 80057ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d1e5      	bne.n	80057c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	3314      	adds	r3, #20
 80057fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fc:	6a3b      	ldr	r3, [r7, #32]
 80057fe:	e853 3f00 	ldrex	r3, [r3]
 8005802:	61fb      	str	r3, [r7, #28]
   return(result);
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	f023 0301 	bic.w	r3, r3, #1
 800580a:	64bb      	str	r3, [r7, #72]	; 0x48
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	3314      	adds	r3, #20
 8005812:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005814:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005816:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005818:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800581a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800581c:	e841 2300 	strex	r3, r2, [r1]
 8005820:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005824:	2b00      	cmp	r3, #0
 8005826:	d1e5      	bne.n	80057f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800582c:	2b01      	cmp	r3, #1
 800582e:	d119      	bne.n	8005864 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	330c      	adds	r3, #12
 8005836:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	e853 3f00 	ldrex	r3, [r3]
 800583e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	f023 0310 	bic.w	r3, r3, #16
 8005846:	647b      	str	r3, [r7, #68]	; 0x44
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	330c      	adds	r3, #12
 800584e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005850:	61ba      	str	r2, [r7, #24]
 8005852:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005854:	6979      	ldr	r1, [r7, #20]
 8005856:	69ba      	ldr	r2, [r7, #24]
 8005858:	e841 2300 	strex	r3, r2, [r1]
 800585c:	613b      	str	r3, [r7, #16]
   return(result);
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1e5      	bne.n	8005830 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2220      	movs	r2, #32
 8005868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005872:	bf00      	nop
 8005874:	3754      	adds	r7, #84	; 0x54
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800587e:	b580      	push	{r7, lr}
 8005880:	b084      	sub	sp, #16
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f7ff fecb 	bl	8005634 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800589e:	bf00      	nop
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80058a6:	b480      	push	{r7}
 80058a8:	b085      	sub	sp, #20
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b21      	cmp	r3, #33	; 0x21
 80058b8:	d13e      	bne.n	8005938 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058c2:	d114      	bne.n	80058ee <UART_Transmit_IT+0x48>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d110      	bne.n	80058ee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a1b      	ldr	r3, [r3, #32]
 80058d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	881b      	ldrh	r3, [r3, #0]
 80058d6:	461a      	mov	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	1c9a      	adds	r2, r3, #2
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	621a      	str	r2, [r3, #32]
 80058ec:	e008      	b.n	8005900 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a1b      	ldr	r3, [r3, #32]
 80058f2:	1c59      	adds	r1, r3, #1
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	6211      	str	r1, [r2, #32]
 80058f8:	781a      	ldrb	r2, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005904:	b29b      	uxth	r3, r3
 8005906:	3b01      	subs	r3, #1
 8005908:	b29b      	uxth	r3, r3
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	4619      	mov	r1, r3
 800590e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10f      	bne.n	8005934 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68da      	ldr	r2, [r3, #12]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005922:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68da      	ldr	r2, [r3, #12]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005932:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005934:	2300      	movs	r3, #0
 8005936:	e000      	b.n	800593a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005938:	2302      	movs	r3, #2
  }
}
 800593a:	4618      	mov	r0, r3
 800593c:	3714      	adds	r7, #20
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr

08005946 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005946:	b580      	push	{r7, lr}
 8005948:	b082      	sub	sp, #8
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68da      	ldr	r2, [r3, #12]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800595c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2220      	movs	r2, #32
 8005962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f7ff fe5a 	bl	8005620 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3708      	adds	r7, #8
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b08c      	sub	sp, #48	; 0x30
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b22      	cmp	r3, #34	; 0x22
 8005988:	f040 80ab 	bne.w	8005ae2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005994:	d117      	bne.n	80059c6 <UART_Receive_IT+0x50>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d113      	bne.n	80059c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800599e:	2300      	movs	r3, #0
 80059a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059b4:	b29a      	uxth	r2, r3
 80059b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059be:	1c9a      	adds	r2, r3, #2
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	629a      	str	r2, [r3, #40]	; 0x28
 80059c4:	e026      	b.n	8005a14 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80059cc:	2300      	movs	r3, #0
 80059ce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059d8:	d007      	beq.n	80059ea <UART_Receive_IT+0x74>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d10a      	bne.n	80059f8 <UART_Receive_IT+0x82>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d106      	bne.n	80059f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	b2da      	uxtb	r2, r3
 80059f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f4:	701a      	strb	r2, [r3, #0]
 80059f6:	e008      	b.n	8005a0a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a04:	b2da      	uxtb	r2, r3
 8005a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a08:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0e:	1c5a      	adds	r2, r3, #1
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	4619      	mov	r1, r3
 8005a22:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d15a      	bne.n	8005ade <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68da      	ldr	r2, [r3, #12]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f022 0220 	bic.w	r2, r2, #32
 8005a36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68da      	ldr	r2, [r3, #12]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	695a      	ldr	r2, [r3, #20]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f022 0201 	bic.w	r2, r2, #1
 8005a56:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d135      	bne.n	8005ad4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	330c      	adds	r3, #12
 8005a74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	e853 3f00 	ldrex	r3, [r3]
 8005a7c:	613b      	str	r3, [r7, #16]
   return(result);
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	f023 0310 	bic.w	r3, r3, #16
 8005a84:	627b      	str	r3, [r7, #36]	; 0x24
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	330c      	adds	r3, #12
 8005a8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a8e:	623a      	str	r2, [r7, #32]
 8005a90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a92:	69f9      	ldr	r1, [r7, #28]
 8005a94:	6a3a      	ldr	r2, [r7, #32]
 8005a96:	e841 2300 	strex	r3, r2, [r1]
 8005a9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1e5      	bne.n	8005a6e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0310 	and.w	r3, r3, #16
 8005aac:	2b10      	cmp	r3, #16
 8005aae:	d10a      	bne.n	8005ac6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	60fb      	str	r3, [r7, #12]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	60fb      	str	r3, [r7, #12]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	60fb      	str	r3, [r7, #12]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005aca:	4619      	mov	r1, r3
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f7ff fdbb 	bl	8005648 <HAL_UARTEx_RxEventCallback>
 8005ad2:	e002      	b.n	8005ada <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f7fa fd21 	bl	800051c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005ada:	2300      	movs	r3, #0
 8005adc:	e002      	b.n	8005ae4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	e000      	b.n	8005ae4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005ae2:	2302      	movs	r3, #2
  }
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3730      	adds	r7, #48	; 0x30
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005af0:	b0c0      	sub	sp, #256	; 0x100
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b08:	68d9      	ldr	r1, [r3, #12]
 8005b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	ea40 0301 	orr.w	r3, r0, r1
 8005b14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b1a:	689a      	ldr	r2, [r3, #8]
 8005b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	431a      	orrs	r2, r3
 8005b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b30:	69db      	ldr	r3, [r3, #28]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005b44:	f021 010c 	bic.w	r1, r1, #12
 8005b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b52:	430b      	orrs	r3, r1
 8005b54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b66:	6999      	ldr	r1, [r3, #24]
 8005b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	ea40 0301 	orr.w	r3, r0, r1
 8005b72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	4b8f      	ldr	r3, [pc, #572]	; (8005db8 <UART_SetConfig+0x2cc>)
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d005      	beq.n	8005b8c <UART_SetConfig+0xa0>
 8005b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	4b8d      	ldr	r3, [pc, #564]	; (8005dbc <UART_SetConfig+0x2d0>)
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d104      	bne.n	8005b96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b8c:	f7fe f916 	bl	8003dbc <HAL_RCC_GetPCLK2Freq>
 8005b90:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005b94:	e003      	b.n	8005b9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b96:	f7fe f8fd 	bl	8003d94 <HAL_RCC_GetPCLK1Freq>
 8005b9a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ba2:	69db      	ldr	r3, [r3, #28]
 8005ba4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ba8:	f040 810c 	bne.w	8005dc4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005bac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005bb6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005bba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005bbe:	4622      	mov	r2, r4
 8005bc0:	462b      	mov	r3, r5
 8005bc2:	1891      	adds	r1, r2, r2
 8005bc4:	65b9      	str	r1, [r7, #88]	; 0x58
 8005bc6:	415b      	adcs	r3, r3
 8005bc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005bce:	4621      	mov	r1, r4
 8005bd0:	eb12 0801 	adds.w	r8, r2, r1
 8005bd4:	4629      	mov	r1, r5
 8005bd6:	eb43 0901 	adc.w	r9, r3, r1
 8005bda:	f04f 0200 	mov.w	r2, #0
 8005bde:	f04f 0300 	mov.w	r3, #0
 8005be2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005be6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005bea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005bee:	4690      	mov	r8, r2
 8005bf0:	4699      	mov	r9, r3
 8005bf2:	4623      	mov	r3, r4
 8005bf4:	eb18 0303 	adds.w	r3, r8, r3
 8005bf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005bfc:	462b      	mov	r3, r5
 8005bfe:	eb49 0303 	adc.w	r3, r9, r3
 8005c02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c12:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005c16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	18db      	adds	r3, r3, r3
 8005c1e:	653b      	str	r3, [r7, #80]	; 0x50
 8005c20:	4613      	mov	r3, r2
 8005c22:	eb42 0303 	adc.w	r3, r2, r3
 8005c26:	657b      	str	r3, [r7, #84]	; 0x54
 8005c28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005c2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005c30:	f7fa fae8 	bl	8000204 <__aeabi_uldivmod>
 8005c34:	4602      	mov	r2, r0
 8005c36:	460b      	mov	r3, r1
 8005c38:	4b61      	ldr	r3, [pc, #388]	; (8005dc0 <UART_SetConfig+0x2d4>)
 8005c3a:	fba3 2302 	umull	r2, r3, r3, r2
 8005c3e:	095b      	lsrs	r3, r3, #5
 8005c40:	011c      	lsls	r4, r3, #4
 8005c42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c46:	2200      	movs	r2, #0
 8005c48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c4c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005c50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005c54:	4642      	mov	r2, r8
 8005c56:	464b      	mov	r3, r9
 8005c58:	1891      	adds	r1, r2, r2
 8005c5a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005c5c:	415b      	adcs	r3, r3
 8005c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005c64:	4641      	mov	r1, r8
 8005c66:	eb12 0a01 	adds.w	sl, r2, r1
 8005c6a:	4649      	mov	r1, r9
 8005c6c:	eb43 0b01 	adc.w	fp, r3, r1
 8005c70:	f04f 0200 	mov.w	r2, #0
 8005c74:	f04f 0300 	mov.w	r3, #0
 8005c78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c84:	4692      	mov	sl, r2
 8005c86:	469b      	mov	fp, r3
 8005c88:	4643      	mov	r3, r8
 8005c8a:	eb1a 0303 	adds.w	r3, sl, r3
 8005c8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c92:	464b      	mov	r3, r9
 8005c94:	eb4b 0303 	adc.w	r3, fp, r3
 8005c98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ca8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005cac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	18db      	adds	r3, r3, r3
 8005cb4:	643b      	str	r3, [r7, #64]	; 0x40
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	eb42 0303 	adc.w	r3, r2, r3
 8005cbc:	647b      	str	r3, [r7, #68]	; 0x44
 8005cbe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005cc2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005cc6:	f7fa fa9d 	bl	8000204 <__aeabi_uldivmod>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	460b      	mov	r3, r1
 8005cce:	4611      	mov	r1, r2
 8005cd0:	4b3b      	ldr	r3, [pc, #236]	; (8005dc0 <UART_SetConfig+0x2d4>)
 8005cd2:	fba3 2301 	umull	r2, r3, r3, r1
 8005cd6:	095b      	lsrs	r3, r3, #5
 8005cd8:	2264      	movs	r2, #100	; 0x64
 8005cda:	fb02 f303 	mul.w	r3, r2, r3
 8005cde:	1acb      	subs	r3, r1, r3
 8005ce0:	00db      	lsls	r3, r3, #3
 8005ce2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005ce6:	4b36      	ldr	r3, [pc, #216]	; (8005dc0 <UART_SetConfig+0x2d4>)
 8005ce8:	fba3 2302 	umull	r2, r3, r3, r2
 8005cec:	095b      	lsrs	r3, r3, #5
 8005cee:	005b      	lsls	r3, r3, #1
 8005cf0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005cf4:	441c      	add	r4, r3
 8005cf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d00:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005d04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005d08:	4642      	mov	r2, r8
 8005d0a:	464b      	mov	r3, r9
 8005d0c:	1891      	adds	r1, r2, r2
 8005d0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005d10:	415b      	adcs	r3, r3
 8005d12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005d18:	4641      	mov	r1, r8
 8005d1a:	1851      	adds	r1, r2, r1
 8005d1c:	6339      	str	r1, [r7, #48]	; 0x30
 8005d1e:	4649      	mov	r1, r9
 8005d20:	414b      	adcs	r3, r1
 8005d22:	637b      	str	r3, [r7, #52]	; 0x34
 8005d24:	f04f 0200 	mov.w	r2, #0
 8005d28:	f04f 0300 	mov.w	r3, #0
 8005d2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005d30:	4659      	mov	r1, fp
 8005d32:	00cb      	lsls	r3, r1, #3
 8005d34:	4651      	mov	r1, sl
 8005d36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d3a:	4651      	mov	r1, sl
 8005d3c:	00ca      	lsls	r2, r1, #3
 8005d3e:	4610      	mov	r0, r2
 8005d40:	4619      	mov	r1, r3
 8005d42:	4603      	mov	r3, r0
 8005d44:	4642      	mov	r2, r8
 8005d46:	189b      	adds	r3, r3, r2
 8005d48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d4c:	464b      	mov	r3, r9
 8005d4e:	460a      	mov	r2, r1
 8005d50:	eb42 0303 	adc.w	r3, r2, r3
 8005d54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d64:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005d68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	18db      	adds	r3, r3, r3
 8005d70:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d72:	4613      	mov	r3, r2
 8005d74:	eb42 0303 	adc.w	r3, r2, r3
 8005d78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005d82:	f7fa fa3f 	bl	8000204 <__aeabi_uldivmod>
 8005d86:	4602      	mov	r2, r0
 8005d88:	460b      	mov	r3, r1
 8005d8a:	4b0d      	ldr	r3, [pc, #52]	; (8005dc0 <UART_SetConfig+0x2d4>)
 8005d8c:	fba3 1302 	umull	r1, r3, r3, r2
 8005d90:	095b      	lsrs	r3, r3, #5
 8005d92:	2164      	movs	r1, #100	; 0x64
 8005d94:	fb01 f303 	mul.w	r3, r1, r3
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	00db      	lsls	r3, r3, #3
 8005d9c:	3332      	adds	r3, #50	; 0x32
 8005d9e:	4a08      	ldr	r2, [pc, #32]	; (8005dc0 <UART_SetConfig+0x2d4>)
 8005da0:	fba2 2303 	umull	r2, r3, r2, r3
 8005da4:	095b      	lsrs	r3, r3, #5
 8005da6:	f003 0207 	and.w	r2, r3, #7
 8005daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4422      	add	r2, r4
 8005db2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005db4:	e106      	b.n	8005fc4 <UART_SetConfig+0x4d8>
 8005db6:	bf00      	nop
 8005db8:	40011000 	.word	0x40011000
 8005dbc:	40011400 	.word	0x40011400
 8005dc0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005dc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005dce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005dd2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005dd6:	4642      	mov	r2, r8
 8005dd8:	464b      	mov	r3, r9
 8005dda:	1891      	adds	r1, r2, r2
 8005ddc:	6239      	str	r1, [r7, #32]
 8005dde:	415b      	adcs	r3, r3
 8005de0:	627b      	str	r3, [r7, #36]	; 0x24
 8005de2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005de6:	4641      	mov	r1, r8
 8005de8:	1854      	adds	r4, r2, r1
 8005dea:	4649      	mov	r1, r9
 8005dec:	eb43 0501 	adc.w	r5, r3, r1
 8005df0:	f04f 0200 	mov.w	r2, #0
 8005df4:	f04f 0300 	mov.w	r3, #0
 8005df8:	00eb      	lsls	r3, r5, #3
 8005dfa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005dfe:	00e2      	lsls	r2, r4, #3
 8005e00:	4614      	mov	r4, r2
 8005e02:	461d      	mov	r5, r3
 8005e04:	4643      	mov	r3, r8
 8005e06:	18e3      	adds	r3, r4, r3
 8005e08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005e0c:	464b      	mov	r3, r9
 8005e0e:	eb45 0303 	adc.w	r3, r5, r3
 8005e12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e26:	f04f 0200 	mov.w	r2, #0
 8005e2a:	f04f 0300 	mov.w	r3, #0
 8005e2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005e32:	4629      	mov	r1, r5
 8005e34:	008b      	lsls	r3, r1, #2
 8005e36:	4621      	mov	r1, r4
 8005e38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e3c:	4621      	mov	r1, r4
 8005e3e:	008a      	lsls	r2, r1, #2
 8005e40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005e44:	f7fa f9de 	bl	8000204 <__aeabi_uldivmod>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	4b60      	ldr	r3, [pc, #384]	; (8005fd0 <UART_SetConfig+0x4e4>)
 8005e4e:	fba3 2302 	umull	r2, r3, r3, r2
 8005e52:	095b      	lsrs	r3, r3, #5
 8005e54:	011c      	lsls	r4, r3, #4
 8005e56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e60:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005e64:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005e68:	4642      	mov	r2, r8
 8005e6a:	464b      	mov	r3, r9
 8005e6c:	1891      	adds	r1, r2, r2
 8005e6e:	61b9      	str	r1, [r7, #24]
 8005e70:	415b      	adcs	r3, r3
 8005e72:	61fb      	str	r3, [r7, #28]
 8005e74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e78:	4641      	mov	r1, r8
 8005e7a:	1851      	adds	r1, r2, r1
 8005e7c:	6139      	str	r1, [r7, #16]
 8005e7e:	4649      	mov	r1, r9
 8005e80:	414b      	adcs	r3, r1
 8005e82:	617b      	str	r3, [r7, #20]
 8005e84:	f04f 0200 	mov.w	r2, #0
 8005e88:	f04f 0300 	mov.w	r3, #0
 8005e8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e90:	4659      	mov	r1, fp
 8005e92:	00cb      	lsls	r3, r1, #3
 8005e94:	4651      	mov	r1, sl
 8005e96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e9a:	4651      	mov	r1, sl
 8005e9c:	00ca      	lsls	r2, r1, #3
 8005e9e:	4610      	mov	r0, r2
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	4642      	mov	r2, r8
 8005ea6:	189b      	adds	r3, r3, r2
 8005ea8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005eac:	464b      	mov	r3, r9
 8005eae:	460a      	mov	r2, r1
 8005eb0:	eb42 0303 	adc.w	r3, r2, r3
 8005eb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ec2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005ec4:	f04f 0200 	mov.w	r2, #0
 8005ec8:	f04f 0300 	mov.w	r3, #0
 8005ecc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005ed0:	4649      	mov	r1, r9
 8005ed2:	008b      	lsls	r3, r1, #2
 8005ed4:	4641      	mov	r1, r8
 8005ed6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005eda:	4641      	mov	r1, r8
 8005edc:	008a      	lsls	r2, r1, #2
 8005ede:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005ee2:	f7fa f98f 	bl	8000204 <__aeabi_uldivmod>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	460b      	mov	r3, r1
 8005eea:	4611      	mov	r1, r2
 8005eec:	4b38      	ldr	r3, [pc, #224]	; (8005fd0 <UART_SetConfig+0x4e4>)
 8005eee:	fba3 2301 	umull	r2, r3, r3, r1
 8005ef2:	095b      	lsrs	r3, r3, #5
 8005ef4:	2264      	movs	r2, #100	; 0x64
 8005ef6:	fb02 f303 	mul.w	r3, r2, r3
 8005efa:	1acb      	subs	r3, r1, r3
 8005efc:	011b      	lsls	r3, r3, #4
 8005efe:	3332      	adds	r3, #50	; 0x32
 8005f00:	4a33      	ldr	r2, [pc, #204]	; (8005fd0 <UART_SetConfig+0x4e4>)
 8005f02:	fba2 2303 	umull	r2, r3, r2, r3
 8005f06:	095b      	lsrs	r3, r3, #5
 8005f08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f0c:	441c      	add	r4, r3
 8005f0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f12:	2200      	movs	r2, #0
 8005f14:	673b      	str	r3, [r7, #112]	; 0x70
 8005f16:	677a      	str	r2, [r7, #116]	; 0x74
 8005f18:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005f1c:	4642      	mov	r2, r8
 8005f1e:	464b      	mov	r3, r9
 8005f20:	1891      	adds	r1, r2, r2
 8005f22:	60b9      	str	r1, [r7, #8]
 8005f24:	415b      	adcs	r3, r3
 8005f26:	60fb      	str	r3, [r7, #12]
 8005f28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f2c:	4641      	mov	r1, r8
 8005f2e:	1851      	adds	r1, r2, r1
 8005f30:	6039      	str	r1, [r7, #0]
 8005f32:	4649      	mov	r1, r9
 8005f34:	414b      	adcs	r3, r1
 8005f36:	607b      	str	r3, [r7, #4]
 8005f38:	f04f 0200 	mov.w	r2, #0
 8005f3c:	f04f 0300 	mov.w	r3, #0
 8005f40:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f44:	4659      	mov	r1, fp
 8005f46:	00cb      	lsls	r3, r1, #3
 8005f48:	4651      	mov	r1, sl
 8005f4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f4e:	4651      	mov	r1, sl
 8005f50:	00ca      	lsls	r2, r1, #3
 8005f52:	4610      	mov	r0, r2
 8005f54:	4619      	mov	r1, r3
 8005f56:	4603      	mov	r3, r0
 8005f58:	4642      	mov	r2, r8
 8005f5a:	189b      	adds	r3, r3, r2
 8005f5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f5e:	464b      	mov	r3, r9
 8005f60:	460a      	mov	r2, r1
 8005f62:	eb42 0303 	adc.w	r3, r2, r3
 8005f66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	663b      	str	r3, [r7, #96]	; 0x60
 8005f72:	667a      	str	r2, [r7, #100]	; 0x64
 8005f74:	f04f 0200 	mov.w	r2, #0
 8005f78:	f04f 0300 	mov.w	r3, #0
 8005f7c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005f80:	4649      	mov	r1, r9
 8005f82:	008b      	lsls	r3, r1, #2
 8005f84:	4641      	mov	r1, r8
 8005f86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f8a:	4641      	mov	r1, r8
 8005f8c:	008a      	lsls	r2, r1, #2
 8005f8e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005f92:	f7fa f937 	bl	8000204 <__aeabi_uldivmod>
 8005f96:	4602      	mov	r2, r0
 8005f98:	460b      	mov	r3, r1
 8005f9a:	4b0d      	ldr	r3, [pc, #52]	; (8005fd0 <UART_SetConfig+0x4e4>)
 8005f9c:	fba3 1302 	umull	r1, r3, r3, r2
 8005fa0:	095b      	lsrs	r3, r3, #5
 8005fa2:	2164      	movs	r1, #100	; 0x64
 8005fa4:	fb01 f303 	mul.w	r3, r1, r3
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	011b      	lsls	r3, r3, #4
 8005fac:	3332      	adds	r3, #50	; 0x32
 8005fae:	4a08      	ldr	r2, [pc, #32]	; (8005fd0 <UART_SetConfig+0x4e4>)
 8005fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb4:	095b      	lsrs	r3, r3, #5
 8005fb6:	f003 020f 	and.w	r2, r3, #15
 8005fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4422      	add	r2, r4
 8005fc2:	609a      	str	r2, [r3, #8]
}
 8005fc4:	bf00      	nop
 8005fc6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fd0:	51eb851f 	.word	0x51eb851f

08005fd4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fd4:	b084      	sub	sp, #16
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b084      	sub	sp, #16
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
 8005fde:	f107 001c 	add.w	r0, r7, #28
 8005fe2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d122      	bne.n	8006032 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006000:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006016:	2b01      	cmp	r3, #1
 8006018:	d105      	bne.n	8006026 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f001 fbe8 	bl	80077fc <USB_CoreReset>
 800602c:	4603      	mov	r3, r0
 800602e:	73fb      	strb	r3, [r7, #15]
 8006030:	e01a      	b.n	8006068 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f001 fbdc 	bl	80077fc <USB_CoreReset>
 8006044:	4603      	mov	r3, r0
 8006046:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006048:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800604a:	2b00      	cmp	r3, #0
 800604c:	d106      	bne.n	800605c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006052:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	639a      	str	r2, [r3, #56]	; 0x38
 800605a:	e005      	b.n	8006068 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006060:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606a:	2b01      	cmp	r3, #1
 800606c:	d10b      	bne.n	8006086 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	f043 0206 	orr.w	r2, r3, #6
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	f043 0220 	orr.w	r2, r3, #32
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006086:	7bfb      	ldrb	r3, [r7, #15]
}
 8006088:	4618      	mov	r0, r3
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006092:	b004      	add	sp, #16
 8006094:	4770      	bx	lr
	...

08006098 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006098:	b480      	push	{r7}
 800609a:	b087      	sub	sp, #28
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	4613      	mov	r3, r2
 80060a4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80060a6:	79fb      	ldrb	r3, [r7, #7]
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d165      	bne.n	8006178 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	4a41      	ldr	r2, [pc, #260]	; (80061b4 <USB_SetTurnaroundTime+0x11c>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d906      	bls.n	80060c2 <USB_SetTurnaroundTime+0x2a>
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	4a40      	ldr	r2, [pc, #256]	; (80061b8 <USB_SetTurnaroundTime+0x120>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d202      	bcs.n	80060c2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80060bc:	230f      	movs	r3, #15
 80060be:	617b      	str	r3, [r7, #20]
 80060c0:	e062      	b.n	8006188 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	4a3c      	ldr	r2, [pc, #240]	; (80061b8 <USB_SetTurnaroundTime+0x120>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d306      	bcc.n	80060d8 <USB_SetTurnaroundTime+0x40>
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	4a3b      	ldr	r2, [pc, #236]	; (80061bc <USB_SetTurnaroundTime+0x124>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d202      	bcs.n	80060d8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80060d2:	230e      	movs	r3, #14
 80060d4:	617b      	str	r3, [r7, #20]
 80060d6:	e057      	b.n	8006188 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	4a38      	ldr	r2, [pc, #224]	; (80061bc <USB_SetTurnaroundTime+0x124>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d306      	bcc.n	80060ee <USB_SetTurnaroundTime+0x56>
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	4a37      	ldr	r2, [pc, #220]	; (80061c0 <USB_SetTurnaroundTime+0x128>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d202      	bcs.n	80060ee <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80060e8:	230d      	movs	r3, #13
 80060ea:	617b      	str	r3, [r7, #20]
 80060ec:	e04c      	b.n	8006188 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	4a33      	ldr	r2, [pc, #204]	; (80061c0 <USB_SetTurnaroundTime+0x128>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d306      	bcc.n	8006104 <USB_SetTurnaroundTime+0x6c>
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	4a32      	ldr	r2, [pc, #200]	; (80061c4 <USB_SetTurnaroundTime+0x12c>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d802      	bhi.n	8006104 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80060fe:	230c      	movs	r3, #12
 8006100:	617b      	str	r3, [r7, #20]
 8006102:	e041      	b.n	8006188 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	4a2f      	ldr	r2, [pc, #188]	; (80061c4 <USB_SetTurnaroundTime+0x12c>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d906      	bls.n	800611a <USB_SetTurnaroundTime+0x82>
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	4a2e      	ldr	r2, [pc, #184]	; (80061c8 <USB_SetTurnaroundTime+0x130>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d802      	bhi.n	800611a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006114:	230b      	movs	r3, #11
 8006116:	617b      	str	r3, [r7, #20]
 8006118:	e036      	b.n	8006188 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	4a2a      	ldr	r2, [pc, #168]	; (80061c8 <USB_SetTurnaroundTime+0x130>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d906      	bls.n	8006130 <USB_SetTurnaroundTime+0x98>
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	4a29      	ldr	r2, [pc, #164]	; (80061cc <USB_SetTurnaroundTime+0x134>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d802      	bhi.n	8006130 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800612a:	230a      	movs	r3, #10
 800612c:	617b      	str	r3, [r7, #20]
 800612e:	e02b      	b.n	8006188 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	4a26      	ldr	r2, [pc, #152]	; (80061cc <USB_SetTurnaroundTime+0x134>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d906      	bls.n	8006146 <USB_SetTurnaroundTime+0xae>
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	4a25      	ldr	r2, [pc, #148]	; (80061d0 <USB_SetTurnaroundTime+0x138>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d202      	bcs.n	8006146 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006140:	2309      	movs	r3, #9
 8006142:	617b      	str	r3, [r7, #20]
 8006144:	e020      	b.n	8006188 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	4a21      	ldr	r2, [pc, #132]	; (80061d0 <USB_SetTurnaroundTime+0x138>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d306      	bcc.n	800615c <USB_SetTurnaroundTime+0xc4>
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	4a20      	ldr	r2, [pc, #128]	; (80061d4 <USB_SetTurnaroundTime+0x13c>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d802      	bhi.n	800615c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006156:	2308      	movs	r3, #8
 8006158:	617b      	str	r3, [r7, #20]
 800615a:	e015      	b.n	8006188 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	4a1d      	ldr	r2, [pc, #116]	; (80061d4 <USB_SetTurnaroundTime+0x13c>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d906      	bls.n	8006172 <USB_SetTurnaroundTime+0xda>
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	4a1c      	ldr	r2, [pc, #112]	; (80061d8 <USB_SetTurnaroundTime+0x140>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d202      	bcs.n	8006172 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800616c:	2307      	movs	r3, #7
 800616e:	617b      	str	r3, [r7, #20]
 8006170:	e00a      	b.n	8006188 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006172:	2306      	movs	r3, #6
 8006174:	617b      	str	r3, [r7, #20]
 8006176:	e007      	b.n	8006188 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006178:	79fb      	ldrb	r3, [r7, #7]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d102      	bne.n	8006184 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800617e:	2309      	movs	r3, #9
 8006180:	617b      	str	r3, [r7, #20]
 8006182:	e001      	b.n	8006188 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006184:	2309      	movs	r3, #9
 8006186:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	68da      	ldr	r2, [r3, #12]
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	029b      	lsls	r3, r3, #10
 800619c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80061a0:	431a      	orrs	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	371c      	adds	r7, #28
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr
 80061b4:	00d8acbf 	.word	0x00d8acbf
 80061b8:	00e4e1c0 	.word	0x00e4e1c0
 80061bc:	00f42400 	.word	0x00f42400
 80061c0:	01067380 	.word	0x01067380
 80061c4:	011a499f 	.word	0x011a499f
 80061c8:	01312cff 	.word	0x01312cff
 80061cc:	014ca43f 	.word	0x014ca43f
 80061d0:	016e3600 	.word	0x016e3600
 80061d4:	01a6ab1f 	.word	0x01a6ab1f
 80061d8:	01e84800 	.word	0x01e84800

080061dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	f043 0201 	orr.w	r2, r3, #1
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	370c      	adds	r7, #12
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr

080061fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061fe:	b480      	push	{r7}
 8006200:	b083      	sub	sp, #12
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f023 0201 	bic.w	r2, r3, #1
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	460b      	mov	r3, r1
 800622a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800622c:	2300      	movs	r3, #0
 800622e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800623c:	78fb      	ldrb	r3, [r7, #3]
 800623e:	2b01      	cmp	r3, #1
 8006240:	d115      	bne.n	800626e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800624e:	2001      	movs	r0, #1
 8006250:	f7fb fab8 	bl	80017c4 <HAL_Delay>
      ms++;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	3301      	adds	r3, #1
 8006258:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f001 fa3f 	bl	80076de <USB_GetMode>
 8006260:	4603      	mov	r3, r0
 8006262:	2b01      	cmp	r3, #1
 8006264:	d01e      	beq.n	80062a4 <USB_SetCurrentMode+0x84>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2b31      	cmp	r3, #49	; 0x31
 800626a:	d9f0      	bls.n	800624e <USB_SetCurrentMode+0x2e>
 800626c:	e01a      	b.n	80062a4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800626e:	78fb      	ldrb	r3, [r7, #3]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d115      	bne.n	80062a0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006280:	2001      	movs	r0, #1
 8006282:	f7fb fa9f 	bl	80017c4 <HAL_Delay>
      ms++;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	3301      	adds	r3, #1
 800628a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f001 fa26 	bl	80076de <USB_GetMode>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d005      	beq.n	80062a4 <USB_SetCurrentMode+0x84>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2b31      	cmp	r3, #49	; 0x31
 800629c:	d9f0      	bls.n	8006280 <USB_SetCurrentMode+0x60>
 800629e:	e001      	b.n	80062a4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e005      	b.n	80062b0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2b32      	cmp	r3, #50	; 0x32
 80062a8:	d101      	bne.n	80062ae <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e000      	b.n	80062b0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3710      	adds	r7, #16
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80062b8:	b084      	sub	sp, #16
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b086      	sub	sp, #24
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
 80062c2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80062c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80062ca:	2300      	movs	r3, #0
 80062cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80062d2:	2300      	movs	r3, #0
 80062d4:	613b      	str	r3, [r7, #16]
 80062d6:	e009      	b.n	80062ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	3340      	adds	r3, #64	; 0x40
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	4413      	add	r3, r2
 80062e2:	2200      	movs	r2, #0
 80062e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	3301      	adds	r3, #1
 80062ea:	613b      	str	r3, [r7, #16]
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	2b0e      	cmp	r3, #14
 80062f0:	d9f2      	bls.n	80062d8 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80062f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d11c      	bne.n	8006332 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006306:	f043 0302 	orr.w	r3, r3, #2
 800630a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006310:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	601a      	str	r2, [r3, #0]
 8006330:	e005      	b.n	800633e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006336:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006344:	461a      	mov	r2, r3
 8006346:	2300      	movs	r3, #0
 8006348:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006350:	4619      	mov	r1, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006358:	461a      	mov	r2, r3
 800635a:	680b      	ldr	r3, [r1, #0]
 800635c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800635e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006360:	2b01      	cmp	r3, #1
 8006362:	d10c      	bne.n	800637e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006366:	2b00      	cmp	r3, #0
 8006368:	d104      	bne.n	8006374 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800636a:	2100      	movs	r1, #0
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 f965 	bl	800663c <USB_SetDevSpeed>
 8006372:	e008      	b.n	8006386 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006374:	2101      	movs	r1, #1
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 f960 	bl	800663c <USB_SetDevSpeed>
 800637c:	e003      	b.n	8006386 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800637e:	2103      	movs	r1, #3
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 f95b 	bl	800663c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006386:	2110      	movs	r1, #16
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 f8f3 	bl	8006574 <USB_FlushTxFifo>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d001      	beq.n	8006398 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 f91f 	bl	80065dc <USB_FlushRxFifo>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d001      	beq.n	80063a8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ae:	461a      	mov	r2, r3
 80063b0:	2300      	movs	r3, #0
 80063b2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ba:	461a      	mov	r2, r3
 80063bc:	2300      	movs	r3, #0
 80063be:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063c6:	461a      	mov	r2, r3
 80063c8:	2300      	movs	r3, #0
 80063ca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063cc:	2300      	movs	r3, #0
 80063ce:	613b      	str	r3, [r7, #16]
 80063d0:	e043      	b.n	800645a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	015a      	lsls	r2, r3, #5
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	4413      	add	r3, r2
 80063da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063e8:	d118      	bne.n	800641c <USB_DevInit+0x164>
    {
      if (i == 0U)
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d10a      	bne.n	8006406 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063fc:	461a      	mov	r2, r3
 80063fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006402:	6013      	str	r3, [r2, #0]
 8006404:	e013      	b.n	800642e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	015a      	lsls	r2, r3, #5
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	4413      	add	r3, r2
 800640e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006412:	461a      	mov	r2, r3
 8006414:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006418:	6013      	str	r3, [r2, #0]
 800641a:	e008      	b.n	800642e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	015a      	lsls	r2, r3, #5
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	4413      	add	r3, r2
 8006424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006428:	461a      	mov	r2, r3
 800642a:	2300      	movs	r3, #0
 800642c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	015a      	lsls	r2, r3, #5
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	4413      	add	r3, r2
 8006436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800643a:	461a      	mov	r2, r3
 800643c:	2300      	movs	r3, #0
 800643e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	015a      	lsls	r2, r3, #5
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	4413      	add	r3, r2
 8006448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800644c:	461a      	mov	r2, r3
 800644e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006452:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	3301      	adds	r3, #1
 8006458:	613b      	str	r3, [r7, #16]
 800645a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645c:	693a      	ldr	r2, [r7, #16]
 800645e:	429a      	cmp	r2, r3
 8006460:	d3b7      	bcc.n	80063d2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006462:	2300      	movs	r3, #0
 8006464:	613b      	str	r3, [r7, #16]
 8006466:	e043      	b.n	80064f0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	015a      	lsls	r2, r3, #5
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	4413      	add	r3, r2
 8006470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800647a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800647e:	d118      	bne.n	80064b2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d10a      	bne.n	800649c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	015a      	lsls	r2, r3, #5
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	4413      	add	r3, r2
 800648e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006492:	461a      	mov	r2, r3
 8006494:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006498:	6013      	str	r3, [r2, #0]
 800649a:	e013      	b.n	80064c4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	015a      	lsls	r2, r3, #5
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	4413      	add	r3, r2
 80064a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a8:	461a      	mov	r2, r3
 80064aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80064ae:	6013      	str	r3, [r2, #0]
 80064b0:	e008      	b.n	80064c4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	015a      	lsls	r2, r3, #5
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	4413      	add	r3, r2
 80064ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064be:	461a      	mov	r2, r3
 80064c0:	2300      	movs	r3, #0
 80064c2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	4413      	add	r3, r2
 80064cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d0:	461a      	mov	r2, r3
 80064d2:	2300      	movs	r3, #0
 80064d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	015a      	lsls	r2, r3, #5
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	4413      	add	r3, r2
 80064de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e2:	461a      	mov	r2, r3
 80064e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80064e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	3301      	adds	r3, #1
 80064ee:	613b      	str	r3, [r7, #16]
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	693a      	ldr	r2, [r7, #16]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d3b7      	bcc.n	8006468 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006506:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800650a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006518:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800651a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651c:	2b00      	cmp	r3, #0
 800651e:	d105      	bne.n	800652c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	699b      	ldr	r3, [r3, #24]
 8006524:	f043 0210 	orr.w	r2, r3, #16
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	699a      	ldr	r2, [r3, #24]
 8006530:	4b0f      	ldr	r3, [pc, #60]	; (8006570 <USB_DevInit+0x2b8>)
 8006532:	4313      	orrs	r3, r2
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800653a:	2b00      	cmp	r3, #0
 800653c:	d005      	beq.n	800654a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	699b      	ldr	r3, [r3, #24]
 8006542:	f043 0208 	orr.w	r2, r3, #8
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800654a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800654c:	2b01      	cmp	r3, #1
 800654e:	d107      	bne.n	8006560 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006558:	f043 0304 	orr.w	r3, r3, #4
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006560:	7dfb      	ldrb	r3, [r7, #23]
}
 8006562:	4618      	mov	r0, r3
 8006564:	3718      	adds	r7, #24
 8006566:	46bd      	mov	sp, r7
 8006568:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800656c:	b004      	add	sp, #16
 800656e:	4770      	bx	lr
 8006570:	803c3800 	.word	0x803c3800

08006574 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006574:	b480      	push	{r7}
 8006576:	b085      	sub	sp, #20
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800657e:	2300      	movs	r3, #0
 8006580:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	3301      	adds	r3, #1
 8006586:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	4a13      	ldr	r2, [pc, #76]	; (80065d8 <USB_FlushTxFifo+0x64>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d901      	bls.n	8006594 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	e01b      	b.n	80065cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	2b00      	cmp	r3, #0
 800659a:	daf2      	bge.n	8006582 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800659c:	2300      	movs	r3, #0
 800659e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	019b      	lsls	r3, r3, #6
 80065a4:	f043 0220 	orr.w	r2, r3, #32
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	3301      	adds	r3, #1
 80065b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	4a08      	ldr	r2, [pc, #32]	; (80065d8 <USB_FlushTxFifo+0x64>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d901      	bls.n	80065be <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e006      	b.n	80065cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	f003 0320 	and.w	r3, r3, #32
 80065c6:	2b20      	cmp	r3, #32
 80065c8:	d0f0      	beq.n	80065ac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80065ca:	2300      	movs	r3, #0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3714      	adds	r7, #20
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr
 80065d8:	00030d40 	.word	0x00030d40

080065dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065e4:	2300      	movs	r3, #0
 80065e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	3301      	adds	r3, #1
 80065ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	4a11      	ldr	r2, [pc, #68]	; (8006638 <USB_FlushRxFifo+0x5c>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d901      	bls.n	80065fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e018      	b.n	800662c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	daf2      	bge.n	80065e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006602:	2300      	movs	r3, #0
 8006604:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2210      	movs	r2, #16
 800660a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	3301      	adds	r3, #1
 8006610:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	4a08      	ldr	r2, [pc, #32]	; (8006638 <USB_FlushRxFifo+0x5c>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d901      	bls.n	800661e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800661a:	2303      	movs	r3, #3
 800661c:	e006      	b.n	800662c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	f003 0310 	and.w	r3, r3, #16
 8006626:	2b10      	cmp	r3, #16
 8006628:	d0f0      	beq.n	800660c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3714      	adds	r7, #20
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr
 8006638:	00030d40 	.word	0x00030d40

0800663c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	460b      	mov	r3, r1
 8006646:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	78fb      	ldrb	r3, [r7, #3]
 8006656:	68f9      	ldr	r1, [r7, #12]
 8006658:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800665c:	4313      	orrs	r3, r2
 800665e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3714      	adds	r7, #20
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr

0800666e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800666e:	b480      	push	{r7}
 8006670:	b087      	sub	sp, #28
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	f003 0306 	and.w	r3, r3, #6
 8006686:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d102      	bne.n	8006694 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800668e:	2300      	movs	r3, #0
 8006690:	75fb      	strb	r3, [r7, #23]
 8006692:	e00a      	b.n	80066aa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2b02      	cmp	r3, #2
 8006698:	d002      	beq.n	80066a0 <USB_GetDevSpeed+0x32>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2b06      	cmp	r3, #6
 800669e:	d102      	bne.n	80066a6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80066a0:	2302      	movs	r3, #2
 80066a2:	75fb      	strb	r3, [r7, #23]
 80066a4:	e001      	b.n	80066aa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80066a6:	230f      	movs	r3, #15
 80066a8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80066aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	371c      	adds	r7, #28
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	785b      	ldrb	r3, [r3, #1]
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d13a      	bne.n	800674a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066da:	69da      	ldr	r2, [r3, #28]
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	f003 030f 	and.w	r3, r3, #15
 80066e4:	2101      	movs	r1, #1
 80066e6:	fa01 f303 	lsl.w	r3, r1, r3
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	68f9      	ldr	r1, [r7, #12]
 80066ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066f2:	4313      	orrs	r3, r2
 80066f4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	015a      	lsls	r2, r3, #5
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	4413      	add	r3, r2
 80066fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d155      	bne.n	80067b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	015a      	lsls	r2, r3, #5
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	4413      	add	r3, r2
 8006714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	791b      	ldrb	r3, [r3, #4]
 8006726:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006728:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	059b      	lsls	r3, r3, #22
 800672e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006730:	4313      	orrs	r3, r2
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	0151      	lsls	r1, r2, #5
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	440a      	add	r2, r1
 800673a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800673e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006742:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006746:	6013      	str	r3, [r2, #0]
 8006748:	e036      	b.n	80067b8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006750:	69da      	ldr	r2, [r3, #28]
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	f003 030f 	and.w	r3, r3, #15
 800675a:	2101      	movs	r1, #1
 800675c:	fa01 f303 	lsl.w	r3, r1, r3
 8006760:	041b      	lsls	r3, r3, #16
 8006762:	68f9      	ldr	r1, [r7, #12]
 8006764:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006768:	4313      	orrs	r3, r2
 800676a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	015a      	lsls	r2, r3, #5
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	4413      	add	r3, r2
 8006774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d11a      	bne.n	80067b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	015a      	lsls	r2, r3, #5
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	4413      	add	r3, r2
 800678a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	791b      	ldrb	r3, [r3, #4]
 800679c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800679e:	430b      	orrs	r3, r1
 80067a0:	4313      	orrs	r3, r2
 80067a2:	68ba      	ldr	r2, [r7, #8]
 80067a4:	0151      	lsls	r1, r2, #5
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	440a      	add	r2, r1
 80067aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067b6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
	...

080067c8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	785b      	ldrb	r3, [r3, #1]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d161      	bne.n	80068a8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	015a      	lsls	r2, r3, #5
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	4413      	add	r3, r2
 80067ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067fa:	d11f      	bne.n	800683c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	015a      	lsls	r2, r3, #5
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	4413      	add	r3, r2
 8006804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68ba      	ldr	r2, [r7, #8]
 800680c:	0151      	lsls	r1, r2, #5
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	440a      	add	r2, r1
 8006812:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006816:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800681a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	015a      	lsls	r2, r3, #5
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	4413      	add	r3, r2
 8006824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68ba      	ldr	r2, [r7, #8]
 800682c:	0151      	lsls	r1, r2, #5
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	440a      	add	r2, r1
 8006832:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006836:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800683a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006842:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	f003 030f 	and.w	r3, r3, #15
 800684c:	2101      	movs	r1, #1
 800684e:	fa01 f303 	lsl.w	r3, r1, r3
 8006852:	b29b      	uxth	r3, r3
 8006854:	43db      	mvns	r3, r3
 8006856:	68f9      	ldr	r1, [r7, #12]
 8006858:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800685c:	4013      	ands	r3, r2
 800685e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006866:	69da      	ldr	r2, [r3, #28]
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	f003 030f 	and.w	r3, r3, #15
 8006870:	2101      	movs	r1, #1
 8006872:	fa01 f303 	lsl.w	r3, r1, r3
 8006876:	b29b      	uxth	r3, r3
 8006878:	43db      	mvns	r3, r3
 800687a:	68f9      	ldr	r1, [r7, #12]
 800687c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006880:	4013      	ands	r3, r2
 8006882:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	015a      	lsls	r2, r3, #5
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	4413      	add	r3, r2
 800688c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	0159      	lsls	r1, r3, #5
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	440b      	add	r3, r1
 800689a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800689e:	4619      	mov	r1, r3
 80068a0:	4b35      	ldr	r3, [pc, #212]	; (8006978 <USB_DeactivateEndpoint+0x1b0>)
 80068a2:	4013      	ands	r3, r2
 80068a4:	600b      	str	r3, [r1, #0]
 80068a6:	e060      	b.n	800696a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	015a      	lsls	r2, r3, #5
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	4413      	add	r3, r2
 80068b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068be:	d11f      	bne.n	8006900 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	015a      	lsls	r2, r3, #5
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	4413      	add	r3, r2
 80068c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68ba      	ldr	r2, [r7, #8]
 80068d0:	0151      	lsls	r1, r2, #5
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	440a      	add	r2, r1
 80068d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80068de:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	015a      	lsls	r2, r3, #5
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	4413      	add	r3, r2
 80068e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68ba      	ldr	r2, [r7, #8]
 80068f0:	0151      	lsls	r1, r2, #5
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	440a      	add	r2, r1
 80068f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006906:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	f003 030f 	and.w	r3, r3, #15
 8006910:	2101      	movs	r1, #1
 8006912:	fa01 f303 	lsl.w	r3, r1, r3
 8006916:	041b      	lsls	r3, r3, #16
 8006918:	43db      	mvns	r3, r3
 800691a:	68f9      	ldr	r1, [r7, #12]
 800691c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006920:	4013      	ands	r3, r2
 8006922:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800692a:	69da      	ldr	r2, [r3, #28]
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	f003 030f 	and.w	r3, r3, #15
 8006934:	2101      	movs	r1, #1
 8006936:	fa01 f303 	lsl.w	r3, r1, r3
 800693a:	041b      	lsls	r3, r3, #16
 800693c:	43db      	mvns	r3, r3
 800693e:	68f9      	ldr	r1, [r7, #12]
 8006940:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006944:	4013      	ands	r3, r2
 8006946:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	015a      	lsls	r2, r3, #5
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	4413      	add	r3, r2
 8006950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	0159      	lsls	r1, r3, #5
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	440b      	add	r3, r1
 800695e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006962:	4619      	mov	r1, r3
 8006964:	4b05      	ldr	r3, [pc, #20]	; (800697c <USB_DeactivateEndpoint+0x1b4>)
 8006966:	4013      	ands	r3, r2
 8006968:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3714      	adds	r7, #20
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr
 8006978:	ec337800 	.word	0xec337800
 800697c:	eff37800 	.word	0xeff37800

08006980 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b08a      	sub	sp, #40	; 0x28
 8006984:	af02      	add	r7, sp, #8
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	4613      	mov	r3, r2
 800698c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	785b      	ldrb	r3, [r3, #1]
 800699c:	2b01      	cmp	r3, #1
 800699e:	f040 815c 	bne.w	8006c5a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	699b      	ldr	r3, [r3, #24]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d132      	bne.n	8006a10 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	015a      	lsls	r2, r3, #5
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	4413      	add	r3, r2
 80069b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	69ba      	ldr	r2, [r7, #24]
 80069ba:	0151      	lsls	r1, r2, #5
 80069bc:	69fa      	ldr	r2, [r7, #28]
 80069be:	440a      	add	r2, r1
 80069c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80069c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80069cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	015a      	lsls	r2, r3, #5
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	4413      	add	r3, r2
 80069d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	69ba      	ldr	r2, [r7, #24]
 80069de:	0151      	lsls	r1, r2, #5
 80069e0:	69fa      	ldr	r2, [r7, #28]
 80069e2:	440a      	add	r2, r1
 80069e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	015a      	lsls	r2, r3, #5
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	4413      	add	r3, r2
 80069f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	69ba      	ldr	r2, [r7, #24]
 80069fe:	0151      	lsls	r1, r2, #5
 8006a00:	69fa      	ldr	r2, [r7, #28]
 8006a02:	440a      	add	r2, r1
 8006a04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a08:	0cdb      	lsrs	r3, r3, #19
 8006a0a:	04db      	lsls	r3, r3, #19
 8006a0c:	6113      	str	r3, [r2, #16]
 8006a0e:	e074      	b.n	8006afa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	015a      	lsls	r2, r3, #5
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	4413      	add	r3, r2
 8006a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	69ba      	ldr	r2, [r7, #24]
 8006a20:	0151      	lsls	r1, r2, #5
 8006a22:	69fa      	ldr	r2, [r7, #28]
 8006a24:	440a      	add	r2, r1
 8006a26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a2a:	0cdb      	lsrs	r3, r3, #19
 8006a2c:	04db      	lsls	r3, r3, #19
 8006a2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	015a      	lsls	r2, r3, #5
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	4413      	add	r3, r2
 8006a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	69ba      	ldr	r2, [r7, #24]
 8006a40:	0151      	lsls	r1, r2, #5
 8006a42:	69fa      	ldr	r2, [r7, #28]
 8006a44:	440a      	add	r2, r1
 8006a46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a4a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006a4e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006a52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	015a      	lsls	r2, r3, #5
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a60:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	6999      	ldr	r1, [r3, #24]
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	440b      	add	r3, r1
 8006a6c:	1e59      	subs	r1, r3, #1
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a76:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006a78:	4b9d      	ldr	r3, [pc, #628]	; (8006cf0 <USB_EPStartXfer+0x370>)
 8006a7a:	400b      	ands	r3, r1
 8006a7c:	69b9      	ldr	r1, [r7, #24]
 8006a7e:	0148      	lsls	r0, r1, #5
 8006a80:	69f9      	ldr	r1, [r7, #28]
 8006a82:	4401      	add	r1, r0
 8006a84:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	015a      	lsls	r2, r3, #5
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	4413      	add	r3, r2
 8006a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a98:	691a      	ldr	r2, [r3, #16]
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	699b      	ldr	r3, [r3, #24]
 8006a9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006aa2:	69b9      	ldr	r1, [r7, #24]
 8006aa4:	0148      	lsls	r0, r1, #5
 8006aa6:	69f9      	ldr	r1, [r7, #28]
 8006aa8:	4401      	add	r1, r0
 8006aaa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	791b      	ldrb	r3, [r3, #4]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d11f      	bne.n	8006afa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	015a      	lsls	r2, r3, #5
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ac6:	691b      	ldr	r3, [r3, #16]
 8006ac8:	69ba      	ldr	r2, [r7, #24]
 8006aca:	0151      	lsls	r1, r2, #5
 8006acc:	69fa      	ldr	r2, [r7, #28]
 8006ace:	440a      	add	r2, r1
 8006ad0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ad4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006ad8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	015a      	lsls	r2, r3, #5
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	69ba      	ldr	r2, [r7, #24]
 8006aea:	0151      	lsls	r1, r2, #5
 8006aec:	69fa      	ldr	r2, [r7, #28]
 8006aee:	440a      	add	r2, r1
 8006af0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006af4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006af8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006afa:	79fb      	ldrb	r3, [r7, #7]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d14b      	bne.n	8006b98 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	695b      	ldr	r3, [r3, #20]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d009      	beq.n	8006b1c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	015a      	lsls	r2, r3, #5
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b14:	461a      	mov	r2, r3
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	695b      	ldr	r3, [r3, #20]
 8006b1a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	791b      	ldrb	r3, [r3, #4]
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d128      	bne.n	8006b76 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d110      	bne.n	8006b56 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	015a      	lsls	r2, r3, #5
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	69ba      	ldr	r2, [r7, #24]
 8006b44:	0151      	lsls	r1, r2, #5
 8006b46:	69fa      	ldr	r2, [r7, #28]
 8006b48:	440a      	add	r2, r1
 8006b4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b52:	6013      	str	r3, [r2, #0]
 8006b54:	e00f      	b.n	8006b76 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	015a      	lsls	r2, r3, #5
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	69ba      	ldr	r2, [r7, #24]
 8006b66:	0151      	lsls	r1, r2, #5
 8006b68:	69fa      	ldr	r2, [r7, #28]
 8006b6a:	440a      	add	r2, r1
 8006b6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b74:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	015a      	lsls	r2, r3, #5
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	69ba      	ldr	r2, [r7, #24]
 8006b86:	0151      	lsls	r1, r2, #5
 8006b88:	69fa      	ldr	r2, [r7, #28]
 8006b8a:	440a      	add	r2, r1
 8006b8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b90:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b94:	6013      	str	r3, [r2, #0]
 8006b96:	e133      	b.n	8006e00 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	015a      	lsls	r2, r3, #5
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	69ba      	ldr	r2, [r7, #24]
 8006ba8:	0151      	lsls	r1, r2, #5
 8006baa:	69fa      	ldr	r2, [r7, #28]
 8006bac:	440a      	add	r2, r1
 8006bae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bb2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006bb6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	791b      	ldrb	r3, [r3, #4]
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d015      	beq.n	8006bec <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	699b      	ldr	r3, [r3, #24]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f000 811b 	beq.w	8006e00 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	f003 030f 	and.w	r3, r3, #15
 8006bda:	2101      	movs	r1, #1
 8006bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8006be0:	69f9      	ldr	r1, [r7, #28]
 8006be2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006be6:	4313      	orrs	r3, r2
 8006be8:	634b      	str	r3, [r1, #52]	; 0x34
 8006bea:	e109      	b.n	8006e00 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d110      	bne.n	8006c1e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	015a      	lsls	r2, r3, #5
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	4413      	add	r3, r2
 8006c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	69ba      	ldr	r2, [r7, #24]
 8006c0c:	0151      	lsls	r1, r2, #5
 8006c0e:	69fa      	ldr	r2, [r7, #28]
 8006c10:	440a      	add	r2, r1
 8006c12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c1a:	6013      	str	r3, [r2, #0]
 8006c1c:	e00f      	b.n	8006c3e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	015a      	lsls	r2, r3, #5
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	4413      	add	r3, r2
 8006c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	69ba      	ldr	r2, [r7, #24]
 8006c2e:	0151      	lsls	r1, r2, #5
 8006c30:	69fa      	ldr	r2, [r7, #28]
 8006c32:	440a      	add	r2, r1
 8006c34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c3c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	6919      	ldr	r1, [r3, #16]
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	781a      	ldrb	r2, [r3, #0]
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	699b      	ldr	r3, [r3, #24]
 8006c4a:	b298      	uxth	r0, r3
 8006c4c:	79fb      	ldrb	r3, [r7, #7]
 8006c4e:	9300      	str	r3, [sp, #0]
 8006c50:	4603      	mov	r3, r0
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f000 fade 	bl	8007214 <USB_WritePacket>
 8006c58:	e0d2      	b.n	8006e00 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	015a      	lsls	r2, r3, #5
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	4413      	add	r3, r2
 8006c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	69ba      	ldr	r2, [r7, #24]
 8006c6a:	0151      	lsls	r1, r2, #5
 8006c6c:	69fa      	ldr	r2, [r7, #28]
 8006c6e:	440a      	add	r2, r1
 8006c70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c74:	0cdb      	lsrs	r3, r3, #19
 8006c76:	04db      	lsls	r3, r3, #19
 8006c78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	015a      	lsls	r2, r3, #5
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	4413      	add	r3, r2
 8006c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	69ba      	ldr	r2, [r7, #24]
 8006c8a:	0151      	lsls	r1, r2, #5
 8006c8c:	69fa      	ldr	r2, [r7, #28]
 8006c8e:	440a      	add	r2, r1
 8006c90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c94:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c98:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c9c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	699b      	ldr	r3, [r3, #24]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d126      	bne.n	8006cf4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	015a      	lsls	r2, r3, #5
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	4413      	add	r3, r2
 8006cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cb2:	691a      	ldr	r2, [r3, #16]
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cbc:	69b9      	ldr	r1, [r7, #24]
 8006cbe:	0148      	lsls	r0, r1, #5
 8006cc0:	69f9      	ldr	r1, [r7, #28]
 8006cc2:	4401      	add	r1, r0
 8006cc4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	015a      	lsls	r2, r3, #5
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	69ba      	ldr	r2, [r7, #24]
 8006cdc:	0151      	lsls	r1, r2, #5
 8006cde:	69fa      	ldr	r2, [r7, #28]
 8006ce0:	440a      	add	r2, r1
 8006ce2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ce6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006cea:	6113      	str	r3, [r2, #16]
 8006cec:	e03a      	b.n	8006d64 <USB_EPStartXfer+0x3e4>
 8006cee:	bf00      	nop
 8006cf0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	699a      	ldr	r2, [r3, #24]
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	1e5a      	subs	r2, r3, #1
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d08:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	8afa      	ldrh	r2, [r7, #22]
 8006d10:	fb03 f202 	mul.w	r2, r3, r2
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	015a      	lsls	r2, r3, #5
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	4413      	add	r3, r2
 8006d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d24:	691a      	ldr	r2, [r3, #16]
 8006d26:	8afb      	ldrh	r3, [r7, #22]
 8006d28:	04d9      	lsls	r1, r3, #19
 8006d2a:	4b38      	ldr	r3, [pc, #224]	; (8006e0c <USB_EPStartXfer+0x48c>)
 8006d2c:	400b      	ands	r3, r1
 8006d2e:	69b9      	ldr	r1, [r7, #24]
 8006d30:	0148      	lsls	r0, r1, #5
 8006d32:	69f9      	ldr	r1, [r7, #28]
 8006d34:	4401      	add	r1, r0
 8006d36:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	015a      	lsls	r2, r3, #5
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	4413      	add	r3, r2
 8006d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d4a:	691a      	ldr	r2, [r3, #16]
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	69db      	ldr	r3, [r3, #28]
 8006d50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d54:	69b9      	ldr	r1, [r7, #24]
 8006d56:	0148      	lsls	r0, r1, #5
 8006d58:	69f9      	ldr	r1, [r7, #28]
 8006d5a:	4401      	add	r1, r0
 8006d5c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006d60:	4313      	orrs	r3, r2
 8006d62:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006d64:	79fb      	ldrb	r3, [r7, #7]
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d10d      	bne.n	8006d86 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d009      	beq.n	8006d86 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	6919      	ldr	r1, [r3, #16]
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	015a      	lsls	r2, r3, #5
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d82:	460a      	mov	r2, r1
 8006d84:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	791b      	ldrb	r3, [r3, #4]
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d128      	bne.n	8006de0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d110      	bne.n	8006dc0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	015a      	lsls	r2, r3, #5
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	4413      	add	r3, r2
 8006da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	69ba      	ldr	r2, [r7, #24]
 8006dae:	0151      	lsls	r1, r2, #5
 8006db0:	69fa      	ldr	r2, [r7, #28]
 8006db2:	440a      	add	r2, r1
 8006db4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006db8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006dbc:	6013      	str	r3, [r2, #0]
 8006dbe:	e00f      	b.n	8006de0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	015a      	lsls	r2, r3, #5
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	69ba      	ldr	r2, [r7, #24]
 8006dd0:	0151      	lsls	r1, r2, #5
 8006dd2:	69fa      	ldr	r2, [r7, #28]
 8006dd4:	440a      	add	r2, r1
 8006dd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dde:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	015a      	lsls	r2, r3, #5
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	4413      	add	r3, r2
 8006de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	69ba      	ldr	r2, [r7, #24]
 8006df0:	0151      	lsls	r1, r2, #5
 8006df2:	69fa      	ldr	r2, [r7, #28]
 8006df4:	440a      	add	r2, r1
 8006df6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dfa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006dfe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3720      	adds	r7, #32
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	1ff80000 	.word	0x1ff80000

08006e10 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b087      	sub	sp, #28
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	785b      	ldrb	r3, [r3, #1]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	f040 80ce 	bne.w	8006fce <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d132      	bne.n	8006ea0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	015a      	lsls	r2, r3, #5
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	4413      	add	r3, r2
 8006e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	693a      	ldr	r2, [r7, #16]
 8006e4a:	0151      	lsls	r1, r2, #5
 8006e4c:	697a      	ldr	r2, [r7, #20]
 8006e4e:	440a      	add	r2, r1
 8006e50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e54:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e58:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	015a      	lsls	r2, r3, #5
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	4413      	add	r3, r2
 8006e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	693a      	ldr	r2, [r7, #16]
 8006e6e:	0151      	lsls	r1, r2, #5
 8006e70:	697a      	ldr	r2, [r7, #20]
 8006e72:	440a      	add	r2, r1
 8006e74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	015a      	lsls	r2, r3, #5
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	4413      	add	r3, r2
 8006e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	693a      	ldr	r2, [r7, #16]
 8006e8e:	0151      	lsls	r1, r2, #5
 8006e90:	697a      	ldr	r2, [r7, #20]
 8006e92:	440a      	add	r2, r1
 8006e94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e98:	0cdb      	lsrs	r3, r3, #19
 8006e9a:	04db      	lsls	r3, r3, #19
 8006e9c:	6113      	str	r3, [r2, #16]
 8006e9e:	e04e      	b.n	8006f3e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	015a      	lsls	r2, r3, #5
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	693a      	ldr	r2, [r7, #16]
 8006eb0:	0151      	lsls	r1, r2, #5
 8006eb2:	697a      	ldr	r2, [r7, #20]
 8006eb4:	440a      	add	r2, r1
 8006eb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eba:	0cdb      	lsrs	r3, r3, #19
 8006ebc:	04db      	lsls	r3, r3, #19
 8006ebe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	015a      	lsls	r2, r3, #5
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	693a      	ldr	r2, [r7, #16]
 8006ed0:	0151      	lsls	r1, r2, #5
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	440a      	add	r2, r1
 8006ed6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eda:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ede:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ee2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	699a      	ldr	r2, [r3, #24]
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d903      	bls.n	8006ef8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	68da      	ldr	r2, [r3, #12]
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	015a      	lsls	r2, r3, #5
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	4413      	add	r3, r2
 8006f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	693a      	ldr	r2, [r7, #16]
 8006f08:	0151      	lsls	r1, r2, #5
 8006f0a:	697a      	ldr	r2, [r7, #20]
 8006f0c:	440a      	add	r2, r1
 8006f0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	015a      	lsls	r2, r3, #5
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	4413      	add	r3, r2
 8006f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f24:	691a      	ldr	r2, [r3, #16]
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	699b      	ldr	r3, [r3, #24]
 8006f2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f2e:	6939      	ldr	r1, [r7, #16]
 8006f30:	0148      	lsls	r0, r1, #5
 8006f32:	6979      	ldr	r1, [r7, #20]
 8006f34:	4401      	add	r1, r0
 8006f36:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006f3e:	79fb      	ldrb	r3, [r7, #7]
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d11e      	bne.n	8006f82 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	695b      	ldr	r3, [r3, #20]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d009      	beq.n	8006f60 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	015a      	lsls	r2, r3, #5
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	4413      	add	r3, r2
 8006f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f58:	461a      	mov	r2, r3
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	695b      	ldr	r3, [r3, #20]
 8006f5e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	015a      	lsls	r2, r3, #5
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	4413      	add	r3, r2
 8006f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	693a      	ldr	r2, [r7, #16]
 8006f70:	0151      	lsls	r1, r2, #5
 8006f72:	697a      	ldr	r2, [r7, #20]
 8006f74:	440a      	add	r2, r1
 8006f76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f7e:	6013      	str	r3, [r2, #0]
 8006f80:	e097      	b.n	80070b2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	015a      	lsls	r2, r3, #5
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	4413      	add	r3, r2
 8006f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	693a      	ldr	r2, [r7, #16]
 8006f92:	0151      	lsls	r1, r2, #5
 8006f94:	697a      	ldr	r2, [r7, #20]
 8006f96:	440a      	add	r2, r1
 8006f98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f9c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006fa0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	699b      	ldr	r3, [r3, #24]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	f000 8083 	beq.w	80070b2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	f003 030f 	and.w	r3, r3, #15
 8006fbc:	2101      	movs	r1, #1
 8006fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8006fc2:	6979      	ldr	r1, [r7, #20]
 8006fc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	634b      	str	r3, [r1, #52]	; 0x34
 8006fcc:	e071      	b.n	80070b2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	015a      	lsls	r2, r3, #5
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	693a      	ldr	r2, [r7, #16]
 8006fde:	0151      	lsls	r1, r2, #5
 8006fe0:	697a      	ldr	r2, [r7, #20]
 8006fe2:	440a      	add	r2, r1
 8006fe4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fe8:	0cdb      	lsrs	r3, r3, #19
 8006fea:	04db      	lsls	r3, r3, #19
 8006fec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	015a      	lsls	r2, r3, #5
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	4413      	add	r3, r2
 8006ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ffa:	691b      	ldr	r3, [r3, #16]
 8006ffc:	693a      	ldr	r2, [r7, #16]
 8006ffe:	0151      	lsls	r1, r2, #5
 8007000:	697a      	ldr	r2, [r7, #20]
 8007002:	440a      	add	r2, r1
 8007004:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007008:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800700c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007010:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	699b      	ldr	r3, [r3, #24]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d003      	beq.n	8007022 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	68da      	ldr	r2, [r3, #12]
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	68da      	ldr	r2, [r3, #12]
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	015a      	lsls	r2, r3, #5
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	4413      	add	r3, r2
 8007032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	693a      	ldr	r2, [r7, #16]
 800703a:	0151      	lsls	r1, r2, #5
 800703c:	697a      	ldr	r2, [r7, #20]
 800703e:	440a      	add	r2, r1
 8007040:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007044:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007048:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	015a      	lsls	r2, r3, #5
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	4413      	add	r3, r2
 8007052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007056:	691a      	ldr	r2, [r3, #16]
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	69db      	ldr	r3, [r3, #28]
 800705c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007060:	6939      	ldr	r1, [r7, #16]
 8007062:	0148      	lsls	r0, r1, #5
 8007064:	6979      	ldr	r1, [r7, #20]
 8007066:	4401      	add	r1, r0
 8007068:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800706c:	4313      	orrs	r3, r2
 800706e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007070:	79fb      	ldrb	r3, [r7, #7]
 8007072:	2b01      	cmp	r3, #1
 8007074:	d10d      	bne.n	8007092 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d009      	beq.n	8007092 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	6919      	ldr	r1, [r3, #16]
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	015a      	lsls	r2, r3, #5
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	4413      	add	r3, r2
 800708a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800708e:	460a      	mov	r2, r1
 8007090:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	015a      	lsls	r2, r3, #5
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	4413      	add	r3, r2
 800709a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	693a      	ldr	r2, [r7, #16]
 80070a2:	0151      	lsls	r1, r2, #5
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	440a      	add	r2, r1
 80070a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80070b0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	371c      	adds	r7, #28
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b087      	sub	sp, #28
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80070ca:	2300      	movs	r3, #0
 80070cc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80070ce:	2300      	movs	r3, #0
 80070d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	785b      	ldrb	r3, [r3, #1]
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d14a      	bne.n	8007174 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	015a      	lsls	r2, r3, #5
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	4413      	add	r3, r2
 80070e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070f6:	f040 8086 	bne.w	8007206 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	015a      	lsls	r2, r3, #5
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	4413      	add	r3, r2
 8007104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	683a      	ldr	r2, [r7, #0]
 800710c:	7812      	ldrb	r2, [r2, #0]
 800710e:	0151      	lsls	r1, r2, #5
 8007110:	693a      	ldr	r2, [r7, #16]
 8007112:	440a      	add	r2, r1
 8007114:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007118:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800711c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	015a      	lsls	r2, r3, #5
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	4413      	add	r3, r2
 8007128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	683a      	ldr	r2, [r7, #0]
 8007130:	7812      	ldrb	r2, [r2, #0]
 8007132:	0151      	lsls	r1, r2, #5
 8007134:	693a      	ldr	r2, [r7, #16]
 8007136:	440a      	add	r2, r1
 8007138:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800713c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007140:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	3301      	adds	r3, #1
 8007146:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f242 7210 	movw	r2, #10000	; 0x2710
 800714e:	4293      	cmp	r3, r2
 8007150:	d902      	bls.n	8007158 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	75fb      	strb	r3, [r7, #23]
          break;
 8007156:	e056      	b.n	8007206 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	015a      	lsls	r2, r3, #5
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	4413      	add	r3, r2
 8007162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800716c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007170:	d0e7      	beq.n	8007142 <USB_EPStopXfer+0x82>
 8007172:	e048      	b.n	8007206 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	015a      	lsls	r2, r3, #5
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	4413      	add	r3, r2
 800717e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007188:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800718c:	d13b      	bne.n	8007206 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	015a      	lsls	r2, r3, #5
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	4413      	add	r3, r2
 8007198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	683a      	ldr	r2, [r7, #0]
 80071a0:	7812      	ldrb	r2, [r2, #0]
 80071a2:	0151      	lsls	r1, r2, #5
 80071a4:	693a      	ldr	r2, [r7, #16]
 80071a6:	440a      	add	r2, r1
 80071a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80071b0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	015a      	lsls	r2, r3, #5
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	4413      	add	r3, r2
 80071bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	683a      	ldr	r2, [r7, #0]
 80071c4:	7812      	ldrb	r2, [r2, #0]
 80071c6:	0151      	lsls	r1, r2, #5
 80071c8:	693a      	ldr	r2, [r7, #16]
 80071ca:	440a      	add	r2, r1
 80071cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	3301      	adds	r3, #1
 80071da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f242 7210 	movw	r2, #10000	; 0x2710
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d902      	bls.n	80071ec <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	75fb      	strb	r3, [r7, #23]
          break;
 80071ea:	e00c      	b.n	8007206 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	015a      	lsls	r2, r3, #5
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	4413      	add	r3, r2
 80071f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007200:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007204:	d0e7      	beq.n	80071d6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007206:	7dfb      	ldrb	r3, [r7, #23]
}
 8007208:	4618      	mov	r0, r3
 800720a:	371c      	adds	r7, #28
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007214:	b480      	push	{r7}
 8007216:	b089      	sub	sp, #36	; 0x24
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	4611      	mov	r1, r2
 8007220:	461a      	mov	r2, r3
 8007222:	460b      	mov	r3, r1
 8007224:	71fb      	strb	r3, [r7, #7]
 8007226:	4613      	mov	r3, r2
 8007228:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007232:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007236:	2b00      	cmp	r3, #0
 8007238:	d123      	bne.n	8007282 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800723a:	88bb      	ldrh	r3, [r7, #4]
 800723c:	3303      	adds	r3, #3
 800723e:	089b      	lsrs	r3, r3, #2
 8007240:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007242:	2300      	movs	r3, #0
 8007244:	61bb      	str	r3, [r7, #24]
 8007246:	e018      	b.n	800727a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007248:	79fb      	ldrb	r3, [r7, #7]
 800724a:	031a      	lsls	r2, r3, #12
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	4413      	add	r3, r2
 8007250:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007254:	461a      	mov	r2, r3
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	3301      	adds	r3, #1
 8007260:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	3301      	adds	r3, #1
 8007266:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	3301      	adds	r3, #1
 800726c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	3301      	adds	r3, #1
 8007272:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	3301      	adds	r3, #1
 8007278:	61bb      	str	r3, [r7, #24]
 800727a:	69ba      	ldr	r2, [r7, #24]
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	429a      	cmp	r2, r3
 8007280:	d3e2      	bcc.n	8007248 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	3724      	adds	r7, #36	; 0x24
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007290:	b480      	push	{r7}
 8007292:	b08b      	sub	sp, #44	; 0x2c
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	4613      	mov	r3, r2
 800729c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80072a6:	88fb      	ldrh	r3, [r7, #6]
 80072a8:	089b      	lsrs	r3, r3, #2
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80072ae:	88fb      	ldrh	r3, [r7, #6]
 80072b0:	f003 0303 	and.w	r3, r3, #3
 80072b4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80072b6:	2300      	movs	r3, #0
 80072b8:	623b      	str	r3, [r7, #32]
 80072ba:	e014      	b.n	80072e6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80072bc:	69bb      	ldr	r3, [r7, #24]
 80072be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c6:	601a      	str	r2, [r3, #0]
    pDest++;
 80072c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ca:	3301      	adds	r3, #1
 80072cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80072ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d0:	3301      	adds	r3, #1
 80072d2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80072d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d6:	3301      	adds	r3, #1
 80072d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80072da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072dc:	3301      	adds	r3, #1
 80072de:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80072e0:	6a3b      	ldr	r3, [r7, #32]
 80072e2:	3301      	adds	r3, #1
 80072e4:	623b      	str	r3, [r7, #32]
 80072e6:	6a3a      	ldr	r2, [r7, #32]
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d3e6      	bcc.n	80072bc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80072ee:	8bfb      	ldrh	r3, [r7, #30]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d01e      	beq.n	8007332 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80072f4:	2300      	movs	r3, #0
 80072f6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072fe:	461a      	mov	r2, r3
 8007300:	f107 0310 	add.w	r3, r7, #16
 8007304:	6812      	ldr	r2, [r2, #0]
 8007306:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	6a3b      	ldr	r3, [r7, #32]
 800730c:	b2db      	uxtb	r3, r3
 800730e:	00db      	lsls	r3, r3, #3
 8007310:	fa22 f303 	lsr.w	r3, r2, r3
 8007314:	b2da      	uxtb	r2, r3
 8007316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007318:	701a      	strb	r2, [r3, #0]
      i++;
 800731a:	6a3b      	ldr	r3, [r7, #32]
 800731c:	3301      	adds	r3, #1
 800731e:	623b      	str	r3, [r7, #32]
      pDest++;
 8007320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007322:	3301      	adds	r3, #1
 8007324:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007326:	8bfb      	ldrh	r3, [r7, #30]
 8007328:	3b01      	subs	r3, #1
 800732a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800732c:	8bfb      	ldrh	r3, [r7, #30]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1ea      	bne.n	8007308 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007334:	4618      	mov	r0, r3
 8007336:	372c      	adds	r7, #44	; 0x2c
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007340:	b480      	push	{r7}
 8007342:	b085      	sub	sp, #20
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	785b      	ldrb	r3, [r3, #1]
 8007358:	2b01      	cmp	r3, #1
 800735a:	d12c      	bne.n	80073b6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	015a      	lsls	r2, r3, #5
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	4413      	add	r3, r2
 8007364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	db12      	blt.n	8007394 <USB_EPSetStall+0x54>
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00f      	beq.n	8007394 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	015a      	lsls	r2, r3, #5
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	4413      	add	r3, r2
 800737c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	0151      	lsls	r1, r2, #5
 8007386:	68fa      	ldr	r2, [r7, #12]
 8007388:	440a      	add	r2, r1
 800738a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800738e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007392:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	015a      	lsls	r2, r3, #5
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	4413      	add	r3, r2
 800739c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	68ba      	ldr	r2, [r7, #8]
 80073a4:	0151      	lsls	r1, r2, #5
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	440a      	add	r2, r1
 80073aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80073b2:	6013      	str	r3, [r2, #0]
 80073b4:	e02b      	b.n	800740e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	015a      	lsls	r2, r3, #5
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	4413      	add	r3, r2
 80073be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	db12      	blt.n	80073ee <USB_EPSetStall+0xae>
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00f      	beq.n	80073ee <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	015a      	lsls	r2, r3, #5
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	4413      	add	r3, r2
 80073d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	68ba      	ldr	r2, [r7, #8]
 80073de:	0151      	lsls	r1, r2, #5
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	440a      	add	r2, r1
 80073e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80073ec:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	015a      	lsls	r2, r3, #5
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	4413      	add	r3, r2
 80073f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	68ba      	ldr	r2, [r7, #8]
 80073fe:	0151      	lsls	r1, r2, #5
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	440a      	add	r2, r1
 8007404:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007408:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800740c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800740e:	2300      	movs	r3, #0
}
 8007410:	4618      	mov	r0, r3
 8007412:	3714      	adds	r7, #20
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800741c:	b480      	push	{r7}
 800741e:	b085      	sub	sp, #20
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	785b      	ldrb	r3, [r3, #1]
 8007434:	2b01      	cmp	r3, #1
 8007436:	d128      	bne.n	800748a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	015a      	lsls	r2, r3, #5
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	4413      	add	r3, r2
 8007440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	0151      	lsls	r1, r2, #5
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	440a      	add	r2, r1
 800744e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007452:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007456:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	791b      	ldrb	r3, [r3, #4]
 800745c:	2b03      	cmp	r3, #3
 800745e:	d003      	beq.n	8007468 <USB_EPClearStall+0x4c>
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	791b      	ldrb	r3, [r3, #4]
 8007464:	2b02      	cmp	r3, #2
 8007466:	d138      	bne.n	80074da <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	015a      	lsls	r2, r3, #5
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	4413      	add	r3, r2
 8007470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68ba      	ldr	r2, [r7, #8]
 8007478:	0151      	lsls	r1, r2, #5
 800747a:	68fa      	ldr	r2, [r7, #12]
 800747c:	440a      	add	r2, r1
 800747e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007486:	6013      	str	r3, [r2, #0]
 8007488:	e027      	b.n	80074da <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	015a      	lsls	r2, r3, #5
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	4413      	add	r3, r2
 8007492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68ba      	ldr	r2, [r7, #8]
 800749a:	0151      	lsls	r1, r2, #5
 800749c:	68fa      	ldr	r2, [r7, #12]
 800749e:	440a      	add	r2, r1
 80074a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80074a8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	791b      	ldrb	r3, [r3, #4]
 80074ae:	2b03      	cmp	r3, #3
 80074b0:	d003      	beq.n	80074ba <USB_EPClearStall+0x9e>
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	791b      	ldrb	r3, [r3, #4]
 80074b6:	2b02      	cmp	r3, #2
 80074b8:	d10f      	bne.n	80074da <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	015a      	lsls	r2, r3, #5
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	4413      	add	r3, r2
 80074c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	0151      	lsls	r1, r2, #5
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	440a      	add	r2, r1
 80074d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074d8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3714      	adds	r7, #20
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b085      	sub	sp, #20
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	460b      	mov	r3, r1
 80074f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	68fa      	ldr	r2, [r7, #12]
 8007502:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007506:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800750a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	78fb      	ldrb	r3, [r7, #3]
 8007516:	011b      	lsls	r3, r3, #4
 8007518:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800751c:	68f9      	ldr	r1, [r7, #12]
 800751e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007522:	4313      	orrs	r3, r2
 8007524:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3714      	adds	r7, #20
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007534:	b480      	push	{r7}
 8007536:	b085      	sub	sp, #20
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800754e:	f023 0303 	bic.w	r3, r3, #3
 8007552:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007562:	f023 0302 	bic.w	r3, r3, #2
 8007566:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	3714      	adds	r7, #20
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr

08007576 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007576:	b480      	push	{r7}
 8007578:	b085      	sub	sp, #20
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68fa      	ldr	r2, [r7, #12]
 800758c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007590:	f023 0303 	bic.w	r3, r3, #3
 8007594:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075a4:	f043 0302 	orr.w	r3, r3, #2
 80075a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3714      	adds	r7, #20
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b085      	sub	sp, #20
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	695b      	ldr	r3, [r3, #20]
 80075c4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	699b      	ldr	r3, [r3, #24]
 80075ca:	68fa      	ldr	r2, [r7, #12]
 80075cc:	4013      	ands	r3, r2
 80075ce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80075d0:	68fb      	ldr	r3, [r7, #12]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3714      	adds	r7, #20
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr

080075de <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80075de:	b480      	push	{r7}
 80075e0:	b085      	sub	sp, #20
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075f0:	699b      	ldr	r3, [r3, #24]
 80075f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075fa:	69db      	ldr	r3, [r3, #28]
 80075fc:	68ba      	ldr	r2, [r7, #8]
 80075fe:	4013      	ands	r3, r2
 8007600:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	0c1b      	lsrs	r3, r3, #16
}
 8007606:	4618      	mov	r0, r3
 8007608:	3714      	adds	r7, #20
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr

08007612 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007612:	b480      	push	{r7}
 8007614:	b085      	sub	sp, #20
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007624:	699b      	ldr	r3, [r3, #24]
 8007626:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800762e:	69db      	ldr	r3, [r3, #28]
 8007630:	68ba      	ldr	r2, [r7, #8]
 8007632:	4013      	ands	r3, r2
 8007634:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	b29b      	uxth	r3, r3
}
 800763a:	4618      	mov	r0, r3
 800763c:	3714      	adds	r7, #20
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr

08007646 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007646:	b480      	push	{r7}
 8007648:	b085      	sub	sp, #20
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
 800764e:	460b      	mov	r3, r1
 8007650:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007656:	78fb      	ldrb	r3, [r7, #3]
 8007658:	015a      	lsls	r2, r3, #5
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	4413      	add	r3, r2
 800765e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800766c:	695b      	ldr	r3, [r3, #20]
 800766e:	68ba      	ldr	r2, [r7, #8]
 8007670:	4013      	ands	r3, r2
 8007672:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007674:	68bb      	ldr	r3, [r7, #8]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3714      	adds	r7, #20
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr

08007682 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007682:	b480      	push	{r7}
 8007684:	b087      	sub	sp, #28
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
 800768a:	460b      	mov	r3, r1
 800768c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076a4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80076a6:	78fb      	ldrb	r3, [r7, #3]
 80076a8:	f003 030f 	and.w	r3, r3, #15
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	fa22 f303 	lsr.w	r3, r2, r3
 80076b2:	01db      	lsls	r3, r3, #7
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	693a      	ldr	r2, [r7, #16]
 80076b8:	4313      	orrs	r3, r2
 80076ba:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80076bc:	78fb      	ldrb	r3, [r7, #3]
 80076be:	015a      	lsls	r2, r3, #5
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	4413      	add	r3, r2
 80076c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	693a      	ldr	r2, [r7, #16]
 80076cc:	4013      	ands	r3, r2
 80076ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80076d0:	68bb      	ldr	r3, [r7, #8]
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	371c      	adds	r7, #28
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr

080076de <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80076de:	b480      	push	{r7}
 80076e0:	b083      	sub	sp, #12
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	695b      	ldr	r3, [r3, #20]
 80076ea:	f003 0301 	and.w	r3, r3, #1
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	370c      	adds	r7, #12
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr

080076fa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80076fa:	b480      	push	{r7}
 80076fc:	b085      	sub	sp, #20
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	68fa      	ldr	r2, [r7, #12]
 8007710:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007714:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007718:	f023 0307 	bic.w	r3, r3, #7
 800771c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800772c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007730:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007732:	2300      	movs	r3, #0
}
 8007734:	4618      	mov	r0, r3
 8007736:	3714      	adds	r7, #20
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007740:	b480      	push	{r7}
 8007742:	b087      	sub	sp, #28
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	460b      	mov	r3, r1
 800774a:	607a      	str	r2, [r7, #4]
 800774c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	333c      	adds	r3, #60	; 0x3c
 8007756:	3304      	adds	r3, #4
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	4a26      	ldr	r2, [pc, #152]	; (80077f8 <USB_EP0_OutStart+0xb8>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d90a      	bls.n	800777a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007770:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007774:	d101      	bne.n	800777a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007776:	2300      	movs	r3, #0
 8007778:	e037      	b.n	80077ea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007780:	461a      	mov	r2, r3
 8007782:	2300      	movs	r3, #0
 8007784:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800778c:	691b      	ldr	r3, [r3, #16]
 800778e:	697a      	ldr	r2, [r7, #20]
 8007790:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007794:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007798:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077a0:	691b      	ldr	r3, [r3, #16]
 80077a2:	697a      	ldr	r2, [r7, #20]
 80077a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077a8:	f043 0318 	orr.w	r3, r3, #24
 80077ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	697a      	ldr	r2, [r7, #20]
 80077b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077bc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80077c0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80077c2:	7afb      	ldrb	r3, [r7, #11]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d10f      	bne.n	80077e8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077ce:	461a      	mov	r2, r3
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	697a      	ldr	r2, [r7, #20]
 80077de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077e2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80077e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	371c      	adds	r7, #28
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop
 80077f8:	4f54300a 	.word	0x4f54300a

080077fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007804:	2300      	movs	r3, #0
 8007806:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	3301      	adds	r3, #1
 800780c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	4a13      	ldr	r2, [pc, #76]	; (8007860 <USB_CoreReset+0x64>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d901      	bls.n	800781a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007816:	2303      	movs	r3, #3
 8007818:	e01b      	b.n	8007852 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	2b00      	cmp	r3, #0
 8007820:	daf2      	bge.n	8007808 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007822:	2300      	movs	r3, #0
 8007824:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	f043 0201 	orr.w	r2, r3, #1
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	3301      	adds	r3, #1
 8007836:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	4a09      	ldr	r2, [pc, #36]	; (8007860 <USB_CoreReset+0x64>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d901      	bls.n	8007844 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007840:	2303      	movs	r3, #3
 8007842:	e006      	b.n	8007852 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	691b      	ldr	r3, [r3, #16]
 8007848:	f003 0301 	and.w	r3, r3, #1
 800784c:	2b01      	cmp	r3, #1
 800784e:	d0f0      	beq.n	8007832 <USB_CoreReset+0x36>

  return HAL_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	3714      	adds	r7, #20
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr
 800785e:	bf00      	nop
 8007860:	00030d40 	.word	0x00030d40

08007864 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007868:	4904      	ldr	r1, [pc, #16]	; (800787c <MX_FATFS_Init+0x18>)
 800786a:	4805      	ldr	r0, [pc, #20]	; (8007880 <MX_FATFS_Init+0x1c>)
 800786c:	f002 f85c 	bl	8009928 <FATFS_LinkDriver>
 8007870:	4603      	mov	r3, r0
 8007872:	461a      	mov	r2, r3
 8007874:	4b03      	ldr	r3, [pc, #12]	; (8007884 <MX_FATFS_Init+0x20>)
 8007876:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007878:	bf00      	nop
 800787a:	bd80      	pop	{r7, pc}
 800787c:	20000478 	.word	0x20000478
 8007880:	2000000c 	.word	0x2000000c
 8007884:	20000474 	.word	0x20000474

08007888 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	4603      	mov	r3, r0
 8007890:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8007892:	4b06      	ldr	r3, [pc, #24]	; (80078ac <USER_initialize+0x24>)
 8007894:	2201      	movs	r2, #1
 8007896:	701a      	strb	r2, [r3, #0]
    return Stat;
 8007898:	4b04      	ldr	r3, [pc, #16]	; (80078ac <USER_initialize+0x24>)
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800789e:	4618      	mov	r0, r3
 80078a0:	370c      	adds	r7, #12
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr
 80078aa:	bf00      	nop
 80078ac:	20000009 	.word	0x20000009

080078b0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	4603      	mov	r3, r0
 80078b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80078ba:	4b06      	ldr	r3, [pc, #24]	; (80078d4 <USER_status+0x24>)
 80078bc:	2201      	movs	r2, #1
 80078be:	701a      	strb	r2, [r3, #0]
    return Stat;
 80078c0:	4b04      	ldr	r3, [pc, #16]	; (80078d4 <USER_status+0x24>)
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	370c      	adds	r7, #12
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr
 80078d2:	bf00      	nop
 80078d4:	20000009 	.word	0x20000009

080078d8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80078d8:	b480      	push	{r7}
 80078da:	b085      	sub	sp, #20
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60b9      	str	r1, [r7, #8]
 80078e0:	607a      	str	r2, [r7, #4]
 80078e2:	603b      	str	r3, [r7, #0]
 80078e4:	4603      	mov	r3, r0
 80078e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 80078e8:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3714      	adds	r7, #20
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr

080078f6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80078f6:	b480      	push	{r7}
 80078f8:	b085      	sub	sp, #20
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	607a      	str	r2, [r7, #4]
 8007900:	603b      	str	r3, [r7, #0]
 8007902:	4603      	mov	r3, r0
 8007904:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8007906:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8007908:	4618      	mov	r0, r3
 800790a:	3714      	adds	r7, #20
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007914:	b480      	push	{r7}
 8007916:	b085      	sub	sp, #20
 8007918:	af00      	add	r7, sp, #0
 800791a:	4603      	mov	r3, r0
 800791c:	603a      	str	r2, [r7, #0]
 800791e:	71fb      	strb	r3, [r7, #7]
 8007920:	460b      	mov	r3, r1
 8007922:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	73fb      	strb	r3, [r7, #15]
    return res;
 8007928:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800792a:	4618      	mov	r0, r3
 800792c:	3714      	adds	r7, #20
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr
	...

08007938 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	460b      	mov	r3, r1
 8007942:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007944:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007948:	f002 fd24 	bl	800a394 <USBD_static_malloc>
 800794c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d109      	bne.n	8007968 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	32b0      	adds	r2, #176	; 0xb0
 800795e:	2100      	movs	r1, #0
 8007960:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007964:	2302      	movs	r3, #2
 8007966:	e0d4      	b.n	8007b12 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007968:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800796c:	2100      	movs	r1, #0
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	f002 fd54 	bl	800a41c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	32b0      	adds	r2, #176	; 0xb0
 800797e:	68f9      	ldr	r1, [r7, #12]
 8007980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	32b0      	adds	r2, #176	; 0xb0
 800798e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	7c1b      	ldrb	r3, [r3, #16]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d138      	bne.n	8007a12 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80079a0:	4b5e      	ldr	r3, [pc, #376]	; (8007b1c <USBD_CDC_Init+0x1e4>)
 80079a2:	7819      	ldrb	r1, [r3, #0]
 80079a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079a8:	2202      	movs	r2, #2
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f002 fb81 	bl	800a0b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80079b0:	4b5a      	ldr	r3, [pc, #360]	; (8007b1c <USBD_CDC_Init+0x1e4>)
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	f003 020f 	and.w	r2, r3, #15
 80079b8:	6879      	ldr	r1, [r7, #4]
 80079ba:	4613      	mov	r3, r2
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	4413      	add	r3, r2
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	440b      	add	r3, r1
 80079c4:	3324      	adds	r3, #36	; 0x24
 80079c6:	2201      	movs	r2, #1
 80079c8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80079ca:	4b55      	ldr	r3, [pc, #340]	; (8007b20 <USBD_CDC_Init+0x1e8>)
 80079cc:	7819      	ldrb	r1, [r3, #0]
 80079ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079d2:	2202      	movs	r2, #2
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f002 fb6c 	bl	800a0b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80079da:	4b51      	ldr	r3, [pc, #324]	; (8007b20 <USBD_CDC_Init+0x1e8>)
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	f003 020f 	and.w	r2, r3, #15
 80079e2:	6879      	ldr	r1, [r7, #4]
 80079e4:	4613      	mov	r3, r2
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	4413      	add	r3, r2
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	440b      	add	r3, r1
 80079ee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80079f2:	2201      	movs	r2, #1
 80079f4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80079f6:	4b4b      	ldr	r3, [pc, #300]	; (8007b24 <USBD_CDC_Init+0x1ec>)
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	f003 020f 	and.w	r2, r3, #15
 80079fe:	6879      	ldr	r1, [r7, #4]
 8007a00:	4613      	mov	r3, r2
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	4413      	add	r3, r2
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	440b      	add	r3, r1
 8007a0a:	3326      	adds	r3, #38	; 0x26
 8007a0c:	2210      	movs	r2, #16
 8007a0e:	801a      	strh	r2, [r3, #0]
 8007a10:	e035      	b.n	8007a7e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007a12:	4b42      	ldr	r3, [pc, #264]	; (8007b1c <USBD_CDC_Init+0x1e4>)
 8007a14:	7819      	ldrb	r1, [r3, #0]
 8007a16:	2340      	movs	r3, #64	; 0x40
 8007a18:	2202      	movs	r2, #2
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f002 fb49 	bl	800a0b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007a20:	4b3e      	ldr	r3, [pc, #248]	; (8007b1c <USBD_CDC_Init+0x1e4>)
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	f003 020f 	and.w	r2, r3, #15
 8007a28:	6879      	ldr	r1, [r7, #4]
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	4413      	add	r3, r2
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	440b      	add	r3, r1
 8007a34:	3324      	adds	r3, #36	; 0x24
 8007a36:	2201      	movs	r2, #1
 8007a38:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007a3a:	4b39      	ldr	r3, [pc, #228]	; (8007b20 <USBD_CDC_Init+0x1e8>)
 8007a3c:	7819      	ldrb	r1, [r3, #0]
 8007a3e:	2340      	movs	r3, #64	; 0x40
 8007a40:	2202      	movs	r2, #2
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f002 fb35 	bl	800a0b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007a48:	4b35      	ldr	r3, [pc, #212]	; (8007b20 <USBD_CDC_Init+0x1e8>)
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	f003 020f 	and.w	r2, r3, #15
 8007a50:	6879      	ldr	r1, [r7, #4]
 8007a52:	4613      	mov	r3, r2
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	4413      	add	r3, r2
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	440b      	add	r3, r1
 8007a5c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007a60:	2201      	movs	r2, #1
 8007a62:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007a64:	4b2f      	ldr	r3, [pc, #188]	; (8007b24 <USBD_CDC_Init+0x1ec>)
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	f003 020f 	and.w	r2, r3, #15
 8007a6c:	6879      	ldr	r1, [r7, #4]
 8007a6e:	4613      	mov	r3, r2
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	4413      	add	r3, r2
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	440b      	add	r3, r1
 8007a78:	3326      	adds	r3, #38	; 0x26
 8007a7a:	2210      	movs	r2, #16
 8007a7c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007a7e:	4b29      	ldr	r3, [pc, #164]	; (8007b24 <USBD_CDC_Init+0x1ec>)
 8007a80:	7819      	ldrb	r1, [r3, #0]
 8007a82:	2308      	movs	r3, #8
 8007a84:	2203      	movs	r2, #3
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f002 fb13 	bl	800a0b2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007a8c:	4b25      	ldr	r3, [pc, #148]	; (8007b24 <USBD_CDC_Init+0x1ec>)
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	f003 020f 	and.w	r2, r3, #15
 8007a94:	6879      	ldr	r1, [r7, #4]
 8007a96:	4613      	mov	r3, r2
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	4413      	add	r3, r2
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	440b      	add	r3, r1
 8007aa0:	3324      	adds	r3, #36	; 0x24
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	33b0      	adds	r3, #176	; 0xb0
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	4413      	add	r3, r2
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2200      	movs	r2, #0
 8007ace:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d101      	bne.n	8007ae0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007adc:	2302      	movs	r3, #2
 8007ade:	e018      	b.n	8007b12 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	7c1b      	ldrb	r3, [r3, #16]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d10a      	bne.n	8007afe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007ae8:	4b0d      	ldr	r3, [pc, #52]	; (8007b20 <USBD_CDC_Init+0x1e8>)
 8007aea:	7819      	ldrb	r1, [r3, #0]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007af2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f002 fbca 	bl	800a290 <USBD_LL_PrepareReceive>
 8007afc:	e008      	b.n	8007b10 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007afe:	4b08      	ldr	r3, [pc, #32]	; (8007b20 <USBD_CDC_Init+0x1e8>)
 8007b00:	7819      	ldrb	r1, [r3, #0]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b08:	2340      	movs	r3, #64	; 0x40
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f002 fbc0 	bl	800a290 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3710      	adds	r7, #16
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	200000a7 	.word	0x200000a7
 8007b20:	200000a8 	.word	0x200000a8
 8007b24:	200000a9 	.word	0x200000a9

08007b28 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	460b      	mov	r3, r1
 8007b32:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007b34:	4b3a      	ldr	r3, [pc, #232]	; (8007c20 <USBD_CDC_DeInit+0xf8>)
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	4619      	mov	r1, r3
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f002 fadf 	bl	800a0fe <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007b40:	4b37      	ldr	r3, [pc, #220]	; (8007c20 <USBD_CDC_DeInit+0xf8>)
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	f003 020f 	and.w	r2, r3, #15
 8007b48:	6879      	ldr	r1, [r7, #4]
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	4413      	add	r3, r2
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	440b      	add	r3, r1
 8007b54:	3324      	adds	r3, #36	; 0x24
 8007b56:	2200      	movs	r2, #0
 8007b58:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007b5a:	4b32      	ldr	r3, [pc, #200]	; (8007c24 <USBD_CDC_DeInit+0xfc>)
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	4619      	mov	r1, r3
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f002 facc 	bl	800a0fe <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007b66:	4b2f      	ldr	r3, [pc, #188]	; (8007c24 <USBD_CDC_DeInit+0xfc>)
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	f003 020f 	and.w	r2, r3, #15
 8007b6e:	6879      	ldr	r1, [r7, #4]
 8007b70:	4613      	mov	r3, r2
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	4413      	add	r3, r2
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	440b      	add	r3, r1
 8007b7a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007b7e:	2200      	movs	r2, #0
 8007b80:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007b82:	4b29      	ldr	r3, [pc, #164]	; (8007c28 <USBD_CDC_DeInit+0x100>)
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	4619      	mov	r1, r3
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f002 fab8 	bl	800a0fe <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007b8e:	4b26      	ldr	r3, [pc, #152]	; (8007c28 <USBD_CDC_DeInit+0x100>)
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	f003 020f 	and.w	r2, r3, #15
 8007b96:	6879      	ldr	r1, [r7, #4]
 8007b98:	4613      	mov	r3, r2
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	4413      	add	r3, r2
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	440b      	add	r3, r1
 8007ba2:	3324      	adds	r3, #36	; 0x24
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007ba8:	4b1f      	ldr	r3, [pc, #124]	; (8007c28 <USBD_CDC_DeInit+0x100>)
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	f003 020f 	and.w	r2, r3, #15
 8007bb0:	6879      	ldr	r1, [r7, #4]
 8007bb2:	4613      	mov	r3, r2
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	4413      	add	r3, r2
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	440b      	add	r3, r1
 8007bbc:	3326      	adds	r3, #38	; 0x26
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	32b0      	adds	r2, #176	; 0xb0
 8007bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d01f      	beq.n	8007c14 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	33b0      	adds	r3, #176	; 0xb0
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	4413      	add	r3, r2
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	32b0      	adds	r2, #176	; 0xb0
 8007bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f002 fbda 	bl	800a3b0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	32b0      	adds	r2, #176	; 0xb0
 8007c06:	2100      	movs	r1, #0
 8007c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3708      	adds	r7, #8
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	200000a7 	.word	0x200000a7
 8007c24:	200000a8 	.word	0x200000a8
 8007c28:	200000a9 	.word	0x200000a9

08007c2c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b086      	sub	sp, #24
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	32b0      	adds	r2, #176	; 0xb0
 8007c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c44:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007c46:	2300      	movs	r3, #0
 8007c48:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d101      	bne.n	8007c5c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007c58:	2303      	movs	r3, #3
 8007c5a:	e0bf      	b.n	8007ddc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d050      	beq.n	8007d0a <USBD_CDC_Setup+0xde>
 8007c68:	2b20      	cmp	r3, #32
 8007c6a:	f040 80af 	bne.w	8007dcc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	88db      	ldrh	r3, [r3, #6]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d03a      	beq.n	8007cec <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	b25b      	sxtb	r3, r3
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	da1b      	bge.n	8007cb8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	33b0      	adds	r3, #176	; 0xb0
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	4413      	add	r3, r2
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	683a      	ldr	r2, [r7, #0]
 8007c94:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007c96:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007c98:	683a      	ldr	r2, [r7, #0]
 8007c9a:	88d2      	ldrh	r2, [r2, #6]
 8007c9c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	88db      	ldrh	r3, [r3, #6]
 8007ca2:	2b07      	cmp	r3, #7
 8007ca4:	bf28      	it	cs
 8007ca6:	2307      	movcs	r3, #7
 8007ca8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	89fa      	ldrh	r2, [r7, #14]
 8007cae:	4619      	mov	r1, r3
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f001 fd6d 	bl	8009790 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007cb6:	e090      	b.n	8007dda <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	785a      	ldrb	r2, [r3, #1]
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	88db      	ldrh	r3, [r3, #6]
 8007cc6:	2b3f      	cmp	r3, #63	; 0x3f
 8007cc8:	d803      	bhi.n	8007cd2 <USBD_CDC_Setup+0xa6>
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	88db      	ldrh	r3, [r3, #6]
 8007cce:	b2da      	uxtb	r2, r3
 8007cd0:	e000      	b.n	8007cd4 <USBD_CDC_Setup+0xa8>
 8007cd2:	2240      	movs	r2, #64	; 0x40
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007cda:	6939      	ldr	r1, [r7, #16]
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f001 fd7f 	bl	80097e8 <USBD_CtlPrepareRx>
      break;
 8007cea:	e076      	b.n	8007dda <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	33b0      	adds	r3, #176	; 0xb0
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	4413      	add	r3, r2
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	683a      	ldr	r2, [r7, #0]
 8007d00:	7850      	ldrb	r0, [r2, #1]
 8007d02:	2200      	movs	r2, #0
 8007d04:	6839      	ldr	r1, [r7, #0]
 8007d06:	4798      	blx	r3
      break;
 8007d08:	e067      	b.n	8007dda <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	785b      	ldrb	r3, [r3, #1]
 8007d0e:	2b0b      	cmp	r3, #11
 8007d10:	d851      	bhi.n	8007db6 <USBD_CDC_Setup+0x18a>
 8007d12:	a201      	add	r2, pc, #4	; (adr r2, 8007d18 <USBD_CDC_Setup+0xec>)
 8007d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d18:	08007d49 	.word	0x08007d49
 8007d1c:	08007dc5 	.word	0x08007dc5
 8007d20:	08007db7 	.word	0x08007db7
 8007d24:	08007db7 	.word	0x08007db7
 8007d28:	08007db7 	.word	0x08007db7
 8007d2c:	08007db7 	.word	0x08007db7
 8007d30:	08007db7 	.word	0x08007db7
 8007d34:	08007db7 	.word	0x08007db7
 8007d38:	08007db7 	.word	0x08007db7
 8007d3c:	08007db7 	.word	0x08007db7
 8007d40:	08007d73 	.word	0x08007d73
 8007d44:	08007d9d 	.word	0x08007d9d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	2b03      	cmp	r3, #3
 8007d52:	d107      	bne.n	8007d64 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007d54:	f107 030a 	add.w	r3, r7, #10
 8007d58:	2202      	movs	r2, #2
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f001 fd17 	bl	8009790 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d62:	e032      	b.n	8007dca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007d64:	6839      	ldr	r1, [r7, #0]
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f001 fca1 	bl	80096ae <USBD_CtlError>
            ret = USBD_FAIL;
 8007d6c:	2303      	movs	r3, #3
 8007d6e:	75fb      	strb	r3, [r7, #23]
          break;
 8007d70:	e02b      	b.n	8007dca <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	2b03      	cmp	r3, #3
 8007d7c:	d107      	bne.n	8007d8e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007d7e:	f107 030d 	add.w	r3, r7, #13
 8007d82:	2201      	movs	r2, #1
 8007d84:	4619      	mov	r1, r3
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f001 fd02 	bl	8009790 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d8c:	e01d      	b.n	8007dca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007d8e:	6839      	ldr	r1, [r7, #0]
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f001 fc8c 	bl	80096ae <USBD_CtlError>
            ret = USBD_FAIL;
 8007d96:	2303      	movs	r3, #3
 8007d98:	75fb      	strb	r3, [r7, #23]
          break;
 8007d9a:	e016      	b.n	8007dca <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	2b03      	cmp	r3, #3
 8007da6:	d00f      	beq.n	8007dc8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007da8:	6839      	ldr	r1, [r7, #0]
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f001 fc7f 	bl	80096ae <USBD_CtlError>
            ret = USBD_FAIL;
 8007db0:	2303      	movs	r3, #3
 8007db2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007db4:	e008      	b.n	8007dc8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007db6:	6839      	ldr	r1, [r7, #0]
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f001 fc78 	bl	80096ae <USBD_CtlError>
          ret = USBD_FAIL;
 8007dbe:	2303      	movs	r3, #3
 8007dc0:	75fb      	strb	r3, [r7, #23]
          break;
 8007dc2:	e002      	b.n	8007dca <USBD_CDC_Setup+0x19e>
          break;
 8007dc4:	bf00      	nop
 8007dc6:	e008      	b.n	8007dda <USBD_CDC_Setup+0x1ae>
          break;
 8007dc8:	bf00      	nop
      }
      break;
 8007dca:	e006      	b.n	8007dda <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007dcc:	6839      	ldr	r1, [r7, #0]
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f001 fc6d 	bl	80096ae <USBD_CtlError>
      ret = USBD_FAIL;
 8007dd4:	2303      	movs	r3, #3
 8007dd6:	75fb      	strb	r3, [r7, #23]
      break;
 8007dd8:	bf00      	nop
  }

  return (uint8_t)ret;
 8007dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3718      	adds	r7, #24
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	460b      	mov	r3, r1
 8007dee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007df6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	32b0      	adds	r2, #176	; 0xb0
 8007e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d101      	bne.n	8007e0e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007e0a:	2303      	movs	r3, #3
 8007e0c:	e065      	b.n	8007eda <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	32b0      	adds	r2, #176	; 0xb0
 8007e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e1c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007e1e:	78fb      	ldrb	r3, [r7, #3]
 8007e20:	f003 020f 	and.w	r2, r3, #15
 8007e24:	6879      	ldr	r1, [r7, #4]
 8007e26:	4613      	mov	r3, r2
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	4413      	add	r3, r2
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	440b      	add	r3, r1
 8007e30:	3318      	adds	r3, #24
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d02f      	beq.n	8007e98 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007e38:	78fb      	ldrb	r3, [r7, #3]
 8007e3a:	f003 020f 	and.w	r2, r3, #15
 8007e3e:	6879      	ldr	r1, [r7, #4]
 8007e40:	4613      	mov	r3, r2
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	4413      	add	r3, r2
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	440b      	add	r3, r1
 8007e4a:	3318      	adds	r3, #24
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	78fb      	ldrb	r3, [r7, #3]
 8007e50:	f003 010f 	and.w	r1, r3, #15
 8007e54:	68f8      	ldr	r0, [r7, #12]
 8007e56:	460b      	mov	r3, r1
 8007e58:	00db      	lsls	r3, r3, #3
 8007e5a:	440b      	add	r3, r1
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	4403      	add	r3, r0
 8007e60:	3348      	adds	r3, #72	; 0x48
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	fbb2 f1f3 	udiv	r1, r2, r3
 8007e68:	fb01 f303 	mul.w	r3, r1, r3
 8007e6c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d112      	bne.n	8007e98 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007e72:	78fb      	ldrb	r3, [r7, #3]
 8007e74:	f003 020f 	and.w	r2, r3, #15
 8007e78:	6879      	ldr	r1, [r7, #4]
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	4413      	add	r3, r2
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	440b      	add	r3, r1
 8007e84:	3318      	adds	r3, #24
 8007e86:	2200      	movs	r2, #0
 8007e88:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007e8a:	78f9      	ldrb	r1, [r7, #3]
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	2200      	movs	r2, #0
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f002 f9dc 	bl	800a24e <USBD_LL_Transmit>
 8007e96:	e01f      	b.n	8007ed8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	33b0      	adds	r3, #176	; 0xb0
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	4413      	add	r3, r2
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	691b      	ldr	r3, [r3, #16]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d010      	beq.n	8007ed8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	33b0      	adds	r3, #176	; 0xb0
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	4413      	add	r3, r2
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	691b      	ldr	r3, [r3, #16]
 8007ec8:	68ba      	ldr	r2, [r7, #8]
 8007eca:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007ece:	68ba      	ldr	r2, [r7, #8]
 8007ed0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007ed4:	78fa      	ldrb	r2, [r7, #3]
 8007ed6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007ed8:	2300      	movs	r3, #0
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}

08007ee2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b084      	sub	sp, #16
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
 8007eea:	460b      	mov	r3, r1
 8007eec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	32b0      	adds	r2, #176	; 0xb0
 8007ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007efc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	32b0      	adds	r2, #176	; 0xb0
 8007f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d101      	bne.n	8007f14 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007f10:	2303      	movs	r3, #3
 8007f12:	e01a      	b.n	8007f4a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007f14:	78fb      	ldrb	r3, [r7, #3]
 8007f16:	4619      	mov	r1, r3
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f002 f9da 	bl	800a2d2 <USBD_LL_GetRxDataSize>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	33b0      	adds	r3, #176	; 0xb0
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	4413      	add	r3, r2
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	68db      	ldr	r3, [r3, #12]
 8007f38:	68fa      	ldr	r2, [r7, #12]
 8007f3a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007f3e:	68fa      	ldr	r2, [r7, #12]
 8007f40:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007f44:	4611      	mov	r1, r2
 8007f46:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3710      	adds	r7, #16
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b084      	sub	sp, #16
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	32b0      	adds	r2, #176	; 0xb0
 8007f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f68:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d101      	bne.n	8007f74 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007f70:	2303      	movs	r3, #3
 8007f72:	e025      	b.n	8007fc0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	33b0      	adds	r3, #176	; 0xb0
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	4413      	add	r3, r2
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d01a      	beq.n	8007fbe <USBD_CDC_EP0_RxReady+0x6c>
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007f8e:	2bff      	cmp	r3, #255	; 0xff
 8007f90:	d015      	beq.n	8007fbe <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	33b0      	adds	r3, #176	; 0xb0
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	4413      	add	r3, r2
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007faa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007fac:	68fa      	ldr	r2, [r7, #12]
 8007fae:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007fb2:	b292      	uxth	r2, r2
 8007fb4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	22ff      	movs	r2, #255	; 0xff
 8007fba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3710      	adds	r7, #16
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b086      	sub	sp, #24
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007fd0:	2182      	movs	r1, #130	; 0x82
 8007fd2:	4818      	ldr	r0, [pc, #96]	; (8008034 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007fd4:	f000 fd09 	bl	80089ea <USBD_GetEpDesc>
 8007fd8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007fda:	2101      	movs	r1, #1
 8007fdc:	4815      	ldr	r0, [pc, #84]	; (8008034 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007fde:	f000 fd04 	bl	80089ea <USBD_GetEpDesc>
 8007fe2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007fe4:	2181      	movs	r1, #129	; 0x81
 8007fe6:	4813      	ldr	r0, [pc, #76]	; (8008034 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007fe8:	f000 fcff 	bl	80089ea <USBD_GetEpDesc>
 8007fec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d002      	beq.n	8007ffa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	2210      	movs	r2, #16
 8007ff8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d006      	beq.n	800800e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	2200      	movs	r2, #0
 8008004:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008008:	711a      	strb	r2, [r3, #4]
 800800a:	2200      	movs	r2, #0
 800800c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d006      	beq.n	8008022 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2200      	movs	r2, #0
 8008018:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800801c:	711a      	strb	r2, [r3, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2243      	movs	r2, #67	; 0x43
 8008026:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008028:	4b02      	ldr	r3, [pc, #8]	; (8008034 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800802a:	4618      	mov	r0, r3
 800802c:	3718      	adds	r7, #24
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	20000064 	.word	0x20000064

08008038 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b086      	sub	sp, #24
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008040:	2182      	movs	r1, #130	; 0x82
 8008042:	4818      	ldr	r0, [pc, #96]	; (80080a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008044:	f000 fcd1 	bl	80089ea <USBD_GetEpDesc>
 8008048:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800804a:	2101      	movs	r1, #1
 800804c:	4815      	ldr	r0, [pc, #84]	; (80080a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800804e:	f000 fccc 	bl	80089ea <USBD_GetEpDesc>
 8008052:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008054:	2181      	movs	r1, #129	; 0x81
 8008056:	4813      	ldr	r0, [pc, #76]	; (80080a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008058:	f000 fcc7 	bl	80089ea <USBD_GetEpDesc>
 800805c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d002      	beq.n	800806a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	2210      	movs	r2, #16
 8008068:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d006      	beq.n	800807e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	2200      	movs	r2, #0
 8008074:	711a      	strb	r2, [r3, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	f042 0202 	orr.w	r2, r2, #2
 800807c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d006      	beq.n	8008092 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2200      	movs	r2, #0
 8008088:	711a      	strb	r2, [r3, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	f042 0202 	orr.w	r2, r2, #2
 8008090:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2243      	movs	r2, #67	; 0x43
 8008096:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008098:	4b02      	ldr	r3, [pc, #8]	; (80080a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800809a:	4618      	mov	r0, r3
 800809c:	3718      	adds	r7, #24
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	20000064 	.word	0x20000064

080080a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b086      	sub	sp, #24
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80080b0:	2182      	movs	r1, #130	; 0x82
 80080b2:	4818      	ldr	r0, [pc, #96]	; (8008114 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80080b4:	f000 fc99 	bl	80089ea <USBD_GetEpDesc>
 80080b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80080ba:	2101      	movs	r1, #1
 80080bc:	4815      	ldr	r0, [pc, #84]	; (8008114 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80080be:	f000 fc94 	bl	80089ea <USBD_GetEpDesc>
 80080c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80080c4:	2181      	movs	r1, #129	; 0x81
 80080c6:	4813      	ldr	r0, [pc, #76]	; (8008114 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80080c8:	f000 fc8f 	bl	80089ea <USBD_GetEpDesc>
 80080cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d002      	beq.n	80080da <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	2210      	movs	r2, #16
 80080d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d006      	beq.n	80080ee <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080e8:	711a      	strb	r2, [r3, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d006      	beq.n	8008102 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2200      	movs	r2, #0
 80080f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080fc:	711a      	strb	r2, [r3, #4]
 80080fe:	2200      	movs	r2, #0
 8008100:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2243      	movs	r2, #67	; 0x43
 8008106:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008108:	4b02      	ldr	r3, [pc, #8]	; (8008114 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800810a:	4618      	mov	r0, r3
 800810c:	3718      	adds	r7, #24
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop
 8008114:	20000064 	.word	0x20000064

08008118 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	220a      	movs	r2, #10
 8008124:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008126:	4b03      	ldr	r3, [pc, #12]	; (8008134 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008128:	4618      	mov	r0, r3
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr
 8008134:	20000020 	.word	0x20000020

08008138 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d101      	bne.n	800814c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008148:	2303      	movs	r3, #3
 800814a:	e009      	b.n	8008160 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	33b0      	adds	r3, #176	; 0xb0
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	4413      	add	r3, r2
 800815a:	683a      	ldr	r2, [r7, #0]
 800815c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800815e:	2300      	movs	r3, #0
}
 8008160:	4618      	mov	r0, r3
 8008162:	370c      	adds	r7, #12
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800816c:	b480      	push	{r7}
 800816e:	b087      	sub	sp, #28
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	32b0      	adds	r2, #176	; 0xb0
 8008182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008186:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d101      	bne.n	8008192 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800818e:	2303      	movs	r3, #3
 8008190:	e008      	b.n	80081a4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	68ba      	ldr	r2, [r7, #8]
 8008196:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80081a2:	2300      	movs	r3, #0
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	371c      	adds	r7, #28
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b085      	sub	sp, #20
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	32b0      	adds	r2, #176	; 0xb0
 80081c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081c8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d101      	bne.n	80081d4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80081d0:	2303      	movs	r3, #3
 80081d2:	e004      	b.n	80081de <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	683a      	ldr	r2, [r7, #0]
 80081d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80081dc:	2300      	movs	r3, #0
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3714      	adds	r7, #20
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr
	...

080081ec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	32b0      	adds	r2, #176	; 0xb0
 80081fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008202:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	32b0      	adds	r2, #176	; 0xb0
 800820e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d101      	bne.n	800821a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008216:	2303      	movs	r3, #3
 8008218:	e018      	b.n	800824c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	7c1b      	ldrb	r3, [r3, #16]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d10a      	bne.n	8008238 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008222:	4b0c      	ldr	r3, [pc, #48]	; (8008254 <USBD_CDC_ReceivePacket+0x68>)
 8008224:	7819      	ldrb	r1, [r3, #0]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800822c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f002 f82d 	bl	800a290 <USBD_LL_PrepareReceive>
 8008236:	e008      	b.n	800824a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008238:	4b06      	ldr	r3, [pc, #24]	; (8008254 <USBD_CDC_ReceivePacket+0x68>)
 800823a:	7819      	ldrb	r1, [r3, #0]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008242:	2340      	movs	r3, #64	; 0x40
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f002 f823 	bl	800a290 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800824a:	2300      	movs	r3, #0
}
 800824c:	4618      	mov	r0, r3
 800824e:	3710      	adds	r7, #16
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}
 8008254:	200000a8 	.word	0x200000a8

08008258 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b086      	sub	sp, #24
 800825c:	af00      	add	r7, sp, #0
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	60b9      	str	r1, [r7, #8]
 8008262:	4613      	mov	r3, r2
 8008264:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d101      	bne.n	8008270 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800826c:	2303      	movs	r3, #3
 800826e:	e01f      	b.n	80082b0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2200      	movs	r2, #0
 8008274:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2200      	movs	r2, #0
 800827c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2200      	movs	r2, #0
 8008284:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d003      	beq.n	8008296 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	68ba      	ldr	r2, [r7, #8]
 8008292:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2201      	movs	r2, #1
 800829a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	79fa      	ldrb	r2, [r7, #7]
 80082a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80082a4:	68f8      	ldr	r0, [r7, #12]
 80082a6:	f001 fe9d 	bl	8009fe4 <USBD_LL_Init>
 80082aa:	4603      	mov	r3, r0
 80082ac:	75fb      	strb	r3, [r7, #23]

  return ret;
 80082ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3718      	adds	r7, #24
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80082c2:	2300      	movs	r3, #0
 80082c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d101      	bne.n	80082d0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80082cc:	2303      	movs	r3, #3
 80082ce:	e025      	b.n	800831c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	683a      	ldr	r2, [r7, #0]
 80082d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	32ae      	adds	r2, #174	; 0xae
 80082e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00f      	beq.n	800830c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	32ae      	adds	r2, #174	; 0xae
 80082f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082fc:	f107 020e 	add.w	r2, r7, #14
 8008300:	4610      	mov	r0, r2
 8008302:	4798      	blx	r3
 8008304:	4602      	mov	r2, r0
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008312:	1c5a      	adds	r2, r3, #1
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800831a:	2300      	movs	r3, #0
}
 800831c:	4618      	mov	r0, r3
 800831e:	3710      	adds	r7, #16
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f001 fea5 	bl	800a07c <USBD_LL_Start>
 8008332:	4603      	mov	r3, r0
}
 8008334:	4618      	mov	r0, r3
 8008336:	3708      	adds	r7, #8
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008344:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008346:	4618      	mov	r0, r3
 8008348:	370c      	adds	r7, #12
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr

08008352 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008352:	b580      	push	{r7, lr}
 8008354:	b084      	sub	sp, #16
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
 800835a:	460b      	mov	r3, r1
 800835c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800835e:	2300      	movs	r3, #0
 8008360:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008368:	2b00      	cmp	r3, #0
 800836a:	d009      	beq.n	8008380 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	78fa      	ldrb	r2, [r7, #3]
 8008376:	4611      	mov	r1, r2
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	4798      	blx	r3
 800837c:	4603      	mov	r3, r0
 800837e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008380:	7bfb      	ldrb	r3, [r7, #15]
}
 8008382:	4618      	mov	r0, r3
 8008384:	3710      	adds	r7, #16
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}

0800838a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800838a:	b580      	push	{r7, lr}
 800838c:	b084      	sub	sp, #16
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
 8008392:	460b      	mov	r3, r1
 8008394:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008396:	2300      	movs	r3, #0
 8008398:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	78fa      	ldrb	r2, [r7, #3]
 80083a4:	4611      	mov	r1, r2
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	4798      	blx	r3
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d001      	beq.n	80083b4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80083b0:	2303      	movs	r3, #3
 80083b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80083b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3710      	adds	r7, #16
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b084      	sub	sp, #16
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
 80083c6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80083ce:	6839      	ldr	r1, [r7, #0]
 80083d0:	4618      	mov	r0, r3
 80083d2:	f001 f932 	bl	800963a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2201      	movs	r2, #1
 80083da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80083e4:	461a      	mov	r2, r3
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80083f2:	f003 031f 	and.w	r3, r3, #31
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	d01a      	beq.n	8008430 <USBD_LL_SetupStage+0x72>
 80083fa:	2b02      	cmp	r3, #2
 80083fc:	d822      	bhi.n	8008444 <USBD_LL_SetupStage+0x86>
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d002      	beq.n	8008408 <USBD_LL_SetupStage+0x4a>
 8008402:	2b01      	cmp	r3, #1
 8008404:	d00a      	beq.n	800841c <USBD_LL_SetupStage+0x5e>
 8008406:	e01d      	b.n	8008444 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800840e:	4619      	mov	r1, r3
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 fb5f 	bl	8008ad4 <USBD_StdDevReq>
 8008416:	4603      	mov	r3, r0
 8008418:	73fb      	strb	r3, [r7, #15]
      break;
 800841a:	e020      	b.n	800845e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008422:	4619      	mov	r1, r3
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 fbc7 	bl	8008bb8 <USBD_StdItfReq>
 800842a:	4603      	mov	r3, r0
 800842c:	73fb      	strb	r3, [r7, #15]
      break;
 800842e:	e016      	b.n	800845e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008436:	4619      	mov	r1, r3
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 fc29 	bl	8008c90 <USBD_StdEPReq>
 800843e:	4603      	mov	r3, r0
 8008440:	73fb      	strb	r3, [r7, #15]
      break;
 8008442:	e00c      	b.n	800845e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800844a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800844e:	b2db      	uxtb	r3, r3
 8008450:	4619      	mov	r1, r3
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f001 fe72 	bl	800a13c <USBD_LL_StallEP>
 8008458:	4603      	mov	r3, r0
 800845a:	73fb      	strb	r3, [r7, #15]
      break;
 800845c:	bf00      	nop
  }

  return ret;
 800845e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008460:	4618      	mov	r0, r3
 8008462:	3710      	adds	r7, #16
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b086      	sub	sp, #24
 800846c:	af00      	add	r7, sp, #0
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	460b      	mov	r3, r1
 8008472:	607a      	str	r2, [r7, #4]
 8008474:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008476:	2300      	movs	r3, #0
 8008478:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800847a:	7afb      	ldrb	r3, [r7, #11]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d16e      	bne.n	800855e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008486:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800848e:	2b03      	cmp	r3, #3
 8008490:	f040 8098 	bne.w	80085c4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	689a      	ldr	r2, [r3, #8]
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	429a      	cmp	r2, r3
 800849e:	d913      	bls.n	80084c8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	689a      	ldr	r2, [r3, #8]
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	1ad2      	subs	r2, r2, r3
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	68da      	ldr	r2, [r3, #12]
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	4293      	cmp	r3, r2
 80084b8:	bf28      	it	cs
 80084ba:	4613      	movcs	r3, r2
 80084bc:	461a      	mov	r2, r3
 80084be:	6879      	ldr	r1, [r7, #4]
 80084c0:	68f8      	ldr	r0, [r7, #12]
 80084c2:	f001 f9ae 	bl	8009822 <USBD_CtlContinueRx>
 80084c6:	e07d      	b.n	80085c4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80084ce:	f003 031f 	and.w	r3, r3, #31
 80084d2:	2b02      	cmp	r3, #2
 80084d4:	d014      	beq.n	8008500 <USBD_LL_DataOutStage+0x98>
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	d81d      	bhi.n	8008516 <USBD_LL_DataOutStage+0xae>
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d002      	beq.n	80084e4 <USBD_LL_DataOutStage+0x7c>
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d003      	beq.n	80084ea <USBD_LL_DataOutStage+0x82>
 80084e2:	e018      	b.n	8008516 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80084e4:	2300      	movs	r3, #0
 80084e6:	75bb      	strb	r3, [r7, #22]
            break;
 80084e8:	e018      	b.n	800851c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	4619      	mov	r1, r3
 80084f4:	68f8      	ldr	r0, [r7, #12]
 80084f6:	f000 fa5e 	bl	80089b6 <USBD_CoreFindIF>
 80084fa:	4603      	mov	r3, r0
 80084fc:	75bb      	strb	r3, [r7, #22]
            break;
 80084fe:	e00d      	b.n	800851c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008506:	b2db      	uxtb	r3, r3
 8008508:	4619      	mov	r1, r3
 800850a:	68f8      	ldr	r0, [r7, #12]
 800850c:	f000 fa60 	bl	80089d0 <USBD_CoreFindEP>
 8008510:	4603      	mov	r3, r0
 8008512:	75bb      	strb	r3, [r7, #22]
            break;
 8008514:	e002      	b.n	800851c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008516:	2300      	movs	r3, #0
 8008518:	75bb      	strb	r3, [r7, #22]
            break;
 800851a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800851c:	7dbb      	ldrb	r3, [r7, #22]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d119      	bne.n	8008556 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008528:	b2db      	uxtb	r3, r3
 800852a:	2b03      	cmp	r3, #3
 800852c:	d113      	bne.n	8008556 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800852e:	7dba      	ldrb	r2, [r7, #22]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	32ae      	adds	r2, #174	; 0xae
 8008534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008538:	691b      	ldr	r3, [r3, #16]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00b      	beq.n	8008556 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800853e:	7dba      	ldrb	r2, [r7, #22]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008546:	7dba      	ldrb	r2, [r7, #22]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	32ae      	adds	r2, #174	; 0xae
 800854c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008550:	691b      	ldr	r3, [r3, #16]
 8008552:	68f8      	ldr	r0, [r7, #12]
 8008554:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008556:	68f8      	ldr	r0, [r7, #12]
 8008558:	f001 f974 	bl	8009844 <USBD_CtlSendStatus>
 800855c:	e032      	b.n	80085c4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800855e:	7afb      	ldrb	r3, [r7, #11]
 8008560:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008564:	b2db      	uxtb	r3, r3
 8008566:	4619      	mov	r1, r3
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	f000 fa31 	bl	80089d0 <USBD_CoreFindEP>
 800856e:	4603      	mov	r3, r0
 8008570:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008572:	7dbb      	ldrb	r3, [r7, #22]
 8008574:	2bff      	cmp	r3, #255	; 0xff
 8008576:	d025      	beq.n	80085c4 <USBD_LL_DataOutStage+0x15c>
 8008578:	7dbb      	ldrb	r3, [r7, #22]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d122      	bne.n	80085c4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008584:	b2db      	uxtb	r3, r3
 8008586:	2b03      	cmp	r3, #3
 8008588:	d117      	bne.n	80085ba <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800858a:	7dba      	ldrb	r2, [r7, #22]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	32ae      	adds	r2, #174	; 0xae
 8008590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008594:	699b      	ldr	r3, [r3, #24]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d00f      	beq.n	80085ba <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800859a:	7dba      	ldrb	r2, [r7, #22]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80085a2:	7dba      	ldrb	r2, [r7, #22]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	32ae      	adds	r2, #174	; 0xae
 80085a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ac:	699b      	ldr	r3, [r3, #24]
 80085ae:	7afa      	ldrb	r2, [r7, #11]
 80085b0:	4611      	mov	r1, r2
 80085b2:	68f8      	ldr	r0, [r7, #12]
 80085b4:	4798      	blx	r3
 80085b6:	4603      	mov	r3, r0
 80085b8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80085ba:	7dfb      	ldrb	r3, [r7, #23]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d001      	beq.n	80085c4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80085c0:	7dfb      	ldrb	r3, [r7, #23]
 80085c2:	e000      	b.n	80085c6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80085c4:	2300      	movs	r3, #0
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3718      	adds	r7, #24
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}

080085ce <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b086      	sub	sp, #24
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	60f8      	str	r0, [r7, #12]
 80085d6:	460b      	mov	r3, r1
 80085d8:	607a      	str	r2, [r7, #4]
 80085da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80085dc:	7afb      	ldrb	r3, [r7, #11]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d16f      	bne.n	80086c2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	3314      	adds	r3, #20
 80085e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80085ee:	2b02      	cmp	r3, #2
 80085f0:	d15a      	bne.n	80086a8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	689a      	ldr	r2, [r3, #8]
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	68db      	ldr	r3, [r3, #12]
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d914      	bls.n	8008628 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	689a      	ldr	r2, [r3, #8]
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	68db      	ldr	r3, [r3, #12]
 8008606:	1ad2      	subs	r2, r2, r3
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	461a      	mov	r2, r3
 8008612:	6879      	ldr	r1, [r7, #4]
 8008614:	68f8      	ldr	r0, [r7, #12]
 8008616:	f001 f8d6 	bl	80097c6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800861a:	2300      	movs	r3, #0
 800861c:	2200      	movs	r2, #0
 800861e:	2100      	movs	r1, #0
 8008620:	68f8      	ldr	r0, [r7, #12]
 8008622:	f001 fe35 	bl	800a290 <USBD_LL_PrepareReceive>
 8008626:	e03f      	b.n	80086a8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	68da      	ldr	r2, [r3, #12]
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	429a      	cmp	r2, r3
 8008632:	d11c      	bne.n	800866e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	685a      	ldr	r2, [r3, #4]
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800863c:	429a      	cmp	r2, r3
 800863e:	d316      	bcc.n	800866e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	685a      	ldr	r2, [r3, #4]
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800864a:	429a      	cmp	r2, r3
 800864c:	d20f      	bcs.n	800866e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800864e:	2200      	movs	r2, #0
 8008650:	2100      	movs	r1, #0
 8008652:	68f8      	ldr	r0, [r7, #12]
 8008654:	f001 f8b7 	bl	80097c6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2200      	movs	r2, #0
 800865c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008660:	2300      	movs	r3, #0
 8008662:	2200      	movs	r2, #0
 8008664:	2100      	movs	r1, #0
 8008666:	68f8      	ldr	r0, [r7, #12]
 8008668:	f001 fe12 	bl	800a290 <USBD_LL_PrepareReceive>
 800866c:	e01c      	b.n	80086a8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008674:	b2db      	uxtb	r3, r3
 8008676:	2b03      	cmp	r3, #3
 8008678:	d10f      	bne.n	800869a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008680:	68db      	ldr	r3, [r3, #12]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d009      	beq.n	800869a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2200      	movs	r2, #0
 800868a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008694:	68db      	ldr	r3, [r3, #12]
 8008696:	68f8      	ldr	r0, [r7, #12]
 8008698:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800869a:	2180      	movs	r1, #128	; 0x80
 800869c:	68f8      	ldr	r0, [r7, #12]
 800869e:	f001 fd4d 	bl	800a13c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80086a2:	68f8      	ldr	r0, [r7, #12]
 80086a4:	f001 f8e1 	bl	800986a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d03a      	beq.n	8008728 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80086b2:	68f8      	ldr	r0, [r7, #12]
 80086b4:	f7ff fe42 	bl	800833c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2200      	movs	r2, #0
 80086bc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80086c0:	e032      	b.n	8008728 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80086c2:	7afb      	ldrb	r3, [r7, #11]
 80086c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	4619      	mov	r1, r3
 80086cc:	68f8      	ldr	r0, [r7, #12]
 80086ce:	f000 f97f 	bl	80089d0 <USBD_CoreFindEP>
 80086d2:	4603      	mov	r3, r0
 80086d4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80086d6:	7dfb      	ldrb	r3, [r7, #23]
 80086d8:	2bff      	cmp	r3, #255	; 0xff
 80086da:	d025      	beq.n	8008728 <USBD_LL_DataInStage+0x15a>
 80086dc:	7dfb      	ldrb	r3, [r7, #23]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d122      	bne.n	8008728 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	2b03      	cmp	r3, #3
 80086ec:	d11c      	bne.n	8008728 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80086ee:	7dfa      	ldrb	r2, [r7, #23]
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	32ae      	adds	r2, #174	; 0xae
 80086f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086f8:	695b      	ldr	r3, [r3, #20]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d014      	beq.n	8008728 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80086fe:	7dfa      	ldrb	r2, [r7, #23]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008706:	7dfa      	ldrb	r2, [r7, #23]
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	32ae      	adds	r2, #174	; 0xae
 800870c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008710:	695b      	ldr	r3, [r3, #20]
 8008712:	7afa      	ldrb	r2, [r7, #11]
 8008714:	4611      	mov	r1, r2
 8008716:	68f8      	ldr	r0, [r7, #12]
 8008718:	4798      	blx	r3
 800871a:	4603      	mov	r3, r0
 800871c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800871e:	7dbb      	ldrb	r3, [r7, #22]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d001      	beq.n	8008728 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008724:	7dbb      	ldrb	r3, [r7, #22]
 8008726:	e000      	b.n	800872a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008728:	2300      	movs	r3, #0
}
 800872a:	4618      	mov	r0, r3
 800872c:	3718      	adds	r7, #24
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}

08008732 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008732:	b580      	push	{r7, lr}
 8008734:	b084      	sub	sp, #16
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800873a:	2300      	movs	r3, #0
 800873c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2201      	movs	r2, #1
 8008742:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800876a:	2b00      	cmp	r3, #0
 800876c:	d014      	beq.n	8008798 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d00e      	beq.n	8008798 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	6852      	ldr	r2, [r2, #4]
 8008786:	b2d2      	uxtb	r2, r2
 8008788:	4611      	mov	r1, r2
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	4798      	blx	r3
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d001      	beq.n	8008798 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008794:	2303      	movs	r3, #3
 8008796:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008798:	2340      	movs	r3, #64	; 0x40
 800879a:	2200      	movs	r2, #0
 800879c:	2100      	movs	r1, #0
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f001 fc87 	bl	800a0b2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2240      	movs	r2, #64	; 0x40
 80087b0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80087b4:	2340      	movs	r3, #64	; 0x40
 80087b6:	2200      	movs	r2, #0
 80087b8:	2180      	movs	r1, #128	; 0x80
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f001 fc79 	bl	800a0b2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2201      	movs	r2, #1
 80087c4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2240      	movs	r2, #64	; 0x40
 80087ca:	621a      	str	r2, [r3, #32]

  return ret;
 80087cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80087d6:	b480      	push	{r7}
 80087d8:	b083      	sub	sp, #12
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
 80087de:	460b      	mov	r3, r1
 80087e0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	78fa      	ldrb	r2, [r7, #3]
 80087e6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80087e8:	2300      	movs	r3, #0
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	370c      	adds	r7, #12
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr

080087f6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80087f6:	b480      	push	{r7}
 80087f8:	b083      	sub	sp, #12
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008804:	b2da      	uxtb	r2, r3
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2204      	movs	r2, #4
 8008810:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008814:	2300      	movs	r3, #0
}
 8008816:	4618      	mov	r0, r3
 8008818:	370c      	adds	r7, #12
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr

08008822 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008822:	b480      	push	{r7}
 8008824:	b083      	sub	sp, #12
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008830:	b2db      	uxtb	r3, r3
 8008832:	2b04      	cmp	r3, #4
 8008834:	d106      	bne.n	8008844 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800883c:	b2da      	uxtb	r2, r3
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008844:	2300      	movs	r3, #0
}
 8008846:	4618      	mov	r0, r3
 8008848:	370c      	adds	r7, #12
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr

08008852 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008852:	b580      	push	{r7, lr}
 8008854:	b082      	sub	sp, #8
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008860:	b2db      	uxtb	r3, r3
 8008862:	2b03      	cmp	r3, #3
 8008864:	d110      	bne.n	8008888 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800886c:	2b00      	cmp	r3, #0
 800886e:	d00b      	beq.n	8008888 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008876:	69db      	ldr	r3, [r3, #28]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d005      	beq.n	8008888 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008882:	69db      	ldr	r3, [r3, #28]
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008888:	2300      	movs	r3, #0
}
 800888a:	4618      	mov	r0, r3
 800888c:	3708      	adds	r7, #8
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}

08008892 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008892:	b580      	push	{r7, lr}
 8008894:	b082      	sub	sp, #8
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
 800889a:	460b      	mov	r3, r1
 800889c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	32ae      	adds	r2, #174	; 0xae
 80088a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d101      	bne.n	80088b4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80088b0:	2303      	movs	r3, #3
 80088b2:	e01c      	b.n	80088ee <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	2b03      	cmp	r3, #3
 80088be:	d115      	bne.n	80088ec <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	32ae      	adds	r2, #174	; 0xae
 80088ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ce:	6a1b      	ldr	r3, [r3, #32]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d00b      	beq.n	80088ec <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	32ae      	adds	r2, #174	; 0xae
 80088de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088e2:	6a1b      	ldr	r3, [r3, #32]
 80088e4:	78fa      	ldrb	r2, [r7, #3]
 80088e6:	4611      	mov	r1, r2
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3708      	adds	r7, #8
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b082      	sub	sp, #8
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
 80088fe:	460b      	mov	r3, r1
 8008900:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	32ae      	adds	r2, #174	; 0xae
 800890c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d101      	bne.n	8008918 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008914:	2303      	movs	r3, #3
 8008916:	e01c      	b.n	8008952 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800891e:	b2db      	uxtb	r3, r3
 8008920:	2b03      	cmp	r3, #3
 8008922:	d115      	bne.n	8008950 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	32ae      	adds	r2, #174	; 0xae
 800892e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008934:	2b00      	cmp	r3, #0
 8008936:	d00b      	beq.n	8008950 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	32ae      	adds	r2, #174	; 0xae
 8008942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008948:	78fa      	ldrb	r2, [r7, #3]
 800894a:	4611      	mov	r1, r2
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	3708      	adds	r7, #8
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800895a:	b480      	push	{r7}
 800895c:	b083      	sub	sp, #12
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008962:	2300      	movs	r3, #0
}
 8008964:	4618      	mov	r0, r3
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008978:	2300      	movs	r3, #0
 800897a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2201      	movs	r2, #1
 8008980:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800898a:	2b00      	cmp	r3, #0
 800898c:	d00e      	beq.n	80089ac <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	6852      	ldr	r2, [r2, #4]
 800899a:	b2d2      	uxtb	r2, r2
 800899c:	4611      	mov	r1, r2
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	4798      	blx	r3
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d001      	beq.n	80089ac <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80089a8:	2303      	movs	r3, #3
 80089aa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80089ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3710      	adds	r7, #16
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80089b6:	b480      	push	{r7}
 80089b8:	b083      	sub	sp, #12
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
 80089be:	460b      	mov	r3, r1
 80089c0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80089c2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	370c      	adds	r7, #12
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b083      	sub	sp, #12
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	460b      	mov	r3, r1
 80089da:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80089dc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80089de:	4618      	mov	r0, r3
 80089e0:	370c      	adds	r7, #12
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr

080089ea <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80089ea:	b580      	push	{r7, lr}
 80089ec:	b086      	sub	sp, #24
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
 80089f2:	460b      	mov	r3, r1
 80089f4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80089fe:	2300      	movs	r3, #0
 8008a00:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	885b      	ldrh	r3, [r3, #2]
 8008a06:	b29a      	uxth	r2, r3
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d920      	bls.n	8008a54 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008a1a:	e013      	b.n	8008a44 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008a1c:	f107 030a 	add.w	r3, r7, #10
 8008a20:	4619      	mov	r1, r3
 8008a22:	6978      	ldr	r0, [r7, #20]
 8008a24:	f000 f81b 	bl	8008a5e <USBD_GetNextDesc>
 8008a28:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	785b      	ldrb	r3, [r3, #1]
 8008a2e:	2b05      	cmp	r3, #5
 8008a30:	d108      	bne.n	8008a44 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	789b      	ldrb	r3, [r3, #2]
 8008a3a:	78fa      	ldrb	r2, [r7, #3]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d008      	beq.n	8008a52 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008a40:	2300      	movs	r3, #0
 8008a42:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	885b      	ldrh	r3, [r3, #2]
 8008a48:	b29a      	uxth	r2, r3
 8008a4a:	897b      	ldrh	r3, [r7, #10]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d8e5      	bhi.n	8008a1c <USBD_GetEpDesc+0x32>
 8008a50:	e000      	b.n	8008a54 <USBD_GetEpDesc+0x6a>
          break;
 8008a52:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008a54:	693b      	ldr	r3, [r7, #16]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3718      	adds	r7, #24
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}

08008a5e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008a5e:	b480      	push	{r7}
 8008a60:	b085      	sub	sp, #20
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
 8008a66:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	881a      	ldrh	r2, [r3, #0]
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	4413      	add	r3, r2
 8008a78:	b29a      	uxth	r2, r3
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	461a      	mov	r2, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	4413      	add	r3, r2
 8008a88:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3714      	adds	r7, #20
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b087      	sub	sp, #28
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	3301      	adds	r3, #1
 8008aae:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008ab6:	8a3b      	ldrh	r3, [r7, #16]
 8008ab8:	021b      	lsls	r3, r3, #8
 8008aba:	b21a      	sxth	r2, r3
 8008abc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	b21b      	sxth	r3, r3
 8008ac4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008ac6:	89fb      	ldrh	r3, [r7, #14]
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	371c      	adds	r7, #28
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr

08008ad4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008aea:	2b40      	cmp	r3, #64	; 0x40
 8008aec:	d005      	beq.n	8008afa <USBD_StdDevReq+0x26>
 8008aee:	2b40      	cmp	r3, #64	; 0x40
 8008af0:	d857      	bhi.n	8008ba2 <USBD_StdDevReq+0xce>
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00f      	beq.n	8008b16 <USBD_StdDevReq+0x42>
 8008af6:	2b20      	cmp	r3, #32
 8008af8:	d153      	bne.n	8008ba2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	32ae      	adds	r2, #174	; 0xae
 8008b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	6839      	ldr	r1, [r7, #0]
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	4798      	blx	r3
 8008b10:	4603      	mov	r3, r0
 8008b12:	73fb      	strb	r3, [r7, #15]
      break;
 8008b14:	e04a      	b.n	8008bac <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	785b      	ldrb	r3, [r3, #1]
 8008b1a:	2b09      	cmp	r3, #9
 8008b1c:	d83b      	bhi.n	8008b96 <USBD_StdDevReq+0xc2>
 8008b1e:	a201      	add	r2, pc, #4	; (adr r2, 8008b24 <USBD_StdDevReq+0x50>)
 8008b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b24:	08008b79 	.word	0x08008b79
 8008b28:	08008b8d 	.word	0x08008b8d
 8008b2c:	08008b97 	.word	0x08008b97
 8008b30:	08008b83 	.word	0x08008b83
 8008b34:	08008b97 	.word	0x08008b97
 8008b38:	08008b57 	.word	0x08008b57
 8008b3c:	08008b4d 	.word	0x08008b4d
 8008b40:	08008b97 	.word	0x08008b97
 8008b44:	08008b6f 	.word	0x08008b6f
 8008b48:	08008b61 	.word	0x08008b61
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008b4c:	6839      	ldr	r1, [r7, #0]
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 fa3c 	bl	8008fcc <USBD_GetDescriptor>
          break;
 8008b54:	e024      	b.n	8008ba0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008b56:	6839      	ldr	r1, [r7, #0]
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 fbcb 	bl	80092f4 <USBD_SetAddress>
          break;
 8008b5e:	e01f      	b.n	8008ba0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008b60:	6839      	ldr	r1, [r7, #0]
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 fc0a 	bl	800937c <USBD_SetConfig>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	73fb      	strb	r3, [r7, #15]
          break;
 8008b6c:	e018      	b.n	8008ba0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008b6e:	6839      	ldr	r1, [r7, #0]
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 fcad 	bl	80094d0 <USBD_GetConfig>
          break;
 8008b76:	e013      	b.n	8008ba0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008b78:	6839      	ldr	r1, [r7, #0]
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 fcde 	bl	800953c <USBD_GetStatus>
          break;
 8008b80:	e00e      	b.n	8008ba0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008b82:	6839      	ldr	r1, [r7, #0]
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f000 fd0d 	bl	80095a4 <USBD_SetFeature>
          break;
 8008b8a:	e009      	b.n	8008ba0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008b8c:	6839      	ldr	r1, [r7, #0]
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 fd31 	bl	80095f6 <USBD_ClrFeature>
          break;
 8008b94:	e004      	b.n	8008ba0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008b96:	6839      	ldr	r1, [r7, #0]
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 fd88 	bl	80096ae <USBD_CtlError>
          break;
 8008b9e:	bf00      	nop
      }
      break;
 8008ba0:	e004      	b.n	8008bac <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008ba2:	6839      	ldr	r1, [r7, #0]
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 fd82 	bl	80096ae <USBD_CtlError>
      break;
 8008baa:	bf00      	nop
  }

  return ret;
 8008bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3710      	adds	r7, #16
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop

08008bb8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008bce:	2b40      	cmp	r3, #64	; 0x40
 8008bd0:	d005      	beq.n	8008bde <USBD_StdItfReq+0x26>
 8008bd2:	2b40      	cmp	r3, #64	; 0x40
 8008bd4:	d852      	bhi.n	8008c7c <USBD_StdItfReq+0xc4>
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d001      	beq.n	8008bde <USBD_StdItfReq+0x26>
 8008bda:	2b20      	cmp	r3, #32
 8008bdc:	d14e      	bne.n	8008c7c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008be4:	b2db      	uxtb	r3, r3
 8008be6:	3b01      	subs	r3, #1
 8008be8:	2b02      	cmp	r3, #2
 8008bea:	d840      	bhi.n	8008c6e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	889b      	ldrh	r3, [r3, #4]
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d836      	bhi.n	8008c64 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	889b      	ldrh	r3, [r3, #4]
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f7ff fed9 	bl	80089b6 <USBD_CoreFindIF>
 8008c04:	4603      	mov	r3, r0
 8008c06:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c08:	7bbb      	ldrb	r3, [r7, #14]
 8008c0a:	2bff      	cmp	r3, #255	; 0xff
 8008c0c:	d01d      	beq.n	8008c4a <USBD_StdItfReq+0x92>
 8008c0e:	7bbb      	ldrb	r3, [r7, #14]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d11a      	bne.n	8008c4a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008c14:	7bba      	ldrb	r2, [r7, #14]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	32ae      	adds	r2, #174	; 0xae
 8008c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d00f      	beq.n	8008c44 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008c24:	7bba      	ldrb	r2, [r7, #14]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008c2c:	7bba      	ldrb	r2, [r7, #14]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	32ae      	adds	r2, #174	; 0xae
 8008c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c36:	689b      	ldr	r3, [r3, #8]
 8008c38:	6839      	ldr	r1, [r7, #0]
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	4798      	blx	r3
 8008c3e:	4603      	mov	r3, r0
 8008c40:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008c42:	e004      	b.n	8008c4e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008c44:	2303      	movs	r3, #3
 8008c46:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008c48:	e001      	b.n	8008c4e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008c4a:	2303      	movs	r3, #3
 8008c4c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	88db      	ldrh	r3, [r3, #6]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d110      	bne.n	8008c78 <USBD_StdItfReq+0xc0>
 8008c56:	7bfb      	ldrb	r3, [r7, #15]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d10d      	bne.n	8008c78 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 fdf1 	bl	8009844 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008c62:	e009      	b.n	8008c78 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008c64:	6839      	ldr	r1, [r7, #0]
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 fd21 	bl	80096ae <USBD_CtlError>
          break;
 8008c6c:	e004      	b.n	8008c78 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008c6e:	6839      	ldr	r1, [r7, #0]
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 fd1c 	bl	80096ae <USBD_CtlError>
          break;
 8008c76:	e000      	b.n	8008c7a <USBD_StdItfReq+0xc2>
          break;
 8008c78:	bf00      	nop
      }
      break;
 8008c7a:	e004      	b.n	8008c86 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008c7c:	6839      	ldr	r1, [r7, #0]
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 fd15 	bl	80096ae <USBD_CtlError>
      break;
 8008c84:	bf00      	nop
  }

  return ret;
 8008c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3710      	adds	r7, #16
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b084      	sub	sp, #16
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	889b      	ldrh	r3, [r3, #4]
 8008ca2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008cac:	2b40      	cmp	r3, #64	; 0x40
 8008cae:	d007      	beq.n	8008cc0 <USBD_StdEPReq+0x30>
 8008cb0:	2b40      	cmp	r3, #64	; 0x40
 8008cb2:	f200 817f 	bhi.w	8008fb4 <USBD_StdEPReq+0x324>
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d02a      	beq.n	8008d10 <USBD_StdEPReq+0x80>
 8008cba:	2b20      	cmp	r3, #32
 8008cbc:	f040 817a 	bne.w	8008fb4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008cc0:	7bbb      	ldrb	r3, [r7, #14]
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f7ff fe83 	bl	80089d0 <USBD_CoreFindEP>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008cce:	7b7b      	ldrb	r3, [r7, #13]
 8008cd0:	2bff      	cmp	r3, #255	; 0xff
 8008cd2:	f000 8174 	beq.w	8008fbe <USBD_StdEPReq+0x32e>
 8008cd6:	7b7b      	ldrb	r3, [r7, #13]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	f040 8170 	bne.w	8008fbe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008cde:	7b7a      	ldrb	r2, [r7, #13]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008ce6:	7b7a      	ldrb	r2, [r7, #13]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	32ae      	adds	r2, #174	; 0xae
 8008cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	f000 8163 	beq.w	8008fbe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008cf8:	7b7a      	ldrb	r2, [r7, #13]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	32ae      	adds	r2, #174	; 0xae
 8008cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	6839      	ldr	r1, [r7, #0]
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	4798      	blx	r3
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008d0e:	e156      	b.n	8008fbe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	785b      	ldrb	r3, [r3, #1]
 8008d14:	2b03      	cmp	r3, #3
 8008d16:	d008      	beq.n	8008d2a <USBD_StdEPReq+0x9a>
 8008d18:	2b03      	cmp	r3, #3
 8008d1a:	f300 8145 	bgt.w	8008fa8 <USBD_StdEPReq+0x318>
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	f000 809b 	beq.w	8008e5a <USBD_StdEPReq+0x1ca>
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d03c      	beq.n	8008da2 <USBD_StdEPReq+0x112>
 8008d28:	e13e      	b.n	8008fa8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	2b02      	cmp	r3, #2
 8008d34:	d002      	beq.n	8008d3c <USBD_StdEPReq+0xac>
 8008d36:	2b03      	cmp	r3, #3
 8008d38:	d016      	beq.n	8008d68 <USBD_StdEPReq+0xd8>
 8008d3a:	e02c      	b.n	8008d96 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d3c:	7bbb      	ldrb	r3, [r7, #14]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d00d      	beq.n	8008d5e <USBD_StdEPReq+0xce>
 8008d42:	7bbb      	ldrb	r3, [r7, #14]
 8008d44:	2b80      	cmp	r3, #128	; 0x80
 8008d46:	d00a      	beq.n	8008d5e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d48:	7bbb      	ldrb	r3, [r7, #14]
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f001 f9f5 	bl	800a13c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d52:	2180      	movs	r1, #128	; 0x80
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f001 f9f1 	bl	800a13c <USBD_LL_StallEP>
 8008d5a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008d5c:	e020      	b.n	8008da0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008d5e:	6839      	ldr	r1, [r7, #0]
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 fca4 	bl	80096ae <USBD_CtlError>
              break;
 8008d66:	e01b      	b.n	8008da0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	885b      	ldrh	r3, [r3, #2]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d10e      	bne.n	8008d8e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008d70:	7bbb      	ldrb	r3, [r7, #14]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d00b      	beq.n	8008d8e <USBD_StdEPReq+0xfe>
 8008d76:	7bbb      	ldrb	r3, [r7, #14]
 8008d78:	2b80      	cmp	r3, #128	; 0x80
 8008d7a:	d008      	beq.n	8008d8e <USBD_StdEPReq+0xfe>
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	88db      	ldrh	r3, [r3, #6]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d104      	bne.n	8008d8e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d84:	7bbb      	ldrb	r3, [r7, #14]
 8008d86:	4619      	mov	r1, r3
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f001 f9d7 	bl	800a13c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 fd58 	bl	8009844 <USBD_CtlSendStatus>

              break;
 8008d94:	e004      	b.n	8008da0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008d96:	6839      	ldr	r1, [r7, #0]
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 fc88 	bl	80096ae <USBD_CtlError>
              break;
 8008d9e:	bf00      	nop
          }
          break;
 8008da0:	e107      	b.n	8008fb2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008da8:	b2db      	uxtb	r3, r3
 8008daa:	2b02      	cmp	r3, #2
 8008dac:	d002      	beq.n	8008db4 <USBD_StdEPReq+0x124>
 8008dae:	2b03      	cmp	r3, #3
 8008db0:	d016      	beq.n	8008de0 <USBD_StdEPReq+0x150>
 8008db2:	e04b      	b.n	8008e4c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008db4:	7bbb      	ldrb	r3, [r7, #14]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d00d      	beq.n	8008dd6 <USBD_StdEPReq+0x146>
 8008dba:	7bbb      	ldrb	r3, [r7, #14]
 8008dbc:	2b80      	cmp	r3, #128	; 0x80
 8008dbe:	d00a      	beq.n	8008dd6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008dc0:	7bbb      	ldrb	r3, [r7, #14]
 8008dc2:	4619      	mov	r1, r3
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f001 f9b9 	bl	800a13c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008dca:	2180      	movs	r1, #128	; 0x80
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f001 f9b5 	bl	800a13c <USBD_LL_StallEP>
 8008dd2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008dd4:	e040      	b.n	8008e58 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008dd6:	6839      	ldr	r1, [r7, #0]
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 fc68 	bl	80096ae <USBD_CtlError>
              break;
 8008dde:	e03b      	b.n	8008e58 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	885b      	ldrh	r3, [r3, #2]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d136      	bne.n	8008e56 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008de8:	7bbb      	ldrb	r3, [r7, #14]
 8008dea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d004      	beq.n	8008dfc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008df2:	7bbb      	ldrb	r3, [r7, #14]
 8008df4:	4619      	mov	r1, r3
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f001 f9bf 	bl	800a17a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 fd21 	bl	8009844 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008e02:	7bbb      	ldrb	r3, [r7, #14]
 8008e04:	4619      	mov	r1, r3
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f7ff fde2 	bl	80089d0 <USBD_CoreFindEP>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e10:	7b7b      	ldrb	r3, [r7, #13]
 8008e12:	2bff      	cmp	r3, #255	; 0xff
 8008e14:	d01f      	beq.n	8008e56 <USBD_StdEPReq+0x1c6>
 8008e16:	7b7b      	ldrb	r3, [r7, #13]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d11c      	bne.n	8008e56 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008e1c:	7b7a      	ldrb	r2, [r7, #13]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008e24:	7b7a      	ldrb	r2, [r7, #13]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	32ae      	adds	r2, #174	; 0xae
 8008e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d010      	beq.n	8008e56 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008e34:	7b7a      	ldrb	r2, [r7, #13]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	32ae      	adds	r2, #174	; 0xae
 8008e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	6839      	ldr	r1, [r7, #0]
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	4798      	blx	r3
 8008e46:	4603      	mov	r3, r0
 8008e48:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008e4a:	e004      	b.n	8008e56 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008e4c:	6839      	ldr	r1, [r7, #0]
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 fc2d 	bl	80096ae <USBD_CtlError>
              break;
 8008e54:	e000      	b.n	8008e58 <USBD_StdEPReq+0x1c8>
              break;
 8008e56:	bf00      	nop
          }
          break;
 8008e58:	e0ab      	b.n	8008fb2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	2b02      	cmp	r3, #2
 8008e64:	d002      	beq.n	8008e6c <USBD_StdEPReq+0x1dc>
 8008e66:	2b03      	cmp	r3, #3
 8008e68:	d032      	beq.n	8008ed0 <USBD_StdEPReq+0x240>
 8008e6a:	e097      	b.n	8008f9c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e6c:	7bbb      	ldrb	r3, [r7, #14]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d007      	beq.n	8008e82 <USBD_StdEPReq+0x1f2>
 8008e72:	7bbb      	ldrb	r3, [r7, #14]
 8008e74:	2b80      	cmp	r3, #128	; 0x80
 8008e76:	d004      	beq.n	8008e82 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008e78:	6839      	ldr	r1, [r7, #0]
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f000 fc17 	bl	80096ae <USBD_CtlError>
                break;
 8008e80:	e091      	b.n	8008fa6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	da0b      	bge.n	8008ea2 <USBD_StdEPReq+0x212>
 8008e8a:	7bbb      	ldrb	r3, [r7, #14]
 8008e8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e90:	4613      	mov	r3, r2
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	4413      	add	r3, r2
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	3310      	adds	r3, #16
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	3304      	adds	r3, #4
 8008ea0:	e00b      	b.n	8008eba <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ea2:	7bbb      	ldrb	r3, [r7, #14]
 8008ea4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ea8:	4613      	mov	r3, r2
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	4413      	add	r3, r2
 8008eae:	009b      	lsls	r3, r3, #2
 8008eb0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	4413      	add	r3, r2
 8008eb8:	3304      	adds	r3, #4
 8008eba:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	2202      	movs	r2, #2
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 fc61 	bl	8009790 <USBD_CtlSendData>
              break;
 8008ece:	e06a      	b.n	8008fa6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008ed0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	da11      	bge.n	8008efc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008ed8:	7bbb      	ldrb	r3, [r7, #14]
 8008eda:	f003 020f 	and.w	r2, r3, #15
 8008ede:	6879      	ldr	r1, [r7, #4]
 8008ee0:	4613      	mov	r3, r2
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	4413      	add	r3, r2
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	440b      	add	r3, r1
 8008eea:	3324      	adds	r3, #36	; 0x24
 8008eec:	881b      	ldrh	r3, [r3, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d117      	bne.n	8008f22 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008ef2:	6839      	ldr	r1, [r7, #0]
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 fbda 	bl	80096ae <USBD_CtlError>
                  break;
 8008efa:	e054      	b.n	8008fa6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008efc:	7bbb      	ldrb	r3, [r7, #14]
 8008efe:	f003 020f 	and.w	r2, r3, #15
 8008f02:	6879      	ldr	r1, [r7, #4]
 8008f04:	4613      	mov	r3, r2
 8008f06:	009b      	lsls	r3, r3, #2
 8008f08:	4413      	add	r3, r2
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	440b      	add	r3, r1
 8008f0e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008f12:	881b      	ldrh	r3, [r3, #0]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d104      	bne.n	8008f22 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008f18:	6839      	ldr	r1, [r7, #0]
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 fbc7 	bl	80096ae <USBD_CtlError>
                  break;
 8008f20:	e041      	b.n	8008fa6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	da0b      	bge.n	8008f42 <USBD_StdEPReq+0x2b2>
 8008f2a:	7bbb      	ldrb	r3, [r7, #14]
 8008f2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f30:	4613      	mov	r3, r2
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	4413      	add	r3, r2
 8008f36:	009b      	lsls	r3, r3, #2
 8008f38:	3310      	adds	r3, #16
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	4413      	add	r3, r2
 8008f3e:	3304      	adds	r3, #4
 8008f40:	e00b      	b.n	8008f5a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008f42:	7bbb      	ldrb	r3, [r7, #14]
 8008f44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f48:	4613      	mov	r3, r2
 8008f4a:	009b      	lsls	r3, r3, #2
 8008f4c:	4413      	add	r3, r2
 8008f4e:	009b      	lsls	r3, r3, #2
 8008f50:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	4413      	add	r3, r2
 8008f58:	3304      	adds	r3, #4
 8008f5a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008f5c:	7bbb      	ldrb	r3, [r7, #14]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d002      	beq.n	8008f68 <USBD_StdEPReq+0x2d8>
 8008f62:	7bbb      	ldrb	r3, [r7, #14]
 8008f64:	2b80      	cmp	r3, #128	; 0x80
 8008f66:	d103      	bne.n	8008f70 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	601a      	str	r2, [r3, #0]
 8008f6e:	e00e      	b.n	8008f8e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008f70:	7bbb      	ldrb	r3, [r7, #14]
 8008f72:	4619      	mov	r1, r3
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f001 f91f 	bl	800a1b8 <USBD_LL_IsStallEP>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d003      	beq.n	8008f88 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	2201      	movs	r2, #1
 8008f84:	601a      	str	r2, [r3, #0]
 8008f86:	e002      	b.n	8008f8e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	2202      	movs	r2, #2
 8008f92:	4619      	mov	r1, r3
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 fbfb 	bl	8009790 <USBD_CtlSendData>
              break;
 8008f9a:	e004      	b.n	8008fa6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008f9c:	6839      	ldr	r1, [r7, #0]
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 fb85 	bl	80096ae <USBD_CtlError>
              break;
 8008fa4:	bf00      	nop
          }
          break;
 8008fa6:	e004      	b.n	8008fb2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008fa8:	6839      	ldr	r1, [r7, #0]
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 fb7f 	bl	80096ae <USBD_CtlError>
          break;
 8008fb0:	bf00      	nop
      }
      break;
 8008fb2:	e005      	b.n	8008fc0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008fb4:	6839      	ldr	r1, [r7, #0]
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 fb79 	bl	80096ae <USBD_CtlError>
      break;
 8008fbc:	e000      	b.n	8008fc0 <USBD_StdEPReq+0x330>
      break;
 8008fbe:	bf00      	nop
  }

  return ret;
 8008fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3710      	adds	r7, #16
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
	...

08008fcc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	885b      	ldrh	r3, [r3, #2]
 8008fe6:	0a1b      	lsrs	r3, r3, #8
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	3b01      	subs	r3, #1
 8008fec:	2b0e      	cmp	r3, #14
 8008fee:	f200 8152 	bhi.w	8009296 <USBD_GetDescriptor+0x2ca>
 8008ff2:	a201      	add	r2, pc, #4	; (adr r2, 8008ff8 <USBD_GetDescriptor+0x2c>)
 8008ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff8:	08009069 	.word	0x08009069
 8008ffc:	08009081 	.word	0x08009081
 8009000:	080090c1 	.word	0x080090c1
 8009004:	08009297 	.word	0x08009297
 8009008:	08009297 	.word	0x08009297
 800900c:	08009237 	.word	0x08009237
 8009010:	08009263 	.word	0x08009263
 8009014:	08009297 	.word	0x08009297
 8009018:	08009297 	.word	0x08009297
 800901c:	08009297 	.word	0x08009297
 8009020:	08009297 	.word	0x08009297
 8009024:	08009297 	.word	0x08009297
 8009028:	08009297 	.word	0x08009297
 800902c:	08009297 	.word	0x08009297
 8009030:	08009035 	.word	0x08009035
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800903a:	69db      	ldr	r3, [r3, #28]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d00b      	beq.n	8009058 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009046:	69db      	ldr	r3, [r3, #28]
 8009048:	687a      	ldr	r2, [r7, #4]
 800904a:	7c12      	ldrb	r2, [r2, #16]
 800904c:	f107 0108 	add.w	r1, r7, #8
 8009050:	4610      	mov	r0, r2
 8009052:	4798      	blx	r3
 8009054:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009056:	e126      	b.n	80092a6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009058:	6839      	ldr	r1, [r7, #0]
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 fb27 	bl	80096ae <USBD_CtlError>
        err++;
 8009060:	7afb      	ldrb	r3, [r7, #11]
 8009062:	3301      	adds	r3, #1
 8009064:	72fb      	strb	r3, [r7, #11]
      break;
 8009066:	e11e      	b.n	80092a6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	687a      	ldr	r2, [r7, #4]
 8009072:	7c12      	ldrb	r2, [r2, #16]
 8009074:	f107 0108 	add.w	r1, r7, #8
 8009078:	4610      	mov	r0, r2
 800907a:	4798      	blx	r3
 800907c:	60f8      	str	r0, [r7, #12]
      break;
 800907e:	e112      	b.n	80092a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	7c1b      	ldrb	r3, [r3, #16]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d10d      	bne.n	80090a4 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800908e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009090:	f107 0208 	add.w	r2, r7, #8
 8009094:	4610      	mov	r0, r2
 8009096:	4798      	blx	r3
 8009098:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	3301      	adds	r3, #1
 800909e:	2202      	movs	r2, #2
 80090a0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80090a2:	e100      	b.n	80092a6 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ac:	f107 0208 	add.w	r2, r7, #8
 80090b0:	4610      	mov	r0, r2
 80090b2:	4798      	blx	r3
 80090b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	3301      	adds	r3, #1
 80090ba:	2202      	movs	r2, #2
 80090bc:	701a      	strb	r2, [r3, #0]
      break;
 80090be:	e0f2      	b.n	80092a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	885b      	ldrh	r3, [r3, #2]
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	2b05      	cmp	r3, #5
 80090c8:	f200 80ac 	bhi.w	8009224 <USBD_GetDescriptor+0x258>
 80090cc:	a201      	add	r2, pc, #4	; (adr r2, 80090d4 <USBD_GetDescriptor+0x108>)
 80090ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090d2:	bf00      	nop
 80090d4:	080090ed 	.word	0x080090ed
 80090d8:	08009121 	.word	0x08009121
 80090dc:	08009155 	.word	0x08009155
 80090e0:	08009189 	.word	0x08009189
 80090e4:	080091bd 	.word	0x080091bd
 80090e8:	080091f1 	.word	0x080091f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d00b      	beq.n	8009110 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	7c12      	ldrb	r2, [r2, #16]
 8009104:	f107 0108 	add.w	r1, r7, #8
 8009108:	4610      	mov	r0, r2
 800910a:	4798      	blx	r3
 800910c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800910e:	e091      	b.n	8009234 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009110:	6839      	ldr	r1, [r7, #0]
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 facb 	bl	80096ae <USBD_CtlError>
            err++;
 8009118:	7afb      	ldrb	r3, [r7, #11]
 800911a:	3301      	adds	r3, #1
 800911c:	72fb      	strb	r3, [r7, #11]
          break;
 800911e:	e089      	b.n	8009234 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009126:	689b      	ldr	r3, [r3, #8]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d00b      	beq.n	8009144 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	687a      	ldr	r2, [r7, #4]
 8009136:	7c12      	ldrb	r2, [r2, #16]
 8009138:	f107 0108 	add.w	r1, r7, #8
 800913c:	4610      	mov	r0, r2
 800913e:	4798      	blx	r3
 8009140:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009142:	e077      	b.n	8009234 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009144:	6839      	ldr	r1, [r7, #0]
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 fab1 	bl	80096ae <USBD_CtlError>
            err++;
 800914c:	7afb      	ldrb	r3, [r7, #11]
 800914e:	3301      	adds	r3, #1
 8009150:	72fb      	strb	r3, [r7, #11]
          break;
 8009152:	e06f      	b.n	8009234 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d00b      	beq.n	8009178 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	7c12      	ldrb	r2, [r2, #16]
 800916c:	f107 0108 	add.w	r1, r7, #8
 8009170:	4610      	mov	r0, r2
 8009172:	4798      	blx	r3
 8009174:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009176:	e05d      	b.n	8009234 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009178:	6839      	ldr	r1, [r7, #0]
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 fa97 	bl	80096ae <USBD_CtlError>
            err++;
 8009180:	7afb      	ldrb	r3, [r7, #11]
 8009182:	3301      	adds	r3, #1
 8009184:	72fb      	strb	r3, [r7, #11]
          break;
 8009186:	e055      	b.n	8009234 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800918e:	691b      	ldr	r3, [r3, #16]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d00b      	beq.n	80091ac <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800919a:	691b      	ldr	r3, [r3, #16]
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	7c12      	ldrb	r2, [r2, #16]
 80091a0:	f107 0108 	add.w	r1, r7, #8
 80091a4:	4610      	mov	r0, r2
 80091a6:	4798      	blx	r3
 80091a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091aa:	e043      	b.n	8009234 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80091ac:	6839      	ldr	r1, [r7, #0]
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 fa7d 	bl	80096ae <USBD_CtlError>
            err++;
 80091b4:	7afb      	ldrb	r3, [r7, #11]
 80091b6:	3301      	adds	r3, #1
 80091b8:	72fb      	strb	r3, [r7, #11]
          break;
 80091ba:	e03b      	b.n	8009234 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091c2:	695b      	ldr	r3, [r3, #20]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d00b      	beq.n	80091e0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091ce:	695b      	ldr	r3, [r3, #20]
 80091d0:	687a      	ldr	r2, [r7, #4]
 80091d2:	7c12      	ldrb	r2, [r2, #16]
 80091d4:	f107 0108 	add.w	r1, r7, #8
 80091d8:	4610      	mov	r0, r2
 80091da:	4798      	blx	r3
 80091dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091de:	e029      	b.n	8009234 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80091e0:	6839      	ldr	r1, [r7, #0]
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 fa63 	bl	80096ae <USBD_CtlError>
            err++;
 80091e8:	7afb      	ldrb	r3, [r7, #11]
 80091ea:	3301      	adds	r3, #1
 80091ec:	72fb      	strb	r3, [r7, #11]
          break;
 80091ee:	e021      	b.n	8009234 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091f6:	699b      	ldr	r3, [r3, #24]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d00b      	beq.n	8009214 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009202:	699b      	ldr	r3, [r3, #24]
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	7c12      	ldrb	r2, [r2, #16]
 8009208:	f107 0108 	add.w	r1, r7, #8
 800920c:	4610      	mov	r0, r2
 800920e:	4798      	blx	r3
 8009210:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009212:	e00f      	b.n	8009234 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009214:	6839      	ldr	r1, [r7, #0]
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 fa49 	bl	80096ae <USBD_CtlError>
            err++;
 800921c:	7afb      	ldrb	r3, [r7, #11]
 800921e:	3301      	adds	r3, #1
 8009220:	72fb      	strb	r3, [r7, #11]
          break;
 8009222:	e007      	b.n	8009234 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009224:	6839      	ldr	r1, [r7, #0]
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 fa41 	bl	80096ae <USBD_CtlError>
          err++;
 800922c:	7afb      	ldrb	r3, [r7, #11]
 800922e:	3301      	adds	r3, #1
 8009230:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009232:	bf00      	nop
      }
      break;
 8009234:	e037      	b.n	80092a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	7c1b      	ldrb	r3, [r3, #16]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d109      	bne.n	8009252 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009246:	f107 0208 	add.w	r2, r7, #8
 800924a:	4610      	mov	r0, r2
 800924c:	4798      	blx	r3
 800924e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009250:	e029      	b.n	80092a6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009252:	6839      	ldr	r1, [r7, #0]
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 fa2a 	bl	80096ae <USBD_CtlError>
        err++;
 800925a:	7afb      	ldrb	r3, [r7, #11]
 800925c:	3301      	adds	r3, #1
 800925e:	72fb      	strb	r3, [r7, #11]
      break;
 8009260:	e021      	b.n	80092a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	7c1b      	ldrb	r3, [r3, #16]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d10d      	bne.n	8009286 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009272:	f107 0208 	add.w	r2, r7, #8
 8009276:	4610      	mov	r0, r2
 8009278:	4798      	blx	r3
 800927a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	3301      	adds	r3, #1
 8009280:	2207      	movs	r2, #7
 8009282:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009284:	e00f      	b.n	80092a6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009286:	6839      	ldr	r1, [r7, #0]
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f000 fa10 	bl	80096ae <USBD_CtlError>
        err++;
 800928e:	7afb      	ldrb	r3, [r7, #11]
 8009290:	3301      	adds	r3, #1
 8009292:	72fb      	strb	r3, [r7, #11]
      break;
 8009294:	e007      	b.n	80092a6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009296:	6839      	ldr	r1, [r7, #0]
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f000 fa08 	bl	80096ae <USBD_CtlError>
      err++;
 800929e:	7afb      	ldrb	r3, [r7, #11]
 80092a0:	3301      	adds	r3, #1
 80092a2:	72fb      	strb	r3, [r7, #11]
      break;
 80092a4:	bf00      	nop
  }

  if (err != 0U)
 80092a6:	7afb      	ldrb	r3, [r7, #11]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d11e      	bne.n	80092ea <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	88db      	ldrh	r3, [r3, #6]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d016      	beq.n	80092e2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80092b4:	893b      	ldrh	r3, [r7, #8]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d00e      	beq.n	80092d8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	88da      	ldrh	r2, [r3, #6]
 80092be:	893b      	ldrh	r3, [r7, #8]
 80092c0:	4293      	cmp	r3, r2
 80092c2:	bf28      	it	cs
 80092c4:	4613      	movcs	r3, r2
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80092ca:	893b      	ldrh	r3, [r7, #8]
 80092cc:	461a      	mov	r2, r3
 80092ce:	68f9      	ldr	r1, [r7, #12]
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 fa5d 	bl	8009790 <USBD_CtlSendData>
 80092d6:	e009      	b.n	80092ec <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80092d8:	6839      	ldr	r1, [r7, #0]
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 f9e7 	bl	80096ae <USBD_CtlError>
 80092e0:	e004      	b.n	80092ec <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 faae 	bl	8009844 <USBD_CtlSendStatus>
 80092e8:	e000      	b.n	80092ec <USBD_GetDescriptor+0x320>
    return;
 80092ea:	bf00      	nop
  }
}
 80092ec:	3710      	adds	r7, #16
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	bf00      	nop

080092f4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	889b      	ldrh	r3, [r3, #4]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d131      	bne.n	800936a <USBD_SetAddress+0x76>
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	88db      	ldrh	r3, [r3, #6]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d12d      	bne.n	800936a <USBD_SetAddress+0x76>
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	885b      	ldrh	r3, [r3, #2]
 8009312:	2b7f      	cmp	r3, #127	; 0x7f
 8009314:	d829      	bhi.n	800936a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	885b      	ldrh	r3, [r3, #2]
 800931a:	b2db      	uxtb	r3, r3
 800931c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009320:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009328:	b2db      	uxtb	r3, r3
 800932a:	2b03      	cmp	r3, #3
 800932c:	d104      	bne.n	8009338 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800932e:	6839      	ldr	r1, [r7, #0]
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 f9bc 	bl	80096ae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009336:	e01d      	b.n	8009374 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	7bfa      	ldrb	r2, [r7, #15]
 800933c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009340:	7bfb      	ldrb	r3, [r7, #15]
 8009342:	4619      	mov	r1, r3
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f000 ff63 	bl	800a210 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 fa7a 	bl	8009844 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009350:	7bfb      	ldrb	r3, [r7, #15]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d004      	beq.n	8009360 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2202      	movs	r2, #2
 800935a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800935e:	e009      	b.n	8009374 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2201      	movs	r2, #1
 8009364:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009368:	e004      	b.n	8009374 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800936a:	6839      	ldr	r1, [r7, #0]
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f000 f99e 	bl	80096ae <USBD_CtlError>
  }
}
 8009372:	bf00      	nop
 8009374:	bf00      	nop
 8009376:	3710      	adds	r7, #16
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b084      	sub	sp, #16
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009386:	2300      	movs	r3, #0
 8009388:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	885b      	ldrh	r3, [r3, #2]
 800938e:	b2da      	uxtb	r2, r3
 8009390:	4b4e      	ldr	r3, [pc, #312]	; (80094cc <USBD_SetConfig+0x150>)
 8009392:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009394:	4b4d      	ldr	r3, [pc, #308]	; (80094cc <USBD_SetConfig+0x150>)
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	2b01      	cmp	r3, #1
 800939a:	d905      	bls.n	80093a8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800939c:	6839      	ldr	r1, [r7, #0]
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 f985 	bl	80096ae <USBD_CtlError>
    return USBD_FAIL;
 80093a4:	2303      	movs	r3, #3
 80093a6:	e08c      	b.n	80094c2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	2b02      	cmp	r3, #2
 80093b2:	d002      	beq.n	80093ba <USBD_SetConfig+0x3e>
 80093b4:	2b03      	cmp	r3, #3
 80093b6:	d029      	beq.n	800940c <USBD_SetConfig+0x90>
 80093b8:	e075      	b.n	80094a6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80093ba:	4b44      	ldr	r3, [pc, #272]	; (80094cc <USBD_SetConfig+0x150>)
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d020      	beq.n	8009404 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80093c2:	4b42      	ldr	r3, [pc, #264]	; (80094cc <USBD_SetConfig+0x150>)
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	461a      	mov	r2, r3
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80093cc:	4b3f      	ldr	r3, [pc, #252]	; (80094cc <USBD_SetConfig+0x150>)
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	4619      	mov	r1, r3
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f7fe ffbd 	bl	8008352 <USBD_SetClassConfig>
 80093d8:	4603      	mov	r3, r0
 80093da:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80093dc:	7bfb      	ldrb	r3, [r7, #15]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d008      	beq.n	80093f4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80093e2:	6839      	ldr	r1, [r7, #0]
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f000 f962 	bl	80096ae <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2202      	movs	r2, #2
 80093ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80093f2:	e065      	b.n	80094c0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 fa25 	bl	8009844 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2203      	movs	r2, #3
 80093fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009402:	e05d      	b.n	80094c0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 fa1d 	bl	8009844 <USBD_CtlSendStatus>
      break;
 800940a:	e059      	b.n	80094c0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800940c:	4b2f      	ldr	r3, [pc, #188]	; (80094cc <USBD_SetConfig+0x150>)
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d112      	bne.n	800943a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2202      	movs	r2, #2
 8009418:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800941c:	4b2b      	ldr	r3, [pc, #172]	; (80094cc <USBD_SetConfig+0x150>)
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	461a      	mov	r2, r3
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009426:	4b29      	ldr	r3, [pc, #164]	; (80094cc <USBD_SetConfig+0x150>)
 8009428:	781b      	ldrb	r3, [r3, #0]
 800942a:	4619      	mov	r1, r3
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f7fe ffac 	bl	800838a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f000 fa06 	bl	8009844 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009438:	e042      	b.n	80094c0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800943a:	4b24      	ldr	r3, [pc, #144]	; (80094cc <USBD_SetConfig+0x150>)
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	461a      	mov	r2, r3
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	429a      	cmp	r2, r3
 8009446:	d02a      	beq.n	800949e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	b2db      	uxtb	r3, r3
 800944e:	4619      	mov	r1, r3
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f7fe ff9a 	bl	800838a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009456:	4b1d      	ldr	r3, [pc, #116]	; (80094cc <USBD_SetConfig+0x150>)
 8009458:	781b      	ldrb	r3, [r3, #0]
 800945a:	461a      	mov	r2, r3
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009460:	4b1a      	ldr	r3, [pc, #104]	; (80094cc <USBD_SetConfig+0x150>)
 8009462:	781b      	ldrb	r3, [r3, #0]
 8009464:	4619      	mov	r1, r3
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f7fe ff73 	bl	8008352 <USBD_SetClassConfig>
 800946c:	4603      	mov	r3, r0
 800946e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009470:	7bfb      	ldrb	r3, [r7, #15]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d00f      	beq.n	8009496 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009476:	6839      	ldr	r1, [r7, #0]
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f000 f918 	bl	80096ae <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	b2db      	uxtb	r3, r3
 8009484:	4619      	mov	r1, r3
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f7fe ff7f 	bl	800838a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2202      	movs	r2, #2
 8009490:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009494:	e014      	b.n	80094c0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 f9d4 	bl	8009844 <USBD_CtlSendStatus>
      break;
 800949c:	e010      	b.n	80094c0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 f9d0 	bl	8009844 <USBD_CtlSendStatus>
      break;
 80094a4:	e00c      	b.n	80094c0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80094a6:	6839      	ldr	r1, [r7, #0]
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 f900 	bl	80096ae <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80094ae:	4b07      	ldr	r3, [pc, #28]	; (80094cc <USBD_SetConfig+0x150>)
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	4619      	mov	r1, r3
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f7fe ff68 	bl	800838a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80094ba:	2303      	movs	r3, #3
 80094bc:	73fb      	strb	r3, [r7, #15]
      break;
 80094be:	bf00      	nop
  }

  return ret;
 80094c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3710      	adds	r7, #16
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	bf00      	nop
 80094cc:	2000047c 	.word	0x2000047c

080094d0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b082      	sub	sp, #8
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	88db      	ldrh	r3, [r3, #6]
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d004      	beq.n	80094ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80094e2:	6839      	ldr	r1, [r7, #0]
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 f8e2 	bl	80096ae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80094ea:	e023      	b.n	8009534 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094f2:	b2db      	uxtb	r3, r3
 80094f4:	2b02      	cmp	r3, #2
 80094f6:	dc02      	bgt.n	80094fe <USBD_GetConfig+0x2e>
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	dc03      	bgt.n	8009504 <USBD_GetConfig+0x34>
 80094fc:	e015      	b.n	800952a <USBD_GetConfig+0x5a>
 80094fe:	2b03      	cmp	r3, #3
 8009500:	d00b      	beq.n	800951a <USBD_GetConfig+0x4a>
 8009502:	e012      	b.n	800952a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2200      	movs	r2, #0
 8009508:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	3308      	adds	r3, #8
 800950e:	2201      	movs	r2, #1
 8009510:	4619      	mov	r1, r3
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 f93c 	bl	8009790 <USBD_CtlSendData>
        break;
 8009518:	e00c      	b.n	8009534 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	3304      	adds	r3, #4
 800951e:	2201      	movs	r2, #1
 8009520:	4619      	mov	r1, r3
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 f934 	bl	8009790 <USBD_CtlSendData>
        break;
 8009528:	e004      	b.n	8009534 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800952a:	6839      	ldr	r1, [r7, #0]
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 f8be 	bl	80096ae <USBD_CtlError>
        break;
 8009532:	bf00      	nop
}
 8009534:	bf00      	nop
 8009536:	3708      	adds	r7, #8
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b082      	sub	sp, #8
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800954c:	b2db      	uxtb	r3, r3
 800954e:	3b01      	subs	r3, #1
 8009550:	2b02      	cmp	r3, #2
 8009552:	d81e      	bhi.n	8009592 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	88db      	ldrh	r3, [r3, #6]
 8009558:	2b02      	cmp	r3, #2
 800955a:	d004      	beq.n	8009566 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800955c:	6839      	ldr	r1, [r7, #0]
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 f8a5 	bl	80096ae <USBD_CtlError>
        break;
 8009564:	e01a      	b.n	800959c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2201      	movs	r2, #1
 800956a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009572:	2b00      	cmp	r3, #0
 8009574:	d005      	beq.n	8009582 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	68db      	ldr	r3, [r3, #12]
 800957a:	f043 0202 	orr.w	r2, r3, #2
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	330c      	adds	r3, #12
 8009586:	2202      	movs	r2, #2
 8009588:	4619      	mov	r1, r3
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 f900 	bl	8009790 <USBD_CtlSendData>
      break;
 8009590:	e004      	b.n	800959c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009592:	6839      	ldr	r1, [r7, #0]
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 f88a 	bl	80096ae <USBD_CtlError>
      break;
 800959a:	bf00      	nop
  }
}
 800959c:	bf00      	nop
 800959e:	3708      	adds	r7, #8
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b082      	sub	sp, #8
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	885b      	ldrh	r3, [r3, #2]
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	d107      	bne.n	80095c6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2201      	movs	r2, #1
 80095ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 f940 	bl	8009844 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80095c4:	e013      	b.n	80095ee <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	885b      	ldrh	r3, [r3, #2]
 80095ca:	2b02      	cmp	r3, #2
 80095cc:	d10b      	bne.n	80095e6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	889b      	ldrh	r3, [r3, #4]
 80095d2:	0a1b      	lsrs	r3, r3, #8
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	b2da      	uxtb	r2, r3
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 f930 	bl	8009844 <USBD_CtlSendStatus>
}
 80095e4:	e003      	b.n	80095ee <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80095e6:	6839      	ldr	r1, [r7, #0]
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f000 f860 	bl	80096ae <USBD_CtlError>
}
 80095ee:	bf00      	nop
 80095f0:	3708      	adds	r7, #8
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}

080095f6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095f6:	b580      	push	{r7, lr}
 80095f8:	b082      	sub	sp, #8
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
 80095fe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009606:	b2db      	uxtb	r3, r3
 8009608:	3b01      	subs	r3, #1
 800960a:	2b02      	cmp	r3, #2
 800960c:	d80b      	bhi.n	8009626 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	885b      	ldrh	r3, [r3, #2]
 8009612:	2b01      	cmp	r3, #1
 8009614:	d10c      	bne.n	8009630 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2200      	movs	r2, #0
 800961a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 f910 	bl	8009844 <USBD_CtlSendStatus>
      }
      break;
 8009624:	e004      	b.n	8009630 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009626:	6839      	ldr	r1, [r7, #0]
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 f840 	bl	80096ae <USBD_CtlError>
      break;
 800962e:	e000      	b.n	8009632 <USBD_ClrFeature+0x3c>
      break;
 8009630:	bf00      	nop
  }
}
 8009632:	bf00      	nop
 8009634:	3708      	adds	r7, #8
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800963a:	b580      	push	{r7, lr}
 800963c:	b084      	sub	sp, #16
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
 8009642:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	781a      	ldrb	r2, [r3, #0]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	3301      	adds	r3, #1
 8009654:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	781a      	ldrb	r2, [r3, #0]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	3301      	adds	r3, #1
 8009662:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009664:	68f8      	ldr	r0, [r7, #12]
 8009666:	f7ff fa17 	bl	8008a98 <SWAPBYTE>
 800966a:	4603      	mov	r3, r0
 800966c:	461a      	mov	r2, r3
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	3301      	adds	r3, #1
 8009676:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	3301      	adds	r3, #1
 800967c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800967e:	68f8      	ldr	r0, [r7, #12]
 8009680:	f7ff fa0a 	bl	8008a98 <SWAPBYTE>
 8009684:	4603      	mov	r3, r0
 8009686:	461a      	mov	r2, r3
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	3301      	adds	r3, #1
 8009690:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	3301      	adds	r3, #1
 8009696:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009698:	68f8      	ldr	r0, [r7, #12]
 800969a:	f7ff f9fd 	bl	8008a98 <SWAPBYTE>
 800969e:	4603      	mov	r3, r0
 80096a0:	461a      	mov	r2, r3
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	80da      	strh	r2, [r3, #6]
}
 80096a6:	bf00      	nop
 80096a8:	3710      	adds	r7, #16
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}

080096ae <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096ae:	b580      	push	{r7, lr}
 80096b0:	b082      	sub	sp, #8
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	6078      	str	r0, [r7, #4]
 80096b6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80096b8:	2180      	movs	r1, #128	; 0x80
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f000 fd3e 	bl	800a13c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80096c0:	2100      	movs	r1, #0
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 fd3a 	bl	800a13c <USBD_LL_StallEP>
}
 80096c8:	bf00      	nop
 80096ca:	3708      	adds	r7, #8
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b086      	sub	sp, #24
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	60f8      	str	r0, [r7, #12]
 80096d8:	60b9      	str	r1, [r7, #8]
 80096da:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80096dc:	2300      	movs	r3, #0
 80096de:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d036      	beq.n	8009754 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80096ea:	6938      	ldr	r0, [r7, #16]
 80096ec:	f000 f836 	bl	800975c <USBD_GetLen>
 80096f0:	4603      	mov	r3, r0
 80096f2:	3301      	adds	r3, #1
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	005b      	lsls	r3, r3, #1
 80096f8:	b29a      	uxth	r2, r3
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80096fe:	7dfb      	ldrb	r3, [r7, #23]
 8009700:	68ba      	ldr	r2, [r7, #8]
 8009702:	4413      	add	r3, r2
 8009704:	687a      	ldr	r2, [r7, #4]
 8009706:	7812      	ldrb	r2, [r2, #0]
 8009708:	701a      	strb	r2, [r3, #0]
  idx++;
 800970a:	7dfb      	ldrb	r3, [r7, #23]
 800970c:	3301      	adds	r3, #1
 800970e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009710:	7dfb      	ldrb	r3, [r7, #23]
 8009712:	68ba      	ldr	r2, [r7, #8]
 8009714:	4413      	add	r3, r2
 8009716:	2203      	movs	r2, #3
 8009718:	701a      	strb	r2, [r3, #0]
  idx++;
 800971a:	7dfb      	ldrb	r3, [r7, #23]
 800971c:	3301      	adds	r3, #1
 800971e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009720:	e013      	b.n	800974a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009722:	7dfb      	ldrb	r3, [r7, #23]
 8009724:	68ba      	ldr	r2, [r7, #8]
 8009726:	4413      	add	r3, r2
 8009728:	693a      	ldr	r2, [r7, #16]
 800972a:	7812      	ldrb	r2, [r2, #0]
 800972c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	3301      	adds	r3, #1
 8009732:	613b      	str	r3, [r7, #16]
    idx++;
 8009734:	7dfb      	ldrb	r3, [r7, #23]
 8009736:	3301      	adds	r3, #1
 8009738:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800973a:	7dfb      	ldrb	r3, [r7, #23]
 800973c:	68ba      	ldr	r2, [r7, #8]
 800973e:	4413      	add	r3, r2
 8009740:	2200      	movs	r2, #0
 8009742:	701a      	strb	r2, [r3, #0]
    idx++;
 8009744:	7dfb      	ldrb	r3, [r7, #23]
 8009746:	3301      	adds	r3, #1
 8009748:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d1e7      	bne.n	8009722 <USBD_GetString+0x52>
 8009752:	e000      	b.n	8009756 <USBD_GetString+0x86>
    return;
 8009754:	bf00      	nop
  }
}
 8009756:	3718      	adds	r7, #24
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800975c:	b480      	push	{r7}
 800975e:	b085      	sub	sp, #20
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009764:	2300      	movs	r3, #0
 8009766:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800976c:	e005      	b.n	800977a <USBD_GetLen+0x1e>
  {
    len++;
 800976e:	7bfb      	ldrb	r3, [r7, #15]
 8009770:	3301      	adds	r3, #1
 8009772:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	3301      	adds	r3, #1
 8009778:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d1f5      	bne.n	800976e <USBD_GetLen+0x12>
  }

  return len;
 8009782:	7bfb      	ldrb	r3, [r7, #15]
}
 8009784:	4618      	mov	r0, r3
 8009786:	3714      	adds	r7, #20
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr

08009790 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	60f8      	str	r0, [r7, #12]
 8009798:	60b9      	str	r1, [r7, #8]
 800979a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2202      	movs	r2, #2
 80097a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	687a      	ldr	r2, [r7, #4]
 80097a8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	68ba      	ldr	r2, [r7, #8]
 80097b4:	2100      	movs	r1, #0
 80097b6:	68f8      	ldr	r0, [r7, #12]
 80097b8:	f000 fd49 	bl	800a24e <USBD_LL_Transmit>

  return USBD_OK;
 80097bc:	2300      	movs	r3, #0
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3710      	adds	r7, #16
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b084      	sub	sp, #16
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	60f8      	str	r0, [r7, #12]
 80097ce:	60b9      	str	r1, [r7, #8]
 80097d0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	68ba      	ldr	r2, [r7, #8]
 80097d6:	2100      	movs	r1, #0
 80097d8:	68f8      	ldr	r0, [r7, #12]
 80097da:	f000 fd38 	bl	800a24e <USBD_LL_Transmit>

  return USBD_OK;
 80097de:	2300      	movs	r3, #0
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3710      	adds	r7, #16
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	60f8      	str	r0, [r7, #12]
 80097f0:	60b9      	str	r1, [r7, #8]
 80097f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2203      	movs	r2, #3
 80097f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	687a      	ldr	r2, [r7, #4]
 8009800:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	68ba      	ldr	r2, [r7, #8]
 8009810:	2100      	movs	r1, #0
 8009812:	68f8      	ldr	r0, [r7, #12]
 8009814:	f000 fd3c 	bl	800a290 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009818:	2300      	movs	r3, #0
}
 800981a:	4618      	mov	r0, r3
 800981c:	3710      	adds	r7, #16
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}

08009822 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009822:	b580      	push	{r7, lr}
 8009824:	b084      	sub	sp, #16
 8009826:	af00      	add	r7, sp, #0
 8009828:	60f8      	str	r0, [r7, #12]
 800982a:	60b9      	str	r1, [r7, #8]
 800982c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	68ba      	ldr	r2, [r7, #8]
 8009832:	2100      	movs	r1, #0
 8009834:	68f8      	ldr	r0, [r7, #12]
 8009836:	f000 fd2b 	bl	800a290 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800983a:	2300      	movs	r3, #0
}
 800983c:	4618      	mov	r0, r3
 800983e:	3710      	adds	r7, #16
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b082      	sub	sp, #8
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2204      	movs	r2, #4
 8009850:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009854:	2300      	movs	r3, #0
 8009856:	2200      	movs	r2, #0
 8009858:	2100      	movs	r1, #0
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 fcf7 	bl	800a24e <USBD_LL_Transmit>

  return USBD_OK;
 8009860:	2300      	movs	r3, #0
}
 8009862:	4618      	mov	r0, r3
 8009864:	3708      	adds	r7, #8
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}

0800986a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800986a:	b580      	push	{r7, lr}
 800986c:	b082      	sub	sp, #8
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2205      	movs	r2, #5
 8009876:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800987a:	2300      	movs	r3, #0
 800987c:	2200      	movs	r2, #0
 800987e:	2100      	movs	r1, #0
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f000 fd05 	bl	800a290 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009886:	2300      	movs	r3, #0
}
 8009888:	4618      	mov	r0, r3
 800988a:	3708      	adds	r7, #8
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009890:	b480      	push	{r7}
 8009892:	b087      	sub	sp, #28
 8009894:	af00      	add	r7, sp, #0
 8009896:	60f8      	str	r0, [r7, #12]
 8009898:	60b9      	str	r1, [r7, #8]
 800989a:	4613      	mov	r3, r2
 800989c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800989e:	2301      	movs	r3, #1
 80098a0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80098a2:	2300      	movs	r3, #0
 80098a4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80098a6:	4b1f      	ldr	r3, [pc, #124]	; (8009924 <FATFS_LinkDriverEx+0x94>)
 80098a8:	7a5b      	ldrb	r3, [r3, #9]
 80098aa:	b2db      	uxtb	r3, r3
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d131      	bne.n	8009914 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80098b0:	4b1c      	ldr	r3, [pc, #112]	; (8009924 <FATFS_LinkDriverEx+0x94>)
 80098b2:	7a5b      	ldrb	r3, [r3, #9]
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	461a      	mov	r2, r3
 80098b8:	4b1a      	ldr	r3, [pc, #104]	; (8009924 <FATFS_LinkDriverEx+0x94>)
 80098ba:	2100      	movs	r1, #0
 80098bc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80098be:	4b19      	ldr	r3, [pc, #100]	; (8009924 <FATFS_LinkDriverEx+0x94>)
 80098c0:	7a5b      	ldrb	r3, [r3, #9]
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	4a17      	ldr	r2, [pc, #92]	; (8009924 <FATFS_LinkDriverEx+0x94>)
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	4413      	add	r3, r2
 80098ca:	68fa      	ldr	r2, [r7, #12]
 80098cc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80098ce:	4b15      	ldr	r3, [pc, #84]	; (8009924 <FATFS_LinkDriverEx+0x94>)
 80098d0:	7a5b      	ldrb	r3, [r3, #9]
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	461a      	mov	r2, r3
 80098d6:	4b13      	ldr	r3, [pc, #76]	; (8009924 <FATFS_LinkDriverEx+0x94>)
 80098d8:	4413      	add	r3, r2
 80098da:	79fa      	ldrb	r2, [r7, #7]
 80098dc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80098de:	4b11      	ldr	r3, [pc, #68]	; (8009924 <FATFS_LinkDriverEx+0x94>)
 80098e0:	7a5b      	ldrb	r3, [r3, #9]
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	1c5a      	adds	r2, r3, #1
 80098e6:	b2d1      	uxtb	r1, r2
 80098e8:	4a0e      	ldr	r2, [pc, #56]	; (8009924 <FATFS_LinkDriverEx+0x94>)
 80098ea:	7251      	strb	r1, [r2, #9]
 80098ec:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80098ee:	7dbb      	ldrb	r3, [r7, #22]
 80098f0:	3330      	adds	r3, #48	; 0x30
 80098f2:	b2da      	uxtb	r2, r3
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	3301      	adds	r3, #1
 80098fc:	223a      	movs	r2, #58	; 0x3a
 80098fe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	3302      	adds	r3, #2
 8009904:	222f      	movs	r2, #47	; 0x2f
 8009906:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	3303      	adds	r3, #3
 800990c:	2200      	movs	r2, #0
 800990e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009910:	2300      	movs	r3, #0
 8009912:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009914:	7dfb      	ldrb	r3, [r7, #23]
}
 8009916:	4618      	mov	r0, r3
 8009918:	371c      	adds	r7, #28
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr
 8009922:	bf00      	nop
 8009924:	20000480 	.word	0x20000480

08009928 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b082      	sub	sp, #8
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009932:	2200      	movs	r2, #0
 8009934:	6839      	ldr	r1, [r7, #0]
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f7ff ffaa 	bl	8009890 <FATFS_LinkDriverEx>
 800993c:	4603      	mov	r3, r0
}
 800993e:	4618      	mov	r0, r3
 8009940:	3708      	adds	r7, #8
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
	...

08009948 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800994c:	2200      	movs	r2, #0
 800994e:	4912      	ldr	r1, [pc, #72]	; (8009998 <MX_USB_DEVICE_Init+0x50>)
 8009950:	4812      	ldr	r0, [pc, #72]	; (800999c <MX_USB_DEVICE_Init+0x54>)
 8009952:	f7fe fc81 	bl	8008258 <USBD_Init>
 8009956:	4603      	mov	r3, r0
 8009958:	2b00      	cmp	r3, #0
 800995a:	d001      	beq.n	8009960 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800995c:	f7f7 fc58 	bl	8001210 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009960:	490f      	ldr	r1, [pc, #60]	; (80099a0 <MX_USB_DEVICE_Init+0x58>)
 8009962:	480e      	ldr	r0, [pc, #56]	; (800999c <MX_USB_DEVICE_Init+0x54>)
 8009964:	f7fe fca8 	bl	80082b8 <USBD_RegisterClass>
 8009968:	4603      	mov	r3, r0
 800996a:	2b00      	cmp	r3, #0
 800996c:	d001      	beq.n	8009972 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800996e:	f7f7 fc4f 	bl	8001210 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009972:	490c      	ldr	r1, [pc, #48]	; (80099a4 <MX_USB_DEVICE_Init+0x5c>)
 8009974:	4809      	ldr	r0, [pc, #36]	; (800999c <MX_USB_DEVICE_Init+0x54>)
 8009976:	f7fe fbdf 	bl	8008138 <USBD_CDC_RegisterInterface>
 800997a:	4603      	mov	r3, r0
 800997c:	2b00      	cmp	r3, #0
 800997e:	d001      	beq.n	8009984 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009980:	f7f7 fc46 	bl	8001210 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009984:	4805      	ldr	r0, [pc, #20]	; (800999c <MX_USB_DEVICE_Init+0x54>)
 8009986:	f7fe fccd 	bl	8008324 <USBD_Start>
 800998a:	4603      	mov	r3, r0
 800998c:	2b00      	cmp	r3, #0
 800998e:	d001      	beq.n	8009994 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009990:	f7f7 fc3e 	bl	8001210 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009994:	bf00      	nop
 8009996:	bd80      	pop	{r7, pc}
 8009998:	200000c0 	.word	0x200000c0
 800999c:	2000048c 	.word	0x2000048c
 80099a0:	2000002c 	.word	0x2000002c
 80099a4:	200000ac 	.word	0x200000ac

080099a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80099ac:	2200      	movs	r2, #0
 80099ae:	4905      	ldr	r1, [pc, #20]	; (80099c4 <CDC_Init_FS+0x1c>)
 80099b0:	4805      	ldr	r0, [pc, #20]	; (80099c8 <CDC_Init_FS+0x20>)
 80099b2:	f7fe fbdb 	bl	800816c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80099b6:	4905      	ldr	r1, [pc, #20]	; (80099cc <CDC_Init_FS+0x24>)
 80099b8:	4803      	ldr	r0, [pc, #12]	; (80099c8 <CDC_Init_FS+0x20>)
 80099ba:	f7fe fbf9 	bl	80081b0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80099be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	20000b68 	.word	0x20000b68
 80099c8:	2000048c 	.word	0x2000048c
 80099cc:	20000768 	.word	0x20000768

080099d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80099d0:	b480      	push	{r7}
 80099d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80099d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	46bd      	mov	sp, r7
 80099da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099de:	4770      	bx	lr

080099e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b083      	sub	sp, #12
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	4603      	mov	r3, r0
 80099e8:	6039      	str	r1, [r7, #0]
 80099ea:	71fb      	strb	r3, [r7, #7]
 80099ec:	4613      	mov	r3, r2
 80099ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80099f0:	79fb      	ldrb	r3, [r7, #7]
 80099f2:	2b23      	cmp	r3, #35	; 0x23
 80099f4:	d84a      	bhi.n	8009a8c <CDC_Control_FS+0xac>
 80099f6:	a201      	add	r2, pc, #4	; (adr r2, 80099fc <CDC_Control_FS+0x1c>)
 80099f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099fc:	08009a8d 	.word	0x08009a8d
 8009a00:	08009a8d 	.word	0x08009a8d
 8009a04:	08009a8d 	.word	0x08009a8d
 8009a08:	08009a8d 	.word	0x08009a8d
 8009a0c:	08009a8d 	.word	0x08009a8d
 8009a10:	08009a8d 	.word	0x08009a8d
 8009a14:	08009a8d 	.word	0x08009a8d
 8009a18:	08009a8d 	.word	0x08009a8d
 8009a1c:	08009a8d 	.word	0x08009a8d
 8009a20:	08009a8d 	.word	0x08009a8d
 8009a24:	08009a8d 	.word	0x08009a8d
 8009a28:	08009a8d 	.word	0x08009a8d
 8009a2c:	08009a8d 	.word	0x08009a8d
 8009a30:	08009a8d 	.word	0x08009a8d
 8009a34:	08009a8d 	.word	0x08009a8d
 8009a38:	08009a8d 	.word	0x08009a8d
 8009a3c:	08009a8d 	.word	0x08009a8d
 8009a40:	08009a8d 	.word	0x08009a8d
 8009a44:	08009a8d 	.word	0x08009a8d
 8009a48:	08009a8d 	.word	0x08009a8d
 8009a4c:	08009a8d 	.word	0x08009a8d
 8009a50:	08009a8d 	.word	0x08009a8d
 8009a54:	08009a8d 	.word	0x08009a8d
 8009a58:	08009a8d 	.word	0x08009a8d
 8009a5c:	08009a8d 	.word	0x08009a8d
 8009a60:	08009a8d 	.word	0x08009a8d
 8009a64:	08009a8d 	.word	0x08009a8d
 8009a68:	08009a8d 	.word	0x08009a8d
 8009a6c:	08009a8d 	.word	0x08009a8d
 8009a70:	08009a8d 	.word	0x08009a8d
 8009a74:	08009a8d 	.word	0x08009a8d
 8009a78:	08009a8d 	.word	0x08009a8d
 8009a7c:	08009a8d 	.word	0x08009a8d
 8009a80:	08009a8d 	.word	0x08009a8d
 8009a84:	08009a8d 	.word	0x08009a8d
 8009a88:	08009a8d 	.word	0x08009a8d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009a8c:	bf00      	nop
  }

  return (USBD_OK);
 8009a8e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr

08009a9c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b082      	sub	sp, #8
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009aa6:	6879      	ldr	r1, [r7, #4]
 8009aa8:	4805      	ldr	r0, [pc, #20]	; (8009ac0 <CDC_Receive_FS+0x24>)
 8009aaa:	f7fe fb81 	bl	80081b0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009aae:	4804      	ldr	r0, [pc, #16]	; (8009ac0 <CDC_Receive_FS+0x24>)
 8009ab0:	f7fe fb9c 	bl	80081ec <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009ab4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3708      	adds	r7, #8
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	2000048c 	.word	0x2000048c

08009ac4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b087      	sub	sp, #28
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	60f8      	str	r0, [r7, #12]
 8009acc:	60b9      	str	r1, [r7, #8]
 8009ace:	4613      	mov	r3, r2
 8009ad0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009ad6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	371c      	adds	r7, #28
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr
	...

08009ae8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b083      	sub	sp, #12
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	4603      	mov	r3, r0
 8009af0:	6039      	str	r1, [r7, #0]
 8009af2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	2212      	movs	r2, #18
 8009af8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009afa:	4b03      	ldr	r3, [pc, #12]	; (8009b08 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	370c      	adds	r7, #12
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr
 8009b08:	200000e0 	.word	0x200000e0

08009b0c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b083      	sub	sp, #12
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	4603      	mov	r3, r0
 8009b14:	6039      	str	r1, [r7, #0]
 8009b16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	2204      	movs	r2, #4
 8009b1c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009b1e:	4b03      	ldr	r3, [pc, #12]	; (8009b2c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	370c      	adds	r7, #12
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr
 8009b2c:	20000100 	.word	0x20000100

08009b30 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b082      	sub	sp, #8
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	4603      	mov	r3, r0
 8009b38:	6039      	str	r1, [r7, #0]
 8009b3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009b3c:	79fb      	ldrb	r3, [r7, #7]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d105      	bne.n	8009b4e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009b42:	683a      	ldr	r2, [r7, #0]
 8009b44:	4907      	ldr	r1, [pc, #28]	; (8009b64 <USBD_FS_ProductStrDescriptor+0x34>)
 8009b46:	4808      	ldr	r0, [pc, #32]	; (8009b68 <USBD_FS_ProductStrDescriptor+0x38>)
 8009b48:	f7ff fdc2 	bl	80096d0 <USBD_GetString>
 8009b4c:	e004      	b.n	8009b58 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009b4e:	683a      	ldr	r2, [r7, #0]
 8009b50:	4904      	ldr	r1, [pc, #16]	; (8009b64 <USBD_FS_ProductStrDescriptor+0x34>)
 8009b52:	4805      	ldr	r0, [pc, #20]	; (8009b68 <USBD_FS_ProductStrDescriptor+0x38>)
 8009b54:	f7ff fdbc 	bl	80096d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b58:	4b02      	ldr	r3, [pc, #8]	; (8009b64 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3708      	adds	r7, #8
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	20000f68 	.word	0x20000f68
 8009b68:	0800a48c 	.word	0x0800a48c

08009b6c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	4603      	mov	r3, r0
 8009b74:	6039      	str	r1, [r7, #0]
 8009b76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009b78:	683a      	ldr	r2, [r7, #0]
 8009b7a:	4904      	ldr	r1, [pc, #16]	; (8009b8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009b7c:	4804      	ldr	r0, [pc, #16]	; (8009b90 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009b7e:	f7ff fda7 	bl	80096d0 <USBD_GetString>
  return USBD_StrDesc;
 8009b82:	4b02      	ldr	r3, [pc, #8]	; (8009b8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3708      	adds	r7, #8
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}
 8009b8c:	20000f68 	.word	0x20000f68
 8009b90:	0800a4a4 	.word	0x0800a4a4

08009b94 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	6039      	str	r1, [r7, #0]
 8009b9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	221a      	movs	r2, #26
 8009ba4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009ba6:	f000 f855 	bl	8009c54 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009baa:	4b02      	ldr	r3, [pc, #8]	; (8009bb4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3708      	adds	r7, #8
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}
 8009bb4:	20000104 	.word	0x20000104

08009bb8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b082      	sub	sp, #8
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	6039      	str	r1, [r7, #0]
 8009bc2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009bc4:	79fb      	ldrb	r3, [r7, #7]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d105      	bne.n	8009bd6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009bca:	683a      	ldr	r2, [r7, #0]
 8009bcc:	4907      	ldr	r1, [pc, #28]	; (8009bec <USBD_FS_ConfigStrDescriptor+0x34>)
 8009bce:	4808      	ldr	r0, [pc, #32]	; (8009bf0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009bd0:	f7ff fd7e 	bl	80096d0 <USBD_GetString>
 8009bd4:	e004      	b.n	8009be0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009bd6:	683a      	ldr	r2, [r7, #0]
 8009bd8:	4904      	ldr	r1, [pc, #16]	; (8009bec <USBD_FS_ConfigStrDescriptor+0x34>)
 8009bda:	4805      	ldr	r0, [pc, #20]	; (8009bf0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009bdc:	f7ff fd78 	bl	80096d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009be0:	4b02      	ldr	r3, [pc, #8]	; (8009bec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3708      	adds	r7, #8
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
 8009bea:	bf00      	nop
 8009bec:	20000f68 	.word	0x20000f68
 8009bf0:	0800a4b8 	.word	0x0800a4b8

08009bf4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	6039      	str	r1, [r7, #0]
 8009bfe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c00:	79fb      	ldrb	r3, [r7, #7]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d105      	bne.n	8009c12 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009c06:	683a      	ldr	r2, [r7, #0]
 8009c08:	4907      	ldr	r1, [pc, #28]	; (8009c28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009c0a:	4808      	ldr	r0, [pc, #32]	; (8009c2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009c0c:	f7ff fd60 	bl	80096d0 <USBD_GetString>
 8009c10:	e004      	b.n	8009c1c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009c12:	683a      	ldr	r2, [r7, #0]
 8009c14:	4904      	ldr	r1, [pc, #16]	; (8009c28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009c16:	4805      	ldr	r0, [pc, #20]	; (8009c2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009c18:	f7ff fd5a 	bl	80096d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c1c:	4b02      	ldr	r3, [pc, #8]	; (8009c28 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3708      	adds	r7, #8
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}
 8009c26:	bf00      	nop
 8009c28:	20000f68 	.word	0x20000f68
 8009c2c:	0800a4c4 	.word	0x0800a4c4

08009c30 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	4603      	mov	r3, r0
 8009c38:	6039      	str	r1, [r7, #0]
 8009c3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	220c      	movs	r2, #12
 8009c40:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8009c42:	4b03      	ldr	r3, [pc, #12]	; (8009c50 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	370c      	adds	r7, #12
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr
 8009c50:	200000f4 	.word	0x200000f4

08009c54 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009c5a:	4b0f      	ldr	r3, [pc, #60]	; (8009c98 <Get_SerialNum+0x44>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009c60:	4b0e      	ldr	r3, [pc, #56]	; (8009c9c <Get_SerialNum+0x48>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009c66:	4b0e      	ldr	r3, [pc, #56]	; (8009ca0 <Get_SerialNum+0x4c>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009c6c:	68fa      	ldr	r2, [r7, #12]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	4413      	add	r3, r2
 8009c72:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d009      	beq.n	8009c8e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009c7a:	2208      	movs	r2, #8
 8009c7c:	4909      	ldr	r1, [pc, #36]	; (8009ca4 <Get_SerialNum+0x50>)
 8009c7e:	68f8      	ldr	r0, [r7, #12]
 8009c80:	f000 f814 	bl	8009cac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009c84:	2204      	movs	r2, #4
 8009c86:	4908      	ldr	r1, [pc, #32]	; (8009ca8 <Get_SerialNum+0x54>)
 8009c88:	68b8      	ldr	r0, [r7, #8]
 8009c8a:	f000 f80f 	bl	8009cac <IntToUnicode>
  }
}
 8009c8e:	bf00      	nop
 8009c90:	3710      	adds	r7, #16
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	bf00      	nop
 8009c98:	1fff7a10 	.word	0x1fff7a10
 8009c9c:	1fff7a14 	.word	0x1fff7a14
 8009ca0:	1fff7a18 	.word	0x1fff7a18
 8009ca4:	20000106 	.word	0x20000106
 8009ca8:	20000116 	.word	0x20000116

08009cac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b087      	sub	sp, #28
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	60b9      	str	r1, [r7, #8]
 8009cb6:	4613      	mov	r3, r2
 8009cb8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	75fb      	strb	r3, [r7, #23]
 8009cc2:	e027      	b.n	8009d14 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	0f1b      	lsrs	r3, r3, #28
 8009cc8:	2b09      	cmp	r3, #9
 8009cca:	d80b      	bhi.n	8009ce4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	0f1b      	lsrs	r3, r3, #28
 8009cd0:	b2da      	uxtb	r2, r3
 8009cd2:	7dfb      	ldrb	r3, [r7, #23]
 8009cd4:	005b      	lsls	r3, r3, #1
 8009cd6:	4619      	mov	r1, r3
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	440b      	add	r3, r1
 8009cdc:	3230      	adds	r2, #48	; 0x30
 8009cde:	b2d2      	uxtb	r2, r2
 8009ce0:	701a      	strb	r2, [r3, #0]
 8009ce2:	e00a      	b.n	8009cfa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	0f1b      	lsrs	r3, r3, #28
 8009ce8:	b2da      	uxtb	r2, r3
 8009cea:	7dfb      	ldrb	r3, [r7, #23]
 8009cec:	005b      	lsls	r3, r3, #1
 8009cee:	4619      	mov	r1, r3
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	440b      	add	r3, r1
 8009cf4:	3237      	adds	r2, #55	; 0x37
 8009cf6:	b2d2      	uxtb	r2, r2
 8009cf8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	011b      	lsls	r3, r3, #4
 8009cfe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009d00:	7dfb      	ldrb	r3, [r7, #23]
 8009d02:	005b      	lsls	r3, r3, #1
 8009d04:	3301      	adds	r3, #1
 8009d06:	68ba      	ldr	r2, [r7, #8]
 8009d08:	4413      	add	r3, r2
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009d0e:	7dfb      	ldrb	r3, [r7, #23]
 8009d10:	3301      	adds	r3, #1
 8009d12:	75fb      	strb	r3, [r7, #23]
 8009d14:	7dfa      	ldrb	r2, [r7, #23]
 8009d16:	79fb      	ldrb	r3, [r7, #7]
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d3d3      	bcc.n	8009cc4 <IntToUnicode+0x18>
  }
}
 8009d1c:	bf00      	nop
 8009d1e:	bf00      	nop
 8009d20:	371c      	adds	r7, #28
 8009d22:	46bd      	mov	sp, r7
 8009d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d28:	4770      	bx	lr
	...

08009d2c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b0a0      	sub	sp, #128	; 0x80
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d34:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8009d38:	2200      	movs	r2, #0
 8009d3a:	601a      	str	r2, [r3, #0]
 8009d3c:	605a      	str	r2, [r3, #4]
 8009d3e:	609a      	str	r2, [r3, #8]
 8009d40:	60da      	str	r2, [r3, #12]
 8009d42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009d44:	f107 0310 	add.w	r3, r7, #16
 8009d48:	225c      	movs	r2, #92	; 0x5c
 8009d4a:	2100      	movs	r1, #0
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f000 fb65 	bl	800a41c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d5a:	d149      	bne.n	8009df0 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8009d5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d60:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8009d62:	2300      	movs	r3, #0
 8009d64:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009d66:	f107 0310 	add.w	r3, r7, #16
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f7fa f83a 	bl	8003de4 <HAL_RCCEx_PeriphCLKConfig>
 8009d70:	4603      	mov	r3, r0
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d001      	beq.n	8009d7a <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8009d76:	f7f7 fa4b 	bl	8001210 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	60fb      	str	r3, [r7, #12]
 8009d7e:	4b1e      	ldr	r3, [pc, #120]	; (8009df8 <HAL_PCD_MspInit+0xcc>)
 8009d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d82:	4a1d      	ldr	r2, [pc, #116]	; (8009df8 <HAL_PCD_MspInit+0xcc>)
 8009d84:	f043 0301 	orr.w	r3, r3, #1
 8009d88:	6313      	str	r3, [r2, #48]	; 0x30
 8009d8a:	4b1b      	ldr	r3, [pc, #108]	; (8009df8 <HAL_PCD_MspInit+0xcc>)
 8009d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d8e:	f003 0301 	and.w	r3, r3, #1
 8009d92:	60fb      	str	r3, [r7, #12]
 8009d94:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009d96:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009d9a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d9c:	2302      	movs	r3, #2
 8009d9e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009da0:	2300      	movs	r3, #0
 8009da2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009da4:	2303      	movs	r3, #3
 8009da6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009da8:	230a      	movs	r3, #10
 8009daa:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009dac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8009db0:	4619      	mov	r1, r3
 8009db2:	4812      	ldr	r0, [pc, #72]	; (8009dfc <HAL_PCD_MspInit+0xd0>)
 8009db4:	f7f8 f940 	bl	8002038 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009db8:	4b0f      	ldr	r3, [pc, #60]	; (8009df8 <HAL_PCD_MspInit+0xcc>)
 8009dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dbc:	4a0e      	ldr	r2, [pc, #56]	; (8009df8 <HAL_PCD_MspInit+0xcc>)
 8009dbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dc2:	6353      	str	r3, [r2, #52]	; 0x34
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	60bb      	str	r3, [r7, #8]
 8009dc8:	4b0b      	ldr	r3, [pc, #44]	; (8009df8 <HAL_PCD_MspInit+0xcc>)
 8009dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dcc:	4a0a      	ldr	r2, [pc, #40]	; (8009df8 <HAL_PCD_MspInit+0xcc>)
 8009dce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009dd2:	6453      	str	r3, [r2, #68]	; 0x44
 8009dd4:	4b08      	ldr	r3, [pc, #32]	; (8009df8 <HAL_PCD_MspInit+0xcc>)
 8009dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ddc:	60bb      	str	r3, [r7, #8]
 8009dde:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009de0:	2200      	movs	r2, #0
 8009de2:	2100      	movs	r1, #0
 8009de4:	2043      	movs	r0, #67	; 0x43
 8009de6:	f7f8 f85e 	bl	8001ea6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009dea:	2043      	movs	r0, #67	; 0x43
 8009dec:	f7f8 f877 	bl	8001ede <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009df0:	bf00      	nop
 8009df2:	3780      	adds	r7, #128	; 0x80
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}
 8009df8:	40023800 	.word	0x40023800
 8009dfc:	40020000 	.word	0x40020000

08009e00 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b082      	sub	sp, #8
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009e14:	4619      	mov	r1, r3
 8009e16:	4610      	mov	r0, r2
 8009e18:	f7fe fad1 	bl	80083be <USBD_LL_SetupStage>
}
 8009e1c:	bf00      	nop
 8009e1e:	3708      	adds	r7, #8
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}

08009e24 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b082      	sub	sp, #8
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	460b      	mov	r3, r1
 8009e2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009e36:	78fa      	ldrb	r2, [r7, #3]
 8009e38:	6879      	ldr	r1, [r7, #4]
 8009e3a:	4613      	mov	r3, r2
 8009e3c:	00db      	lsls	r3, r3, #3
 8009e3e:	4413      	add	r3, r2
 8009e40:	009b      	lsls	r3, r3, #2
 8009e42:	440b      	add	r3, r1
 8009e44:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009e48:	681a      	ldr	r2, [r3, #0]
 8009e4a:	78fb      	ldrb	r3, [r7, #3]
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	f7fe fb0b 	bl	8008468 <USBD_LL_DataOutStage>
}
 8009e52:	bf00      	nop
 8009e54:	3708      	adds	r7, #8
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}

08009e5a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e5a:	b580      	push	{r7, lr}
 8009e5c:	b082      	sub	sp, #8
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
 8009e62:	460b      	mov	r3, r1
 8009e64:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009e6c:	78fa      	ldrb	r2, [r7, #3]
 8009e6e:	6879      	ldr	r1, [r7, #4]
 8009e70:	4613      	mov	r3, r2
 8009e72:	00db      	lsls	r3, r3, #3
 8009e74:	4413      	add	r3, r2
 8009e76:	009b      	lsls	r3, r3, #2
 8009e78:	440b      	add	r3, r1
 8009e7a:	334c      	adds	r3, #76	; 0x4c
 8009e7c:	681a      	ldr	r2, [r3, #0]
 8009e7e:	78fb      	ldrb	r3, [r7, #3]
 8009e80:	4619      	mov	r1, r3
 8009e82:	f7fe fba4 	bl	80085ce <USBD_LL_DataInStage>
}
 8009e86:	bf00      	nop
 8009e88:	3708      	adds	r7, #8
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}

08009e8e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e8e:	b580      	push	{r7, lr}
 8009e90:	b082      	sub	sp, #8
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f7fe fcd8 	bl	8008852 <USBD_LL_SOF>
}
 8009ea2:	bf00      	nop
 8009ea4:	3708      	adds	r7, #8
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}

08009eaa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009eaa:	b580      	push	{r7, lr}
 8009eac:	b084      	sub	sp, #16
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	68db      	ldr	r3, [r3, #12]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d102      	bne.n	8009ec4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	73fb      	strb	r3, [r7, #15]
 8009ec2:	e008      	b.n	8009ed6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	68db      	ldr	r3, [r3, #12]
 8009ec8:	2b02      	cmp	r3, #2
 8009eca:	d102      	bne.n	8009ed2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	73fb      	strb	r3, [r7, #15]
 8009ed0:	e001      	b.n	8009ed6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009ed2:	f7f7 f99d 	bl	8001210 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009edc:	7bfa      	ldrb	r2, [r7, #15]
 8009ede:	4611      	mov	r1, r2
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f7fe fc78 	bl	80087d6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009eec:	4618      	mov	r0, r3
 8009eee:	f7fe fc20 	bl	8008732 <USBD_LL_Reset>
}
 8009ef2:	bf00      	nop
 8009ef4:	3710      	adds	r7, #16
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
	...

08009efc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b082      	sub	sp, #8
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7fe fc73 	bl	80087f6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	687a      	ldr	r2, [r7, #4]
 8009f1c:	6812      	ldr	r2, [r2, #0]
 8009f1e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009f22:	f043 0301 	orr.w	r3, r3, #1
 8009f26:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6a1b      	ldr	r3, [r3, #32]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d005      	beq.n	8009f3c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f30:	4b04      	ldr	r3, [pc, #16]	; (8009f44 <HAL_PCD_SuspendCallback+0x48>)
 8009f32:	691b      	ldr	r3, [r3, #16]
 8009f34:	4a03      	ldr	r2, [pc, #12]	; (8009f44 <HAL_PCD_SuspendCallback+0x48>)
 8009f36:	f043 0306 	orr.w	r3, r3, #6
 8009f3a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009f3c:	bf00      	nop
 8009f3e:	3708      	adds	r7, #8
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}
 8009f44:	e000ed00 	.word	0xe000ed00

08009f48 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f56:	4618      	mov	r0, r3
 8009f58:	f7fe fc63 	bl	8008822 <USBD_LL_Resume>
}
 8009f5c:	bf00      	nop
 8009f5e:	3708      	adds	r7, #8
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	460b      	mov	r3, r1
 8009f6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f76:	78fa      	ldrb	r2, [r7, #3]
 8009f78:	4611      	mov	r1, r2
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f7fe fcbb 	bl	80088f6 <USBD_LL_IsoOUTIncomplete>
}
 8009f80:	bf00      	nop
 8009f82:	3708      	adds	r7, #8
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}

08009f88 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b082      	sub	sp, #8
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	460b      	mov	r3, r1
 8009f92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f9a:	78fa      	ldrb	r2, [r7, #3]
 8009f9c:	4611      	mov	r1, r2
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f7fe fc77 	bl	8008892 <USBD_LL_IsoINIncomplete>
}
 8009fa4:	bf00      	nop
 8009fa6:	3708      	adds	r7, #8
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b082      	sub	sp, #8
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f7fe fccd 	bl	800895a <USBD_LL_DevConnected>
}
 8009fc0:	bf00      	nop
 8009fc2:	3708      	adds	r7, #8
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}

08009fc8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b082      	sub	sp, #8
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f7fe fcca 	bl	8008970 <USBD_LL_DevDisconnected>
}
 8009fdc:	bf00      	nop
 8009fde:	3708      	adds	r7, #8
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b082      	sub	sp, #8
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d13c      	bne.n	800a06e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009ff4:	4a20      	ldr	r2, [pc, #128]	; (800a078 <USBD_LL_Init+0x94>)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	4a1e      	ldr	r2, [pc, #120]	; (800a078 <USBD_LL_Init+0x94>)
 800a000:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a004:	4b1c      	ldr	r3, [pc, #112]	; (800a078 <USBD_LL_Init+0x94>)
 800a006:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a00a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800a00c:	4b1a      	ldr	r3, [pc, #104]	; (800a078 <USBD_LL_Init+0x94>)
 800a00e:	2206      	movs	r2, #6
 800a010:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a012:	4b19      	ldr	r3, [pc, #100]	; (800a078 <USBD_LL_Init+0x94>)
 800a014:	2202      	movs	r2, #2
 800a016:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a018:	4b17      	ldr	r3, [pc, #92]	; (800a078 <USBD_LL_Init+0x94>)
 800a01a:	2200      	movs	r2, #0
 800a01c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a01e:	4b16      	ldr	r3, [pc, #88]	; (800a078 <USBD_LL_Init+0x94>)
 800a020:	2202      	movs	r2, #2
 800a022:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a024:	4b14      	ldr	r3, [pc, #80]	; (800a078 <USBD_LL_Init+0x94>)
 800a026:	2200      	movs	r2, #0
 800a028:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a02a:	4b13      	ldr	r3, [pc, #76]	; (800a078 <USBD_LL_Init+0x94>)
 800a02c:	2200      	movs	r2, #0
 800a02e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a030:	4b11      	ldr	r3, [pc, #68]	; (800a078 <USBD_LL_Init+0x94>)
 800a032:	2200      	movs	r2, #0
 800a034:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a036:	4b10      	ldr	r3, [pc, #64]	; (800a078 <USBD_LL_Init+0x94>)
 800a038:	2200      	movs	r2, #0
 800a03a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a03c:	4b0e      	ldr	r3, [pc, #56]	; (800a078 <USBD_LL_Init+0x94>)
 800a03e:	2200      	movs	r2, #0
 800a040:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a042:	480d      	ldr	r0, [pc, #52]	; (800a078 <USBD_LL_Init+0x94>)
 800a044:	f7f8 faea 	bl	800261c <HAL_PCD_Init>
 800a048:	4603      	mov	r3, r0
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d001      	beq.n	800a052 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a04e:	f7f7 f8df 	bl	8001210 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a052:	2180      	movs	r1, #128	; 0x80
 800a054:	4808      	ldr	r0, [pc, #32]	; (800a078 <USBD_LL_Init+0x94>)
 800a056:	f7f9 fd76 	bl	8003b46 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a05a:	2240      	movs	r2, #64	; 0x40
 800a05c:	2100      	movs	r1, #0
 800a05e:	4806      	ldr	r0, [pc, #24]	; (800a078 <USBD_LL_Init+0x94>)
 800a060:	f7f9 fd2a 	bl	8003ab8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a064:	2280      	movs	r2, #128	; 0x80
 800a066:	2101      	movs	r1, #1
 800a068:	4803      	ldr	r0, [pc, #12]	; (800a078 <USBD_LL_Init+0x94>)
 800a06a:	f7f9 fd25 	bl	8003ab8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a06e:	2300      	movs	r3, #0
}
 800a070:	4618      	mov	r0, r3
 800a072:	3708      	adds	r7, #8
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}
 800a078:	20001168 	.word	0x20001168

0800a07c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b084      	sub	sp, #16
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a084:	2300      	movs	r3, #0
 800a086:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a088:	2300      	movs	r3, #0
 800a08a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a092:	4618      	mov	r0, r3
 800a094:	f7f8 fbe6 	bl	8002864 <HAL_PCD_Start>
 800a098:	4603      	mov	r3, r0
 800a09a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a09c:	7bfb      	ldrb	r3, [r7, #15]
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f000 f990 	bl	800a3c4 <USBD_Get_USB_Status>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3710      	adds	r7, #16
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}

0800a0b2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a0b2:	b580      	push	{r7, lr}
 800a0b4:	b084      	sub	sp, #16
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	6078      	str	r0, [r7, #4]
 800a0ba:	4608      	mov	r0, r1
 800a0bc:	4611      	mov	r1, r2
 800a0be:	461a      	mov	r2, r3
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	70fb      	strb	r3, [r7, #3]
 800a0c4:	460b      	mov	r3, r1
 800a0c6:	70bb      	strb	r3, [r7, #2]
 800a0c8:	4613      	mov	r3, r2
 800a0ca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a0da:	78bb      	ldrb	r3, [r7, #2]
 800a0dc:	883a      	ldrh	r2, [r7, #0]
 800a0de:	78f9      	ldrb	r1, [r7, #3]
 800a0e0:	f7f9 f8e4 	bl	80032ac <HAL_PCD_EP_Open>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0e8:	7bfb      	ldrb	r3, [r7, #15]
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f000 f96a 	bl	800a3c4 <USBD_Get_USB_Status>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3710      	adds	r7, #16
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}

0800a0fe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0fe:	b580      	push	{r7, lr}
 800a100:	b084      	sub	sp, #16
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
 800a106:	460b      	mov	r3, r1
 800a108:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a10a:	2300      	movs	r3, #0
 800a10c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a10e:	2300      	movs	r3, #0
 800a110:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a118:	78fa      	ldrb	r2, [r7, #3]
 800a11a:	4611      	mov	r1, r2
 800a11c:	4618      	mov	r0, r3
 800a11e:	f7f9 f92d 	bl	800337c <HAL_PCD_EP_Close>
 800a122:	4603      	mov	r3, r0
 800a124:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a126:	7bfb      	ldrb	r3, [r7, #15]
 800a128:	4618      	mov	r0, r3
 800a12a:	f000 f94b 	bl	800a3c4 <USBD_Get_USB_Status>
 800a12e:	4603      	mov	r3, r0
 800a130:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a132:	7bbb      	ldrb	r3, [r7, #14]
}
 800a134:	4618      	mov	r0, r3
 800a136:	3710      	adds	r7, #16
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b084      	sub	sp, #16
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	460b      	mov	r3, r1
 800a146:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a148:	2300      	movs	r3, #0
 800a14a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a14c:	2300      	movs	r3, #0
 800a14e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a156:	78fa      	ldrb	r2, [r7, #3]
 800a158:	4611      	mov	r1, r2
 800a15a:	4618      	mov	r0, r3
 800a15c:	f7f9 fa05 	bl	800356a <HAL_PCD_EP_SetStall>
 800a160:	4603      	mov	r3, r0
 800a162:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a164:	7bfb      	ldrb	r3, [r7, #15]
 800a166:	4618      	mov	r0, r3
 800a168:	f000 f92c 	bl	800a3c4 <USBD_Get_USB_Status>
 800a16c:	4603      	mov	r3, r0
 800a16e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a170:	7bbb      	ldrb	r3, [r7, #14]
}
 800a172:	4618      	mov	r0, r3
 800a174:	3710      	adds	r7, #16
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}

0800a17a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a17a:	b580      	push	{r7, lr}
 800a17c:	b084      	sub	sp, #16
 800a17e:	af00      	add	r7, sp, #0
 800a180:	6078      	str	r0, [r7, #4]
 800a182:	460b      	mov	r3, r1
 800a184:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a186:	2300      	movs	r3, #0
 800a188:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a18a:	2300      	movs	r3, #0
 800a18c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a194:	78fa      	ldrb	r2, [r7, #3]
 800a196:	4611      	mov	r1, r2
 800a198:	4618      	mov	r0, r3
 800a19a:	f7f9 fa4a 	bl	8003632 <HAL_PCD_EP_ClrStall>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1a2:	7bfb      	ldrb	r3, [r7, #15]
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f000 f90d 	bl	800a3c4 <USBD_Get_USB_Status>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3710      	adds	r7, #16
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b085      	sub	sp, #20
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	460b      	mov	r3, r1
 800a1c2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a1ca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a1cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	da0b      	bge.n	800a1ec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a1d4:	78fb      	ldrb	r3, [r7, #3]
 800a1d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a1da:	68f9      	ldr	r1, [r7, #12]
 800a1dc:	4613      	mov	r3, r2
 800a1de:	00db      	lsls	r3, r3, #3
 800a1e0:	4413      	add	r3, r2
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	440b      	add	r3, r1
 800a1e6:	333e      	adds	r3, #62	; 0x3e
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	e00b      	b.n	800a204 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a1ec:	78fb      	ldrb	r3, [r7, #3]
 800a1ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a1f2:	68f9      	ldr	r1, [r7, #12]
 800a1f4:	4613      	mov	r3, r2
 800a1f6:	00db      	lsls	r3, r3, #3
 800a1f8:	4413      	add	r3, r2
 800a1fa:	009b      	lsls	r3, r3, #2
 800a1fc:	440b      	add	r3, r1
 800a1fe:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a202:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a204:	4618      	mov	r0, r3
 800a206:	3714      	adds	r7, #20
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr

0800a210 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	460b      	mov	r3, r1
 800a21a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a21c:	2300      	movs	r3, #0
 800a21e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a220:	2300      	movs	r3, #0
 800a222:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a22a:	78fa      	ldrb	r2, [r7, #3]
 800a22c:	4611      	mov	r1, r2
 800a22e:	4618      	mov	r0, r3
 800a230:	f7f9 f817 	bl	8003262 <HAL_PCD_SetAddress>
 800a234:	4603      	mov	r3, r0
 800a236:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a238:	7bfb      	ldrb	r3, [r7, #15]
 800a23a:	4618      	mov	r0, r3
 800a23c:	f000 f8c2 	bl	800a3c4 <USBD_Get_USB_Status>
 800a240:	4603      	mov	r3, r0
 800a242:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a244:	7bbb      	ldrb	r3, [r7, #14]
}
 800a246:	4618      	mov	r0, r3
 800a248:	3710      	adds	r7, #16
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}

0800a24e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a24e:	b580      	push	{r7, lr}
 800a250:	b086      	sub	sp, #24
 800a252:	af00      	add	r7, sp, #0
 800a254:	60f8      	str	r0, [r7, #12]
 800a256:	607a      	str	r2, [r7, #4]
 800a258:	603b      	str	r3, [r7, #0]
 800a25a:	460b      	mov	r3, r1
 800a25c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a25e:	2300      	movs	r3, #0
 800a260:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a262:	2300      	movs	r3, #0
 800a264:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a26c:	7af9      	ldrb	r1, [r7, #11]
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	687a      	ldr	r2, [r7, #4]
 800a272:	f7f9 f930 	bl	80034d6 <HAL_PCD_EP_Transmit>
 800a276:	4603      	mov	r3, r0
 800a278:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a27a:	7dfb      	ldrb	r3, [r7, #23]
 800a27c:	4618      	mov	r0, r3
 800a27e:	f000 f8a1 	bl	800a3c4 <USBD_Get_USB_Status>
 800a282:	4603      	mov	r3, r0
 800a284:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a286:	7dbb      	ldrb	r3, [r7, #22]
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3718      	adds	r7, #24
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b086      	sub	sp, #24
 800a294:	af00      	add	r7, sp, #0
 800a296:	60f8      	str	r0, [r7, #12]
 800a298:	607a      	str	r2, [r7, #4]
 800a29a:	603b      	str	r3, [r7, #0]
 800a29c:	460b      	mov	r3, r1
 800a29e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a2ae:	7af9      	ldrb	r1, [r7, #11]
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	f7f9 f8ac 	bl	8003410 <HAL_PCD_EP_Receive>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2bc:	7dfb      	ldrb	r3, [r7, #23]
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f000 f880 	bl	800a3c4 <USBD_Get_USB_Status>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a2c8:	7dbb      	ldrb	r3, [r7, #22]
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3718      	adds	r7, #24
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}

0800a2d2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2d2:	b580      	push	{r7, lr}
 800a2d4:	b082      	sub	sp, #8
 800a2d6:	af00      	add	r7, sp, #0
 800a2d8:	6078      	str	r0, [r7, #4]
 800a2da:	460b      	mov	r3, r1
 800a2dc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a2e4:	78fa      	ldrb	r2, [r7, #3]
 800a2e6:	4611      	mov	r1, r2
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f7f9 f8dc 	bl	80034a6 <HAL_PCD_EP_GetRxCount>
 800a2ee:	4603      	mov	r3, r0
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3708      	adds	r7, #8
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	460b      	mov	r3, r1
 800a302:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800a304:	78fb      	ldrb	r3, [r7, #3]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d002      	beq.n	800a310 <HAL_PCDEx_LPM_Callback+0x18>
 800a30a:	2b01      	cmp	r3, #1
 800a30c:	d01f      	beq.n	800a34e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800a30e:	e03b      	b.n	800a388 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6a1b      	ldr	r3, [r3, #32]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d007      	beq.n	800a328 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800a318:	f7f6 fcd0 	bl	8000cbc <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a31c:	4b1c      	ldr	r3, [pc, #112]	; (800a390 <HAL_PCDEx_LPM_Callback+0x98>)
 800a31e:	691b      	ldr	r3, [r3, #16]
 800a320:	4a1b      	ldr	r2, [pc, #108]	; (800a390 <HAL_PCDEx_LPM_Callback+0x98>)
 800a322:	f023 0306 	bic.w	r3, r3, #6
 800a326:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	6812      	ldr	r2, [r2, #0]
 800a336:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a33a:	f023 0301 	bic.w	r3, r3, #1
 800a33e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a346:	4618      	mov	r0, r3
 800a348:	f7fe fa6b 	bl	8008822 <USBD_LL_Resume>
    break;
 800a34c:	e01c      	b.n	800a388 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	687a      	ldr	r2, [r7, #4]
 800a35a:	6812      	ldr	r2, [r2, #0]
 800a35c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a360:	f043 0301 	orr.w	r3, r3, #1
 800a364:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a36c:	4618      	mov	r0, r3
 800a36e:	f7fe fa42 	bl	80087f6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6a1b      	ldr	r3, [r3, #32]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d005      	beq.n	800a386 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a37a:	4b05      	ldr	r3, [pc, #20]	; (800a390 <HAL_PCDEx_LPM_Callback+0x98>)
 800a37c:	691b      	ldr	r3, [r3, #16]
 800a37e:	4a04      	ldr	r2, [pc, #16]	; (800a390 <HAL_PCDEx_LPM_Callback+0x98>)
 800a380:	f043 0306 	orr.w	r3, r3, #6
 800a384:	6113      	str	r3, [r2, #16]
    break;
 800a386:	bf00      	nop
}
 800a388:	bf00      	nop
 800a38a:	3708      	adds	r7, #8
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}
 800a390:	e000ed00 	.word	0xe000ed00

0800a394 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a394:	b480      	push	{r7}
 800a396:	b083      	sub	sp, #12
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a39c:	4b03      	ldr	r3, [pc, #12]	; (800a3ac <USBD_static_malloc+0x18>)
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	370c      	adds	r7, #12
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr
 800a3aa:	bf00      	nop
 800a3ac:	20001674 	.word	0x20001674

0800a3b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b083      	sub	sp, #12
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]

}
 800a3b8:	bf00      	nop
 800a3ba:	370c      	adds	r7, #12
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr

0800a3c4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b085      	sub	sp, #20
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a3d2:	79fb      	ldrb	r3, [r7, #7]
 800a3d4:	2b03      	cmp	r3, #3
 800a3d6:	d817      	bhi.n	800a408 <USBD_Get_USB_Status+0x44>
 800a3d8:	a201      	add	r2, pc, #4	; (adr r2, 800a3e0 <USBD_Get_USB_Status+0x1c>)
 800a3da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3de:	bf00      	nop
 800a3e0:	0800a3f1 	.word	0x0800a3f1
 800a3e4:	0800a3f7 	.word	0x0800a3f7
 800a3e8:	0800a3fd 	.word	0x0800a3fd
 800a3ec:	0800a403 	.word	0x0800a403
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	73fb      	strb	r3, [r7, #15]
    break;
 800a3f4:	e00b      	b.n	800a40e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a3f6:	2303      	movs	r3, #3
 800a3f8:	73fb      	strb	r3, [r7, #15]
    break;
 800a3fa:	e008      	b.n	800a40e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	73fb      	strb	r3, [r7, #15]
    break;
 800a400:	e005      	b.n	800a40e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a402:	2303      	movs	r3, #3
 800a404:	73fb      	strb	r3, [r7, #15]
    break;
 800a406:	e002      	b.n	800a40e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a408:	2303      	movs	r3, #3
 800a40a:	73fb      	strb	r3, [r7, #15]
    break;
 800a40c:	bf00      	nop
  }
  return usb_status;
 800a40e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a410:	4618      	mov	r0, r3
 800a412:	3714      	adds	r7, #20
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr

0800a41c <memset>:
 800a41c:	4402      	add	r2, r0
 800a41e:	4603      	mov	r3, r0
 800a420:	4293      	cmp	r3, r2
 800a422:	d100      	bne.n	800a426 <memset+0xa>
 800a424:	4770      	bx	lr
 800a426:	f803 1b01 	strb.w	r1, [r3], #1
 800a42a:	e7f9      	b.n	800a420 <memset+0x4>

0800a42c <__libc_init_array>:
 800a42c:	b570      	push	{r4, r5, r6, lr}
 800a42e:	4d0d      	ldr	r5, [pc, #52]	; (800a464 <__libc_init_array+0x38>)
 800a430:	4c0d      	ldr	r4, [pc, #52]	; (800a468 <__libc_init_array+0x3c>)
 800a432:	1b64      	subs	r4, r4, r5
 800a434:	10a4      	asrs	r4, r4, #2
 800a436:	2600      	movs	r6, #0
 800a438:	42a6      	cmp	r6, r4
 800a43a:	d109      	bne.n	800a450 <__libc_init_array+0x24>
 800a43c:	4d0b      	ldr	r5, [pc, #44]	; (800a46c <__libc_init_array+0x40>)
 800a43e:	4c0c      	ldr	r4, [pc, #48]	; (800a470 <__libc_init_array+0x44>)
 800a440:	f000 f818 	bl	800a474 <_init>
 800a444:	1b64      	subs	r4, r4, r5
 800a446:	10a4      	asrs	r4, r4, #2
 800a448:	2600      	movs	r6, #0
 800a44a:	42a6      	cmp	r6, r4
 800a44c:	d105      	bne.n	800a45a <__libc_init_array+0x2e>
 800a44e:	bd70      	pop	{r4, r5, r6, pc}
 800a450:	f855 3b04 	ldr.w	r3, [r5], #4
 800a454:	4798      	blx	r3
 800a456:	3601      	adds	r6, #1
 800a458:	e7ee      	b.n	800a438 <__libc_init_array+0xc>
 800a45a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a45e:	4798      	blx	r3
 800a460:	3601      	adds	r6, #1
 800a462:	e7f2      	b.n	800a44a <__libc_init_array+0x1e>
 800a464:	0800a4f4 	.word	0x0800a4f4
 800a468:	0800a4f4 	.word	0x0800a4f4
 800a46c:	0800a4f4 	.word	0x0800a4f4
 800a470:	0800a4f8 	.word	0x0800a4f8

0800a474 <_init>:
 800a474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a476:	bf00      	nop
 800a478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a47a:	bc08      	pop	{r3}
 800a47c:	469e      	mov	lr, r3
 800a47e:	4770      	bx	lr

0800a480 <_fini>:
 800a480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a482:	bf00      	nop
 800a484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a486:	bc08      	pop	{r3}
 800a488:	469e      	mov	lr, r3
 800a48a:	4770      	bx	lr
